
FOC401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000073e8  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007580  08007580  00017580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e8  080079e8  00020684  2**0
                  CONTENTS
  4 .ARM          00000008  080079e8  080079e8  000179e8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080079f0  080079f0  00020684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079f0  080079f0  000179f0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079f4  080079f4  000179f4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000684  20000000  080079f8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001574  20000688  0800807c  00020688  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001bfc  0800807c  00021bfc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020684  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003591f  00000000  00000000  000206b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00035a1c  00000000  00000000  00055fd3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000717a  00000000  00000000  0008b9ef  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  00092b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aeba0  00000000  00000000  000943f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004098  00000000  00000000  00142f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    000239b8  00000000  00000000  00147030  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000958e  00000000  00000000  0016a9e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00173f76  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004588  00000000  00000000  00173fc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000688 	.word	0x20000688
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007568 	.word	0x08007568

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000068c 	.word	0x2000068c
 80001d4:	08007568 	.word	0x08007568

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295
 80001ec:	f000 b974 	b.w	80004d8 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	4604      	mov	r4, r0
 8000210:	468e      	mov	lr, r1
 8000212:	2b00      	cmp	r3, #0
 8000214:	d14d      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000216:	428a      	cmp	r2, r1
 8000218:	4694      	mov	ip, r2
 800021a:	d969      	bls.n	80002f0 <__udivmoddi4+0xe8>
 800021c:	fab2 f282 	clz	r2, r2
 8000220:	b152      	cbz	r2, 8000238 <__udivmoddi4+0x30>
 8000222:	fa01 f302 	lsl.w	r3, r1, r2
 8000226:	f1c2 0120 	rsb	r1, r2, #32
 800022a:	fa20 f101 	lsr.w	r1, r0, r1
 800022e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000232:	ea41 0e03 	orr.w	lr, r1, r3
 8000236:	4094      	lsls	r4, r2
 8000238:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800023c:	0c21      	lsrs	r1, r4, #16
 800023e:	fbbe f6f8 	udiv	r6, lr, r8
 8000242:	fa1f f78c 	uxth.w	r7, ip
 8000246:	fb08 e316 	mls	r3, r8, r6, lr
 800024a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024e:	fb06 f107 	mul.w	r1, r6, r7
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f106 30ff 	add.w	r0, r6, #4294967295
 800025e:	f080 811f 	bcs.w	80004a0 <__udivmoddi4+0x298>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 811c 	bls.w	80004a0 <__udivmoddi4+0x298>
 8000268:	3e02      	subs	r6, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a5b      	subs	r3, r3, r1
 800026e:	b2a4      	uxth	r4, r4
 8000270:	fbb3 f0f8 	udiv	r0, r3, r8
 8000274:	fb08 3310 	mls	r3, r8, r0, r3
 8000278:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800027c:	fb00 f707 	mul.w	r7, r0, r7
 8000280:	42a7      	cmp	r7, r4
 8000282:	d90a      	bls.n	800029a <__udivmoddi4+0x92>
 8000284:	eb1c 0404 	adds.w	r4, ip, r4
 8000288:	f100 33ff 	add.w	r3, r0, #4294967295
 800028c:	f080 810a 	bcs.w	80004a4 <__udivmoddi4+0x29c>
 8000290:	42a7      	cmp	r7, r4
 8000292:	f240 8107 	bls.w	80004a4 <__udivmoddi4+0x29c>
 8000296:	4464      	add	r4, ip
 8000298:	3802      	subs	r0, #2
 800029a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029e:	1be4      	subs	r4, r4, r7
 80002a0:	2600      	movs	r6, #0
 80002a2:	b11d      	cbz	r5, 80002ac <__udivmoddi4+0xa4>
 80002a4:	40d4      	lsrs	r4, r2
 80002a6:	2300      	movs	r3, #0
 80002a8:	e9c5 4300 	strd	r4, r3, [r5]
 80002ac:	4631      	mov	r1, r6
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d909      	bls.n	80002ca <__udivmoddi4+0xc2>
 80002b6:	2d00      	cmp	r5, #0
 80002b8:	f000 80ef 	beq.w	800049a <__udivmoddi4+0x292>
 80002bc:	2600      	movs	r6, #0
 80002be:	e9c5 0100 	strd	r0, r1, [r5]
 80002c2:	4630      	mov	r0, r6
 80002c4:	4631      	mov	r1, r6
 80002c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ca:	fab3 f683 	clz	r6, r3
 80002ce:	2e00      	cmp	r6, #0
 80002d0:	d14a      	bne.n	8000368 <__udivmoddi4+0x160>
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d302      	bcc.n	80002dc <__udivmoddi4+0xd4>
 80002d6:	4282      	cmp	r2, r0
 80002d8:	f200 80f9 	bhi.w	80004ce <__udivmoddi4+0x2c6>
 80002dc:	1a84      	subs	r4, r0, r2
 80002de:	eb61 0303 	sbc.w	r3, r1, r3
 80002e2:	2001      	movs	r0, #1
 80002e4:	469e      	mov	lr, r3
 80002e6:	2d00      	cmp	r5, #0
 80002e8:	d0e0      	beq.n	80002ac <__udivmoddi4+0xa4>
 80002ea:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ee:	e7dd      	b.n	80002ac <__udivmoddi4+0xa4>
 80002f0:	b902      	cbnz	r2, 80002f4 <__udivmoddi4+0xec>
 80002f2:	deff      	udf	#255	; 0xff
 80002f4:	fab2 f282 	clz	r2, r2
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f040 8092 	bne.w	8000422 <__udivmoddi4+0x21a>
 80002fe:	eba1 010c 	sub.w	r1, r1, ip
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2601      	movs	r6, #1
 800030c:	0c20      	lsrs	r0, r4, #16
 800030e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000312:	fb07 1113 	mls	r1, r7, r3, r1
 8000316:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800031a:	fb0e f003 	mul.w	r0, lr, r3
 800031e:	4288      	cmp	r0, r1
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x12c>
 8000322:	eb1c 0101 	adds.w	r1, ip, r1
 8000326:	f103 38ff 	add.w	r8, r3, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x12a>
 800032c:	4288      	cmp	r0, r1
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2c0>
 8000332:	4643      	mov	r3, r8
 8000334:	1a09      	subs	r1, r1, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb1 f0f7 	udiv	r0, r1, r7
 800033c:	fb07 1110 	mls	r1, r7, r0, r1
 8000340:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x156>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 31ff 	add.w	r1, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x154>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2ca>
 800035c:	4608      	mov	r0, r1
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000366:	e79c      	b.n	80002a2 <__udivmoddi4+0x9a>
 8000368:	f1c6 0720 	rsb	r7, r6, #32
 800036c:	40b3      	lsls	r3, r6
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa20 f407 	lsr.w	r4, r0, r7
 800037a:	fa01 f306 	lsl.w	r3, r1, r6
 800037e:	431c      	orrs	r4, r3
 8000380:	40f9      	lsrs	r1, r7
 8000382:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000386:	fa00 f306 	lsl.w	r3, r0, r6
 800038a:	fbb1 f8f9 	udiv	r8, r1, r9
 800038e:	0c20      	lsrs	r0, r4, #16
 8000390:	fa1f fe8c 	uxth.w	lr, ip
 8000394:	fb09 1118 	mls	r1, r9, r8, r1
 8000398:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800039c:	fb08 f00e 	mul.w	r0, r8, lr
 80003a0:	4288      	cmp	r0, r1
 80003a2:	fa02 f206 	lsl.w	r2, r2, r6
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b8>
 80003a8:	eb1c 0101 	adds.w	r1, ip, r1
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2bc>
 80003b4:	4288      	cmp	r0, r1
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2bc>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4461      	add	r1, ip
 80003c0:	1a09      	subs	r1, r1, r0
 80003c2:	b2a4      	uxth	r4, r4
 80003c4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c8:	fb09 1110 	mls	r1, r9, r0, r1
 80003cc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003d0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d4:	458e      	cmp	lr, r1
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1e2>
 80003d8:	eb1c 0101 	adds.w	r1, ip, r1
 80003dc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2b4>
 80003e2:	458e      	cmp	lr, r1
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2b4>
 80003e6:	3802      	subs	r0, #2
 80003e8:	4461      	add	r1, ip
 80003ea:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ee:	fba0 9402 	umull	r9, r4, r0, r2
 80003f2:	eba1 010e 	sub.w	r1, r1, lr
 80003f6:	42a1      	cmp	r1, r4
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46a6      	mov	lr, r4
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x2a4>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x2a0>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x212>
 8000402:	ebb3 0208 	subs.w	r2, r3, r8
 8000406:	eb61 010e 	sbc.w	r1, r1, lr
 800040a:	fa01 f707 	lsl.w	r7, r1, r7
 800040e:	fa22 f306 	lsr.w	r3, r2, r6
 8000412:	40f1      	lsrs	r1, r6
 8000414:	431f      	orrs	r7, r3
 8000416:	e9c5 7100 	strd	r7, r1, [r5]
 800041a:	2600      	movs	r6, #0
 800041c:	4631      	mov	r1, r6
 800041e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000422:	f1c2 0320 	rsb	r3, r2, #32
 8000426:	40d8      	lsrs	r0, r3
 8000428:	fa0c fc02 	lsl.w	ip, ip, r2
 800042c:	fa21 f303 	lsr.w	r3, r1, r3
 8000430:	4091      	lsls	r1, r2
 8000432:	4301      	orrs	r1, r0
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000440:	fb07 3610 	mls	r6, r7, r0, r3
 8000444:	0c0b      	lsrs	r3, r1, #16
 8000446:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800044a:	fb00 f60e 	mul.w	r6, r0, lr
 800044e:	429e      	cmp	r6, r3
 8000450:	fa04 f402 	lsl.w	r4, r4, r2
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x260>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b8>
 8000460:	429e      	cmp	r6, r3
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b8>
 8000464:	3802      	subs	r0, #2
 8000466:	4463      	add	r3, ip
 8000468:	1b9b      	subs	r3, r3, r6
 800046a:	b289      	uxth	r1, r1
 800046c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000470:	fb07 3316 	mls	r3, r7, r6, r3
 8000474:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000478:	fb06 f30e 	mul.w	r3, r6, lr
 800047c:	428b      	cmp	r3, r1
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x28a>
 8000480:	eb1c 0101 	adds.w	r1, ip, r1
 8000484:	f106 38ff 	add.w	r8, r6, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2b0>
 800048a:	428b      	cmp	r3, r1
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2b0>
 800048e:	3e02      	subs	r6, #2
 8000490:	4461      	add	r1, ip
 8000492:	1ac9      	subs	r1, r1, r3
 8000494:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0x104>
 800049a:	462e      	mov	r6, r5
 800049c:	4628      	mov	r0, r5
 800049e:	e705      	b.n	80002ac <__udivmoddi4+0xa4>
 80004a0:	4606      	mov	r6, r0
 80004a2:	e6e3      	b.n	800026c <__udivmoddi4+0x64>
 80004a4:	4618      	mov	r0, r3
 80004a6:	e6f8      	b.n	800029a <__udivmoddi4+0x92>
 80004a8:	454b      	cmp	r3, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f8>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b4:	3801      	subs	r0, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f8>
 80004b8:	4646      	mov	r6, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x28a>
 80004bc:	4620      	mov	r0, r4
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1e2>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x260>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b8>
 80004c8:	3b02      	subs	r3, #2
 80004ca:	4461      	add	r1, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x12c>
 80004ce:	4630      	mov	r0, r6
 80004d0:	e709      	b.n	80002e6 <__udivmoddi4+0xde>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x156>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80004dc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000514 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80004e0:	480d      	ldr	r0, [pc, #52]	; (8000518 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80004e2:	490e      	ldr	r1, [pc, #56]	; (800051c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80004e4:	4a0e      	ldr	r2, [pc, #56]	; (8000520 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80004e6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80004e8:	e002      	b.n	80004f0 <LoopCopyDataInit>

080004ea <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80004ea:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80004ec:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80004ee:	3304      	adds	r3, #4

080004f0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80004f0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80004f2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80004f4:	d3f9      	bcc.n	80004ea <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80004f6:	4a0b      	ldr	r2, [pc, #44]	; (8000524 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80004f8:	4c0b      	ldr	r4, [pc, #44]	; (8000528 <LoopFillZerobss+0x26>)
  movs r3, #0
 80004fa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80004fc:	e001      	b.n	8000502 <LoopFillZerobss>

080004fe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80004fe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000500:	3204      	adds	r2, #4

08000502 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000502:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000504:	d3fb      	bcc.n	80004fe <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000506:	f003 fcbf 	bl	8003e88 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800050a:	f006 fff3 	bl	80074f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800050e:	f000 fbc7 	bl	8000ca0 <main>
  bx  lr    
 8000512:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000514:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000518:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800051c:	20000684 	.word	0x20000684
  ldr r2, =_sidata
 8000520:	080079f8 	.word	0x080079f8
  ldr r2, =_sbss
 8000524:	20000688 	.word	0x20000688
  ldr r4, =_ebss
 8000528:	20001bfc 	.word	0x20001bfc

0800052c <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800052c:	e7fe      	b.n	800052c <BusFault_Handler>
	...

08000530 <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000530:	b570      	push	{r4, r5, r6, lr}
 8000532:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000534:	6940      	ldr	r0, [r0, #20]
 8000536:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000538:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 800053a:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 800053c:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 800053e:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000542:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000546:	6960      	ldr	r0, [r4, #20]
 8000548:	f104 011c 	add.w	r1, r4, #28
 800054c:	462b      	mov	r3, r5
 800054e:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000550:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000554:	4718      	bx	r3
 8000556:	bf00      	nop

08000558 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000558:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 800055a:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 800055c:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 800055e:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000562:	4c1e      	ldr	r4, [pc, #120]	; (80005dc <ASPEP_sendBeacon+0x84>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000564:	01db      	lsls	r3, r3, #7
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000566:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 800056a:	784a      	ldrb	r2, [r1, #1]
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 800056c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000570:	78ca      	ldrb	r2, [r1, #3]
 8000572:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 8000576:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800057a:	b2da      	uxtb	r2, r3
 800057c:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000580:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000584:	5ca2      	ldrb	r2, [r4, r2]
 8000586:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 800058a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800058c:	5ca2      	ldrb	r2, [r4, r2]
 800058e:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000592:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000594:	5ca2      	ldrb	r2, [r4, r2]
 8000596:	4c12      	ldr	r4, [pc, #72]	; (80005e0 <ASPEP_sendBeacon+0x88>)
 8000598:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 800059c:	5ca2      	ldrb	r2, [r4, r2]
 800059e:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80005a2:	f043 0305 	orr.w	r3, r3, #5
 80005a6:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80005a8:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80005aa:	6c83      	ldr	r3, [r0, #72]	; 0x48
 80005ac:	b14b      	cbz	r3, 80005c2 <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 80005ae:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 80005b0:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80005b4:	b913      	cbnz	r3, 80005bc <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 80005b6:	2302      	movs	r3, #2
 80005b8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 80005bc:	f85d 4b04 	ldr.w	r4, [sp], #4
 80005c0:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 80005c2:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 80005c6:	2303      	movs	r3, #3
 80005c8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80005cc:	6481      	str	r1, [r0, #72]	; 0x48
 80005ce:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005d0:	2204      	movs	r2, #4
 80005d2:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 80005d4:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80005d8:	6940      	ldr	r0, [r0, #20]
 80005da:	4718      	bx	r3
 80005dc:	08007590 	.word	0x08007590
 80005e0:	08007580 	.word	0x08007580

080005e4 <ASPEP_sendPing>:
{
 80005e4:	b530      	push	{r4, r5, lr}
              | (uint32_t)((uint32_t)cBit << 5U)
 80005e6:	ea4f 1c41 	mov.w	ip, r1, lsl #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 80005ea:	f890 e060 	ldrb.w	lr, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 80005ee:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80005f2:	4d1e      	ldr	r5, [pc, #120]	; (800066c <ASPEP_sendPing+0x88>)
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80005f4:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
              | (uint32_t)((uint32_t)Nbit << 6U)
 80005f8:	f00e 0e01 	and.w	lr, lr, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 80005fc:	ea4c 3c02 	orr.w	ip, ip, r2, lsl #12
 8000600:	ea4c 138e 	orr.w	r3, ip, lr, lsl #6
 8000604:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 8000608:	f004 040f 	and.w	r4, r4, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 800060c:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000610:	b2da      	uxtb	r2, r3
 8000612:	4c17      	ldr	r4, [pc, #92]	; (8000670 <ASPEP_sendPing+0x8c>)
 8000614:	f042 0206 	orr.w	r2, r2, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000618:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800061c:	5ca2      	ldrb	r2, [r4, r2]
 800061e:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000622:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000624:	5ca2      	ldrb	r2, [r4, r2]
 8000626:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 800062a:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800062c:	5ca2      	ldrb	r2, [r4, r2]
 800062e:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000632:	5ceb      	ldrb	r3, [r5, r3]
 8000634:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000638:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 800063a:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 800063c:	6c83      	ldr	r3, [r0, #72]	; 0x48
 800063e:	b13b      	cbz	r3, 8000650 <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000640:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000642:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000646:	b913      	cbnz	r3, 800064e <ASPEP_sendPing+0x6a>
          pHandle->ctrlBuffer.state = pending;
 8000648:	2302      	movs	r3, #2
 800064a:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 800064e:	bd30      	pop	{r4, r5, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000650:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000654:	2303      	movs	r3, #3
 8000656:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800065a:	6481      	str	r1, [r0, #72]	; 0x48
 800065c:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 800065e:	2204      	movs	r2, #4
 8000660:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000662:	6940      	ldr	r0, [r0, #20]
}
 8000664:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000668:	4718      	bx	r3
 800066a:	bf00      	nop
 800066c:	08007580 	.word	0x08007580
 8000670:	08007590 	.word	0x08007590

08000674 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000674:	2a0a      	cmp	r2, #10
{
 8000676:	b410      	push	{r4}
 8000678:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 800067a:	d00b      	beq.n	8000694 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 800067c:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8000680:	2a01      	cmp	r2, #1
 8000682:	d921      	bls.n	80006c8 <ASPEP_getBuffer+0x54>
 8000684:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8000688:	2a01      	cmp	r2, #1
 800068a:	d911      	bls.n	80006b0 <ASPEP_getBuffer+0x3c>
        result = false;
 800068c:	2000      	movs	r0, #0
}
 800068e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000692:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000694:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000698:	2a01      	cmp	r2, #1
 800069a:	d8f7      	bhi.n	800068c <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 800069c:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 800069e:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 80006a0:	3204      	adds	r2, #4
 80006a2:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 80006a4:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 80006a8:	4620      	mov	r0, r4
}
 80006aa:	f85d 4b04 	ldr.w	r4, [sp], #4
 80006ae:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006b0:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006b2:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006b4:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 80006b8:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006bc:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 80006be:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006c0:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 80006c4:	600a      	str	r2, [r1, #0]
}
 80006c6:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006c8:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006ca:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006cc:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 80006d0:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006d4:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 80006d6:	641c      	str	r4, [r3, #64]	; 0x40
}
 80006d8:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 80006dc:	600a      	str	r2, [r1, #0]
}
 80006de:	4770      	bx	lr

080006e0 <ASPEP_sendPacket>:
{
 80006e0:	b570      	push	{r4, r5, r6, lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 80006e2:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 80006e6:	2c02      	cmp	r4, #2
 80006e8:	d002      	beq.n	80006f0 <ASPEP_sendPacket+0x10>
      result = ASPEP_NOT_CONNECTED;
 80006ea:	2102      	movs	r1, #2
}
 80006ec:	4608      	mov	r0, r1
 80006ee:	bd70      	pop	{r4, r5, r6, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 80006f0:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
      *header = tmpHeader;
 80006f4:	f841 4c04 	str.w	r4, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 80006f8:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
 80006fc:	2c01      	cmp	r4, #1
 80006fe:	d104      	bne.n	800070a <ASPEP_sendPacket+0x2a>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000700:	f64f 64ca 	movw	r4, #65226	; 0xfeca
 8000704:	528c      	strh	r4, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000706:	3202      	adds	r2, #2
 8000708:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 800070a:	2b0a      	cmp	r3, #10
 800070c:	d103      	bne.n	8000716 <ASPEP_sendPacket+0x36>
        if (pSupHandle->MCP_PacketAvailable)
 800070e:	7c04      	ldrb	r4, [r0, #16]
 8000710:	b394      	cbz	r4, 8000778 <ASPEP_sendPacket+0x98>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000712:	2400      	movs	r4, #0
 8000714:	7404      	strb	r4, [r0, #16]
  uint32_t header = *headerPtr;
 8000716:	f851 4c04 	ldr.w	r4, [r1, #-4]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 800071a:	4d35      	ldr	r5, [pc, #212]	; (80007f0 <ASPEP_sendPacket+0x110>)
 800071c:	b2e6      	uxtb	r6, r4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 800071e:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 8000722:	5dae      	ldrb	r6, [r5, r6]
 8000724:	ea8e 0e06 	eor.w	lr, lr, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000728:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800072a:	f815 600e 	ldrb.w	r6, [r5, lr]
 800072e:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8000732:	ea8e 0e06 	eor.w	lr, lr, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000736:	f1a1 0c04 	sub.w	ip, r1, #4
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 800073a:	f815 e00e 	ldrb.w	lr, [r5, lr]
 800073e:	f3c4 6503 	ubfx	r5, r4, #24, #4
 8000742:	ea8e 0e05 	eor.w	lr, lr, r5
 8000746:	4d2b      	ldr	r5, [pc, #172]	; (80007f4 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000748:	f815 500e 	ldrb.w	r5, [r5, lr]
 800074c:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000750:	b292      	uxth	r2, r2
  *headerPtr |= (uint32_t)crc << 28;
 8000752:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000756:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000758:	6c81      	ldr	r1, [r0, #72]	; 0x48
 800075a:	b1e1      	cbz	r1, 8000796 <ASPEP_sendPacket+0xb6>
  __ASM volatile ("cpsie i" : : : "memory");
 800075c:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 800075e:	2b09      	cmp	r3, #9
 8000760:	d00d      	beq.n	800077e <ASPEP_sendPacket+0x9e>
      else if (MCTL_SYNC == dataType)
 8000762:	2b0a      	cmp	r3, #10
 8000764:	d02e      	beq.n	80007c4 <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 8000766:	2b00      	cmp	r3, #0
 8000768:	d132      	bne.n	80007d0 <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 800076a:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 800076e:	bb69      	cbnz	r1, 80007cc <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 8000770:	2302      	movs	r3, #2
 8000772:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000776:	e7b9      	b.n	80006ec <ASPEP_sendPacket+0xc>
          result = MCTL_SYNC_NOT_EXPECTED;
 8000778:	2101      	movs	r1, #1
}
 800077a:	4608      	mov	r0, r1
 800077c:	bd70      	pop	{r4, r5, r6, pc}
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 800077e:	6c03      	ldr	r3, [r0, #64]	; 0x40
        if (NULL == pHandle->asyncNextBuffer)
 8000780:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000782:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 8000784:	458c      	cmp	ip, r1
 8000786:	bf14      	ite	ne
 8000788:	2103      	movne	r1, #3
 800078a:	2100      	moveq	r1, #0
        if (NULL == pHandle->asyncNextBuffer)
 800078c:	b36c      	cbz	r4, 80007ea <ASPEP_sendPacket+0x10a>
        pHandle->lastRequestedAsyncBuff->state = pending;
 800078e:	2002      	movs	r0, #2
 8000790:	7198      	strb	r0, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000792:	809a      	strh	r2, [r3, #4]
 8000794:	e7aa      	b.n	80006ec <ASPEP_sendPacket+0xc>
      if (MCTL_ASYNC == dataType)
 8000796:	2b09      	cmp	r3, #9
 8000798:	d022      	beq.n	80007e0 <ASPEP_sendPacket+0x100>
      else if (MCTL_SYNC == dataType)
 800079a:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 800079c:	f04f 0103 	mov.w	r1, #3
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 80007a0:	bf0b      	itete	eq
 80007a2:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007a6:	f100 0320 	addne.w	r3, r0, #32
        pHandle->syncBuffer.state = readLock;
 80007aa:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 80007ae:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 80007b2:	6483      	str	r3, [r0, #72]	; 0x48
 80007b4:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 80007b6:	6d83      	ldr	r3, [r0, #88]	; 0x58
 80007b8:	6940      	ldr	r0, [r0, #20]
 80007ba:	4661      	mov	r1, ip
 80007bc:	4798      	blx	r3
 80007be:	2100      	movs	r1, #0
}
 80007c0:	4608      	mov	r0, r1
 80007c2:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 80007c4:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 80007c8:	2b01      	cmp	r3, #1
 80007ca:	d003      	beq.n	80007d4 <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 80007cc:	2103      	movs	r1, #3
 80007ce:	e78d      	b.n	80006ec <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 80007d0:	2100      	movs	r1, #0
 80007d2:	e78b      	b.n	80006ec <ASPEP_sendPacket+0xc>
          pHandle->syncBuffer.state = pending;
 80007d4:	2302      	movs	r3, #2
 80007d6:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 80007da:	8582      	strh	r2, [r0, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 80007dc:	2100      	movs	r1, #0
 80007de:	e785      	b.n	80006ec <ASPEP_sendPacket+0xc>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 80007e0:	6c03      	ldr	r3, [r0, #64]	; 0x40
 80007e2:	2103      	movs	r1, #3
 80007e4:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 80007e6:	6483      	str	r3, [r0, #72]	; 0x48
 80007e8:	e7e4      	b.n	80007b4 <ASPEP_sendPacket+0xd4>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 80007ea:	6443      	str	r3, [r0, #68]	; 0x44
 80007ec:	e7cf      	b.n	800078e <ASPEP_sendPacket+0xae>
 80007ee:	bf00      	nop
 80007f0:	08007590 	.word	0x08007590
 80007f4:	08007580 	.word	0x08007580

080007f8 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 80007f8:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 80007fa:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 80007fe:	2b03      	cmp	r3, #3
{
 8000800:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000802:	d013      	beq.n	800082c <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000804:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000806:	2100      	movs	r1, #0
 8000808:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 800080a:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 800080e:	2a02      	cmp	r2, #2
 8000810:	d013      	beq.n	800083a <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000812:	2b02      	cmp	r3, #2
 8000814:	d11d      	bne.n	8000852 <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000816:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800081a:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 800081c:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 800081e:	2204      	movs	r2, #4
 8000820:	6940      	ldr	r0, [r0, #20]
 8000822:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000824:	2303      	movs	r3, #3
 8000826:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 800082a:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 800082c:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000830:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000832:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000834:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000838:	d10b      	bne.n	8000852 <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 800083a:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 800083e:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000840:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000842:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000844:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000846:	6960      	ldr	r0, [r4, #20]
 8000848:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 800084a:	2303      	movs	r3, #3
 800084c:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000850:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000852:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000854:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000856:	b1cb      	cbz	r3, 800088c <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000858:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 800085a:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 800085c:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 800085e:	6819      	ldr	r1, [r3, #0]
 8000860:	889a      	ldrh	r2, [r3, #4]
 8000862:	6960      	ldr	r0, [r4, #20]
 8000864:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000866:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000868:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 800086c:	2b02      	cmp	r3, #2
 800086e:	d007      	beq.n	8000880 <ASPEP_HWDataTransmittedIT+0x88>
 8000870:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8000874:	2b02      	cmp	r3, #2
 8000876:	d003      	beq.n	8000880 <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000878:	2300      	movs	r3, #0
 800087a:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 800087c:	b662      	cpsie	i
}
 800087e:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000880:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000882:	0063      	lsls	r3, r4, #1
 8000884:	3368      	adds	r3, #104	; 0x68
 8000886:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000888:	6463      	str	r3, [r4, #68]	; 0x44
        {
 800088a:	e7f7      	b.n	800087c <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 800088c:	64a3      	str	r3, [r4, #72]	; 0x48
 800088e:	e7f5      	b.n	800087c <ASPEP_HWDataTransmittedIT+0x84>

08000890 <ASPEP_RXframeProcess>:

uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000894:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000898:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 800089a:	2500      	movs	r5, #0
{
 800089c:	4604      	mov	r4, r0
    *packetLength = 0;
 800089e:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 80008a0:	b193      	cbz	r3, 80008c8 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 80008a2:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 80008a6:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 80008aa:	2e01      	cmp	r6, #1
 80008ac:	d054      	beq.n	8000958 <ASPEP_RXframeProcess+0xc8>
 80008ae:	2e02      	cmp	r6, #2
 80008b0:	d03e      	beq.n	8000930 <ASPEP_RXframeProcess+0xa0>
 80008b2:	2e00      	cmp	r6, #0
 80008b4:	d033      	beq.n	800091e <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80008b6:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80008b8:	6960      	ldr	r0, [r4, #20]
 80008ba:	2204      	movs	r2, #4
 80008bc:	f104 011c 	add.w	r1, r4, #28
 80008c0:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 80008c2:	4628      	mov	r0, r5
 80008c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 80008c8:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 80008cc:	2d00      	cmp	r5, #0
 80008ce:	d0f8      	beq.n	80008c2 <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80008d0:	042b      	lsls	r3, r5, #16
 80008d2:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008d6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 80008da:	4995      	ldr	r1, [pc, #596]	; (8000b30 <ASPEP_RXframeProcess+0x2a0>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008dc:	4895      	ldr	r0, [pc, #596]	; (8000b34 <ASPEP_RXframeProcess+0x2a4>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 80008de:	f083 0309 	eor.w	r3, r3, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008e2:	5cca      	ldrb	r2, [r1, r3]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 80008e4:	f045 030f 	orr.w	r3, r5, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 80008e8:	ea82 4515 	eor.w	r5, r2, r5, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 80008ec:	5d4a      	ldrb	r2, [r1, r5]
  *headerPtr |= (uint32_t)crc << 28;
 80008ee:	5c82      	ldrb	r2, [r0, r2]
 80008f0:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 80008f4:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 80008f6:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 80008f8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 80008fa:	2b00      	cmp	r3, #0
 80008fc:	d03a      	beq.n	8000974 <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 80008fe:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000900:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000904:	b913      	cbnz	r3, 800090c <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 8000906:	2302      	movs	r3, #2
 8000908:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 800090c:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 800090e:	6960      	ldr	r0, [r4, #20]
 8000910:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 8000912:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000916:	4798      	blx	r3
}
 8000918:	4628      	mov	r0, r5
 800091a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (BEACON == pHandle->rxPacketType)
 800091e:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000920:	2b05      	cmp	r3, #5
 8000922:	f000 8095 	beq.w	8000a50 <ASPEP_RXframeProcess+0x1c0>
          else if (PING == pHandle->rxPacketType)
 8000926:	2b06      	cmp	r3, #6
 8000928:	f000 80d7 	beq.w	8000ada <ASPEP_RXframeProcess+0x24a>
  uint8_t *result = NULL;
 800092c:	4635      	mov	r5, r6
 800092e:	e7c2      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000930:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000932:	2b05      	cmp	r3, #5
 8000934:	d05f      	beq.n	80009f6 <ASPEP_RXframeProcess+0x166>
          else if (PING == pHandle->rxPacketType)
 8000936:	2b06      	cmp	r3, #6
 8000938:	f000 80d6 	beq.w	8000ae8 <ASPEP_RXframeProcess+0x258>
          else if (DATA_PACKET == pHandle->rxPacketType)
 800093c:	2b09      	cmp	r3, #9
 800093e:	d1ba      	bne.n	80008b6 <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000940:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 8000944:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000948:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 800094a:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 800094c:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 800094e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000952:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000954:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000956:	e7ae      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000958:	6e83      	ldr	r3, [r0, #104]	; 0x68
 800095a:	2b05      	cmp	r3, #5
 800095c:	d016      	beq.n	800098c <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 800095e:	2b06      	cmp	r3, #6
 8000960:	d1a9      	bne.n	80008b6 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000962:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000966:	4631      	mov	r1, r6
 8000968:	f7ff fe3c 	bl	80005e4 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 800096c:	2302      	movs	r3, #2
 800096e:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000972:	e7a0      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000974:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000978:	2303      	movs	r3, #3
 800097a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 800097e:	64a1      	str	r1, [r4, #72]	; 0x48
 8000980:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000982:	2204      	movs	r2, #4
 8000984:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000986:	6960      	ldr	r0, [r4, #20]
 8000988:	4798      	blx	r3
  return (result);
 800098a:	e7bf      	b.n	800090c <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 800098c:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 800098e:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000990:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000994:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000998:	f894 606e 	ldrb.w	r6, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800099c:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009a0:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009a4:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009a6:	4281      	cmp	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 80009a8:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009ac:	bf28      	it	cs
 80009ae:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009b0:	42ab      	cmp	r3, r5
 80009b2:	4698      	mov	r8, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 80009b4:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009b8:	bf28      	it	cs
 80009ba:	46a8      	movcs	r8, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009bc:	45b4      	cmp	ip, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009be:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009c2:	46e0      	mov	r8, ip
 80009c4:	bf28      	it	cs
 80009c6:	46b0      	movcs	r8, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009c8:	45be      	cmp	lr, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80009ca:	f884 806e 	strb.w	r8, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009ce:	46f0      	mov	r8, lr
 80009d0:	bf28      	it	cs
 80009d2:	46b8      	movcs	r8, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009d4:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009d6:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80009da:	f884 806f 	strb.w	r8, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80009de:	f240 8088 	bls.w	8000af2 <ASPEP_RXframeProcess+0x262>
              pHandle->ASPEP_State = ASPEP_IDLE;
 80009e2:	2300      	movs	r3, #0
 80009e4:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 80009e8:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 80009ec:	4620      	mov	r0, r4
 80009ee:	f7ff fdb3 	bl	8000558 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 80009f2:	2500      	movs	r5, #0
 80009f4:	e75f      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 80009f6:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 80009f8:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80009fa:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 80009fe:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a02:	f894 c06e 	ldrb.w	ip, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a06:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a0a:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a0e:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a10:	4281      	cmp	r1, r0
 8000a12:	bf28      	it	cs
 8000a14:	4601      	movcs	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a16:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a1a:	42b3      	cmp	r3, r6
 8000a1c:	4699      	mov	r9, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000a1e:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a22:	bf28      	it	cs
 8000a24:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a26:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a28:	f884 906c 	strb.w	r9, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a2c:	46f1      	mov	r9, lr
 8000a2e:	bf28      	it	cs
 8000a30:	46e1      	movcs	r9, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a32:	45b8      	cmp	r8, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a34:	f884 906e 	strb.w	r9, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a38:	46c1      	mov	r9, r8
 8000a3a:	bf28      	it	cs
 8000a3c:	46b9      	movcs	r9, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a3e:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a40:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a44:	f884 906f 	strb.w	r9, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a48:	d964      	bls.n	8000b14 <ASPEP_RXframeProcess+0x284>
 8000a4a:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 8000a4e:	e7cb      	b.n	80009e8 <ASPEP_RXframeProcess+0x158>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a50:	7f65      	ldrb	r5, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a52:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a54:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a58:	f894 c06c 	ldrb.w	ip, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a5c:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a60:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000a64:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000a68:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a6a:	42ab      	cmp	r3, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000a6c:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a70:	bf28      	it	cs
 8000a72:	462b      	movcs	r3, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a74:	4560      	cmp	r0, ip
 8000a76:	4601      	mov	r1, r0
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000a78:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a7c:	bf28      	it	cs
 8000a7e:	4661      	movcs	r1, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a80:	4577      	cmp	r7, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000a82:	f884 106c 	strb.w	r1, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a86:	4639      	mov	r1, r7
 8000a88:	bf28      	it	cs
 8000a8a:	4671      	movcs	r1, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a8c:	45c1      	cmp	r9, r8
 8000a8e:	464e      	mov	r6, r9
 8000a90:	bf28      	it	cs
 8000a92:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000a94:	4560      	cmp	r0, ip
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000a96:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000a9a:	f884 106e 	strb.w	r1, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000a9e:	f884 606f 	strb.w	r6, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000aa2:	d8a1      	bhi.n	80009e8 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000aa4:	429d      	cmp	r5, r3
 8000aa6:	d89f      	bhi.n	80009e8 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000aa8:	4577      	cmp	r7, lr
 8000aaa:	d89d      	bhi.n	80009e8 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000aac:	45c1      	cmp	r9, r8
 8000aae:	d89b      	bhi.n	80009e8 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000ab0:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 8000ab4:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000ab8:	4290      	cmp	r0, r2
 8000aba:	d195      	bne.n	80009e8 <ASPEP_RXframeProcess+0x158>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000abc:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000abe:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ac0:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ac2:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ac4:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000ac6:	01b6      	lsls	r6, r6, #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ac8:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000aca:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000acc:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 8000ace:	81e6      	strh	r6, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 8000ad0:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 8000ad4:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 8000ad8:	e786      	b.n	80009e8 <ASPEP_RXframeProcess+0x158>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 8000ada:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000ade:	4631      	mov	r1, r6
 8000ae0:	f7ff fd80 	bl	80005e4 <ASPEP_sendPing>
  uint8_t *result = NULL;
 8000ae4:	4635      	mov	r5, r6
 8000ae6:	e6e6      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000ae8:	7f42      	ldrb	r2, [r0, #29]
 8000aea:	2101      	movs	r1, #1
 8000aec:	f7ff fd7a 	bl	80005e4 <ASPEP_sendPing>
 8000af0:	e6e1      	b.n	80008b6 <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000af2:	4288      	cmp	r0, r1
 8000af4:	f63f af75 	bhi.w	80009e2 <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000af8:	45b4      	cmp	ip, r6
 8000afa:	f63f af72 	bhi.w	80009e2 <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000afe:	45be      	cmp	lr, r7
 8000b00:	f63f af6f 	bhi.w	80009e2 <ASPEP_RXframeProcess+0x152>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b04:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8000b08:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8000b0c:	4293      	cmp	r3, r2
 8000b0e:	f47f af68 	bne.w	80009e2 <ASPEP_RXframeProcess+0x152>
 8000b12:	e769      	b.n	80009e8 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8000b14:	4288      	cmp	r0, r1
 8000b16:	d898      	bhi.n	8000a4a <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8000b18:	45e6      	cmp	lr, ip
 8000b1a:	d896      	bhi.n	8000a4a <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8000b1c:	45b8      	cmp	r8, r7
 8000b1e:	d894      	bhi.n	8000a4a <ASPEP_RXframeProcess+0x1ba>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8000b20:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8000b24:	f3c2 1202 	ubfx	r2, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000b28:	1aab      	subs	r3, r5, r2
 8000b2a:	425d      	negs	r5, r3
 8000b2c:	415d      	adcs	r5, r3
 8000b2e:	e78c      	b.n	8000a4a <ASPEP_RXframeProcess+0x1ba>
 8000b30:	08007590 	.word	0x08007590
 8000b34:	08007580 	.word	0x08007580

08000b38 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8000b38:	b510      	push	{r4, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8000b3a:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 8000b3e:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 8000b40:	b13b      	cbz	r3, 8000b52 <ASPEP_HWDataReceivedIT+0x1a>
 8000b42:	2b01      	cmp	r3, #1
 8000b44:	d104      	bne.n	8000b50 <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000b46:	2200      	movs	r2, #0
 8000b48:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8000b4c:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000b50:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b52:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b54:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <ASPEP_HWDataReceivedIT+0x98>)
 8000b56:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000b58:	5cd3      	ldrb	r3, [r2, r3]
 8000b5a:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 8000b5e:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000b60:	5cd3      	ldrb	r3, [r2, r3]
 8000b62:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8000b66:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8000b68:	5cd3      	ldrb	r3, [r2, r3]
 8000b6a:	ea83 6111 	eor.w	r1, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 8000b6e:	5c53      	ldrb	r3, [r2, r1]
 8000b70:	b95b      	cbnz	r3, 8000b8a <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 8000b72:	7f03      	ldrb	r3, [r0, #28]
 8000b74:	f003 030f 	and.w	r3, r3, #15
 8000b78:	2b06      	cmp	r3, #6
 8000b7a:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8000b7c:	d809      	bhi.n	8000b92 <ASPEP_HWDataReceivedIT+0x5a>
 8000b7e:	2b04      	cmp	r3, #4
 8000b80:	d81e      	bhi.n	8000bc0 <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 8000b82:	2301      	movs	r3, #1
 8000b84:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 8000b88:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 8000b8a:	2304      	movs	r3, #4
 8000b8c:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000b90:	bd10      	pop	{r4, pc}
 8000b92:	2b09      	cmp	r3, #9
 8000b94:	d1f5      	bne.n	8000b82 <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 8000b96:	8b83      	ldrh	r3, [r0, #28]
 8000b98:	091b      	lsrs	r3, r3, #4
 8000b9a:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 8000b9e:	b17b      	cbz	r3, 8000bc0 <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 8000ba0:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 8000ba4:	429a      	cmp	r2, r3
 8000ba6:	d30f      	bcc.n	8000bc8 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 8000ba8:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 8000bac:	6981      	ldr	r1, [r0, #24]
 8000bae:	6940      	ldr	r0, [r0, #20]
 8000bb0:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 8000bb4:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000bb6:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 8000bb8:	2301      	movs	r3, #1
 8000bba:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 8000bbe:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 8000bc6:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 8000bce:	bd10      	pop	{r4, pc}
 8000bd0:	08007590 	.word	0x08007590

08000bd4 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 8000bd4:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 8000bd6:	2200      	movs	r2, #0
 8000bd8:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000bdc:	6d43      	ldr	r3, [r0, #84]	; 0x54
 8000bde:	6940      	ldr	r0, [r0, #20]
 8000be0:	2204      	movs	r2, #4
 8000be2:	311c      	adds	r1, #28
 8000be4:	4718      	bx	r3
 8000be6:	bf00      	nop

08000be8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000be8:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bea:	2300      	movs	r3, #0
{
 8000bec:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bee:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8000bf2:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bf6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8000bfa:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bfe:	4926      	ldr	r1, [pc, #152]	; (8000c98 <SystemClock_Config+0xb0>)
 8000c00:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000c02:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c04:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c06:	4a25      	ldr	r2, [pc, #148]	; (8000c9c <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c08:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 8000c0c:	6408      	str	r0, [r1, #64]	; 0x40
 8000c0e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8000c10:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8000c14:	9100      	str	r1, [sp, #0]
 8000c16:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c18:	9301      	str	r3, [sp, #4]
 8000c1a:	6813      	ldr	r3, [r2, #0]
 8000c1c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c20:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c24:	6013      	str	r3, [r2, #0]
 8000c26:	6813      	ldr	r3, [r2, #0]
 8000c28:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c2c:	9301      	str	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000c2e:	2001      	movs	r0, #1
 8000c30:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8000c34:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c38:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000c3a:	2204      	movs	r2, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000c3c:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c3e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000c42:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c44:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000c46:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 84;
 8000c4a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000c4e:	e9cd 4212 	strd	r4, r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c52:	f003 fdb3 	bl	80047bc <HAL_RCC_OscConfig>
 8000c56:	b108      	cbz	r0, 8000c5c <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c58:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c5a:	e7fe      	b.n	8000c5a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c5c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000c88 <SystemClock_Config+0xa0>
 8000c60:	ed8d 7b02 	vstr	d7, [sp, #8]
 8000c64:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 8000c90 <SystemClock_Config+0xa8>
 8000c68:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c6a:	4621      	mov	r1, r4
 8000c6c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c6e:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c72:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c74:	f003 ffc0 	bl	8004bf8 <HAL_RCC_ClockConfig>
 8000c78:	b108      	cbz	r0, 8000c7e <SystemClock_Config+0x96>
 8000c7a:	b672      	cpsid	i
  while (1)
 8000c7c:	e7fe      	b.n	8000c7c <SystemClock_Config+0x94>
  HAL_RCC_EnableCSS();
 8000c7e:	f003 ff81 	bl	8004b84 <HAL_RCC_EnableCSS>
}
 8000c82:	b014      	add	sp, #80	; 0x50
 8000c84:	bd10      	pop	{r4, pc}
 8000c86:	bf00      	nop
 8000c88:	0000000f 	.word	0x0000000f
 8000c8c:	00000002 	.word	0x00000002
 8000c90:	00000000 	.word	0x00000000
 8000c94:	00001000 	.word	0x00001000
 8000c98:	40023800 	.word	0x40023800
 8000c9c:	40007000 	.word	0x40007000

08000ca0 <main>:
{
 8000ca0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ca4:	2400      	movs	r4, #0
{
 8000ca6:	b09d      	sub	sp, #116	; 0x74
  HAL_Init();
 8000ca8:	f003 f91c 	bl	8003ee4 <HAL_Init>
  SystemClock_Config();
 8000cac:	f7ff ff9c 	bl	8000be8 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 8000cb4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cb8:	4eaa      	ldr	r6, [pc, #680]	; (8000f64 <main+0x2c4>)
 8000cba:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cbc:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cbe:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cc0:	48a9      	ldr	r0, [pc, #676]	; (8000f68 <main+0x2c8>)
  hadc1.Instance = ADC1;
 8000cc2:	4daa      	ldr	r5, [pc, #680]	; (8000f6c <main+0x2cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6333      	str	r3, [r6, #48]	; 0x30
 8000cca:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000ccc:	f003 0304 	and.w	r3, r3, #4
 8000cd0:	9301      	str	r3, [sp, #4]
 8000cd2:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd4:	9402      	str	r4, [sp, #8]
 8000cd6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000cd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cdc:	6333      	str	r3, [r6, #48]	; 0x30
 8000cde:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000ce0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000ce4:	9302      	str	r3, [sp, #8]
 8000ce6:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ce8:	9403      	str	r4, [sp, #12]
 8000cea:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000cec:	f043 0301 	orr.w	r3, r3, #1
 8000cf0:	6333      	str	r3, [r6, #48]	; 0x30
 8000cf2:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000cf4:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cf8:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfa:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000cfc:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8000d00:	f003 fd58 	bl	80047b4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8000d04:	489a      	ldr	r0, [pc, #616]	; (8000f70 <main+0x2d0>)
 8000d06:	4622      	mov	r2, r4
 8000d08:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 8000d0c:	f003 fd52 	bl	80047b4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d10:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000d14:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d18:	4895      	ldr	r0, [pc, #596]	; (8000f70 <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d1a:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d1c:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8000d1e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d22:	f04f 0a00 	mov.w	sl, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8000d26:	f003 fc53 	bl	80045d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d2a:	f04f 0b00 	mov.w	fp, #0
 8000d2e:	2220      	movs	r2, #32
 8000d30:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d32:	488d      	ldr	r0, [pc, #564]	; (8000f68 <main+0x2c8>)
 8000d34:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = LD2_Pin;
 8000d36:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8000d3a:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000d3e:	f003 fc47 	bl	80045d0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000d42:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8000d46:	2301      	movs	r3, #1
 8000d48:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d4c:	4888      	ldr	r0, [pc, #544]	; (8000f70 <main+0x2d0>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000d4e:	2202      	movs	r2, #2
 8000d50:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d52:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8000d54:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d58:	f003 fc3a 	bl	80045d0 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d5c:	9400      	str	r4, [sp, #0]
 8000d5e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8000d60:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000d64:	6333      	str	r3, [r6, #48]	; 0x30
 8000d66:	6b33      	ldr	r3, [r6, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d68:	f04f 0820 	mov.w	r8, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d6c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000d70:	9300      	str	r3, [sp, #0]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d72:	4642      	mov	r2, r8
 8000d74:	4621      	mov	r1, r4
 8000d76:	a814      	add	r0, sp, #80	; 0x50
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000d78:	9b00      	ldr	r3, [sp, #0]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8000d7a:	f006 fbed 	bl	8007558 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d7e:	487d      	ldr	r0, [pc, #500]	; (8000f74 <main+0x2d4>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d80:	4a7d      	ldr	r2, [pc, #500]	; (8000f78 <main+0x2d8>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000d82:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000d84:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000d88:	e9c5 0300 	strd	r0, r3, [r5]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000d8c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8000d90:	60eb      	str	r3, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d96:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 8000d98:	2701      	movs	r7, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000d9a:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000d9e:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 8000da0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 8000da4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hadc1.Init.ScanConvMode = ENABLE;
 8000da8:	612f      	str	r7, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000daa:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000dac:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000db0:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000db4:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000db6:	f003 f8c1 	bl	8003f3c <HAL_ADC_Init>
 8000dba:	b108      	cbz	r0, 8000dc0 <main+0x120>
 8000dbc:	b672      	cpsid	i
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <main+0x11e>
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000dc0:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = 1;
 8000dc2:	e9cd 0714 	strd	r0, r7, [sp, #80]	; 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 8000dc6:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedOffset = 0;
 8000dca:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 8000dcc:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000dce:	2200      	movs	r2, #0
 8000dd0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dd4:	a914      	add	r1, sp, #80	; 0x50
 8000dd6:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 8000dd8:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000ddc:	9716      	str	r7, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dde:	f003 fa09 	bl	80041f4 <HAL_ADCEx_InjectedConfigChannel>
 8000de2:	b108      	cbz	r0, 8000de8 <main+0x148>
 8000de4:	b672      	cpsid	i
  while (1)
 8000de6:	e7fe      	b.n	8000de6 <main+0x146>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000de8:	220b      	movs	r2, #11
 8000dea:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000dec:	a914      	add	r1, sp, #80	; 0x50
 8000dee:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8000df0:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000df4:	f003 f9fe 	bl	80041f4 <HAL_ADCEx_InjectedConfigChannel>
 8000df8:	b108      	cbz	r0, 8000dfe <main+0x15e>
 8000dfa:	b672      	cpsid	i
  while (1)
 8000dfc:	e7fe      	b.n	8000dfc <main+0x15c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000dfe:	220a      	movs	r2, #10
 8000e00:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e02:	a914      	add	r1, sp, #80	; 0x50
 8000e04:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8000e06:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8000e0a:	f003 f9f3 	bl	80041f4 <HAL_ADCEx_InjectedConfigChannel>
 8000e0e:	b108      	cbz	r0, 8000e14 <main+0x174>
 8000e10:	b672      	cpsid	i
  while (1)
 8000e12:	e7fe      	b.n	8000e12 <main+0x172>
  sConfig.Channel = ADC_CHANNEL_1;
 8000e14:	2201      	movs	r2, #1
 8000e16:	2301      	movs	r3, #1
 8000e18:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e1c:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_1;
 8000e1e:	2202      	movs	r2, #2
 8000e20:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e22:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8000e24:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e28:	f003 f936 	bl	8004098 <HAL_ADC_ConfigChannel>
 8000e2c:	b108      	cbz	r0, 8000e32 <main+0x192>
 8000e2e:	b672      	cpsid	i
  while (1)
 8000e30:	e7fe      	b.n	8000e30 <main+0x190>
  sConfig.Channel = ADC_CHANNEL_12;
 8000e32:	220c      	movs	r2, #12
 8000e34:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e36:	4628      	mov	r0, r5
 8000e38:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_12;
 8000e3a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000e3e:	f003 f92b 	bl	8004098 <HAL_ADC_ConfigChannel>
 8000e42:	4604      	mov	r4, r0
 8000e44:	b108      	cbz	r0, 8000e4a <main+0x1aa>
 8000e46:	b672      	cpsid	i
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <main+0x1a8>
  htim1.Instance = TIM1;
 8000e4a:	4d4c      	ldr	r5, [pc, #304]	; (8000f7c <main+0x2dc>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e4c:	9006      	str	r0, [sp, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e4e:	4601      	mov	r1, r0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e50:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8000e54:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8000e58:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 8000e5c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8000e60:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e64:	9004      	str	r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e66:	9012      	str	r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e68:	9005      	str	r0, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000e6a:	4642      	mov	r2, r8
 8000e6c:	a814      	add	r0, sp, #80	; 0x50
 8000e6e:	f006 fb73 	bl	8007558 <memset>
  htim1.Instance = TIM1;
 8000e72:	4b43      	ldr	r3, [pc, #268]	; (8000f80 <main+0x2e0>)
 8000e74:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e76:	f241 0168 	movw	r1, #4200	; 0x1068
 8000e7a:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e7e:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8000e80:	e9c5 1303 	strd	r1, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000e84:	f8c5 8008 	str.w	r8, [r5, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 8000e88:	616f      	str	r7, [r5, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 8000e8a:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e8c:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000e8e:	f003 ff77 	bl	8004d80 <HAL_TIM_Base_Init>
 8000e92:	b108      	cbz	r0, 8000e98 <main+0x1f8>
 8000e94:	b672      	cpsid	i
  while (1)
 8000e96:	e7fe      	b.n	8000e96 <main+0x1f6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000e98:	4628      	mov	r0, r5
 8000e9a:	f003 fff1 	bl	8004e80 <HAL_TIM_PWM_Init>
 8000e9e:	b108      	cbz	r0, 8000ea4 <main+0x204>
 8000ea0:	b672      	cpsid	i
  while (1)
 8000ea2:	e7fe      	b.n	8000ea2 <main+0x202>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000ea4:	2206      	movs	r2, #6
 8000ea6:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000ea8:	a906      	add	r1, sp, #24
 8000eaa:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 8000eac:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 8000eb0:	f004 f96a 	bl	8005188 <HAL_TIM_SlaveConfigSynchro>
 8000eb4:	b108      	cbz	r0, 8000eba <main+0x21a>
 8000eb6:	b672      	cpsid	i
  while (1)
 8000eb8:	e7fe      	b.n	8000eb8 <main+0x218>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000eba:	a904      	add	r1, sp, #16
 8000ebc:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ebe:	e9cd ab04 	strd	sl, fp, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000ec2:	f004 f9ed 	bl	80052a0 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec6:	b108      	cbz	r0, 8000ecc <main+0x22c>
 8000ec8:	b672      	cpsid	i
  while (1)
 8000eca:	e7fe      	b.n	8000eca <main+0x22a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ecc:	2060      	movs	r0, #96	; 0x60
 8000ece:	f640 0134 	movw	r1, #2100	; 0x834
 8000ed2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	2100      	movs	r1, #0
 8000eda:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 8000ede:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ee2:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee4:	4825      	ldr	r0, [pc, #148]	; (8000f7c <main+0x2dc>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000ee6:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000ee8:	a90c      	add	r1, sp, #48	; 0x30
 8000eea:	f004 f847 	bl	8004f7c <HAL_TIM_PWM_ConfigChannel>
 8000eee:	b108      	cbz	r0, 8000ef4 <main+0x254>
 8000ef0:	b672      	cpsid	i
  while (1)
 8000ef2:	e7fe      	b.n	8000ef2 <main+0x252>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000ef4:	4821      	ldr	r0, [pc, #132]	; (8000f7c <main+0x2dc>)
 8000ef6:	2204      	movs	r2, #4
 8000ef8:	a90c      	add	r1, sp, #48	; 0x30
 8000efa:	f004 f83f 	bl	8004f7c <HAL_TIM_PWM_ConfigChannel>
 8000efe:	b108      	cbz	r0, 8000f04 <main+0x264>
 8000f00:	b672      	cpsid	i
  while (1)
 8000f02:	e7fe      	b.n	8000f02 <main+0x262>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000f04:	481d      	ldr	r0, [pc, #116]	; (8000f7c <main+0x2dc>)
 8000f06:	2208      	movs	r2, #8
 8000f08:	a90c      	add	r1, sp, #48	; 0x30
 8000f0a:	f004 f837 	bl	8004f7c <HAL_TIM_PWM_ConfigChannel>
 8000f0e:	b108      	cbz	r0, 8000f14 <main+0x274>
 8000f10:	b672      	cpsid	i
  while (1)
 8000f12:	e7fe      	b.n	8000f12 <main+0x272>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000f14:	f241 0367 	movw	r3, #4199	; 0x1067
 8000f18:	2270      	movs	r2, #112	; 0x70
 8000f1a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8000f1e:	4817      	ldr	r0, [pc, #92]	; (8000f7c <main+0x2dc>)
 8000f20:	a90c      	add	r1, sp, #48	; 0x30
 8000f22:	220c      	movs	r2, #12
 8000f24:	f004 f82a 	bl	8004f7c <HAL_TIM_PWM_ConfigChannel>
 8000f28:	4603      	mov	r3, r0
 8000f2a:	b108      	cbz	r0, 8000f30 <main+0x290>
 8000f2c:	b672      	cpsid	i
  while (1)
 8000f2e:	e7fe      	b.n	8000f2e <main+0x28e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000f30:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8000f34:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8000f38:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 8000f3c:	f44f 7480 	mov.w	r4, #256	; 0x100
 8000f40:	2500      	movs	r5, #0
 8000f42:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f46:	480d      	ldr	r0, [pc, #52]	; (8000f7c <main+0x2dc>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000f48:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000f4a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f4e:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8000f50:	2500      	movs	r5, #0
 8000f52:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000f56:	f004 f9db 	bl	8005310 <HAL_TIMEx_ConfigBreakDeadTime>
 8000f5a:	4604      	mov	r4, r0
 8000f5c:	b190      	cbz	r0, 8000f84 <main+0x2e4>
 8000f5e:	b672      	cpsid	i
  while (1)
 8000f60:	e7fe      	b.n	8000f60 <main+0x2c0>
 8000f62:	bf00      	nop
 8000f64:	40023800 	.word	0x40023800
 8000f68:	40020000 	.word	0x40020000
 8000f6c:	200006a8 	.word	0x200006a8
 8000f70:	40020800 	.word	0x40020800
 8000f74:	40012000 	.word	0x40012000
 8000f78:	0f000001 	.word	0x0f000001
 8000f7c:	200007b0 	.word	0x200007b0
 8000f80:	40010000 	.word	0x40010000
  HAL_TIM_MspPostInit(&htim1);
 8000f84:	4824      	ldr	r0, [pc, #144]	; (8001018 <main+0x378>)
 8000f86:	f002 fd33 	bl	80039f0 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 8000f8a:	4b24      	ldr	r3, [pc, #144]	; (800101c <main+0x37c>)
 8000f8c:	4824      	ldr	r0, [pc, #144]	; (8001020 <main+0x380>)
  huart2.Init.BaudRate = 1843200;
 8000f8e:	f44f 11e1 	mov.w	r1, #1843200	; 0x1c2000
 8000f92:	e9c3 0100 	strd	r0, r1, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f96:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f98:	4618      	mov	r0, r3
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f9a:	e9c3 4402 	strd	r4, r4, [r3, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f9e:	e9c3 4204 	strd	r4, r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000fa2:	e9c3 4406 	strd	r4, r4, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000fa6:	f004 f9dd 	bl	8005364 <HAL_UART_Init>
 8000faa:	4604      	mov	r4, r0
 8000fac:	b108      	cbz	r0, 8000fb2 <main+0x312>
 8000fae:	b672      	cpsid	i
  while (1)
 8000fb0:	e7fe      	b.n	8000fb0 <main+0x310>
  MX_MotorControl_Init();
 8000fb2:	f001 f907 	bl	80021c4 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 8000fb6:	2103      	movs	r1, #3
 8000fb8:	2201      	movs	r2, #1
 8000fba:	2026      	movs	r0, #38	; 0x26
 8000fbc:	f003 fa04 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000fc0:	2026      	movs	r0, #38	; 0x26
 8000fc2:	f003 fa3f 	bl	8004444 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 8000fc6:	4622      	mov	r2, r4
 8000fc8:	2103      	movs	r1, #3
 8000fca:	2010      	movs	r0, #16
 8000fcc:	f003 f9fc 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000fd0:	2010      	movs	r0, #16
 8000fd2:	f003 fa37 	bl	8004444 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 8000fd6:	4622      	mov	r2, r4
 8000fd8:	2102      	movs	r1, #2
 8000fda:	2012      	movs	r0, #18
 8000fdc:	f003 f9f4 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000fe0:	2012      	movs	r0, #18
 8000fe2:	f003 fa2f 	bl	8004444 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8000fe6:	4622      	mov	r2, r4
 8000fe8:	4621      	mov	r1, r4
 8000fea:	2019      	movs	r0, #25
 8000fec:	f003 f9ec 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8000ff0:	2019      	movs	r0, #25
 8000ff2:	f003 fa27 	bl	8004444 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8000ff6:	2104      	movs	r1, #4
 8000ff8:	2201      	movs	r2, #1
 8000ffa:	2018      	movs	r0, #24
 8000ffc:	f003 f9e4 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001000:	2018      	movs	r0, #24
 8001002:	f003 fa1f 	bl	8004444 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001006:	2028      	movs	r0, #40	; 0x28
 8001008:	4622      	mov	r2, r4
 800100a:	2103      	movs	r1, #3
 800100c:	f003 f9dc 	bl	80043c8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001010:	2028      	movs	r0, #40	; 0x28
 8001012:	f003 fa17 	bl	8004444 <HAL_NVIC_EnableIRQ>
  while (1)
 8001016:	e7fe      	b.n	8001016 <main+0x376>
 8001018:	200007b0 	.word	0x200007b0
 800101c:	200007f8 	.word	0x200007f8
 8001020:	40004400 	.word	0x40004400

08001024 <Error_Handler>:
 8001024:	b672      	cpsid	i
  while (1)
 8001026:	e7fe      	b.n	8001026 <Error_Handler+0x2>

08001028 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001028:	4b01      	ldr	r3, [pc, #4]	; (8001030 <MC_StartMotor1+0x8>)
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	f000 b888 	b.w	8001140 <MCI_StartMotor>
 8001030:	20001bb8 	.word	0x20001bb8

08001034 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001034:	4b01      	ldr	r3, [pc, #4]	; (800103c <MC_StopMotor1+0x8>)
 8001036:	6818      	ldr	r0, [r3, #0]
 8001038:	f000 b898 	b.w	800116c <MCI_StopMotor>
 800103c:	20001bb8 	.word	0x20001bb8

08001040 <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 8001040:	4b01      	ldr	r3, [pc, #4]	; (8001048 <MC_GetSTMStateMotor1+0x8>)
 8001042:	6818      	ldr	r0, [r3, #0]
 8001044:	f000 b876 	b.w	8001134 <MCI_GetSTMState>
 8001048:	20001bb8 	.word	0x20001bb8

0800104c <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 800104c:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 8001050:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001054:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001056:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 800105a:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 800105e:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 8001062:	f880 c01e 	strb.w	ip, [r0, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8001066:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 800106a:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800106e:	4770      	bx	lr

08001070 <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001070:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001074:	f240 1301 	movw	r3, #257	; 0x101
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 8001078:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 800107c:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 800107e:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001080:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = STC_SPEED_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001082:	4770      	bx	lr

08001084 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 8001084:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001088:	2301      	movs	r3, #1
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 800108a:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 800108e:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 8001090:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001092:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop

08001098 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 8001098:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 800109a:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 800109c:	2301      	movs	r3, #1
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 800109e:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 80010a0:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80010a4:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80010a6:	b002      	add	sp, #8
 80010a8:	4770      	bx	lr
 80010aa:	bf00      	nop

080010ac <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80010ac:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 80010ae:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80010b2:	430b      	orrs	r3, r1
 80010b4:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 80010b8:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80010bc:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 80010be:	8381      	strh	r1, [r0, #28]

  return;
}
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop

080010c4 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80010c4:	7f83      	ldrb	r3, [r0, #30]
 80010c6:	2b01      	cmp	r3, #1
 80010c8:	d000      	beq.n	80010cc <MCI_ExecBufferedCommands+0x8>
 80010ca:	4770      	bx	lr
{
 80010cc:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 80010ce:	7b01      	ldrb	r1, [r0, #12]
 80010d0:	2902      	cmp	r1, #2
 80010d2:	4604      	mov	r4, r0
 80010d4:	d006      	beq.n	80010e4 <MCI_ExecBufferedCommands+0x20>
 80010d6:	2903      	cmp	r1, #3
 80010d8:	d024      	beq.n	8001124 <MCI_ExecBufferedCommands+0x60>
 80010da:	2901      	cmp	r1, #1
 80010dc:	d014      	beq.n	8001108 <MCI_ExecBufferedCommands+0x44>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 80010de:	2303      	movs	r3, #3
 80010e0:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80010e2:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 80010e4:	6843      	ldr	r3, [r0, #4]
 80010e6:	2100      	movs	r1, #0
 80010e8:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, STC_TORQUE_MODE);
 80010ec:	6800      	ldr	r0, [r0, #0]
 80010ee:	f005 fd71 	bl	8006bd4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 80010f2:	8ae2      	ldrh	r2, [r4, #22]
 80010f4:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 80010f8:	6820      	ldr	r0, [r4, #0]
 80010fa:	f005 fd6f 	bl	8006bdc <STC_ExecRamp>
      if (commandHasBeenExecuted)
 80010fe:	2800      	cmp	r0, #0
 8001100:	d0ed      	beq.n	80010de <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 8001102:	2302      	movs	r3, #2
 8001104:	77a3      	strb	r3, [r4, #30]
}
 8001106:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001108:	6843      	ldr	r3, [r0, #4]
 800110a:	2200      	movs	r2, #0
 800110c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, STC_SPEED_MODE);
 8001110:	6800      	ldr	r0, [r0, #0]
 8001112:	f005 fd5f 	bl	8006bd4 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001116:	8ae2      	ldrh	r2, [r4, #22]
 8001118:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800111c:	6820      	ldr	r0, [r4, #0]
 800111e:	f005 fd5d 	bl	8006bdc <STC_ExecRamp>
          break;
 8001122:	e7ec      	b.n	80010fe <MCI_ExecBufferedCommands+0x3a>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001124:	6842      	ldr	r2, [r0, #4]
 8001126:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 800112a:	f8d0 3012 	ldr.w	r3, [r0, #18]
 800112e:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 8001130:	e7e7      	b.n	8001102 <MCI_ExecBufferedCommands+0x3e>
 8001132:	bf00      	nop

08001134 <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 8001134:	7e40      	ldrb	r0, [r0, #25]
 8001136:	4770      	bx	lr

08001138 <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 8001138:	8b80      	ldrh	r0, [r0, #28]
 800113a:	4770      	bx	lr

0800113c <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 800113c:	8b40      	ldrh	r0, [r0, #26]
 800113e:	4770      	bx	lr

08001140 <MCI_StartMotor>:
{
 8001140:	b510      	push	{r4, lr}
 8001142:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001144:	f7ff fff6 	bl	8001134 <MCI_GetSTMState>
 8001148:	b108      	cbz	r0, 800114e <MCI_StartMotor+0xe>
    RetVal = false;
 800114a:	2000      	movs	r0, #0
}
 800114c:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800114e:	4620      	mov	r0, r4
 8001150:	f7ff fff2 	bl	8001138 <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001154:	2800      	cmp	r0, #0
 8001156:	d1f8      	bne.n	800114a <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001158:	4620      	mov	r0, r4
 800115a:	f7ff ffef 	bl	800113c <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800115e:	2800      	cmp	r0, #0
 8001160:	d1f3      	bne.n	800114a <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 8001162:	2001      	movs	r0, #1
 8001164:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001166:	77a0      	strb	r0, [r4, #30]
}
 8001168:	bd10      	pop	{r4, pc}
 800116a:	bf00      	nop

0800116c <MCI_StopMotor>:
{
 800116c:	b538      	push	{r3, r4, r5, lr}
 800116e:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 8001170:	f7ff ffe0 	bl	8001134 <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 8001174:	b150      	cbz	r0, 800118c <MCI_StopMotor+0x20>
 8001176:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800117a:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 800117c:	bf18      	it	ne
 800117e:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 8001180:	f7ff ffda 	bl	8001138 <MCI_GetOccurredFaults>
 8001184:	b140      	cbz	r0, 8001198 <MCI_StopMotor+0x2c>
    RetVal = false;
 8001186:	2400      	movs	r4, #0
}
 8001188:	4620      	mov	r0, r4
 800118a:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 800118c:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800118e:	4628      	mov	r0, r5
 8001190:	f7ff ffd2 	bl	8001138 <MCI_GetOccurredFaults>
 8001194:	2800      	cmp	r0, #0
 8001196:	d1f6      	bne.n	8001186 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 8001198:	4628      	mov	r0, r5
 800119a:	f7ff ffcf 	bl	800113c <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800119e:	2800      	cmp	r0, #0
 80011a0:	d1f1      	bne.n	8001186 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80011a2:	2c00      	cmp	r4, #0
 80011a4:	d0ef      	beq.n	8001186 <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 80011a6:	2305      	movs	r3, #5
 80011a8:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 80011aa:	e7ed      	b.n	8001188 <MCI_StopMotor+0x1c>

080011ac <MCI_FaultAcknowledged>:
{
 80011ac:	b510      	push	{r4, lr}
 80011ae:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80011b0:	f7ff ffc0 	bl	8001134 <MCI_GetSTMState>
 80011b4:	280b      	cmp	r0, #11
 80011b6:	d001      	beq.n	80011bc <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 80011b8:	2000      	movs	r0, #0
}
 80011ba:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80011bc:	4620      	mov	r0, r4
 80011be:	f7ff ffbd 	bl	800113c <MCI_GetCurrentFaults>
 80011c2:	2800      	cmp	r0, #0
 80011c4:	d1f8      	bne.n	80011b8 <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 80011c6:	2302      	movs	r3, #2
 80011c8:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 80011ca:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 80011cc:	2001      	movs	r0, #1
}
 80011ce:	bd10      	pop	{r4, pc}

080011d0 <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80011d0:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80011d2:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 80011d4:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80011d8:	4770      	bx	lr
 80011da:	bf00      	nop

080011dc <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? STC_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 80011dc:	7fc0      	ldrb	r0, [r0, #31]
 80011de:	4770      	bx	lr

080011e0 <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 80011e0:	7b03      	ldrb	r3, [r0, #12]
 80011e2:	2b02      	cmp	r3, #2
 80011e4:	d005      	beq.n	80011f2 <MCI_GetImposedMotorDirection+0x12>
 80011e6:	2b03      	cmp	r3, #3
 80011e8:	d013      	beq.n	8001212 <MCI_GetImposedMotorDirection+0x32>
 80011ea:	2b01      	cmp	r3, #1
 80011ec:	d009      	beq.n	8001202 <MCI_GetImposedMotorDirection+0x22>
 80011ee:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
}
 80011f0:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 80011f2:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 80011f6:	2b00      	cmp	r3, #0
 80011f8:	bfac      	ite	ge
 80011fa:	2001      	movge	r0, #1
 80011fc:	f04f 30ff 	movlt.w	r0, #4294967295
 8001200:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 8001202:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 8001206:	2b00      	cmp	r3, #0
 8001208:	bfac      	ite	ge
 800120a:	2001      	movge	r0, #1
 800120c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001210:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 8001212:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 8001216:	2b00      	cmp	r3, #0
 8001218:	bfac      	ite	ge
 800121a:	2001      	movge	r0, #1
 800121c:	f04f 30ff 	movlt.w	r0, #4294967295
 8001220:	4770      	bx	lr
 8001222:	bf00      	nop

08001224 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001224:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001228:	4770      	bx	lr
 800122a:	bf00      	nop

0800122c <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 800122c:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8001230:	4770      	bx	lr
 8001232:	bf00      	nop

08001234 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001234:	8ac0      	ldrh	r0, [r0, #22]
 8001236:	4770      	bx	lr

08001238 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001238:	6800      	ldr	r0, [r0, #0]
 800123a:	f005 bd11 	b.w	8006c60 <STC_StopRamp>
 800123e:	bf00      	nop

08001240 <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 8001240:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 8001242:	6800      	ldr	r0, [r0, #0]
 8001244:	f005 fcb4 	bl	8006bb0 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 8001248:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 800124c:	f005 bc50 	b.w	8006af0 <SPD_GetAvrgMecSpeedUnit>

08001250 <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 8001250:	6800      	ldr	r0, [r0, #0]
 8001252:	f005 bcb7 	b.w	8006bc4 <STC_GetMecSpeedRefUnit>
 8001256:	bf00      	nop

08001258 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001258:	6842      	ldr	r2, [r0, #4]
 800125a:	6810      	ldr	r0, [r2, #0]
 800125c:	2300      	movs	r3, #0
 800125e:	b282      	uxth	r2, r0
 8001260:	f362 030f 	bfi	r3, r2, #0, #16
 8001264:	0c00      	lsrs	r0, r0, #16
 8001266:	f360 431f 	bfi	r3, r0, #16, #16
{
 800126a:	b082      	sub	sp, #8
#endif
}
 800126c:	4618      	mov	r0, r3
 800126e:	b002      	add	sp, #8
 8001270:	4770      	bx	lr
 8001272:	bf00      	nop

08001274 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 8001274:	6842      	ldr	r2, [r0, #4]
 8001276:	6850      	ldr	r0, [r2, #4]
 8001278:	2300      	movs	r3, #0
 800127a:	b282      	uxth	r2, r0
 800127c:	f362 030f 	bfi	r3, r2, #0, #16
 8001280:	0c00      	lsrs	r0, r0, #16
 8001282:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001286:	b082      	sub	sp, #8
#endif
}
 8001288:	4618      	mov	r0, r3
 800128a:	b002      	add	sp, #8
 800128c:	4770      	bx	lr
 800128e:	bf00      	nop

08001290 <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 8001290:	6842      	ldr	r2, [r0, #4]
 8001292:	68d0      	ldr	r0, [r2, #12]
 8001294:	2300      	movs	r3, #0
 8001296:	b282      	uxth	r2, r0
 8001298:	f362 030f 	bfi	r3, r2, #0, #16
 800129c:	0c00      	lsrs	r0, r0, #16
 800129e:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012a2:	b082      	sub	sp, #8
#endif
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	b002      	add	sp, #8
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop

080012ac <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 80012ac:	6842      	ldr	r2, [r0, #4]
 80012ae:	6910      	ldr	r0, [r2, #16]
 80012b0:	2300      	movs	r3, #0
 80012b2:	b282      	uxth	r2, r0
 80012b4:	f362 030f 	bfi	r3, r2, #0, #16
 80012b8:	0c00      	lsrs	r0, r0, #16
 80012ba:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012be:	b082      	sub	sp, #8
#endif
}
 80012c0:	4618      	mov	r0, r3
 80012c2:	b002      	add	sp, #8
 80012c4:	4770      	bx	lr
 80012c6:	bf00      	nop

080012c8 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 80012c8:	6842      	ldr	r2, [r0, #4]
 80012ca:	f8d2 0016 	ldr.w	r0, [r2, #22]
 80012ce:	2300      	movs	r3, #0
 80012d0:	b282      	uxth	r2, r0
 80012d2:	f362 030f 	bfi	r3, r2, #0, #16
 80012d6:	0c00      	lsrs	r0, r0, #16
 80012d8:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012dc:	b082      	sub	sp, #8
#endif
}
 80012de:	4618      	mov	r0, r3
 80012e0:	b002      	add	sp, #8
 80012e2:	4770      	bx	lr

080012e4 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 80012e4:	6842      	ldr	r2, [r0, #4]
 80012e6:	f8d2 001a 	ldr.w	r0, [r2, #26]
 80012ea:	2300      	movs	r3, #0
 80012ec:	b282      	uxth	r2, r0
 80012ee:	f362 030f 	bfi	r3, r2, #0, #16
 80012f2:	0c00      	lsrs	r0, r0, #16
 80012f4:	f360 431f 	bfi	r3, r0, #16, #16
{
 80012f8:	b082      	sub	sp, #8
#endif
}
 80012fa:	4618      	mov	r0, r3
 80012fc:	b002      	add	sp, #8
 80012fe:	4770      	bx	lr

08001300 <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 8001300:	6843      	ldr	r3, [r0, #4]
#endif
}
 8001302:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001306:	4770      	bx	lr

08001308 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001308:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 800130a:	e9d0 0400 	ldrd	r0, r4, [r0]
 800130e:	f005 fcd9 	bl	8006cc4 <STC_GetDefaultIqdref>
 8001312:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001316:	8220      	strh	r0, [r4, #16]
 8001318:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800131a:	bd10      	pop	{r4, pc}

0800131c <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800131c:	f644 11e6 	movw	r1, #18918	; 0x49e6
 8001320:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 8001322:	fb13 f201 	smulbb	r2, r3, r1
{
 8001326:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 800132a:	fb10 f101 	smulbb	r1, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800132e:	4250      	negs	r0, r2
 8001330:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001334:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001338:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 800133a:	da05      	bge.n	8001348 <MCM_Clarke+0x2c>
 800133c:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 800133e:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 8001342:	da0c      	bge.n	800135e <MCM_Clarke+0x42>
 8001344:	4a09      	ldr	r2, [pc, #36]	; (800136c <MCM_Clarke+0x50>)
 8001346:	e001      	b.n	800134c <MCM_Clarke+0x30>
 8001348:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 800134c:	b29b      	uxth	r3, r3
 800134e:	2000      	movs	r0, #0
 8001350:	f363 000f 	bfi	r0, r3, #0, #16
 8001354:	b293      	uxth	r3, r2
 8001356:	f363 401f 	bfi	r0, r3, #16, #16
}
 800135a:	b004      	add	sp, #16
 800135c:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <MCM_Clarke+0x50>)
 8001360:	b20a      	sxth	r2, r1
 8001362:	4282      	cmp	r2, r0
 8001364:	bfb8      	it	lt
 8001366:	4602      	movlt	r2, r0
 8001368:	e7f0      	b.n	800134c <MCM_Clarke+0x30>
 800136a:	bf00      	nop
 800136c:	ffff8001 	.word	0xffff8001

08001370 <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 8001370:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 8001374:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 8001378:	f400 7140 	and.w	r1, r0, #768	; 0x300
 800137c:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 8001380:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 8001382:	d028      	beq.n	80013d6 <MCM_Trig_Functions+0x66>
 8001384:	f04f 0300 	mov.w	r3, #0
 8001388:	461a      	mov	r2, r3
 800138a:	d816      	bhi.n	80013ba <MCM_Trig_Functions+0x4a>
 800138c:	b361      	cbz	r1, 80013e8 <MCM_Trig_Functions+0x78>
 800138e:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 8001392:	d109      	bne.n	80013a8 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001394:	b2c0      	uxtb	r0, r0
 8001396:	43c2      	mvns	r2, r0
 8001398:	491a      	ldr	r1, [pc, #104]	; (8001404 <MCM_Trig_Functions+0x94>)
 800139a:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 800139c:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013a0:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80013a4:	4252      	negs	r2, r2
 80013a6:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 80013a8:	b29b      	uxth	r3, r3
 80013aa:	2000      	movs	r0, #0
 80013ac:	f363 000f 	bfi	r0, r3, #0, #16
 80013b0:	b292      	uxth	r2, r2
 80013b2:	f362 401f 	bfi	r0, r2, #16, #16
}
 80013b6:	b002      	add	sp, #8
 80013b8:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 80013ba:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80013be:	d1f3      	bne.n	80013a8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013c0:	4910      	ldr	r1, [pc, #64]	; (8001404 <MCM_Trig_Functions+0x94>)
 80013c2:	b2c0      	uxtb	r0, r0
 80013c4:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013c6:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013ca:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013cc:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013ce:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013d2:	b21b      	sxth	r3, r3
      break;
 80013d4:	e7e8      	b.n	80013a8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80013d6:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013d8:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80013da:	490a      	ldr	r1, [pc, #40]	; (8001404 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013dc:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 80013de:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013e2:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 80013e6:	e7df      	b.n	80013a8 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013e8:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013ea:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013ec:	4905      	ldr	r1, [pc, #20]	; (8001404 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013ee:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013f0:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013f4:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013f8:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013fa:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80013fc:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80013fe:	b21b      	sxth	r3, r3
      break;
 8001400:	e7d2      	b.n	80013a8 <MCM_Trig_Functions+0x38>
 8001402:	bf00      	nop
 8001404:	08007734 	.word	0x08007734

08001408 <MCM_Park>:
{
 8001408:	b530      	push	{r4, r5, lr}
 800140a:	b085      	sub	sp, #20
 800140c:	4603      	mov	r3, r0
 800140e:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001410:	4608      	mov	r0, r1
 8001412:	141c      	asrs	r4, r3, #16
{
 8001414:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001416:	f7ff ffab 	bl	8001370 <MCM_Trig_Functions>
 800141a:	b22d      	sxth	r5, r5
 800141c:	fa0f fc80 	sxth.w	ip, r0
 8001420:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001422:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001426:	fb04 1113 	mls	r1, r4, r3, r1
  if (wqd_tmp > INT16_MAX)
 800142a:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 800142e:	da05      	bge.n	800143c <MCM_Park+0x34>
 8001430:	13ca      	asrs	r2, r1, #15
  else if (wqd_tmp < (-32768))
 8001432:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001436:	da22      	bge.n	800147e <MCM_Park+0x76>
 8001438:	4914      	ldr	r1, [pc, #80]	; (800148c <MCM_Park+0x84>)
 800143a:	e001      	b.n	8001440 <MCM_Park+0x38>
 800143c:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001440:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001444:	fb05 4403 	mla	r4, r5, r3, r4
  if (wqd_tmp > INT16_MAX)
 8001448:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 800144c:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8001450:	da04      	bge.n	800145c <MCM_Park+0x54>
  else if (wqd_tmp < (-32768))
 8001452:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001456:	da0c      	bge.n	8001472 <MCM_Park+0x6a>
 8001458:	4b0c      	ldr	r3, [pc, #48]	; (800148c <MCM_Park+0x84>)
 800145a:	e001      	b.n	8001460 <MCM_Park+0x58>
 800145c:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 8001460:	b28a      	uxth	r2, r1
 8001462:	2000      	movs	r0, #0
 8001464:	f362 000f 	bfi	r0, r2, #0, #16
 8001468:	b29b      	uxth	r3, r3
 800146a:	f363 401f 	bfi	r0, r3, #16, #16
}
 800146e:	b005      	add	sp, #20
 8001470:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8001472:	4806      	ldr	r0, [pc, #24]	; (800148c <MCM_Park+0x84>)
 8001474:	b213      	sxth	r3, r2
 8001476:	4283      	cmp	r3, r0
 8001478:	bfb8      	it	lt
 800147a:	4603      	movlt	r3, r0
 800147c:	e7f0      	b.n	8001460 <MCM_Park+0x58>
    hqd_tmp = ((int16_t)wqd_tmp);
 800147e:	4903      	ldr	r1, [pc, #12]	; (800148c <MCM_Park+0x84>)
 8001480:	b212      	sxth	r2, r2
 8001482:	4291      	cmp	r1, r2
 8001484:	bfb8      	it	lt
 8001486:	4611      	movlt	r1, r2
 8001488:	e7da      	b.n	8001440 <MCM_Park+0x38>
 800148a:	bf00      	nop
 800148c:	ffff8001 	.word	0xffff8001

08001490 <MCM_Rev_Park>:
{
 8001490:	b530      	push	{r4, r5, lr}
 8001492:	b085      	sub	sp, #20
 8001494:	4604      	mov	r4, r0
 8001496:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001498:	4608      	mov	r0, r1
{
 800149a:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 800149c:	f7ff ff68 	bl	8001370 <MCM_Trig_Functions>
 80014a0:	1424      	asrs	r4, r4, #16
 80014a2:	1402      	asrs	r2, r0, #16
 80014a4:	b22d      	sxth	r5, r5
 80014a6:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 80014a8:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 80014ac:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 80014b0:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 80014b4:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 80014b8:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 80014bc:	2000      	movs	r0, #0
 80014be:	f363 000f 	bfi	r0, r3, #0, #16
 80014c2:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 80014c6:	f364 401f 	bfi	r0, r4, #16, #16
}
 80014ca:	b005      	add	sp, #20
 80014cc:	bd30      	pop	{r4, r5, pc}
 80014ce:	bf00      	nop

080014d0 <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 80014d0:	1e03      	subs	r3, r0, #0
 80014d2:	dd35      	ble.n	8001540 <MCM_Sqrt+0x70>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if (wInput <= ((int32_t)2097152))
 80014d4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80014d8:	dd2b      	ble.n	8001532 <MCM_Sqrt+0x62>
      wtemproot = ((int32_t)8192);
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014da:	135a      	asrs	r2, r3, #13
 80014dc:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 80014e0:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014e2:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 80014e6:	d029      	beq.n	800153c <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014e8:	fb93 f1f2 	sdiv	r1, r3, r2
 80014ec:	4411      	add	r1, r2
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014ee:	ebb2 0f61 	cmp.w	r2, r1, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014f2:	ea4f 0061 	mov.w	r0, r1, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014f6:	d024      	beq.n	8001542 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 80014f8:	fb93 f2f0 	sdiv	r2, r3, r0
 80014fc:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 80014fe:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001502:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001506:	d01c      	beq.n	8001542 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001508:	fb93 f2f1 	sdiv	r2, r3, r1
 800150c:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800150e:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001512:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001516:	d014      	beq.n	8001542 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001518:	fb93 f2f0 	sdiv	r2, r3, r0
 800151c:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 800151e:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001522:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001526:	d00c      	beq.n	8001542 <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001528:	fb93 f0f1 	sdiv	r0, r3, r1
 800152c:	4408      	add	r0, r1
 800152e:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001530:	4770      	bx	lr
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001532:	11da      	asrs	r2, r3, #7
 8001534:	3280      	adds	r2, #128	; 0x80
 8001536:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001538:	2a80      	cmp	r2, #128	; 0x80
 800153a:	d1d5      	bne.n	80014e8 <MCM_Sqrt+0x18>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 800153c:	4610      	mov	r0, r2
 800153e:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001540:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001542:	4770      	bx	lr

08001544 <initModelPredictiveControl>:
void parkTransform(short a, short b, short c, volatile qd_t *Xdq);
void computeSinCos(int16_t thetaElec);



void initModelPredictiveControl(){
 8001544:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ab_t Vab;
	alphabeta_t Valphabeta;

	c1 = (int)(10027*(1 - (0.75/(16130*0.0004))));
 8001548:	492c      	ldr	r1, [pc, #176]	; (80015fc <initModelPredictiveControl+0xb8>)
	c2 = (int)(10027*(1/(16130*0.0004)));
 800154a:	4a2d      	ldr	r2, [pc, #180]	; (8001600 <initModelPredictiveControl+0xbc>)

	for(i=0;i<6;i++){
 800154c:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001614 <initModelPredictiveControl+0xd0>
 8001550:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001618 <initModelPredictiveControl+0xd4>
 8001554:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 800161c <initModelPredictiveControl+0xd8>
 8001558:	4f2a      	ldr	r7, [pc, #168]	; (8001604 <initModelPredictiveControl+0xc0>)
 800155a:	4e2b      	ldr	r6, [pc, #172]	; (8001608 <initModelPredictiveControl+0xc4>)
 800155c:	4d2b      	ldr	r5, [pc, #172]	; (800160c <initModelPredictiveControl+0xc8>)
 800155e:	4c2c      	ldr	r4, [pc, #176]	; (8001610 <initModelPredictiveControl+0xcc>)
	c1 = (int)(10027*(1 - (0.75/(16130*0.0004))));
 8001560:	f242 209d 	movw	r0, #8861	; 0x229d
	for(i=0;i<6;i++){
 8001564:	2300      	movs	r3, #0
	c1 = (int)(10027*(1 - (0.75/(16130*0.0004))));
 8001566:	6008      	str	r0, [r1, #0]
	c2 = (int)(10027*(1/(16130*0.0004)));
 8001568:	f240 6112 	movw	r1, #1554	; 0x612
void initModelPredictiveControl(){
 800156c:	b082      	sub	sp, #8
	c2 = (int)(10027*(1/(16130*0.0004)));
 800156e:	6011      	str	r1, [r2, #0]
	for(i=0;i<6;i++){
 8001570:	f8ca 3000 	str.w	r3, [sl]
		Sa = states[i] & 0x01;
 8001574:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
		Sb = (states[i]>>1) & 0x01;
		Sc = (states[i]>>2) & 0x01;

		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vdc;
 8001578:	f9b5 0000 	ldrsh.w	r0, [r5]
		Sa = states[i] & 0x01;
 800157c:	f002 0c01 	and.w	ip, r2, #1
		Sb = (states[i]>>1) & 0x01;
 8001580:	f3c2 0140 	ubfx	r1, r2, #1, #1
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vdc;
 8001584:	ebc1 0e4c 	rsb	lr, r1, ip, lsl #1
		Sc = (states[i]>>2) & 0x01;
 8001588:	f3c2 0280 	ubfx	r2, r2, #2, #1
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vdc;
 800158c:	ebcc 0341 	rsb	r3, ip, r1, lsl #1
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vdc;
 8001590:	ebae 0e02 	sub.w	lr, lr, r2
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vdc;
 8001594:	1a9b      	subs	r3, r3, r2
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vdc;
 8001596:	ebce 3ece 	rsb	lr, lr, lr, lsl #15
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vdc;
 800159a:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vdc;
 800159e:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vdc;
 80015a2:	009b      	lsls	r3, r3, #2
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vdc;
 80015a4:	fb9e fef0 	sdiv	lr, lr, r0
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vdc;
 80015a8:	fb93 f3f0 	sdiv	r3, r3, r0
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vdc;
 80015ac:	f8ad e000 	strh.w	lr, [sp]
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vdc;
 80015b0:	f8ad 3002 	strh.w	r3, [sp, #2]

		Valphabeta = MCM_Clarke(Vab);
 80015b4:	9800      	ldr	r0, [sp, #0]
		Sc = (states[i]>>2) & 0x01;
 80015b6:	7032      	strb	r2, [r6, #0]
		Sa = states[i] & 0x01;
 80015b8:	f888 c000 	strb.w	ip, [r8]
		Sb = (states[i]>>1) & 0x01;
 80015bc:	7039      	strb	r1, [r7, #0]
		Valphabeta = MCM_Clarke(Vab);
 80015be:	f7ff fead 	bl	800131c <MCM_Clarke>

		Varray[i][0] = Valphabeta.alpha;
 80015c2:	b202      	sxth	r2, r0
		Varray[i][1] = Valphabeta.beta;
 80015c4:	1400      	asrs	r0, r0, #16
		Varray[i][0] = Valphabeta.alpha;
 80015c6:	f8da 3000 	ldr.w	r3, [sl]
 80015ca:	ee07 2a10 	vmov	s14, r2
		Varray[i][1] = Valphabeta.beta;
 80015ce:	ee07 0a90 	vmov	s15, r0
		Varray[i][0] = Valphabeta.alpha;
 80015d2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 80015d6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	for(i=0;i<6;i++){
 80015da:	3301      	adds	r3, #1
		Varray[i][1] = Valphabeta.beta;
 80015dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		Varray[i][0] = Valphabeta.alpha;
 80015e0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	for(i=0;i<6;i++){
 80015e4:	2b05      	cmp	r3, #5
		Varray[i][0] = Valphabeta.alpha;
 80015e6:	ed82 7a00 	vstr	s14, [r2]
		Varray[i][1] = Valphabeta.beta;
 80015ea:	edc2 7a01 	vstr	s15, [r2, #4]
	for(i=0;i<6;i++){
 80015ee:	f8ca 3000 	str.w	r3, [sl]
 80015f2:	ddbf      	ble.n	8001574 <initModelPredictiveControl+0x30>
	}
}
 80015f4:	b002      	add	sp, #8
 80015f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80015fa:	bf00      	nop
 80015fc:	20000900 	.word	0x20000900
 8001600:	20000904 	.word	0x20000904
 8001604:	200008a5 	.word	0x200008a5
 8001608:	200008a6 	.word	0x200008a6
 800160c:	20000590 	.word	0x20000590
 8001610:	200008a8 	.word	0x200008a8
 8001614:	20000914 	.word	0x20000914
 8001618:	20000594 	.word	0x20000594
 800161c:	200008a4 	.word	0x200008a4

08001620 <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001620:	2226      	movs	r2, #38	; 0x26
{
 8001622:	b538      	push	{r3, r4, r5, lr}
 8001624:	fb00 f202 	mul.w	r2, r0, r2
 8001628:	4b15      	ldr	r3, [pc, #84]	; (8001680 <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 800162a:	2400      	movs	r4, #0
 800162c:	509c      	str	r4, [r3, r2]
{
 800162e:	4605      	mov	r5, r0
 8001630:	f102 0108 	add.w	r1, r2, #8
 8001634:	1898      	adds	r0, r3, r2
 8001636:	3210      	adds	r2, #16
 8001638:	4419      	add	r1, r3
 800163a:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 800163c:	4a11      	ldr	r2, [pc, #68]	; (8001684 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 800163e:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001640:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001644:	604c      	str	r4, [r1, #4]
 8001646:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001648:	f8c3 4006 	str.w	r4, [r3, #6]
 800164c:	f8c3 400a 	str.w	r4, [r3, #10]
 8001650:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001654:	4621      	mov	r1, r4
 8001656:	f004 fa4b 	bl	8005af0 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <FOC_Clear+0x68>)
 800165c:	4621      	mov	r1, r4
 800165e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001662:	f004 fa45 	bl	8005af0 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001666:	4b09      	ldr	r3, [pc, #36]	; (800168c <FOC_Clear+0x6c>)
 8001668:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800166c:	f005 faa2 	bl	8006bb4 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001670:	4b07      	ldr	r3, [pc, #28]	; (8001690 <FOC_Clear+0x70>)
 8001672:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800167a:	f000 bf0d 	b.w	8002498 <PWMC_SwitchOffPWM>
 800167e:	bf00      	nop
 8001680:	20000870 	.word	0x20000870
 8001684:	20000574 	.word	0x20000574
 8001688:	20000570 	.word	0x20000570
 800168c:	20000578 	.word	0x20000578
 8001690:	20000924 	.word	0x20000924

08001694 <MCboot>:
  if (MC_NULL == pMCIList)
 8001694:	2800      	cmp	r0, #0
 8001696:	d070      	beq.n	800177a <MCboot+0xe6>
{
 8001698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pCLM[M1] = &CircleLimitationM1;
 800169c:	4b37      	ldr	r3, [pc, #220]	; (800177c <MCboot+0xe8>)
 800169e:	4a38      	ldr	r2, [pc, #224]	; (8001780 <MCboot+0xec>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80016a0:	f8df b124 	ldr.w	fp, [pc, #292]	; 80017c8 <MCboot+0x134>
    bMCBootCompleted = (uint8_t )0;
 80016a4:	f8df 9124 	ldr.w	r9, [pc, #292]	; 80017cc <MCboot+0x138>
    pCLM[M1] = &CircleLimitationM1;
 80016a8:	601a      	str	r2, [r3, #0]
{
 80016aa:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 80016ac:	f04f 0800 	mov.w	r8, #0
 80016b0:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 80016b2:	4834      	ldr	r0, [pc, #208]	; (8001784 <MCboot+0xf0>)
 80016b4:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 80016b8:	f889 8000 	strb.w	r8, [r9]
    R3_1_Init(&PWM_Handle_M1);
 80016bc:	f004 fd7a 	bl	80061b4 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 80016c0:	4831      	ldr	r0, [pc, #196]	; (8001788 <MCboot+0xf4>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80016c2:	4d32      	ldr	r5, [pc, #200]	; (800178c <MCboot+0xf8>)
    RVBS_Init(&BusVoltageSensor_M1);
 80016c4:	4e32      	ldr	r6, [pc, #200]	; (8001790 <MCboot+0xfc>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 80016c6:	4f33      	ldr	r7, [pc, #204]	; (8001794 <MCboot+0x100>)
    ASPEP_start(&aspepOverUartA);
 80016c8:	f7fe ff32 	bl	8000530 <ASPEP_start>
    startTimers();
 80016cc:	f004 fac0 	bl	8005c50 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 80016d0:	4831      	ldr	r0, [pc, #196]	; (8001798 <MCboot+0x104>)
 80016d2:	f004 f9f9 	bl	8005ac8 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 80016d6:	4831      	ldr	r0, [pc, #196]	; (800179c <MCboot+0x108>)
 80016d8:	f005 fd04 	bl	80070e4 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 80016dc:	4a2f      	ldr	r2, [pc, #188]	; (800179c <MCboot+0x108>)
 80016de:	492e      	ldr	r1, [pc, #184]	; (8001798 <MCboot+0x104>)
 80016e0:	6828      	ldr	r0, [r5, #0]
 80016e2:	f005 fa4d 	bl	8006b80 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 80016e6:	482e      	ldr	r0, [pc, #184]	; (80017a0 <MCboot+0x10c>)
 80016e8:	f005 fdf8 	bl	80072dc <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 80016ec:	f8db 3000 	ldr.w	r3, [fp]
 80016f0:	6829      	ldr	r1, [r5, #0]
 80016f2:	4a2b      	ldr	r2, [pc, #172]	; (80017a0 <MCboot+0x10c>)
 80016f4:	9300      	str	r3, [sp, #0]
 80016f6:	482b      	ldr	r0, [pc, #172]	; (80017a4 <MCboot+0x110>)
 80016f8:	4b2b      	ldr	r3, [pc, #172]	; (80017a8 <MCboot+0x114>)
 80016fa:	f005 f917 	bl	800692c <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 80016fe:	482b      	ldr	r0, [pc, #172]	; (80017ac <MCboot+0x118>)
 8001700:	f004 f9e2 	bl	8005ac8 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001704:	482a      	ldr	r0, [pc, #168]	; (80017b0 <MCboot+0x11c>)
 8001706:	f004 f9df 	bl	8005ac8 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 800170a:	4630      	mov	r0, r6
 800170c:	f005 f838 	bl	8006780 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001710:	4b28      	ldr	r3, [pc, #160]	; (80017b4 <MCboot+0x120>)
    NTC_Init(&TempSensor_M1);
 8001712:	4829      	ldr	r0, [pc, #164]	; (80017b8 <MCboot+0x124>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 800171a:	4e28      	ldr	r6, [pc, #160]	; (80017bc <MCboot+0x128>)
 800171c:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
    NTC_Init(&TempSensor_M1);
 8001720:	f004 f992 	bl	8005a48 <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001724:	4b26      	ldr	r3, [pc, #152]	; (80017c0 <MCboot+0x12c>)
 8001726:	4827      	ldr	r0, [pc, #156]	; (80017c4 <MCboot+0x130>)
 8001728:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 800172a:	f005 f875 	bl	8006818 <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 800172e:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 8001732:	4640      	mov	r0, r8
 8001734:	f7ff ff74 	bl	8001620 <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001738:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 800173a:	f886 a024 	strb.w	sl, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 800173e:	f005 fac1 	bl	8006cc4 <STC_GetDefaultIqdref>
 8001742:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001744:	6828      	ldr	r0, [r5, #0]
 8001746:	f005 fabd 	bl	8006cc4 <STC_GetDefaultIqdref>
 800174a:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 800174e:	f8db 3000 	ldr.w	r3, [fp]
 8001752:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001754:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001756:	4632      	mov	r2, r6
 8001758:	4638      	mov	r0, r7
 800175a:	f7ff fc77 	bl	800104c <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 800175e:	6828      	ldr	r0, [r5, #0]
 8001760:	f005 faac 	bl	8006cbc <STC_GetMecSpeedRefUnitDefault>
 8001764:	4642      	mov	r2, r8
 8001766:	4601      	mov	r1, r0
 8001768:	4638      	mov	r0, r7
 800176a:	f7ff fc81 	bl	8001070 <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 800176e:	6027      	str	r7, [r4, #0]
    bMCBootCompleted = 1U;
 8001770:	f889 a000 	strb.w	sl, [r9]
}
 8001774:	b005      	add	sp, #20
 8001776:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800177a:	4770      	bx	lr
 800177c:	2000091c 	.word	0x2000091c
 8001780:	20000028 	.word	0x20000028
 8001784:	20000274 	.word	0x20000274
 8001788:	20000600 	.word	0x20000600
 800178c:	20000578 	.word	0x20000578
 8001790:	20000000 	.word	0x20000000
 8001794:	2000083c 	.word	0x2000083c
 8001798:	20000134 	.word	0x20000134
 800179c:	200003b0 	.word	0x200003b0
 80017a0:	20000534 	.word	0x20000534
 80017a4:	20000324 	.word	0x20000324
 80017a8:	2000039c 	.word	0x2000039c
 80017ac:	20000108 	.word	0x20000108
 80017b0:	200000dc 	.word	0x200000dc
 80017b4:	2000056c 	.word	0x2000056c
 80017b8:	2000050c 	.word	0x2000050c
 80017bc:	20000870 	.word	0x20000870
 80017c0:	20000920 	.word	0x20000920
 80017c4:	2000030c 	.word	0x2000030c
 80017c8:	20000924 	.word	0x20000924
 80017cc:	200008fc 	.word	0x200008fc

080017d0 <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 80017d0:	4770      	bx	lr
 80017d2:	bf00      	nop

080017d4 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 80017d4:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 80017d6:	4c08      	ldr	r4, [pc, #32]	; (80017f8 <FOC_CalcCurrRef+0x24>)
 80017d8:	2326      	movs	r3, #38	; 0x26
 80017da:	fb03 4400 	mla	r4, r3, r0, r4
 80017de:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80017e2:	b103      	cbz	r3, 80017e6 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 80017e4:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 80017e6:	4b05      	ldr	r3, [pc, #20]	; (80017fc <FOC_CalcCurrRef+0x28>)
 80017e8:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 80017ec:	f005 fa3c 	bl	8006c68 <STC_CalcTorqueReference>
 80017f0:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 80017f2:	8220      	strh	r0, [r4, #16]
}
 80017f4:	bd10      	pop	{r4, pc}
 80017f6:	bf00      	nop
 80017f8:	20000870 	.word	0x20000870
 80017fc:	20000578 	.word	0x20000578

08001800 <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001800:	4b01      	ldr	r3, [pc, #4]	; (8001808 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001802:	8018      	strh	r0, [r3, #0]
}
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop
 8001808:	20000908 	.word	0x20000908

0800180c <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 800180c:	4b03      	ldr	r3, [pc, #12]	; (800181c <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 800180e:	8818      	ldrh	r0, [r3, #0]
 8001810:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001812:	fab0 f080 	clz	r0, r0
 8001816:	0940      	lsrs	r0, r0, #5
 8001818:	4770      	bx	lr
 800181a:	bf00      	nop
 800181c:	20000908 	.word	0x20000908

08001820 <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001820:	4b01      	ldr	r3, [pc, #4]	; (8001828 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001822:	8018      	strh	r0, [r3, #0]
}
 8001824:	4770      	bx	lr
 8001826:	bf00      	nop
 8001828:	2000090c 	.word	0x2000090c

0800182c <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 800182c:	4b03      	ldr	r3, [pc, #12]	; (800183c <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 800182e:	8818      	ldrh	r0, [r3, #0]
 8001830:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001832:	fab0 f080 	clz	r0, r0
 8001836:	0940      	lsrs	r0, r0, #5
 8001838:	4770      	bx	lr
 800183a:	bf00      	nop
 800183c:	2000090c 	.word	0x2000090c

08001840 <TSK_MediumFrequencyTaskM1>:
{
 8001840:	b570      	push	{r4, r5, r6, lr}
 8001842:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001844:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001846:	4669      	mov	r1, sp
 8001848:	48ba      	ldr	r0, [pc, #744]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x2f4>)
  int16_t wAux = 0;
 800184a:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 800184e:	f005 fb47 	bl	8006ee0 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001852:	4eb9      	ldr	r6, [pc, #740]	; (8001b38 <TSK_MediumFrequencyTaskM1+0x2f8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001854:	4cb9      	ldr	r4, [pc, #740]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x2fc>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001856:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001858:	6830      	ldr	r0, [r6, #0]
 800185a:	f004 f9c3 	bl	8005be4 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 800185e:	4620      	mov	r0, r4
 8001860:	f7ff fc6c 	bl	800113c <MCI_GetCurrentFaults>
 8001864:	b118      	cbz	r0, 800186e <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8001866:	230a      	movs	r3, #10
 8001868:	7663      	strb	r3, [r4, #25]
}
 800186a:	b002      	add	sp, #8
 800186c:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 800186e:	4620      	mov	r0, r4
 8001870:	f7ff fc62 	bl	8001138 <MCI_GetOccurredFaults>
 8001874:	bb70      	cbnz	r0, 80018d4 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 8001876:	7e63      	ldrb	r3, [r4, #25]
 8001878:	2b13      	cmp	r3, #19
 800187a:	d8f6      	bhi.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
 800187c:	a201      	add	r2, pc, #4	; (adr r2, 8001884 <TSK_MediumFrequencyTaskM1+0x44>)
 800187e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001882:	bf00      	nop
 8001884:	08001a47 	.word	0x08001a47
 8001888:	0800186b 	.word	0x0800186b
 800188c:	0800186b 	.word	0x0800186b
 8001890:	0800186b 	.word	0x0800186b
 8001894:	080019b3 	.word	0x080019b3
 8001898:	0800186b 	.word	0x0800186b
 800189c:	0800198f 	.word	0x0800198f
 80018a0:	0800186b 	.word	0x0800186b
 80018a4:	0800196f 	.word	0x0800196f
 80018a8:	0800186b 	.word	0x0800186b
 80018ac:	080018d5 	.word	0x080018d5
 80018b0:	08001a77 	.word	0x08001a77
 80018b4:	0800186b 	.word	0x0800186b
 80018b8:	0800186b 	.word	0x0800186b
 80018bc:	0800186b 	.word	0x0800186b
 80018c0:	0800186b 	.word	0x0800186b
 80018c4:	0800192d 	.word	0x0800192d
 80018c8:	080018fd 	.word	0x080018fd
 80018cc:	0800186b 	.word	0x0800186b
 80018d0:	080018dd 	.word	0x080018dd
      Mci[M1].State = FAULT_OVER;
 80018d4:	230b      	movs	r3, #11
 80018d6:	7663      	strb	r3, [r4, #25]
}
 80018d8:	b002      	add	sp, #8
 80018da:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 80018dc:	7e23      	ldrb	r3, [r4, #24]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	f000 80d0 	beq.w	8001a84 <TSK_MediumFrequencyTaskM1+0x244>
            if(! RUC_Exec(&RevUpControlM1))
 80018e4:	4896      	ldr	r0, [pc, #600]	; (8001b40 <TSK_MediumFrequencyTaskM1+0x300>)
 80018e6:	f005 f89d 	bl	8006a24 <RUC_Exec>
 80018ea:	4602      	mov	r2, r0
 80018ec:	2800      	cmp	r0, #0
 80018ee:	f040 80e4 	bne.w	8001aba <TSK_MediumFrequencyTaskM1+0x27a>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 80018f2:	4892      	ldr	r0, [pc, #584]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x2fc>)
 80018f4:	2110      	movs	r1, #16
 80018f6:	f7ff fbd9 	bl	80010ac <MCI_FaultProcessing>
 80018fa:	e7b6      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
            if (MCI_STOP == Mci[M1].DirectCommand)
 80018fc:	7e23      	ldrb	r3, [r4, #24]
 80018fe:	2b05      	cmp	r3, #5
 8001900:	f000 80c0 	beq.w	8001a84 <TSK_MediumFrequencyTaskM1+0x244>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001904:	4d8f      	ldr	r5, [pc, #572]	; (8001b44 <TSK_MediumFrequencyTaskM1+0x304>)
 8001906:	2101      	movs	r1, #1
 8001908:	6828      	ldr	r0, [r5, #0]
 800190a:	f000 fdc9 	bl	80024a0 <PWMC_CurrentReadingCalibr>
 800190e:	2800      	cmp	r0, #0
 8001910:	d0ab      	beq.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001912:	7e23      	ldrb	r3, [r4, #24]
 8001914:	2b03      	cmp	r3, #3
 8001916:	f000 8103 	beq.w	8001b20 <TSK_MediumFrequencyTaskM1+0x2e0>
                  R3_1_TurnOnLowSides(pwmcHandle[M1]);
 800191a:	6828      	ldr	r0, [r5, #0]
 800191c:	f004 fafa 	bl	8005f14 <R3_1_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8001920:	2014      	movs	r0, #20
 8001922:	f7ff ff6d 	bl	8001800 <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8001926:	2310      	movs	r3, #16
 8001928:	7663      	strb	r3, [r4, #25]
 800192a:	e79e      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800192c:	7e23      	ldrb	r3, [r4, #24]
 800192e:	2b05      	cmp	r3, #5
 8001930:	f000 80a8 	beq.w	8001a84 <TSK_MediumFrequencyTaskM1+0x244>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001934:	f7ff ff6a 	bl	800180c <TSK_ChargeBootCapDelayHasElapsedM1>
 8001938:	2800      	cmp	r0, #0
 800193a:	d096      	beq.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800193c:	4d81      	ldr	r5, [pc, #516]	; (8001b44 <TSK_MediumFrequencyTaskM1+0x304>)
 800193e:	6828      	ldr	r0, [r5, #0]
 8001940:	f004 fb5c 	bl	8005ffc <R3_1_SwitchOffPWM>
             STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001944:	4a80      	ldr	r2, [pc, #512]	; (8001b48 <TSK_MediumFrequencyTaskM1+0x308>)
             FOCVars[M1].bDriveInput = EXTERNAL;
 8001946:	4b81      	ldr	r3, [pc, #516]	; (8001b4c <TSK_MediumFrequencyTaskM1+0x30c>)
             STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001948:	6810      	ldr	r0, [r2, #0]
 800194a:	4981      	ldr	r1, [pc, #516]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x310>)
             FOCVars[M1].bDriveInput = EXTERNAL;
 800194c:	2201      	movs	r2, #1
 800194e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
             STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001952:	f005 f92b 	bl	8006bac <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001956:	4877      	ldr	r0, [pc, #476]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001958:	f005 fb9e 	bl	8007098 <STO_PLL_Clear>
              FOC_Clear( M1 );
 800195c:	2000      	movs	r0, #0
 800195e:	f7ff fe5f 	bl	8001620 <FOC_Clear>
              Mci[M1].State = START;
 8001962:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001964:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = START;
 8001966:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001968:	f000 fd98 	bl	800249c <PWMC_SwitchOnPWM>
 800196c:	e77d      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 800196e:	f7ff ff5d 	bl	800182c <TSK_StopPermanencyTimeHasElapsedM1>
 8001972:	2800      	cmp	r0, #0
 8001974:	f43f af79 	beq.w	800186a <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 8001978:	4b73      	ldr	r3, [pc, #460]	; (8001b48 <TSK_MediumFrequencyTaskM1+0x308>)
 800197a:	4975      	ldr	r1, [pc, #468]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x310>)
 800197c:	6818      	ldr	r0, [r3, #0]
 800197e:	f005 f915 	bl	8006bac <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001982:	4873      	ldr	r0, [pc, #460]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x310>)
 8001984:	f005 fc9c 	bl	80072c0 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001988:	2300      	movs	r3, #0
 800198a:	8323      	strh	r3, [r4, #24]
 800198c:	e76d      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 800198e:	7e23      	ldrb	r3, [r4, #24]
 8001990:	2b05      	cmp	r3, #5
 8001992:	d077      	beq.n	8001a84 <TSK_MediumFrequencyTaskM1+0x244>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001994:	4869      	ldr	r0, [pc, #420]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001996:	f7ff fb95 	bl	80010c4 <MCI_ExecBufferedCommands>
            FOC_CalcCurrRef(M1);
 800199a:	2000      	movs	r0, #0
 800199c:	f7ff ff1a 	bl	80017d4 <FOC_CalcCurrRef>
            if(!IsSpeedReliable)
 80019a0:	2d00      	cmp	r5, #0
 80019a2:	f47f af62 	bne.w	800186a <TSK_MediumFrequencyTaskM1+0x2a>
              MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 80019a6:	4865      	ldr	r0, [pc, #404]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x2fc>)
 80019a8:	462a      	mov	r2, r5
 80019aa:	2120      	movs	r1, #32
 80019ac:	f7ff fb7e 	bl	80010ac <MCI_FaultProcessing>
 80019b0:	e75b      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 80019b2:	7e23      	ldrb	r3, [r4, #24]
 80019b4:	2b05      	cmp	r3, #5
 80019b6:	d065      	beq.n	8001a84 <TSK_MediumFrequencyTaskM1+0x244>
            if(! RUC_Exec(&RevUpControlM1))
 80019b8:	4861      	ldr	r0, [pc, #388]	; (8001b40 <TSK_MediumFrequencyTaskM1+0x300>)
 80019ba:	f005 f833 	bl	8006a24 <RUC_Exec>
 80019be:	4602      	mov	r2, r0
 80019c0:	2800      	cmp	r0, #0
 80019c2:	d170      	bne.n	8001aa6 <TSK_MediumFrequencyTaskM1+0x266>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 80019c4:	485d      	ldr	r0, [pc, #372]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x2fc>)
 80019c6:	2110      	movs	r1, #16
 80019c8:	f7ff fb70 	bl	80010ac <MCI_FaultProcessing>
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 80019cc:	4860      	ldr	r0, [pc, #384]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x310>)
 80019ce:	f10d 0102 	add.w	r1, sp, #2
 80019d2:	f005 fcdb 	bl	800738c <VSS_CalcAvrgMecSpeedUnit>
           if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 80019d6:	485a      	ldr	r0, [pc, #360]	; (8001b40 <TSK_MediumFrequencyTaskM1+0x300>)
 80019d8:	f005 f85a 	bl	8006a90 <RUC_FirstAccelerationStageReached>
 80019dc:	2800      	cmp	r0, #0
 80019de:	f43f af44 	beq.w	800186a <TSK_MediumFrequencyTaskM1+0x2a>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 80019e2:	f10d 0102 	add.w	r1, sp, #2
 80019e6:	4853      	ldr	r0, [pc, #332]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x2f4>)
 80019e8:	f005 fbb6 	bl	8007158 <STO_PLL_IsObserverConverged>
 80019ec:	4605      	mov	r5, r0
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 80019ee:	4853      	ldr	r0, [pc, #332]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x2fc>)
 80019f0:	f7ff fbf6 	bl	80011e0 <MCI_GetImposedMotorDirection>
 80019f4:	b241      	sxtb	r1, r0
 80019f6:	484f      	ldr	r0, [pc, #316]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x2f4>)
 80019f8:	f005 fc5e 	bl	80072b8 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 80019fc:	4854      	ldr	r0, [pc, #336]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x310>)
 80019fe:	4629      	mov	r1, r5
 8001a00:	f005 fd66 	bl	80074d0 <VSS_SetStartTransition>
            if (ObserverConverged)
 8001a04:	2d00      	cmp	r5, #0
 8001a06:	f43f af30 	beq.w	800186a <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001a0a:	484a      	ldr	r0, [pc, #296]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001a0c:	4e4f      	ldr	r6, [pc, #316]	; (8001b4c <TSK_MediumFrequencyTaskM1+0x30c>)
              REMNG_Init(pREMNG[M1]);
 8001a0e:	4d51      	ldr	r5, [pc, #324]	; (8001b54 <TSK_MediumFrequencyTaskM1+0x314>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001a10:	f005 f86a 	bl	8006ae8 <SPD_GetElAngle>
 8001a14:	4601      	mov	r1, r0
 8001a16:	6870      	ldr	r0, [r6, #4]
 8001a18:	f7ff fcf6 	bl	8001408 <MCM_Park>
 8001a1c:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 8001a1e:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8001a20:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 8001a22:	f004 fef9 	bl	8006818 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8001a26:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8001a2a:	6828      	ldr	r0, [r5, #0]
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	f004 ff39 	bl	80068a4 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 8001a32:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8001a36:	6828      	ldr	r0, [r5, #0]
 8001a38:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001a3c:	f004 ff32 	bl	80068a4 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 8001a40:	2313      	movs	r3, #19
 8001a42:	7663      	strb	r3, [r4, #25]
 8001a44:	e711      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8001a46:	7e25      	ldrb	r5, [r4, #24]
 8001a48:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8001a4c:	2d01      	cmp	r5, #1
 8001a4e:	f47f af0c 	bne.w	800186a <TSK_MediumFrequencyTaskM1+0x2a>
            RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001a52:	483a      	ldr	r0, [pc, #232]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x2fc>)
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001a54:	4e3b      	ldr	r6, [pc, #236]	; (8001b44 <TSK_MediumFrequencyTaskM1+0x304>)
            RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8001a56:	f7ff fbc3 	bl	80011e0 <MCI_GetImposedMotorDirection>
 8001a5a:	4601      	mov	r1, r0
 8001a5c:	4838      	ldr	r0, [pc, #224]	; (8001b40 <TSK_MediumFrequencyTaskM1+0x300>)
 8001a5e:	f004 ff9d 	bl	800699c <RUC_Clear>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8001a62:	6830      	ldr	r0, [r6, #0]
 8001a64:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
 8001a68:	2900      	cmp	r1, #0
 8001a6a:	d14f      	bne.n	8001b0c <TSK_MediumFrequencyTaskM1+0x2cc>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8001a6c:	f000 fd18 	bl	80024a0 <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 8001a70:	2311      	movs	r3, #17
 8001a72:	7663      	strb	r3, [r4, #25]
 8001a74:	e6f9      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 8001a76:	7e23      	ldrb	r3, [r4, #24]
 8001a78:	2b02      	cmp	r3, #2
 8001a7a:	f47f aef6 	bne.w	800186a <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001a7e:	2300      	movs	r3, #0
 8001a80:	8323      	strh	r3, [r4, #24]
 8001a82:	e6f2      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
  R3_1_SwitchOffPWM(pwmcHandle[motor]);
 8001a84:	4b2f      	ldr	r3, [pc, #188]	; (8001b44 <TSK_MediumFrequencyTaskM1+0x304>)
 8001a86:	6818      	ldr	r0, [r3, #0]
 8001a88:	f004 fab8 	bl	8005ffc <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 8001a8c:	2000      	movs	r0, #0
 8001a8e:	f7ff fdc7 	bl	8001620 <FOC_Clear>
  MPM_Clear((MotorPowMeas_Handle_t*) pMPM[motor]);
 8001a92:	6830      	ldr	r0, [r6, #0]
 8001a94:	f003 ff96 	bl	80059c4 <MPM_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 8001a98:	f44f 7048 	mov.w	r0, #800	; 0x320
 8001a9c:	f7ff fec0 	bl	8001820 <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	7663      	strb	r3, [r4, #25]
  return;
 8001aa4:	e6e1      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 8001aa6:	4b28      	ldr	r3, [pc, #160]	; (8001b48 <TSK_MediumFrequencyTaskM1+0x308>)
 8001aa8:	6818      	ldr	r0, [r3, #0]
 8001aaa:	f005 f8dd 	bl	8006c68 <STC_CalcTorqueReference>
             IqdRef.d = FOCVars[M1].UserIdref;
 8001aae:	4b27      	ldr	r3, [pc, #156]	; (8001b4c <TSK_MediumFrequencyTaskM1+0x30c>)
 8001ab0:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
             FOCVars[M1].Iqdref = IqdRef;
 8001ab4:	8218      	strh	r0, [r3, #16]
 8001ab6:	825a      	strh	r2, [r3, #18]
 8001ab8:	e788      	b.n	80019cc <TSK_MediumFrequencyTaskM1+0x18c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001aba:	4825      	ldr	r0, [pc, #148]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x310>)
 8001abc:	a901      	add	r1, sp, #4
 8001abe:	f005 fc65 	bl	800738c <VSS_CalcAvrgMecSpeedUnit>
 8001ac2:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 8001ac4:	4822      	ldr	r0, [pc, #136]	; (8001b50 <TSK_MediumFrequencyTaskM1+0x310>)
 8001ac6:	f005 fd11 	bl	80074ec <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 8001aca:	b335      	cbz	r5, 8001b1a <TSK_MediumFrequencyTaskM1+0x2da>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001acc:	4b1f      	ldr	r3, [pc, #124]	; (8001b4c <TSK_MediumFrequencyTaskM1+0x30c>)
 8001ace:	4822      	ldr	r0, [pc, #136]	; (8001b58 <TSK_MediumFrequencyTaskM1+0x318>)
 8001ad0:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001ad4:	4d1c      	ldr	r5, [pc, #112]	; (8001b48 <TSK_MediumFrequencyTaskM1+0x308>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8001ad6:	f004 f815 	bl	8005b04 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8001ada:	b201      	sxth	r1, r0
 8001adc:	fb06 f101 	mul.w	r1, r6, r1
 8001ae0:	481d      	ldr	r0, [pc, #116]	; (8001b58 <TSK_MediumFrequencyTaskM1+0x318>)
 8001ae2:	f004 f805 	bl	8005af0 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8001ae6:	4913      	ldr	r1, [pc, #76]	; (8001b34 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001ae8:	6828      	ldr	r0, [r5, #0]
 8001aea:	f005 f85f 	bl	8006bac <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 8001aee:	2000      	movs	r0, #0
 8001af0:	f7ff fe6e 	bl	80017d0 <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8001af4:	2000      	movs	r0, #0
 8001af6:	f7ff fe6d 	bl	80017d4 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8001afa:	6828      	ldr	r0, [r5, #0]
 8001afc:	f005 f8f0 	bl	8006ce0 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 8001b00:	480e      	ldr	r0, [pc, #56]	; (8001b3c <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001b02:	f7ff fadf 	bl	80010c4 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8001b06:	2306      	movs	r3, #6
 8001b08:	7663      	strb	r3, [r4, #25]
 8001b0a:	e6ae      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001b0c:	4629      	mov	r1, r5
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 8001b0e:	f8a0 5052 	strh.w	r5, [r0, #82]	; 0x52
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8001b12:	f000 fcc5 	bl	80024a0 <PWMC_CurrentReadingCalibr>
             R3_1_TurnOnLowSides(pwmcHandle[M1]);
 8001b16:	6830      	ldr	r0, [r6, #0]
 8001b18:	e700      	b.n	800191c <TSK_MediumFrequencyTaskM1+0xdc>
              LoopClosed = LoopClosed || tempBool;
 8001b1a:	2800      	cmp	r0, #0
 8001b1c:	d1d6      	bne.n	8001acc <TSK_MediumFrequencyTaskM1+0x28c>
 8001b1e:	e6a4      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
                  FOC_Clear(M1);
 8001b20:	2000      	movs	r0, #0
 8001b22:	f7ff fd7d 	bl	8001620 <FOC_Clear>
                  MPM_Clear((MotorPowMeas_Handle_t*) pMPM[M1]);
 8001b26:	6830      	ldr	r0, [r6, #0]
 8001b28:	f003 ff4c 	bl	80059c4 <MPM_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	8323      	strh	r3, [r4, #24]
 8001b30:	e69b      	b.n	800186a <TSK_MediumFrequencyTaskM1+0x2a>
 8001b32:	bf00      	nop
 8001b34:	200003b0 	.word	0x200003b0
 8001b38:	2000056c 	.word	0x2000056c
 8001b3c:	2000083c 	.word	0x2000083c
 8001b40:	20000324 	.word	0x20000324
 8001b44:	20000924 	.word	0x20000924
 8001b48:	20000578 	.word	0x20000578
 8001b4c:	20000870 	.word	0x20000870
 8001b50:	20000534 	.word	0x20000534
 8001b54:	20000920 	.word	0x20000920
 8001b58:	20000134 	.word	0x20000134

08001b5c <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8001b5c:	4b1c      	ldr	r3, [pc, #112]	; (8001bd0 <MC_Scheduler+0x74>)
 8001b5e:	781b      	ldrb	r3, [r3, #0]
 8001b60:	2b01      	cmp	r3, #1
 8001b62:	d000      	beq.n	8001b66 <MC_Scheduler+0xa>
 8001b64:	4770      	bx	lr
{
 8001b66:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8001b68:	4c1a      	ldr	r4, [pc, #104]	; (8001bd4 <MC_Scheduler+0x78>)
 8001b6a:	8823      	ldrh	r3, [r4, #0]
 8001b6c:	b193      	cbz	r3, 8001b94 <MC_Scheduler+0x38>
      hMFTaskCounterM1--;
 8001b6e:	3b01      	subs	r3, #1
 8001b70:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 8001b72:	4a19      	ldr	r2, [pc, #100]	; (8001bd8 <MC_Scheduler+0x7c>)
 8001b74:	8813      	ldrh	r3, [r2, #0]
 8001b76:	b29b      	uxth	r3, r3
 8001b78:	b11b      	cbz	r3, 8001b82 <MC_Scheduler+0x26>
      hBootCapDelayCounterM1--;
 8001b7a:	8813      	ldrh	r3, [r2, #0]
 8001b7c:	3b01      	subs	r3, #1
 8001b7e:	b29b      	uxth	r3, r3
 8001b80:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 8001b82:	4a16      	ldr	r2, [pc, #88]	; (8001bdc <MC_Scheduler+0x80>)
 8001b84:	8813      	ldrh	r3, [r2, #0]
 8001b86:	b29b      	uxth	r3, r3
 8001b88:	b11b      	cbz	r3, 8001b92 <MC_Scheduler+0x36>
      hStopPermanencyCounterM1--;
 8001b8a:	8813      	ldrh	r3, [r2, #0]
 8001b8c:	3b01      	subs	r3, #1
 8001b8e:	b29b      	uxth	r3, r3
 8001b90:	8013      	strh	r3, [r2, #0]
}
 8001b92:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b94:	4d12      	ldr	r5, [pc, #72]	; (8001be0 <MC_Scheduler+0x84>)
      TSK_MediumFrequencyTaskM1();
 8001b96:	f7ff fe53 	bl	8001840 <TSK_MediumFrequencyTaskM1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	f851 0b0c 	ldr.w	r0, [r1], #12
 8001ba0:	6883      	ldr	r3, [r0, #8]
 8001ba2:	4798      	blx	r3
 8001ba4:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 8001ba6:	b130      	cbz	r0, 8001bb6 <MC_Scheduler+0x5a>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 8001ba8:	4629      	mov	r1, r5
 8001baa:	220a      	movs	r2, #10
 8001bac:	f851 0b08 	ldr.w	r0, [r1], #8
 8001bb0:	6803      	ldr	r3, [r0, #0]
 8001bb2:	4798      	blx	r3
 8001bb4:	b910      	cbnz	r0, 8001bbc <MC_Scheduler+0x60>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	8023      	strh	r3, [r4, #0]
 8001bba:	e7da      	b.n	8001b72 <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 8001bbc:	4628      	mov	r0, r5
 8001bbe:	f003 fca3 	bl	8005508 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 8001bc2:	6828      	ldr	r0, [r5, #0]
 8001bc4:	89ea      	ldrh	r2, [r5, #14]
 8001bc6:	6846      	ldr	r6, [r0, #4]
 8001bc8:	68a9      	ldr	r1, [r5, #8]
 8001bca:	230a      	movs	r3, #10
 8001bcc:	47b0      	blx	r6
 8001bce:	e7f2      	b.n	8001bb6 <MC_Scheduler+0x5a>
 8001bd0:	200008fc 	.word	0x200008fc
 8001bd4:	2000090a 	.word	0x2000090a
 8001bd8:	20000908 	.word	0x20000908
 8001bdc:	2000090c 	.word	0x2000090c
 8001be0:	200005dc 	.word	0x200005dc

08001be4 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8001be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001be8:	ed2d 8b02 	vpush	{d8}
  uint8_t bMotorNbr = 0;

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if (SWITCH_OVER == Mci[M1].State)
 8001bec:	4bbe      	ldr	r3, [pc, #760]	; (8001ee8 <TSK_HighFrequencyTask+0x304>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001bee:	4cbf      	ldr	r4, [pc, #764]	; (8001eec <TSK_HighFrequencyTask+0x308>)
  if (SWITCH_OVER == Mci[M1].State)
 8001bf0:	7e5b      	ldrb	r3, [r3, #25]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001bf2:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8001bf6:	b08d      	sub	sp, #52	; 0x34
  if (SWITCH_OVER == Mci[M1].State)
 8001bf8:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8001bfa:	9009      	str	r0, [sp, #36]	; 0x24
  if (SWITCH_OVER == Mci[M1].State)
 8001bfc:	f000 81d1 	beq.w	8001fa2 <TSK_HighFrequencyTask+0x3be>

	int16_t hElAngle;
	uint16_t hCodeError;
	SpeednPosFdbk_Handle_t *speedHandle;

	speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 8001c00:	4bbb      	ldr	r3, [pc, #748]	; (8001ef0 <TSK_HighFrequencyTask+0x30c>)
 8001c02:	6818      	ldr	r0, [r3, #0]
 8001c04:	f004 ffd4 	bl	8006bb0 <STC_GetSpeedSensor>
 8001c08:	4605      	mov	r5, r0
 8001c0a:	ee08 0a90 	vmov	s17, r0
	hElAngle = SPD_GetElAngle(speedHandle);
 8001c0e:	f004 ff6b 	bl	8006ae8 <SPD_GetElAngle>
 8001c12:	4682      	mov	sl, r0
	hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8001c14:	4628      	mov	r0, r5
 8001c16:	f004 ff6f 	bl	8006af8 <SPD_GetInstElSpeedDpp>
	PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8001c1a:	4bb6      	ldr	r3, [pc, #728]	; (8001ef4 <TSK_HighFrequencyTask+0x310>)
 8001c1c:	a906      	add	r1, sp, #24
 8001c1e:	6818      	ldr	r0, [r3, #0]
 8001c20:	f000 faee 	bl	8002200 <PWMC_GetPhaseCurrents>
	Ialphabeta = MCM_Clarke(Iab);
 8001c24:	9806      	ldr	r0, [sp, #24]
 8001c26:	f7ff fb79 	bl	800131c <MCM_Clarke>
	Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c2a:	4651      	mov	r1, sl
	Ialphabeta = MCM_Clarke(Iab);
 8001c2c:	9007      	str	r0, [sp, #28]
	Iqd = MCM_Park(Ialphabeta, hElAngle);
 8001c2e:	f7ff fbeb 	bl	8001408 <MCM_Park>
 8001c32:	9000      	str	r0, [sp, #0]


	int speedRPM = SPEED_UNIT_2_RPM(SPD_GetAvrgMecSpeedUnit(speedHandle));
 8001c34:	4628      	mov	r0, r5
 8001c36:	f004 ff5b 	bl	8006af0 <SPD_GetAvrgMecSpeedUnit>
//	int16_t wr = 4*SPEED_UNIT_2_RPM(MC_GetMecSpeedAverageMotor1())/9.55;

	/* Omkar code start */

	if(!hasMPCinit){
 8001c3a:	4baf      	ldr	r3, [pc, #700]	; (8001ef8 <TSK_HighFrequencyTask+0x314>)
	int speedRPM = SPEED_UNIT_2_RPM(SPD_GetAvrgMecSpeedUnit(speedHandle));
 8001c3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
	if(!hasMPCinit){
 8001c40:	681a      	ldr	r2, [r3, #0]
	int speedRPM = SPEED_UNIT_2_RPM(SPD_GetAvrgMecSpeedUnit(speedHandle));
 8001c42:	0045      	lsls	r5, r0, #1
 8001c44:	b22d      	sxth	r5, r5
	if(!hasMPCinit){
 8001c46:	2a00      	cmp	r2, #0
 8001c48:	f000 81a6 	beq.w	8001f98 <TSK_HighFrequencyTask+0x3b4>
		hasMPCinit = 1;
		initModelPredictiveControl();
	}


	if(speedRPM > 1900 || runMPC){
 8001c4c:	f240 736c 	movw	r3, #1900	; 0x76c
 8001c50:	429d      	cmp	r5, r3
 8001c52:	4baa      	ldr	r3, [pc, #680]	; (8001efc <TSK_HighFrequencyTask+0x318>)
 8001c54:	dc03      	bgt.n	8001c5e <TSK_HighFrequencyTask+0x7a>
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	2a00      	cmp	r2, #0
 8001c5a:	f000 812b 	beq.w	8001eb4 <TSK_HighFrequencyTask+0x2d0>
		runMPC = 1;
 8001c5e:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001c60:	48a7      	ldr	r0, [pc, #668]	; (8001f00 <TSK_HighFrequencyTask+0x31c>)
		runMPC = 1;
 8001c62:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 8001c64:	2120      	movs	r1, #32
 8001c66:	f002 fda5 	bl	80047b4 <HAL_GPIO_WritePin>

		IqTemp = (float)Iqd.q/10027;
 8001c6a:	f8bd 3000 	ldrh.w	r3, [sp]
 8001c6e:	eddf 6aa5 	vldr	s13, [pc, #660]	; 8001f04 <TSK_HighFrequencyTask+0x320>
		IdTemp = (float)Iqd.d/10027;

		cost = 2147483628;
 8001c72:	4aa5      	ldr	r2, [pc, #660]	; (8001f08 <TSK_HighFrequencyTask+0x324>)
		IqTemp = (float)Iqd.q/10027;
 8001c74:	f8df b2d4 	ldr.w	fp, [pc, #724]	; 8001f4c <TSK_HighFrequencyTask+0x368>
		IdTemp = (float)Iqd.d/10027;
 8001c78:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 8001f50 <TSK_HighFrequencyTask+0x36c>

		for(i=0;i<7;i++){
 8001c7c:	4da3      	ldr	r5, [pc, #652]	; (8001f0c <TSK_HighFrequencyTask+0x328>)
			} else {
				VqdTemp.d = 0;
				VqdTemp.q = 0;
			}

			IdPred = ((C1*IdTemp) + (c2*(VqdTemp.d)*Vdc/32767));
 8001c7e:	ed9f 8aa4 	vldr	s16, [pc, #656]	; 8001f10 <TSK_HighFrequencyTask+0x32c>
 8001c82:	f8df 82d0 	ldr.w	r8, [pc, #720]	; 8001f54 <TSK_HighFrequencyTask+0x370>
 8001c86:	4fa3      	ldr	r7, [pc, #652]	; (8001f14 <TSK_HighFrequencyTask+0x330>)
 8001c88:	4ea3      	ldr	r6, [pc, #652]	; (8001f18 <TSK_HighFrequencyTask+0x334>)
		IqTemp = (float)Iqd.q/10027;
 8001c8a:	b21b      	sxth	r3, r3
 8001c8c:	ee07 3a10 	vmov	s14, r3
		IdTemp = (float)Iqd.d/10027;
 8001c90:	f8bd 3002 	ldrh.w	r3, [sp, #2]
		cost = 2147483628;
 8001c94:	9205      	str	r2, [sp, #20]
		IdTemp = (float)Iqd.d/10027;
 8001c96:	b21b      	sxth	r3, r3
 8001c98:	ee07 3a90 	vmov	s15, r3
		IqTemp = (float)Iqd.q/10027;
 8001c9c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
		IdTemp = (float)Iqd.d/10027;
 8001ca0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		IqTemp = (float)Iqd.q/10027;
 8001ca4:	ee27 7a26 	vmul.f32	s14, s14, s13
		IdTemp = (float)Iqd.d/10027;
 8001ca8:	ee67 7aa6 	vmul.f32	s15, s15, s13
		for(i=0;i<7;i++){
 8001cac:	2300      	movs	r3, #0
 8001cae:	4a9b      	ldr	r2, [pc, #620]	; (8001f1c <TSK_HighFrequencyTask+0x338>)
		IqTemp = (float)Iqd.q/10027;
 8001cb0:	ed8b 7a00 	vstr	s14, [fp]
		IdTemp = (float)Iqd.d/10027;
 8001cb4:	edc9 7a00 	vstr	s15, [r9]
		for(i=0;i<7;i++){
 8001cb8:	602b      	str	r3, [r5, #0]
				Valphabeta.beta  = Varray[i][1];
 8001cba:	4999      	ldr	r1, [pc, #612]	; (8001f20 <TSK_HighFrequencyTask+0x33c>)
 8001cbc:	eb03 0043 	add.w	r0, r3, r3, lsl #1
			if(i<6){
 8001cc0:	2b06      	cmp	r3, #6
				Valphabeta.beta  = Varray[i][1];
 8001cc2:	eb01 0080 	add.w	r0, r1, r0, lsl #2
			if(i<6){
 8001cc6:	f000 80db 	beq.w	8001e80 <TSK_HighFrequencyTask+0x29c>
				Valphabeta.alpha = Varray[i][0];
 8001cca:	ed90 7a00 	vldr	s14, [r0]
				Valphabeta.beta  = Varray[i][1];
 8001cce:	edd0 7a01 	vldr	s15, [r0, #4]
				Valphabeta.alpha = Varray[i][0];
 8001cd2:	eebd 7ac7 	vcvt.s32.f32	s14, s14
				Valphabeta.beta  = Varray[i][1];
 8001cd6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				Valphabeta.alpha = Varray[i][0];
 8001cda:	ee17 3a10 	vmov	r3, s14
 8001cde:	f8ad 3020 	strh.w	r3, [sp, #32]
				VqdTemp = MCM_Park(Valphabeta, hElAngle);
 8001ce2:	ee17 3a90 	vmov	r3, s15
 8001ce6:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8001cea:	9808      	ldr	r0, [sp, #32]
 8001cec:	4651      	mov	r1, sl
 8001cee:	f7ff fb8b 	bl	8001408 <MCM_Park>
 8001cf2:	4a8a      	ldr	r2, [pc, #552]	; (8001f1c <TSK_HighFrequencyTask+0x338>)
 8001cf4:	9002      	str	r0, [sp, #8]
			IdPred = ((C1*IdTemp) + (c2*(VqdTemp.d)*Vdc/32767));
 8001cf6:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8001cfa:	488a      	ldr	r0, [pc, #552]	; (8001f24 <TSK_HighFrequencyTask+0x340>)
 8001cfc:	6811      	ldr	r1, [r2, #0]
 8001cfe:	f9b0 e000 	ldrsh.w	lr, [r0]
 8001d02:	edd9 6a00 	vldr	s13, [r9]
			IqPred = ((C1*IqTemp) + (c2*(VqdTemp.q)*Vdc/32767));
 8001d06:	ed9b 7a00 	vldr	s14, [fp]
			IdPred = ((C1*IdTemp) + (c2*(VqdTemp.d)*Vdc/32767));
 8001d0a:	b21b      	sxth	r3, r3
 8001d0c:	fb01 f303 	mul.w	r3, r1, r3
 8001d10:	fb0e f303 	mul.w	r3, lr, r3
 8001d14:	fb86 c003 	smull	ip, r0, r6, r3
 8001d18:	4418      	add	r0, r3
 8001d1a:	17db      	asrs	r3, r3, #31
 8001d1c:	ebc3 33a0 	rsb	r3, r3, r0, asr #14
 8001d20:	ee07 3a90 	vmov	s15, r3
 8001d24:	eef8 7ae7 	vcvt.f32.s32	s15, s15

			costTemp1 = (FOCVars[M1].Iqdref.q - IqPred);
 8001d28:	f9b4 0010 	ldrsh.w	r0, [r4, #16]
			IdPred = ((C1*IdTemp) + (c2*(VqdTemp.d)*Vdc/32767));
 8001d2c:	eee6 7a88 	vfma.f32	s15, s13, s16
 8001d30:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d34:	ee17 3a90 	vmov	r3, s15
 8001d38:	b21b      	sxth	r3, r3
 8001d3a:	f8a8 3000 	strh.w	r3, [r8]
			IqPred = ((C1*IqTemp) + (c2*(VqdTemp.q)*Vdc/32767));
 8001d3e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8001d42:	b21b      	sxth	r3, r3
 8001d44:	fb01 f303 	mul.w	r3, r1, r3
 8001d48:	fb0e f303 	mul.w	r3, lr, r3
 8001d4c:	fb86 1e03 	smull	r1, lr, r6, r3
 8001d50:	449e      	add	lr, r3
 8001d52:	17db      	asrs	r3, r3, #31
 8001d54:	ebc3 33ae 	rsb	r3, r3, lr, asr #14
 8001d58:	ee07 3a90 	vmov	s15, r3
 8001d5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
			costTemp2 = (FOCVars[M1].Iqdref.d - IdPred);
 8001d60:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
			IqPred = ((C1*IqTemp) + (c2*(VqdTemp.q)*Vdc/32767));
 8001d64:	eee7 7a08 	vfma.f32	s15, s14, s16
 8001d68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d6c:	ee17 1a90 	vmov	r1, s15
 8001d70:	fa0f fe81 	sxth.w	lr, r1
 8001d74:	f8a7 e000 	strh.w	lr, [r7]
			costTemp1 = (FOCVars[M1].Iqdref.q - IqPred);
 8001d78:	f8b7 e000 	ldrh.w	lr, [r7]
 8001d7c:	fa0f fe8e 	sxth.w	lr, lr
 8001d80:	eba0 000e 	sub.w	r0, r0, lr
 8001d84:	9003      	str	r0, [sp, #12]
			costTemp2 = (FOCVars[M1].Iqdref.d - IdPred);
 8001d86:	f8b8 0000 	ldrh.w	r0, [r8]
 8001d8a:	b200      	sxth	r0, r0
 8001d8c:	1a1b      	subs	r3, r3, r0
 8001d8e:	9304      	str	r3, [sp, #16]

			if(costTemp1<0){
 8001d90:	9b03      	ldr	r3, [sp, #12]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	da02      	bge.n	8001d9c <TSK_HighFrequencyTask+0x1b8>
				costTemp1 = -costTemp1;
 8001d96:	9b03      	ldr	r3, [sp, #12]
 8001d98:	425b      	negs	r3, r3
 8001d9a:	9303      	str	r3, [sp, #12]
			}

			if(costTemp2<0){
 8001d9c:	9b04      	ldr	r3, [sp, #16]
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	da02      	bge.n	8001da8 <TSK_HighFrequencyTask+0x1c4>
				costTemp2 = -costTemp2;
 8001da2:	9b04      	ldr	r3, [sp, #16]
 8001da4:	425b      	negs	r3, r3
 8001da6:	9304      	str	r3, [sp, #16]
			}

			costTemp1 = costTemp1*costTemp1;
 8001da8:	9b03      	ldr	r3, [sp, #12]
 8001daa:	9803      	ldr	r0, [sp, #12]
 8001dac:	fb00 f303 	mul.w	r3, r0, r3
 8001db0:	9303      	str	r3, [sp, #12]
			costTemp2 = costTemp2*costTemp2;
 8001db2:	9b04      	ldr	r3, [sp, #16]
 8001db4:	9804      	ldr	r0, [sp, #16]
 8001db6:	fb00 f303 	mul.w	r3, r0, r3
 8001dba:	9304      	str	r3, [sp, #16]

			if(costTemp1+costTemp2 < cost){
 8001dbc:	9b03      	ldr	r3, [sp, #12]
 8001dbe:	9804      	ldr	r0, [sp, #16]
 8001dc0:	4403      	add	r3, r0
 8001dc2:	9805      	ldr	r0, [sp, #20]
 8001dc4:	4283      	cmp	r3, r0
				optimalVector = i;
 8001dc6:	682b      	ldr	r3, [r5, #0]
			if(costTemp1+costTemp2 < cost){
 8001dc8:	db60      	blt.n	8001e8c <TSK_HighFrequencyTask+0x2a8>
		for(i=0;i<7;i++){
 8001dca:	3301      	adds	r3, #1
 8001dcc:	2b06      	cmp	r3, #6
 8001dce:	602b      	str	r3, [r5, #0]
 8001dd0:	f77f af73 	ble.w	8001cba <TSK_HighFrequencyTask+0xd6>
		  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
		  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
	}
	/* Omkar code end */

	Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8001dd4:	4b54      	ldr	r3, [pc, #336]	; (8001f28 <TSK_HighFrequencyTask+0x344>)
 8001dd6:	9901      	ldr	r1, [sp, #4]
 8001dd8:	6818      	ldr	r0, [r3, #0]
 8001dda:	f003 fb65 	bl	80054a8 <Circle_Limitation>
 8001dde:	9001      	str	r0, [sp, #4]
	hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 8001de0:	ee18 0a90 	vmov	r0, s17
 8001de4:	f004 fe88 	bl	8006af8 <SPD_GetInstElSpeedDpp>
	Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001de8:	4651      	mov	r1, sl
 8001dea:	9801      	ldr	r0, [sp, #4]
 8001dec:	f7ff fb50 	bl	8001490 <MCM_Rev_Park>
	hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001df0:	4b40      	ldr	r3, [pc, #256]	; (8001ef4 <TSK_HighFrequencyTask+0x310>)
	Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001df2:	4601      	mov	r1, r0
	hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001df4:	6818      	ldr	r0, [r3, #0]
	Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8001df6:	9108      	str	r1, [sp, #32]
 8001df8:	b20e      	sxth	r6, r1
 8001dfa:	140d      	asrs	r5, r1, #16
	hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001dfc:	f000 fa02 	bl	8002204 <PWMC_SetPhaseVoltage>

	FOCVars[M1].Vqd = Vqd;
	FOCVars[M1].Iab = Iab;
 8001e00:	9b06      	ldr	r3, [sp, #24]
	FOCVars[M1].Ialphabeta = Ialphabeta;
 8001e02:	9a07      	ldr	r2, [sp, #28]
	FOCVars[M1].Iab = Iab;
 8001e04:	6023      	str	r3, [r4, #0]
	hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8001e06:	4601      	mov	r1, r0
  if(hFOCreturn == MC_FOC_DURATION)
 8001e08:	2901      	cmp	r1, #1
	FOCVars[M1].Vqd = Vqd;
 8001e0a:	9801      	ldr	r0, [sp, #4]
	FOCVars[M1].Iqd = Iqd;
 8001e0c:	9b00      	ldr	r3, [sp, #0]
	FOCVars[M1].Valphabeta = Valphabeta;
 8001e0e:	8366      	strh	r6, [r4, #26]
 8001e10:	83a5      	strh	r5, [r4, #28]
	FOCVars[M1].hElAngle = hElAngle;
 8001e12:	f8a4 a020 	strh.w	sl, [r4, #32]
	FOCVars[M1].Vqd = Vqd;
 8001e16:	f8c4 0016 	str.w	r0, [r4, #22]
	FOCVars[M1].Ialphabeta = Ialphabeta;
 8001e1a:	6062      	str	r2, [r4, #4]
	FOCVars[M1].Iqd = Iqd;
 8001e1c:	60e3      	str	r3, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 8001e1e:	f000 80ae 	beq.w	8001f7e <TSK_HighFrequencyTask+0x39a>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001e22:	4842      	ldr	r0, [pc, #264]	; (8001f2c <TSK_HighFrequencyTask+0x348>)
 8001e24:	f004 fe34 	bl	8006a90 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8001e28:	6862      	ldr	r2, [r4, #4]
 8001e2a:	920a      	str	r2, [sp, #40]	; 0x28
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001e2c:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001e2e:	4840      	ldr	r0, [pc, #256]	; (8001f30 <TSK_HighFrequencyTask+0x34c>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8001e30:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001e32:	f003 fb31 	bl	8005498 <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001e36:	a909      	add	r1, sp, #36	; 0x24
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001e38:	4603      	mov	r3, r0
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001e3a:	483e      	ldr	r0, [pc, #248]	; (8001f34 <TSK_HighFrequencyTask+0x350>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8001e3c:	f8ad 302c 	strh.w	r3, [sp, #44]	; 0x2c
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8001e40:	f004 ff56 	bl	8006cf0 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 8001e44:	483b      	ldr	r0, [pc, #236]	; (8001f34 <TSK_HighFrequencyTask+0x350>)
 8001e46:	f005 f8f5 	bl	8007034 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 8001e4a:	2c00      	cmp	r4, #0
 8001e4c:	f000 8084 	beq.w	8001f58 <TSK_HighFrequencyTask+0x374>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8001e50:	4b25      	ldr	r3, [pc, #148]	; (8001ee8 <TSK_HighFrequencyTask+0x304>)
 8001e52:	7e5b      	ldrb	r3, [r3, #25]
 8001e54:	2b04      	cmp	r3, #4
 8001e56:	f000 8087 	beq.w	8001f68 <TSK_HighFrequencyTask+0x384>
 8001e5a:	2b13      	cmp	r3, #19
 8001e5c:	f000 8084 	beq.w	8001f68 <TSK_HighFrequencyTask+0x384>
  GLOBAL_TIMESTAMP++;
 8001e60:	4a35      	ldr	r2, [pc, #212]	; (8001f38 <TSK_HighFrequencyTask+0x354>)
  if (0U == MCPA_UART_A.Mark)
 8001e62:	4836      	ldr	r0, [pc, #216]	; (8001f3c <TSK_HighFrequencyTask+0x358>)
  GLOBAL_TIMESTAMP++;
 8001e64:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001e66:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 8001e6a:	3301      	adds	r3, #1
 8001e6c:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 8001e6e:	2900      	cmp	r1, #0
 8001e70:	f040 808a 	bne.w	8001f88 <TSK_HighFrequencyTask+0x3a4>
}
 8001e74:	2000      	movs	r0, #0
 8001e76:	b00d      	add	sp, #52	; 0x34
 8001e78:	ecbd 8b02 	vpop	{d8}
 8001e7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				VqdTemp.d = 0;
 8001e80:	2300      	movs	r3, #0
 8001e82:	f8ad 300a 	strh.w	r3, [sp, #10]
				VqdTemp.q = 0;
 8001e86:	f8ad 3008 	strh.w	r3, [sp, #8]
 8001e8a:	e734      	b.n	8001cf6 <TSK_HighFrequencyTask+0x112>
				optimalVector = i;
 8001e8c:	492c      	ldr	r1, [pc, #176]	; (8001f40 <TSK_HighFrequencyTask+0x35c>)
				cost = costTemp1+costTemp2;
 8001e8e:	9803      	ldr	r0, [sp, #12]
				optimalVector = i;
 8001e90:	700b      	strb	r3, [r1, #0]
				cost = costTemp1+costTemp2;
 8001e92:	9904      	ldr	r1, [sp, #16]
 8001e94:	4408      	add	r0, r1
 8001e96:	9005      	str	r0, [sp, #20]
				Vqd.d = VqdTemp.d;
 8001e98:	f8bd 000a 	ldrh.w	r0, [sp, #10]
 8001e9c:	f8ad 0006 	strh.w	r0, [sp, #6]
		for(i=0;i<7;i++){
 8001ea0:	3301      	adds	r3, #1
				Vqd.q = VqdTemp.q;
 8001ea2:	f8bd 0008 	ldrh.w	r0, [sp, #8]
		for(i=0;i<7;i++){
 8001ea6:	602b      	str	r3, [r5, #0]
 8001ea8:	2b06      	cmp	r3, #6
				Vqd.q = VqdTemp.q;
 8001eaa:	f8ad 0004 	strh.w	r0, [sp, #4]
		for(i=0;i<7;i++){
 8001eae:	f77f af04 	ble.w	8001cba <TSK_HighFrequencyTask+0xd6>
 8001eb2:	e78f      	b.n	8001dd4 <TSK_HighFrequencyTask+0x1f0>
		  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 8001eb4:	f8bd 3000 	ldrh.w	r3, [sp]
 8001eb8:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001ebc:	b21b      	sxth	r3, r3
 8001ebe:	1ac9      	subs	r1, r1, r3
 8001ec0:	4b20      	ldr	r3, [pc, #128]	; (8001f44 <TSK_HighFrequencyTask+0x360>)
 8001ec2:	6818      	ldr	r0, [r3, #0]
 8001ec4:	f003 fe48 	bl	8005b58 <PI_Controller>
 8001ec8:	f8ad 0004 	strh.w	r0, [sp, #4]
		  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8001ecc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8001ed0:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 8001ed4:	b21b      	sxth	r3, r3
 8001ed6:	1ac9      	subs	r1, r1, r3
 8001ed8:	4b1b      	ldr	r3, [pc, #108]	; (8001f48 <TSK_HighFrequencyTask+0x364>)
 8001eda:	6818      	ldr	r0, [r3, #0]
 8001edc:	f003 fe3c 	bl	8005b58 <PI_Controller>
 8001ee0:	f8ad 0006 	strh.w	r0, [sp, #6]
 8001ee4:	e776      	b.n	8001dd4 <TSK_HighFrequencyTask+0x1f0>
 8001ee6:	bf00      	nop
 8001ee8:	2000083c 	.word	0x2000083c
 8001eec:	20000870 	.word	0x20000870
 8001ef0:	20000578 	.word	0x20000578
 8001ef4:	20000924 	.word	0x20000924
 8001ef8:	20000910 	.word	0x20000910
 8001efc:	20000928 	.word	0x20000928
 8001f00:	40020000 	.word	0x40020000
 8001f04:	38d12687 	.word	0x38d12687
 8001f08:	7fffffec 	.word	0x7fffffec
 8001f0c:	20000914 	.word	0x20000914
 8001f10:	44a66000 	.word	0x44a66000
 8001f14:	2000089c 	.word	0x2000089c
 8001f18:	80010003 	.word	0x80010003
 8001f1c:	20000904 	.word	0x20000904
 8001f20:	200008a8 	.word	0x200008a8
 8001f24:	20000590 	.word	0x20000590
 8001f28:	2000091c 	.word	0x2000091c
 8001f2c:	20000324 	.word	0x20000324
 8001f30:	20000000 	.word	0x20000000
 8001f34:	200003b0 	.word	0x200003b0
 8001f38:	20001bf8 	.word	0x20001bf8
 8001f3c:	200005b0 	.word	0x200005b0
 8001f40:	20000918 	.word	0x20000918
 8001f44:	20000574 	.word	0x20000574
 8001f48:	20000570 	.word	0x20000570
 8001f4c:	200008a0 	.word	0x200008a0
 8001f50:	20000898 	.word	0x20000898
 8001f54:	20000896 	.word	0x20000896
      STO_ResetPLL(&STO_PLL_M1);
 8001f58:	4818      	ldr	r0, [pc, #96]	; (8001fbc <TSK_HighFrequencyTask+0x3d8>)
 8001f5a:	f005 f991 	bl	8007280 <STO_ResetPLL>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8001f5e:	4b18      	ldr	r3, [pc, #96]	; (8001fc0 <TSK_HighFrequencyTask+0x3dc>)
 8001f60:	7e5b      	ldrb	r3, [r3, #25]
 8001f62:	2b04      	cmp	r3, #4
 8001f64:	f47f af79 	bne.w	8001e5a <TSK_HighFrequencyTask+0x276>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001f68:	4814      	ldr	r0, [pc, #80]	; (8001fbc <TSK_HighFrequencyTask+0x3d8>)
 8001f6a:	f004 fdbd 	bl	8006ae8 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001f6e:	a907      	add	r1, sp, #28
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001f70:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001f72:	4814      	ldr	r0, [pc, #80]	; (8001fc4 <TSK_HighFrequencyTask+0x3e0>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8001f74:	f8ad 301c 	strh.w	r3, [sp, #28]
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8001f78:	f005 f9b4 	bl	80072e4 <VSS_CalcElAngle>
 8001f7c:	e770      	b.n	8001e60 <TSK_HighFrequencyTask+0x27c>
    MCI_FaultProcessing(&Mci[M1], MC_FOC_DURATION, 0);
 8001f7e:	4810      	ldr	r0, [pc, #64]	; (8001fc0 <TSK_HighFrequencyTask+0x3dc>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	f7ff f893 	bl	80010ac <MCI_FaultProcessing>
 8001f86:	e76b      	b.n	8001e60 <TSK_HighFrequencyTask+0x27c>
    MCPA_dataLog (&MCPA_UART_A);
 8001f88:	f003 fbb4 	bl	80056f4 <MCPA_dataLog>
}
 8001f8c:	2000      	movs	r0, #0
 8001f8e:	b00d      	add	sp, #52	; 0x34
 8001f90:	ecbd 8b02 	vpop	{d8}
 8001f94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		hasMPCinit = 1;
 8001f98:	2201      	movs	r2, #1
 8001f9a:	601a      	str	r2, [r3, #0]
		initModelPredictiveControl();
 8001f9c:	f7ff fad2 	bl	8001544 <initModelPredictiveControl>
 8001fa0:	e654      	b.n	8001c4c <TSK_HighFrequencyTask+0x68>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 8001fa2:	4d09      	ldr	r5, [pc, #36]	; (8001fc8 <TSK_HighFrequencyTask+0x3e4>)
 8001fa4:	6828      	ldr	r0, [r5, #0]
 8001fa6:	f004 fc61 	bl	800686c <REMNG_RampCompleted>
 8001faa:	2800      	cmp	r0, #0
 8001fac:	f47f ae28 	bne.w	8001c00 <TSK_HighFrequencyTask+0x1c>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 8001fb0:	6828      	ldr	r0, [r5, #0]
 8001fb2:	f004 fc39 	bl	8006828 <REMNG_Calc>
 8001fb6:	8220      	strh	r0, [r4, #16]
 8001fb8:	e622      	b.n	8001c00 <TSK_HighFrequencyTask+0x1c>
 8001fba:	bf00      	nop
 8001fbc:	200003b0 	.word	0x200003b0
 8001fc0:	2000083c 	.word	0x2000083c
 8001fc4:	20000534 	.word	0x20000534
 8001fc8:	20000920 	.word	0x20000920

08001fcc <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 8001fcc:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001fce:	4b1f      	ldr	r3, [pc, #124]	; (800204c <TSK_SafetyTask_PWMOFF+0x80>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001fd0:	4e1f      	ldr	r6, [pc, #124]	; (8002050 <TSK_SafetyTask_PWMOFF+0x84>)
{
 8001fd2:	b082      	sub	sp, #8
 8001fd4:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001fd6:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001fda:	f003 fd47 	bl	8005a6c <NTC_CalcAvTemp>
 8001fde:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001fe0:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8001fe4:	f000 fa86 	bl	80024f4 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8001fe8:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8001fec:	4328      	orrs	r0, r5
 8001fee:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 8001ff0:	b174      	cbz	r4, 8002010 <TSK_SafetyTask_PWMOFF+0x44>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 8001ff2:	4818      	ldr	r0, [pc, #96]	; (8002054 <TSK_SafetyTask_PWMOFF+0x88>)
 8001ff4:	43ea      	mvns	r2, r5
 8001ff6:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8001ffa:	b292      	uxth	r2, r2
 8001ffc:	4629      	mov	r1, r5
 8001ffe:	9001      	str	r0, [sp, #4]
 8002000:	f7ff f854 	bl	80010ac <MCI_FaultProcessing>
  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002004:	9801      	ldr	r0, [sp, #4]
 8002006:	f7ff f8e3 	bl	80011d0 <MCI_GetFaultState>
 800200a:	b940      	cbnz	r0, 800201e <TSK_SafetyTask_PWMOFF+0x52>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 800200c:	b002      	add	sp, #8
 800200e:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 8002010:	4811      	ldr	r0, [pc, #68]	; (8002058 <TSK_SafetyTask_PWMOFF+0x8c>)
 8002012:	f004 fbcd 	bl	80067b0 <RVBS_CalcAvVbus>
 8002016:	f000 000e 	and.w	r0, r0, #14
 800201a:	4305      	orrs	r5, r0
 800201c:	e7e9      	b.n	8001ff2 <TSK_SafetyTask_PWMOFF+0x26>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800201e:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002022:	f000 fa39 	bl	8002498 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8002026:	480d      	ldr	r0, [pc, #52]	; (800205c <TSK_SafetyTask_PWMOFF+0x90>)
 8002028:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 800202c:	b953      	cbnz	r3, 8002044 <TSK_SafetyTask_PWMOFF+0x78>
    FOC_Clear(bMotor);
 800202e:	4620      	mov	r0, r4
 8002030:	f7ff faf6 	bl	8001620 <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002034:	4b0a      	ldr	r3, [pc, #40]	; (8002060 <TSK_SafetyTask_PWMOFF+0x94>)
 8002036:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 800203a:	b002      	add	sp, #8
 800203c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002040:	f003 bcc0 	b.w	80059c4 <MPM_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002044:	f003 fc1a 	bl	800587c <MCPA_flushDataLog>
 8002048:	e7f1      	b.n	800202e <TSK_SafetyTask_PWMOFF+0x62>
 800204a:	bf00      	nop
 800204c:	2000057c 	.word	0x2000057c
 8002050:	20000924 	.word	0x20000924
 8002054:	2000083c 	.word	0x2000083c
 8002058:	20000000 	.word	0x20000000
 800205c:	200005b0 	.word	0x200005b0
 8002060:	2000056c 	.word	0x2000056c

08002064 <TSK_SafetyTask>:
{
 8002064:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002066:	4b06      	ldr	r3, [pc, #24]	; (8002080 <TSK_SafetyTask+0x1c>)
 8002068:	781b      	ldrb	r3, [r3, #0]
 800206a:	2b01      	cmp	r3, #1
 800206c:	d000      	beq.n	8002070 <TSK_SafetyTask+0xc>
}
 800206e:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 8002070:	2000      	movs	r0, #0
 8002072:	f7ff ffab 	bl	8001fcc <TSK_SafetyTask_PWMOFF>
}
 8002076:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 800207a:	f001 bbf3 	b.w	8003864 <RCM_ExecUserConv>
 800207e:	bf00      	nop
 8002080:	200008fc 	.word	0x200008fc

08002084 <MC_RunMotorControlTasks>:
{
 8002084:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 8002086:	4b04      	ldr	r3, [pc, #16]	; (8002098 <MC_RunMotorControlTasks+0x14>)
 8002088:	781b      	ldrb	r3, [r3, #0]
 800208a:	b903      	cbnz	r3, 800208e <MC_RunMotorControlTasks+0xa>
}
 800208c:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 800208e:	f7ff fd65 	bl	8001b5c <MC_Scheduler>
    TSK_SafetyTask();
 8002092:	f7ff ffe7 	bl	8002064 <TSK_SafetyTask>
}
 8002096:	bd08      	pop	{r3, pc}
 8002098:	200008fc 	.word	0x200008fc

0800209c <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 800209c:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 800209e:	4b05      	ldr	r3, [pc, #20]	; (80020b4 <TSK_HardwareFaultTask+0x18>)
 80020a0:	6818      	ldr	r0, [r3, #0]
 80020a2:	f003 ffab 	bl	8005ffc <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80020a6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80020aa:	4803      	ldr	r0, [pc, #12]	; (80020b8 <TSK_HardwareFaultTask+0x1c>)
 80020ac:	2200      	movs	r2, #0
 80020ae:	2180      	movs	r1, #128	; 0x80
 80020b0:	f7fe bffc 	b.w	80010ac <MCI_FaultProcessing>
 80020b4:	20000924 	.word	0x20000924
 80020b8:	2000083c 	.word	0x2000083c

080020bc <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80020bc:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 80020be:	f7fe ffbf 	bl	8001040 <MC_GetSTMStateMotor1>
 80020c2:	b918      	cbnz	r0, 80020cc <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80020c4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80020c8:	f7fe bfae 	b.w	8001028 <MC_StartMotor1>
}
 80020cc:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80020d0:	f7fe bfb0 	b.w	8001034 <MC_StopMotor1>

080020d4 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 80020d4:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020d6:	4a35      	ldr	r2, [pc, #212]	; (80021ac <mc_lock_pins+0xd8>)
 80020d8:	4b35      	ldr	r3, [pc, #212]	; (80021b0 <mc_lock_pins+0xdc>)
 80020da:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020dc:	f44f 7180 	mov.w	r1, #256	; 0x100
 80020e0:	61d1      	str	r1, [r2, #28]
 80020e2:	b08c      	sub	sp, #48	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020e4:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020e6:	69d3      	ldr	r3, [r2, #28]
 80020e8:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020ea:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020ee:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  (void) temp;
 80020f2:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020f4:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020f6:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80020f8:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80020fa:	69d3      	ldr	r3, [r2, #28]
 80020fc:	930a      	str	r3, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 80020fe:	2140      	movs	r1, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002100:	4b2c      	ldr	r3, [pc, #176]	; (80021b4 <mc_lock_pins+0xe0>)
  (void) temp;
 8002102:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002104:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002106:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002108:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800210a:	69d3      	ldr	r3, [r2, #28]
 800210c:	9309      	str	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800210e:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002112:	f44f 6080 	mov.w	r0, #1024	; 0x400
  (void) temp;
 8002116:	9b09      	ldr	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002118:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800211a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800211c:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800211e:	69d4      	ldr	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002120:	4b25      	ldr	r3, [pc, #148]	; (80021b8 <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 8002122:	9408      	str	r4, [sp, #32]
  (void) temp;
 8002124:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002126:	f44f 3488 	mov.w	r4, #69632	; 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 800212a:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800212e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002130:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002132:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002134:	69dc      	ldr	r4, [r3, #28]
 8002136:	9407      	str	r4, [sp, #28]
  (void) temp;
 8002138:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800213a:	f44f 3484 	mov.w	r4, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 800213e:	f44f 6500 	mov.w	r5, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002142:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002144:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002146:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002148:	69dc      	ldr	r4, [r3, #28]
 800214a:	9406      	str	r4, [sp, #24]
  (void) temp;
 800214c:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800214e:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002150:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002152:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002154:	69d9      	ldr	r1, [r3, #28]
 8002156:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002158:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800215a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 800215e:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002160:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002162:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002164:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002166:	69d0      	ldr	r0, [r2, #28]
 8002168:	9004      	str	r0, [sp, #16]
  (void) temp;
 800216a:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800216c:	4813      	ldr	r0, [pc, #76]	; (80021bc <mc_lock_pins+0xe8>)
 800216e:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002170:	2502      	movs	r5, #2
 8002172:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002174:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002176:	69d2      	ldr	r2, [r2, #28]
 8002178:	9203      	str	r2, [sp, #12]
  (void) temp;
 800217a:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800217c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800217e:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002180:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002182:	69da      	ldr	r2, [r3, #28]
 8002184:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002186:	2004      	movs	r0, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002188:	4a0d      	ldr	r2, [pc, #52]	; (80021c0 <mc_lock_pins+0xec>)
  (void) temp;
 800218a:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800218c:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800218e:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002190:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002192:	69da      	ldr	r2, [r3, #28]
 8002194:	9201      	str	r2, [sp, #4]
  (void) temp;
 8002196:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002198:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800219a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800219c:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 800219e:	69db      	ldr	r3, [r3, #28]
 80021a0:	9300      	str	r3, [sp, #0]
  (void) temp;
 80021a2:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 80021a4:	b00c      	add	sp, #48	; 0x30
 80021a6:	bc30      	pop	{r4, r5}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	40020000 	.word	0x40020000
 80021b0:	00010100 	.word	0x00010100
 80021b4:	00010040 	.word	0x00010040
 80021b8:	40020800 	.word	0x40020800
 80021bc:	00010002 	.word	0x00010002
 80021c0:	00010004 	.word	0x00010004

080021c4 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80021c4:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80021c6:	f002 fdb5 	bl	8004d34 <HAL_RCC_GetHCLKFreq>
 80021ca:	4b0a      	ldr	r3, [pc, #40]	; (80021f4 <MX_MotorControl_Init+0x30>)
 80021cc:	fba3 3000 	umull	r3, r0, r3, r0
 80021d0:	09c0      	lsrs	r0, r0, #7
 80021d2:	f002 f945 	bl	8004460 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 80021d6:	4b08      	ldr	r3, [pc, #32]	; (80021f8 <MX_MotorControl_Init+0x34>)
 80021d8:	2200      	movs	r2, #0
 80021da:	6819      	ldr	r1, [r3, #0]
 80021dc:	f04f 30ff 	mov.w	r0, #4294967295
 80021e0:	f002 f8f2 	bl	80043c8 <HAL_NVIC_SetPriority>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 80021e4:	4805      	ldr	r0, [pc, #20]	; (80021fc <MX_MotorControl_Init+0x38>)
 80021e6:	f7ff fa55 	bl	8001694 <MCboot>
  mc_lock_pins();

}
 80021ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 80021ee:	f7ff bf71 	b.w	80020d4 <mc_lock_pins>
 80021f2:	bf00      	nop
 80021f4:	10624dd3 	.word	0x10624dd3
 80021f8:	20000680 	.word	0x20000680
 80021fc:	20001bb8 	.word	0x20001bb8

08002200 <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 8002200:	6843      	ldr	r3, [r0, #4]
 8002202:	4718      	bx	r3

08002204 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002204:	b510      	push	{r4, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002206:	f8b0 4064 	ldrh.w	r4, [r0, #100]	; 0x64
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800220a:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
{
 800220e:	b082      	sub	sp, #8
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002210:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8002214:	9101      	str	r1, [sp, #4]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002216:	fb04 fc0c 	mul.w	ip, r4, ip
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800221a:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800221c:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002220:	fb03 f101 	mul.w	r1, r3, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002224:	eb01 034c 	add.w	r3, r1, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002228:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 800222c:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 8002230:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002234:	f1b3 3fff 	cmp.w	r3, #4294967295
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002238:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 800223c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002240:	ea4f 0262 	mov.w	r2, r2, asr #1
    if (wY < 0)
 8002244:	f2c0 8088 	blt.w	8002358 <PWMC_SetPhaseVoltage+0x154>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002248:	f1b1 3fff 	cmp.w	r1, #4294967295
 800224c:	db59      	blt.n	8002302 <PWMC_SetPhaseVoltage+0xfe>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800224e:	ebbe 0e02 	subs.w	lr, lr, r2
 8002252:	bf44      	itt	mi
 8002254:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002258:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 800225c:	2900      	cmp	r1, #0
 800225e:	bfbc      	itt	lt
 8002260:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002264:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8002268:	2b00      	cmp	r3, #0
 800226a:	bfb8      	it	lt
 800226c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002270:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8002274:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002278:	bfb8      	it	lt
 800227a:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 800227e:	f04f 0c01 	mov.w	ip, #1
        wTimePhB = wTimePhA + (wZ / 131072);
 8002282:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 8002286:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_2;
 800228a:	f880 c070 	strb.w	ip, [r0, #112]	; 0x70

        pHandle->lowDuty = (uint16_t)wTimePhB;
 800228e:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002292:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
        pHandle->highDuty = (uint16_t)wTimePhC;
 8002296:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 800229a:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 800229e:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80022a2:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80022a6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80022aa:	b292      	uxth	r2, r2
 80022ac:	b289      	uxth	r1, r1
 80022ae:	b29b      	uxth	r3, r3
 80022b0:	2c01      	cmp	r4, #1
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80022b2:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80022b6:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80022ba:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (1U == pHandle->DTTest)
 80022be:	d11b      	bne.n	80022f8 <PWMC_SetPhaseVoltage+0xf4>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 80022c0:	f9b0 4054 	ldrsh.w	r4, [r0, #84]	; 0x54
 80022c4:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 80022c6:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 80022ca:	bfcc      	ite	gt
 80022cc:	1912      	addgt	r2, r2, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 80022ce:	1b12      	suble	r2, r2, r4
 80022d0:	b292      	uxth	r2, r2
 80022d2:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
      }

      if (pHandle->Ib > 0)
 80022d6:	f9b0 2056 	ldrsh.w	r2, [r0, #86]	; 0x56
 80022da:	2a00      	cmp	r2, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 80022dc:	f9b0 2058 	ldrsh.w	r2, [r0, #88]	; 0x58
        pHandle->CntPhB += pHandle->DTCompCnt;
 80022e0:	bfcc      	ite	gt
 80022e2:	1909      	addgt	r1, r1, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80022e4:	1b09      	suble	r1, r1, r4
      if (pHandle->Ic > 0)
 80022e6:	2a00      	cmp	r2, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 80022e8:	b289      	uxth	r1, r1
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 80022ea:	bfcc      	ite	gt
 80022ec:	191b      	addgt	r3, r3, r4
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 80022ee:	1b1b      	suble	r3, r3, r4
 80022f0:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
 80022f4:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 80022f8:	6983      	ldr	r3, [r0, #24]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 80022fa:	b002      	add	sp, #8
 80022fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002300:	4718      	bx	r3
        if ( wX <= 0 )
 8002302:	f1bc 0f00 	cmp.w	ip, #0
 8002306:	dd4f      	ble.n	80023a8 <PWMC_SetPhaseVoltage+0x1a4>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002308:	ebbc 0e02 	subs.w	lr, ip, r2
 800230c:	bf44      	itt	mi
 800230e:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002312:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002316:	2900      	cmp	r1, #0
 8002318:	bfb8      	it	lt
 800231a:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 800231e:	f04f 0300 	mov.w	r3, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 8002322:	bfb8      	it	lt
 8002324:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 8002328:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800232c:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 800232e:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002332:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002336:	bfb8      	it	lt
 8002338:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 800233c:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002340:	bfb8      	it	lt
 8002342:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002346:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 800234a:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhB;
 800234e:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhC;
 8002352:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8002356:	e7a0      	b.n	800229a <PWMC_SetPhaseVoltage+0x96>
      if (wZ < 0)
 8002358:	f1b1 3fff 	cmp.w	r1, #4294967295
 800235c:	db75      	blt.n	800244a <PWMC_SetPhaseVoltage+0x246>
        if (wX <= 0)
 800235e:	f1bc 0f00 	cmp.w	ip, #0
 8002362:	dd4a      	ble.n	80023fa <PWMC_SetPhaseVoltage+0x1f6>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002364:	ebbe 0e0c 	subs.w	lr, lr, ip
 8002368:	bf48      	it	mi
 800236a:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 800236e:	f04f 0202 	mov.w	r2, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002372:	bf48      	it	mi
 8002374:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 8002378:	2b00      	cmp	r3, #0
 800237a:	bfb8      	it	lt
 800237c:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 8002380:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002384:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8002388:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 800238c:	bfb8      	it	lt
 800238e:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 8002392:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002396:	eb03 416c 	add.w	r1, r3, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 800239a:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhC;
 800239e:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhA;
 80023a2:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
 80023a6:	e778      	b.n	800229a <PWMC_SetPhaseVoltage+0x96>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80023a8:	ebbe 0e0c 	subs.w	lr, lr, ip
 80023ac:	bf44      	itt	mi
 80023ae:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80023b2:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	bfb8      	it	lt
 80023ba:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 80023be:	f04f 0205 	mov.w	r2, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80023c2:	bfb8      	it	lt
 80023c4:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 80023c8:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
          wTimePhB = wTimePhC + (wX / 131072);
 80023cc:	f1bc 0100 	subs.w	r1, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80023d0:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80023d4:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80023d8:	bfb8      	it	lt
 80023da:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 80023de:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80023e2:	bfb8      	it	lt
 80023e4:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 80023e8:	eb03 4161 	add.w	r1, r3, r1, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 80023ec:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhC;
 80023f0:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhB;
 80023f4:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
 80023f8:	e74f      	b.n	800229a <PWMC_SetPhaseVoltage+0x96>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 80023fa:	ebbc 0e02 	subs.w	lr, ip, r2
 80023fe:	bf44      	itt	mi
 8002400:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002404:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002408:	2900      	cmp	r1, #0
 800240a:	bfb8      	it	lt
 800240c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002410:	f04f 0303 	mov.w	r3, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002414:	bfb8      	it	lt
 8002416:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 800241a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 800241e:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002420:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002424:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002428:	bfb8      	it	lt
 800242a:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 800242e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002432:	bfb8      	it	lt
 8002434:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002438:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 800243c:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002440:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002444:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
 8002448:	e727      	b.n	800229a <PWMC_SetPhaseVoltage+0x96>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800244a:	ebbe 0e02 	subs.w	lr, lr, r2
 800244e:	bf44      	itt	mi
 8002450:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002454:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002458:	2900      	cmp	r1, #0
 800245a:	bfbc      	itt	lt
 800245c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002460:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002464:	2b00      	cmp	r3, #0
 8002466:	bfb8      	it	lt
 8002468:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800246c:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8002470:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002474:	bfb8      	it	lt
 8002476:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 800247a:	f04f 0c04 	mov.w	ip, #4
        wTimePhB = wTimePhA + (wZ / 131072);
 800247e:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002482:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_5;
 8002486:	f880 c070 	strb.w	ip, [r0, #112]	; 0x70
        pHandle->lowDuty = (uint16_t)wTimePhC;
 800248a:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
        pHandle->midDuty = (uint16_t)wTimePhA;
 800248e:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
        pHandle->highDuty = (uint16_t)wTimePhB;
 8002492:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
 8002496:	e700      	b.n	800229a <PWMC_SetPhaseVoltage+0x96>

08002498 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002498:	6883      	ldr	r3, [r0, #8]
 800249a:	4718      	bx	r3

0800249c <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 800249c:	68c3      	ldr	r3, [r0, #12]
 800249e:	4718      	bx	r3

080024a0 <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 80024a0:	b510      	push	{r4, lr}
 80024a2:	4604      	mov	r4, r0
 80024a4:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 80024a6:	b199      	cbz	r1, 80024d0 <PWMC_CurrentReadingCalibr+0x30>
      {
        pHandle->pFctCurrReadingCalib(pHandle);
        retVal = true;
      }
    }
    else if (CRC_EXEC == action)
 80024a8:	2901      	cmp	r1, #1
 80024aa:	d002      	beq.n	80024b2 <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 80024ac:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 80024ae:	b002      	add	sp, #8
 80024b0:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 80024b2:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 80024b6:	b1cb      	cbz	r3, 80024ec <PWMC_CurrentReadingCalibr+0x4c>
        pHandle->OffCalibrWaitTimeCounter--;
 80024b8:	3b01      	subs	r3, #1
 80024ba:	b29b      	uxth	r3, r3
 80024bc:	9101      	str	r1, [sp, #4]
 80024be:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1f2      	bne.n	80024ac <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 80024c6:	6903      	ldr	r3, [r0, #16]
 80024c8:	4798      	blx	r3
          retVal = true;
 80024ca:	9901      	ldr	r1, [sp, #4]
 80024cc:	4608      	mov	r0, r1
 80024ce:	e7ee      	b.n	80024ae <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 80024d0:	f7ff ffe2 	bl	8002498 <PWMC_SwitchOffPWM>
      pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 80024d4:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 80024d8:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if (0U == pHandle->OffCalibrWaitTicks)
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d1e5      	bne.n	80024ac <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib(pHandle);
 80024e0:	4620      	mov	r0, r4
 80024e2:	6923      	ldr	r3, [r4, #16]
 80024e4:	4798      	blx	r3
        retVal = true;
 80024e6:	2001      	movs	r0, #1
}
 80024e8:	b002      	add	sp, #8
 80024ea:	bd10      	pop	{r4, pc}
        retVal = true;
 80024ec:	4608      	mov	r0, r1
}
 80024ee:	b002      	add	sp, #8
 80024f0:	bd10      	pop	{r4, pc}
 80024f2:	bf00      	nop

080024f4 <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 80024f4:	69c3      	ldr	r3, [r0, #28]
 80024f6:	4718      	bx	r3

080024f8 <RI_SetRegCommandParser>:
static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);

__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 80024f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 80024fc:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
{
 8002500:	4607      	mov	r7, r0
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002502:	2300      	movs	r3, #0
    uint8_t accessResult;
    while (rxLength > 0)
 8002504:	429a      	cmp	r2, r3
    pHandle->txLength = 0;
 8002506:	81c3      	strh	r3, [r0, #14]
    uint8_t * txData = pHandle->txBuffer;
 8002508:	68bd      	ldr	r5, [r7, #8]
    uint8_t * rxData = pHandle->rxBuffer;
 800250a:	6840      	ldr	r0, [r0, #4]
{
 800250c:	b089      	sub	sp, #36	; 0x24
    while (rxLength > 0)
 800250e:	dd6e      	ble.n	80025ee <RI_SetRegCommandParser+0xf6>
 8002510:	eb05 0b01 	add.w	fp, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 8002514:	9301      	str	r3, [sp, #4]
 8002516:	f1c5 0901 	rsb	r9, r5, #1
    {
       number_of_item++;
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 800251a:	4604      	mov	r4, r0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 800251c:	fa1f fa82 	uxth.w	sl, r2
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8002520:	f834 cb02 	ldrh.w	ip, [r4], #2

    typeID = (uint8_t)dataID & TYPE_MASK;
    motorID = 0U;
    MCI_Handle_t *pMCIN = &Mci[motorID];

    switch (typeID)
 8002524:	f00c 0138 	and.w	r1, ip, #56	; 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002528:	f1aa 0202 	sub.w	r2, sl, #2
    uint16_t regID = dataID & REG_MASK;
 800252c:	f02c 0307 	bic.w	r3, ip, #7
    switch (typeID)
 8002530:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002532:	fa1f f882 	uxth.w	r8, r2
    uint16_t regID = dataID & REG_MASK;
 8002536:	b29b      	uxth	r3, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002538:	b212      	sxth	r2, r2
    switch (typeID)
 800253a:	2920      	cmp	r1, #32
 800253c:	d812      	bhi.n	8002564 <RI_SetRegCommandParser+0x6c>
 800253e:	e8df f001 	tbb	[pc, r1]
 8002542:	11b8      	.short	0x11b8
 8002544:	11111111 	.word	0x11111111
 8002548:	11901111 	.word	0x11901111
 800254c:	11111111 	.word	0x11111111
 8002550:	117b1111 	.word	0x117b1111
 8002554:	11111111 	.word	0x11111111
 8002558:	115c1111 	.word	0x115c1111
 800255c:	11111111 	.word	0x11111111
 8002560:	1111      	.short	0x1111
 8002562:	27          	.byte	0x27
 8002563:	00          	.byte	0x00
 8002564:	2607      	movs	r6, #7
        if ((1U == number_of_item) && (0 == rxLength))
 8002566:	eb05 0309 	add.w	r3, r5, r9
 800256a:	b2db      	uxtb	r3, r3
 800256c:	2b01      	cmp	r3, #1
 800256e:	d03a      	beq.n	80025e6 <RI_SetRegCommandParser+0xee>
        if (txSyncFreeSpace !=0 )
 8002570:	455d      	cmp	r5, fp
 8002572:	f000 80ae 	beq.w	80026d2 <RI_SetRegCommandParser+0x1da>
          *txData = accessResult;
 8002576:	f805 6b01 	strb.w	r6, [r5], #1
          pHandle->txLength++;
 800257a:	89fb      	ldrh	r3, [r7, #14]
 800257c:	3301      	adds	r3, #1
 800257e:	81fb      	strh	r3, [r7, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002580:	2e00      	cmp	r6, #0
 8002582:	f040 80ab 	bne.w	80026dc <RI_SetRegCommandParser+0x1e4>
    while (rxLength > 0)
 8002586:	2a00      	cmp	r2, #0
 8002588:	f340 835a 	ble.w	8002c40 <RI_SetRegCommandParser+0x748>
 800258c:	4620      	mov	r0, r4
 800258e:	e7c4      	b.n	800251a <RI_SetRegCommandParser+0x22>
        break;
      }

      case TYPE_DATA_RAW:
      {
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
 8002590:	8846      	ldrh	r6, [r0, #2]
        /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
        *size = rawSize + 2U;
 8002592:	f106 0a02 	add.w	sl, r6, #2
 8002596:	fa1f fa8a 	uxth.w	sl, sl
        uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
        rawData++;
        rawData++;

        if (*size > dataAvailable )
 800259a:	4592      	cmp	sl, r2
 800259c:	f300 8260 	bgt.w	8002a60 <RI_SetRegCommandParser+0x568>
 80025a0:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
        rawData++;
 80025a4:	f100 0104 	add.w	r1, r0, #4
          *size = 0;
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
        }
        else
        {
          switch (regID)
 80025a8:	f000 8290 	beq.w	8002acc <RI_SetRegCommandParser+0x5d4>
 80025ac:	f200 8232 	bhi.w	8002a14 <RI_SetRegCommandParser+0x51c>
 80025b0:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 80025b4:	f000 82bc 	beq.w	8002b30 <RI_SetRegCommandParser+0x638>
 80025b8:	f240 8221 	bls.w	80029fe <RI_SetRegCommandParser+0x506>
 80025bc:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80025c0:	f040 823c 	bne.w	8002a3c <RI_SetRegCommandParser+0x544>
              uint32_t torque;
              uint16_t duration;

              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 80025c4:	8902      	ldrh	r2, [r0, #8]
 80025c6:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80025ca:	48ae      	ldr	r0, [pc, #696]	; (8002884 <RI_SetRegCommandParser+0x38c>)
 80025cc:	f7fe fd5a 	bl	8001084 <MCI_ExecTorqueRamp>
        if ((1U == number_of_item) && (0 == rxLength))
 80025d0:	eb05 0309 	add.w	r3, r5, r9
 80025d4:	b2db      	uxtb	r3, r3
      rxLength = (int16_t) (rxLength - size);
 80025d6:	eba8 020a 	sub.w	r2, r8, sl
        if ((1U == number_of_item) && (0 == rxLength))
 80025da:	2b01      	cmp	r3, #1
      rxData = rxData+size;
 80025dc:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 80025de:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80025e0:	f04f 0600 	mov.w	r6, #0
        if ((1U == number_of_item) && (0 == rxLength))
 80025e4:	d1c4      	bne.n	8002570 <RI_SetRegCommandParser+0x78>
 80025e6:	2a00      	cmp	r2, #0
 80025e8:	d1c2      	bne.n	8002570 <RI_SetRegCommandParser+0x78>
      if (MCP_CMD_OK == retVal)
 80025ea:	2e00      	cmp	r6, #0
 80025ec:	d172      	bne.n	80026d4 <RI_SetRegCommandParser+0x1dc>
      pHandle->txLength = 0;
 80025ee:	2600      	movs	r6, #0
}
 80025f0:	4630      	mov	r0, r6
      pHandle->txLength = 0;
 80025f2:	81fe      	strh	r6, [r7, #14]
}
 80025f4:	b009      	add	sp, #36	; 0x24
 80025f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80025fa:	f990 3002 	ldrsb.w	r3, [r0, #2]
 80025fe:	2b00      	cmp	r3, #0
 8002600:	f000 82c2 	beq.w	8002b88 <RI_SetRegCommandParser+0x690>
 8002604:	2a01      	cmp	r2, #1
 8002606:	f340 82c2 	ble.w	8002b8e <RI_SetRegCommandParser+0x696>
 800260a:	4621      	mov	r1, r4
 800260c:	f1c4 0c02 	rsb	ip, r4, #2
 8002610:	e002      	b.n	8002618 <RI_SetRegCommandParser+0x120>
 8002612:	429a      	cmp	r2, r3
 8002614:	f340 821e 	ble.w	8002a54 <RI_SetRegCommandParser+0x55c>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8002618:	eb0c 0301 	add.w	r3, ip, r1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800261c:	f911 6f01 	ldrsb.w	r6, [r1, #1]!
 8002620:	b29b      	uxth	r3, r3
 8002622:	2e00      	cmp	r6, #0
 8002624:	d1f5      	bne.n	8002612 <RI_SetRegCommandParser+0x11a>
      rxData = rxData+size;
 8002626:	461a      	mov	r2, r3
      rxLength = (int16_t) (rxLength - size);
 8002628:	eba8 0303 	sub.w	r3, r8, r3
      rxData = rxData+size;
 800262c:	4414      	add	r4, r2
      rxLength = (int16_t) (rxLength - size);
 800262e:	b21a      	sxth	r2, r3
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *destString = (int8_t)0;
 8002630:	2300      	movs	r3, #0
 8002632:	7083      	strb	r3, [r0, #2]
        retVal = MCP_ERROR_RO_REG;
 8002634:	2604      	movs	r6, #4
 8002636:	e796      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
        switch (regID)
 8002638:	2b98      	cmp	r3, #152	; 0x98
 800263a:	f000 821d 	beq.w	8002a78 <RI_SetRegCommandParser+0x580>
 800263e:	f240 81d7 	bls.w	80029f0 <RI_SetRegCommandParser+0x4f8>
 8002642:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 8002646:	f000 81cd 	beq.w	80029e4 <RI_SetRegCommandParser+0x4ec>
 800264a:	f240 81c5 	bls.w	80029d8 <RI_SetRegCommandParser+0x4e0>
 800264e:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 8002652:	f000 81c7 	beq.w	80029e4 <RI_SetRegCommandParser+0x4ec>
      rxLength = (int16_t) (rxLength - size);
 8002656:	f1aa 0206 	sub.w	r2, sl, #6
 800265a:	b212      	sxth	r2, r2
      rxData = rxData+size;
 800265c:	1d84      	adds	r4, r0, #6
            retVal = MCP_ERROR_UNKNOWN_REG;
 800265e:	2605      	movs	r6, #5
            break;
 8002660:	e781      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002662:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002666:	8846      	ldrh	r6, [r0, #2]
        switch (regID)
 8002668:	f000 82bd 	beq.w	8002be6 <RI_SetRegCommandParser+0x6ee>
 800266c:	d87b      	bhi.n	8002766 <RI_SetRegCommandParser+0x26e>
 800266e:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8002672:	f000 82e1 	beq.w	8002c38 <RI_SetRegCommandParser+0x740>
 8002676:	d946      	bls.n	8002706 <RI_SetRegCommandParser+0x20e>
 8002678:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800267c:	f000 82d2 	beq.w	8002c24 <RI_SetRegCommandParser+0x72c>
 8002680:	d958      	bls.n	8002734 <RI_SetRegCommandParser+0x23c>
 8002682:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8002686:	d00e      	beq.n	80026a6 <RI_SetRegCommandParser+0x1ae>
 8002688:	d930      	bls.n	80026ec <RI_SetRegCommandParser+0x1f4>
 800268a:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800268e:	d00a      	beq.n	80026a6 <RI_SetRegCommandParser+0x1ae>
 8002690:	f240 8197 	bls.w	80029c2 <RI_SetRegCommandParser+0x4ca>
 8002694:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002698:	d005      	beq.n	80026a6 <RI_SetRegCommandParser+0x1ae>
 800269a:	f240 8189 	bls.w	80029b0 <RI_SetRegCommandParser+0x4b8>
 800269e:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80026a2:	f040 8130 	bne.w	8002906 <RI_SetRegCommandParser+0x40e>
      rxLength = (int16_t) (rxLength - size);
 80026a6:	f1aa 0204 	sub.w	r2, sl, #4
 80026aa:	b212      	sxth	r2, r2
      rxData = rxData+size;
 80026ac:	1d04      	adds	r4, r0, #4
            retVal = MCP_ERROR_RO_REG;
 80026ae:	2604      	movs	r6, #4
            break;
 80026b0:	e759      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
        switch (regID)
 80026b2:	2b88      	cmp	r3, #136	; 0x88
 80026b4:	f000 81d6 	beq.w	8002a64 <RI_SetRegCommandParser+0x56c>
 80026b8:	f02c 0c87 	bic.w	ip, ip, #135	; 0x87
      rxLength = (int16_t) (rxLength - size);
 80026bc:	f1aa 0203 	sub.w	r2, sl, #3
 80026c0:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 80026c4:	b212      	sxth	r2, r2
      rxData = rxData+size;
 80026c6:	f100 0403 	add.w	r4, r0, #3
 80026ca:	f000 818f 	beq.w	80029ec <RI_SetRegCommandParser+0x4f4>
            retVal = MCP_ERROR_UNKNOWN_REG;
 80026ce:	2605      	movs	r6, #5
            break;
 80026d0:	e749      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 80026d2:	2608      	movs	r6, #8
}
 80026d4:	4630      	mov	r0, r6
 80026d6:	b009      	add	sp, #36	; 0x24
 80026d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 80026dc:	2e07      	cmp	r6, #7
 80026de:	f040 81b3 	bne.w	8002a48 <RI_SetRegCommandParser+0x550>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 80026e2:	2601      	movs	r6, #1
}
 80026e4:	4630      	mov	r0, r6
 80026e6:	b009      	add	sp, #36	; 0x24
 80026e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80026ec:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80026f0:	d167      	bne.n	80027c2 <RI_SetRegCommandParser+0x2ca>
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 80026f2:	b231      	sxth	r1, r6
      rxData = rxData+size;
 80026f4:	1d04      	adds	r4, r0, #4
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 80026f6:	4864      	ldr	r0, [pc, #400]	; (8002888 <RI_SetRegCommandParser+0x390>)
 80026f8:	f003 f9ee 	bl	8005ad8 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 80026fc:	f1aa 0204 	sub.w	r2, sl, #4
 8002700:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002702:	2600      	movs	r6, #0
            break;
 8002704:	e72f      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 8002706:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800270a:	f000 8287 	beq.w	8002c1c <RI_SetRegCommandParser+0x724>
 800270e:	d96c      	bls.n	80027ea <RI_SetRegCommandParser+0x2f2>
 8002710:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002714:	f000 827e 	beq.w	8002c14 <RI_SetRegCommandParser+0x71c>
 8002718:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 800271c:	d142      	bne.n	80027a4 <RI_SetRegCommandParser+0x2ac>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 800271e:	4b5b      	ldr	r3, [pc, #364]	; (800288c <RI_SetRegCommandParser+0x394>)
 8002720:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002722:	1d04      	adds	r4, r0, #4
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002724:	6818      	ldr	r0, [r3, #0]
 8002726:	f003 f9d7 	bl	8005ad8 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 800272a:	f1aa 0204 	sub.w	r2, sl, #4
 800272e:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002730:	2600      	movs	r6, #0
            break;
 8002732:	e718      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 8002734:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8002738:	f000 8261 	beq.w	8002bfe <RI_SetRegCommandParser+0x706>
 800273c:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8002740:	d144      	bne.n	80027cc <RI_SetRegCommandParser+0x2d4>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002742:	aa05      	add	r2, sp, #20
 8002744:	f10d 0112 	add.w	r1, sp, #18
      rxData = rxData+size;
 8002748:	1d04      	adds	r4, r0, #4
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800274a:	4851      	ldr	r0, [pc, #324]	; (8002890 <RI_SetRegCommandParser+0x398>)
 800274c:	f004 fd86 	bl	800725c <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 8002750:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8002754:	b232      	sxth	r2, r6
 8002756:	484e      	ldr	r0, [pc, #312]	; (8002890 <RI_SetRegCommandParser+0x398>)
 8002758:	f004 fd88 	bl	800726c <STO_PLL_SetObserverGains>
      rxLength = (int16_t) (rxLength - size);
 800275c:	f1aa 0204 	sub.w	r2, sl, #4
 8002760:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002762:	2600      	movs	r6, #0
 8002764:	e6ff      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 8002766:	f241 5210 	movw	r2, #5392	; 0x1510
 800276a:	4293      	cmp	r3, r2
 800276c:	f000 8243 	beq.w	8002bf6 <RI_SetRegCommandParser+0x6fe>
 8002770:	d96f      	bls.n	8002852 <RI_SetRegCommandParser+0x35a>
 8002772:	f241 6210 	movw	r2, #5648	; 0x1610
 8002776:	4293      	cmp	r3, r2
 8002778:	f000 8227 	beq.w	8002bca <RI_SetRegCommandParser+0x6d2>
 800277c:	d955      	bls.n	800282a <RI_SetRegCommandParser+0x332>
 800277e:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8002782:	4293      	cmp	r3, r2
 8002784:	f000 8217 	beq.w	8002bb6 <RI_SetRegCommandParser+0x6be>
 8002788:	f641 1210 	movw	r2, #6416	; 0x1910
 800278c:	4293      	cmp	r3, r2
 800278e:	d13d      	bne.n	800280c <RI_SetRegCommandParser+0x314>
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002790:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002792:	1d04      	adds	r4, r0, #4
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002794:	483c      	ldr	r0, [pc, #240]	; (8002888 <RI_SetRegCommandParser+0x390>)
 8002796:	f003 f9af 	bl	8005af8 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 800279a:	f1aa 0204 	sub.w	r2, sl, #4
 800279e:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80027a0:	2600      	movs	r6, #0
            break;
 80027a2:	e6e0      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 80027a4:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 80027a8:	f040 80ad 	bne.w	8002906 <RI_SetRegCommandParser+0x40e>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 80027ac:	4b39      	ldr	r3, [pc, #228]	; (8002894 <RI_SetRegCommandParser+0x39c>)
 80027ae:	b231      	sxth	r1, r6
      rxData = rxData+size;
 80027b0:	1d04      	adds	r4, r0, #4
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 80027b2:	6818      	ldr	r0, [r3, #0]
 80027b4:	f003 f992 	bl	8005adc <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 80027b8:	f1aa 0204 	sub.w	r2, sl, #4
 80027bc:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80027be:	2600      	movs	r6, #0
            break;
 80027c0:	e6d1      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 80027c2:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 80027c6:	f43f af6e 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 80027ca:	e09c      	b.n	8002906 <RI_SetRegCommandParser+0x40e>
 80027cc:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 80027d0:	f040 8099 	bne.w	8002906 <RI_SetRegCommandParser+0x40e>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 80027d4:	4b2d      	ldr	r3, [pc, #180]	; (800288c <RI_SetRegCommandParser+0x394>)
 80027d6:	b231      	sxth	r1, r6
      rxData = rxData+size;
 80027d8:	1d04      	adds	r4, r0, #4
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 80027da:	6818      	ldr	r0, [r3, #0]
 80027dc:	f003 f9ae 	bl	8005b3c <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 80027e0:	f1aa 0204 	sub.w	r2, sl, #4
 80027e4:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80027e6:	2600      	movs	r6, #0
            break;
 80027e8:	e6bd      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 80027ea:	2bd0      	cmp	r3, #208	; 0xd0
 80027ec:	f000 81d9 	beq.w	8002ba2 <RI_SetRegCommandParser+0x6aa>
 80027f0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80027f4:	f040 8096 	bne.w	8002924 <RI_SetRegCommandParser+0x42c>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 80027f8:	b231      	sxth	r1, r6
      rxData = rxData+size;
 80027fa:	1d04      	adds	r4, r0, #4
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 80027fc:	4826      	ldr	r0, [pc, #152]	; (8002898 <RI_SetRegCommandParser+0x3a0>)
 80027fe:	f003 f99d 	bl	8005b3c <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002802:	f1aa 0204 	sub.w	r2, sl, #4
 8002806:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002808:	2600      	movs	r6, #0
            break;
 800280a:	e6ac      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 800280c:	f241 6250 	movw	r2, #5712	; 0x1650
 8002810:	4293      	cmp	r3, r2
 8002812:	d178      	bne.n	8002906 <RI_SetRegCommandParser+0x40e>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002814:	4b1f      	ldr	r3, [pc, #124]	; (8002894 <RI_SetRegCommandParser+0x39c>)
 8002816:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002818:	1d04      	adds	r4, r0, #4
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 800281a:	6818      	ldr	r0, [r3, #0]
 800281c:	f003 f996 	bl	8005b4c <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002820:	f1aa 0204 	sub.w	r2, sl, #4
 8002824:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002826:	2600      	movs	r6, #0
            break;
 8002828:	e69d      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 800282a:	f241 5290 	movw	r2, #5520	; 0x1590
 800282e:	4293      	cmp	r3, r2
 8002830:	f000 81b3 	beq.w	8002b9a <RI_SetRegCommandParser+0x6a2>
 8002834:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8002838:	4293      	cmp	r3, r2
 800283a:	d12f      	bne.n	800289c <RI_SetRegCommandParser+0x3a4>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 800283c:	4b15      	ldr	r3, [pc, #84]	; (8002894 <RI_SetRegCommandParser+0x39c>)
 800283e:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002840:	1d04      	adds	r4, r0, #4
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002842:	6818      	ldr	r0, [r3, #0]
 8002844:	f003 f958 	bl	8005af8 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002848:	f1aa 0204 	sub.w	r2, sl, #4
 800284c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 800284e:	2600      	movs	r6, #0
            break;
 8002850:	e689      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 8002852:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002856:	d04f      	beq.n	80028f8 <RI_SetRegCommandParser+0x400>
 8002858:	d93d      	bls.n	80028d6 <RI_SetRegCommandParser+0x3de>
 800285a:	f241 4290 	movw	r2, #5264	; 0x1490
 800285e:	4293      	cmp	r3, r2
 8002860:	f000 81b7 	beq.w	8002bd2 <RI_SetRegCommandParser+0x6da>
 8002864:	d929      	bls.n	80028ba <RI_SetRegCommandParser+0x3c2>
 8002866:	f241 42d0 	movw	r2, #5328	; 0x14d0
 800286a:	4293      	cmp	r3, r2
 800286c:	d14b      	bne.n	8002906 <RI_SetRegCommandParser+0x40e>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 800286e:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002870:	1d04      	adds	r4, r0, #4
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002872:	4809      	ldr	r0, [pc, #36]	; (8002898 <RI_SetRegCommandParser+0x3a0>)
 8002874:	f003 f96a 	bl	8005b4c <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002878:	f1aa 0204 	sub.w	r2, sl, #4
 800287c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 800287e:	2600      	movs	r6, #0
            break;
 8002880:	e671      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 8002882:	bf00      	nop
 8002884:	2000083c 	.word	0x2000083c
 8002888:	200003e4 	.word	0x200003e4
 800288c:	20000570 	.word	0x20000570
 8002890:	200003b0 	.word	0x200003b0
 8002894:	20000574 	.word	0x20000574
 8002898:	20000134 	.word	0x20000134
 800289c:	f241 5250 	movw	r2, #5456	; 0x1550
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d130      	bne.n	8002906 <RI_SetRegCommandParser+0x40e>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 80028a4:	4bb2      	ldr	r3, [pc, #712]	; (8002b70 <RI_SetRegCommandParser+0x678>)
 80028a6:	4631      	mov	r1, r6
      rxData = rxData+size;
 80028a8:	1d04      	adds	r4, r0, #4
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 80028aa:	6818      	ldr	r0, [r3, #0]
 80028ac:	f003 f932 	bl	8005b14 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 80028b0:	f1aa 0204 	sub.w	r2, sl, #4
 80028b4:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80028b6:	2600      	movs	r6, #0
            break;
 80028b8:	e655      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 80028ba:	f241 4250 	movw	r2, #5200	; 0x1450
 80028be:	4293      	cmp	r3, r2
 80028c0:	d120      	bne.n	8002904 <RI_SetRegCommandParser+0x40c>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80028c2:	4631      	mov	r1, r6
      rxData = rxData+size;
 80028c4:	1d04      	adds	r4, r0, #4
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80028c6:	48ab      	ldr	r0, [pc, #684]	; (8002b74 <RI_SetRegCommandParser+0x67c>)
 80028c8:	f003 f916 	bl	8005af8 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 80028cc:	f1aa 0204 	sub.w	r2, sl, #4
 80028d0:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80028d2:	2600      	movs	r6, #0
            break;
 80028d4:	e647      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 80028d6:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 80028da:	f43f aee4 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 80028de:	d92d      	bls.n	800293c <RI_SetRegCommandParser+0x444>
 80028e0:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 80028e4:	f43f aedf 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 80028e8:	d912      	bls.n	8002910 <RI_SetRegCommandParser+0x418>
 80028ea:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 80028ee:	f43f aeda 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 80028f2:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 80028f6:	d106      	bne.n	8002906 <RI_SetRegCommandParser+0x40e>
      rxLength = (int16_t) (rxLength - size);
 80028f8:	f1aa 0204 	sub.w	r2, sl, #4
 80028fc:	b212      	sxth	r2, r2
      rxData = rxData+size;
 80028fe:	1d04      	adds	r4, r0, #4
  uint8_t retVal = MCP_CMD_OK;
 8002900:	2600      	movs	r6, #0
 8002902:	e630      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 8002904:	d92d      	bls.n	8002962 <RI_SetRegCommandParser+0x46a>
      rxLength = (int16_t) (rxLength - size);
 8002906:	f1aa 0204 	sub.w	r2, sl, #4
 800290a:	b212      	sxth	r2, r2
      rxData = rxData+size;
 800290c:	1d04      	adds	r4, r0, #4
 800290e:	e6de      	b.n	80026ce <RI_SetRegCommandParser+0x1d6>
 8002910:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8002914:	f43f aec7 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 8002918:	d938      	bls.n	800298c <RI_SetRegCommandParser+0x494>
 800291a:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 800291e:	f43f aec2 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 8002922:	e7f0      	b.n	8002906 <RI_SetRegCommandParser+0x40e>
 8002924:	2b90      	cmp	r3, #144	; 0x90
 8002926:	d1ee      	bne.n	8002906 <RI_SetRegCommandParser+0x40e>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002928:	b231      	sxth	r1, r6
      rxData = rxData+size;
 800292a:	1d04      	adds	r4, r0, #4
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 800292c:	4891      	ldr	r0, [pc, #580]	; (8002b74 <RI_SetRegCommandParser+0x67c>)
 800292e:	f003 f8d3 	bl	8005ad8 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002932:	f1aa 0204 	sub.w	r2, sl, #4
 8002936:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002938:	2600      	movs	r6, #0
            break;
 800293a:	e614      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 800293c:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002940:	d118      	bne.n	8002974 <RI_SetRegCommandParser+0x47c>
      rxData = rxData+size;
 8002942:	1d04      	adds	r4, r0, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002944:	488c      	ldr	r0, [pc, #560]	; (8002b78 <RI_SetRegCommandParser+0x680>)
 8002946:	f7fe fcb1 	bl	80012ac <MCI_GetIqdref>
 800294a:	9005      	str	r0, [sp, #20]
            currComp.d = (int16_t)regdata16;
 800294c:	f8ad 6016 	strh.w	r6, [sp, #22]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8002950:	9905      	ldr	r1, [sp, #20]
 8002952:	4889      	ldr	r0, [pc, #548]	; (8002b78 <RI_SetRegCommandParser+0x680>)
 8002954:	f7fe fba0 	bl	8001098 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002958:	f1aa 0204 	sub.w	r2, sl, #4
 800295c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 800295e:	2600      	movs	r6, #0
 8002960:	e601      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 8002962:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 8002966:	f43f ae9e 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 800296a:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 800296e:	f43f ae9a 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 8002972:	e7c8      	b.n	8002906 <RI_SetRegCommandParser+0x40e>
 8002974:	d3c7      	bcc.n	8002906 <RI_SetRegCommandParser+0x40e>
 8002976:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 800297a:	f43f ae94 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 800297e:	d90e      	bls.n	800299e <RI_SetRegCommandParser+0x4a6>
 8002980:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8002984:	f5bc 6f29 	cmp.w	ip, #2704	; 0xa90
 8002988:	d1bd      	bne.n	8002906 <RI_SetRegCommandParser+0x40e>
 800298a:	e68c      	b.n	80026a6 <RI_SetRegCommandParser+0x1ae>
 800298c:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8002990:	f43f ae89 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 8002994:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8002998:	f43f ae85 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 800299c:	e7b3      	b.n	8002906 <RI_SetRegCommandParser+0x40e>
 800299e:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80029a2:	f43f ae80 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 80029a6:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80029aa:	f43f ae7c 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 80029ae:	e7aa      	b.n	8002906 <RI_SetRegCommandParser+0x40e>
 80029b0:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80029b4:	f43f ae77 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 80029b8:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 80029bc:	f43f ae73 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 80029c0:	e7a1      	b.n	8002906 <RI_SetRegCommandParser+0x40e>
 80029c2:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 80029c6:	f43f ae6e 	beq.w	80026a6 <RI_SetRegCommandParser+0x1ae>
 80029ca:	d39c      	bcc.n	8002906 <RI_SetRegCommandParser+0x40e>
 80029cc:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 80029d0:	f5bc 6ff2 	cmp.w	ip, #1936	; 0x790
 80029d4:	d197      	bne.n	8002906 <RI_SetRegCommandParser+0x40e>
 80029d6:	e666      	b.n	80026a6 <RI_SetRegCommandParser+0x1ae>
 80029d8:	2bd8      	cmp	r3, #216	; 0xd8
 80029da:	d003      	beq.n	80029e4 <RI_SetRegCommandParser+0x4ec>
 80029dc:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 80029e0:	f47f ae39 	bne.w	8002656 <RI_SetRegCommandParser+0x15e>
      rxLength = (int16_t) (rxLength - size);
 80029e4:	f1aa 0206 	sub.w	r2, sl, #6
 80029e8:	b212      	sxth	r2, r2
      rxData = rxData+size;
 80029ea:	1d84      	adds	r4, r0, #6
            retVal = MCP_ERROR_RO_REG;
 80029ec:	2604      	movs	r6, #4
 80029ee:	e5ba      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 80029f0:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 80029f4:	f1bc 0f18 	cmp.w	ip, #24
 80029f8:	f47f ae2d 	bne.w	8002656 <RI_SetRegCommandParser+0x15e>
 80029fc:	e7f2      	b.n	80029e4 <RI_SetRegCommandParser+0x4ec>
 80029fe:	2ba8      	cmp	r3, #168	; 0xa8
 8002a00:	d002      	beq.n	8002a08 <RI_SetRegCommandParser+0x510>
 8002a02:	d916      	bls.n	8002a32 <RI_SetRegCommandParser+0x53a>
 8002a04:	2be8      	cmp	r3, #232	; 0xe8
 8002a06:	d119      	bne.n	8002a3c <RI_SetRegCommandParser+0x544>
      rxLength = (int16_t) (rxLength - size);
 8002a08:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 8002a0c:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 8002a0e:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_RO_REG;
 8002a10:	2604      	movs	r6, #4
 8002a12:	e5a8      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 8002a14:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8002a18:	d04d      	beq.n	8002ab6 <RI_SetRegCommandParser+0x5be>
 8002a1a:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 8002a1e:	d10d      	bne.n	8002a3c <RI_SetRegCommandParser+0x544>
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002a20:	4856      	ldr	r0, [pc, #344]	; (8002b7c <RI_SetRegCommandParser+0x684>)
 8002a22:	f002 ff59 	bl	80058d8 <MCPA_cfgLog>
      rxLength = (int16_t) (rxLength - size);
 8002a26:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 8002a2a:	4454      	add	r4, sl
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8002a2c:	4606      	mov	r6, r0
      rxLength = (int16_t) (rxLength - size);
 8002a2e:	b212      	sxth	r2, r2
              break;
 8002a30:	e599      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 8002a32:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8002a36:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8002a3a:	d0e5      	beq.n	8002a08 <RI_SetRegCommandParser+0x510>
      rxLength = (int16_t) (rxLength - size);
 8002a3c:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 8002a40:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 8002a42:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_UNKNOWN_REG;
 8002a44:	2605      	movs	r6, #5
              break;
 8002a46:	e58e      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002a48:	2e0a      	cmp	r6, #10
 8002a4a:	f43f ae4a 	beq.w	80026e2 <RI_SetRegCommandParser+0x1ea>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002a4e:	2301      	movs	r3, #1
 8002a50:	9301      	str	r3, [sp, #4]
 8002a52:	e598      	b.n	8002586 <RI_SetRegCommandParser+0x8e>
      rxLength = (int16_t) (rxLength - size);
 8002a54:	eba8 0203 	sub.w	r2, r8, r3
      rxData = rxData+size;
 8002a58:	441c      	add	r4, r3
      rxLength = (int16_t) (rxLength - size);
 8002a5a:	b212      	sxth	r2, r2
        retVal = MCP_ERROR_RO_REG;
 8002a5c:	2604      	movs	r6, #4
 8002a5e:	e582      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 8002a60:	260a      	movs	r6, #10
 8002a62:	e580      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
            uint8_t regdata8 = *data;
 8002a64:	7886      	ldrb	r6, [r0, #2]
            if ((uint8_t)STC_TORQUE_MODE == regdata8)
 8002a66:	b1ce      	cbz	r6, 8002a9c <RI_SetRegCommandParser+0x5a4>
            if ((uint8_t)STC_SPEED_MODE == regdata8)
 8002a68:	2e01      	cmp	r6, #1
 8002a6a:	d072      	beq.n	8002b52 <RI_SetRegCommandParser+0x65a>
      rxLength = (int16_t) (rxLength - size);
 8002a6c:	f1aa 0203 	sub.w	r2, sl, #3
 8002a70:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002a72:	1cc4      	adds	r4, r0, #3
  uint8_t retVal = MCP_CMD_OK;
 8002a74:	2600      	movs	r6, #0
 8002a76:	e576      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002a78:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8002a7c:	4a40      	ldr	r2, [pc, #256]	; (8002b80 <RI_SetRegCommandParser+0x688>)
 8002a7e:	fb82 2103 	smull	r2, r1, r2, r3
 8002a82:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002a86:	2200      	movs	r2, #0
      rxData = rxData+size;
 8002a88:	1d84      	adds	r4, r0, #6
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 8002a8a:	b209      	sxth	r1, r1
 8002a8c:	483a      	ldr	r0, [pc, #232]	; (8002b78 <RI_SetRegCommandParser+0x680>)
 8002a8e:	f7fe faef 	bl	8001070 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002a92:	f1aa 0206 	sub.w	r2, sl, #6
 8002a96:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002a98:	2600      	movs	r6, #0
            break;
 8002a9a:	e564      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
      rxData = rxData+size;
 8002a9c:	1cc4      	adds	r4, r0, #3
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 8002a9e:	4836      	ldr	r0, [pc, #216]	; (8002b78 <RI_SetRegCommandParser+0x680>)
 8002aa0:	f7fe fc2e 	bl	8001300 <MCI_GetTeref>
 8002aa4:	4632      	mov	r2, r6
 8002aa6:	4601      	mov	r1, r0
 8002aa8:	4833      	ldr	r0, [pc, #204]	; (8002b78 <RI_SetRegCommandParser+0x680>)
 8002aaa:	f7fe faeb 	bl	8001084 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 8002aae:	f1aa 0203 	sub.w	r2, sl, #3
 8002ab2:	b212      	sxth	r2, r2
 8002ab4:	e557      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002ab6:	6841      	ldr	r1, [r0, #4]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002ab8:	482f      	ldr	r0, [pc, #188]	; (8002b78 <RI_SetRegCommandParser+0x680>)
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 8002aba:	9105      	str	r1, [sp, #20]
              MCI_SetCurrentReferences(pMCIN, currComp);
 8002abc:	f7fe faec 	bl	8001098 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002ac0:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 8002ac4:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 8002ac6:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002ac8:	2600      	movs	r6, #0
 8002aca:	e54c      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002acc:	f016 0307 	ands.w	r3, r6, #7
 8002ad0:	d128      	bne.n	8002b24 <RI_SetRegCommandParser+0x62c>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 8002ad2:	b2f6      	uxtb	r6, r6
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8002ad4:	2e2f      	cmp	r6, #47	; 0x2f
 8002ad6:	d825      	bhi.n	8002b24 <RI_SetRegCommandParser+0x62c>
                for (i = 0; i <nbrOfPhase; i++)
 8002ad8:	08f2      	lsrs	r2, r6, #3
 8002ada:	d021      	beq.n	8002b20 <RI_SetRegCommandParser+0x628>
 8002adc:	e9cd 8402 	strd	r8, r4, [sp, #8]
 8002ae0:	4606      	mov	r6, r0
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	4690      	mov	r8, r2
 8002ae6:	461c      	mov	r4, r3
                  revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8002ae8:	f9b6 c004 	ldrsh.w	ip, [r6, #4]
 8002aec:	4b24      	ldr	r3, [pc, #144]	; (8002b80 <RI_SetRegCommandParser+0x688>)
 8002aee:	fb83 300c 	smull	r3, r0, r3, ip
 8002af2:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8002af6:	f8ad 0016 	strh.w	r0, [sp, #22]
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002afa:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 8002afe:	f8ad 0018 	strh.w	r0, [sp, #24]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8002b02:	8970      	ldrh	r0, [r6, #10]
 8002b04:	f8ad 0014 	strh.w	r0, [sp, #20]
                for (i = 0; i <nbrOfPhase; i++)
 8002b08:	3401      	adds	r4, #1
                  (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 8002b0a:	481e      	ldr	r0, [pc, #120]	; (8002b84 <RI_SetRegCommandParser+0x68c>)
 8002b0c:	aa05      	add	r2, sp, #20
 8002b0e:	f003 ffc9 	bl	8006aa4 <RUC_SetPhase>
                for (i = 0; i <nbrOfPhase; i++)
 8002b12:	b2e1      	uxtb	r1, r4
 8002b14:	4541      	cmp	r1, r8
 8002b16:	f106 0608 	add.w	r6, r6, #8
 8002b1a:	d3e5      	bcc.n	8002ae8 <RI_SetRegCommandParser+0x5f0>
 8002b1c:	e9dd 8402 	ldrd	r8, r4, [sp, #8]
  uint8_t retVal = MCP_CMD_OK;
 8002b20:	2600      	movs	r6, #0
 8002b22:	e000      	b.n	8002b26 <RI_SetRegCommandParser+0x62e>
                retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8002b24:	260a      	movs	r6, #10
      rxLength = (int16_t) (rxLength - size);
 8002b26:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 8002b2a:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 8002b2c:	b212      	sxth	r2, r2
 8002b2e:	e51a      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 8002b30:	6843      	ldr	r3, [r0, #4]
 8002b32:	4913      	ldr	r1, [pc, #76]	; (8002b80 <RI_SetRegCommandParser+0x688>)
 8002b34:	8902      	ldrh	r2, [r0, #8]
 8002b36:	fb81 0103 	smull	r0, r1, r1, r3
 8002b3a:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 8002b3e:	480e      	ldr	r0, [pc, #56]	; (8002b78 <RI_SetRegCommandParser+0x680>)
 8002b40:	b209      	sxth	r1, r1
 8002b42:	f7fe fa95 	bl	8001070 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002b46:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 8002b4a:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 8002b4c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b4e:	2600      	movs	r6, #0
              break;
 8002b50:	e509      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
      rxData = rxData+size;
 8002b52:	1cc4      	adds	r4, r0, #3
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8002b54:	4808      	ldr	r0, [pc, #32]	; (8002b78 <RI_SetRegCommandParser+0x680>)
 8002b56:	f7fe fb7b 	bl	8001250 <MCI_GetMecSpeedRefUnit>
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	4601      	mov	r1, r0
 8002b5e:	4806      	ldr	r0, [pc, #24]	; (8002b78 <RI_SetRegCommandParser+0x680>)
 8002b60:	f7fe fa86 	bl	8001070 <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8002b64:	f1aa 0203 	sub.w	r2, sl, #3
 8002b68:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002b6a:	2600      	movs	r6, #0
 8002b6c:	e4fb      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
 8002b6e:	bf00      	nop
 8002b70:	20000570 	.word	0x20000570
 8002b74:	20000134 	.word	0x20000134
 8002b78:	2000083c 	.word	0x2000083c
 8002b7c:	200005b0 	.word	0x200005b0
 8002b80:	2aaaaaab 	.word	0x2aaaaaab
 8002b84:	20000324 	.word	0x20000324
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002b88:	2201      	movs	r2, #1
  *size= 1U ; /* /0 is the min String size */
 8002b8a:	4613      	mov	r3, r2
 8002b8c:	e54c      	b.n	8002628 <RI_SetRegCommandParser+0x130>
      rxLength = (int16_t) (rxLength - size);
 8002b8e:	f1aa 0203 	sub.w	r2, sl, #3
 8002b92:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002b94:	1cc4      	adds	r4, r0, #3
        retVal = MCP_ERROR_RO_REG;
 8002b96:	2604      	movs	r6, #4
 8002b98:	e4e5      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 8002b9a:	4b2a      	ldr	r3, [pc, #168]	; (8002c44 <RI_SetRegCommandParser+0x74c>)
 8002b9c:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002b9e:	1d04      	adds	r4, r0, #4
 8002ba0:	e63b      	b.n	800281a <RI_SetRegCommandParser+0x322>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002ba2:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002ba4:	1d04      	adds	r4, r0, #4
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 8002ba6:	4828      	ldr	r0, [pc, #160]	; (8002c48 <RI_SetRegCommandParser+0x750>)
 8002ba8:	f002 ff98 	bl	8005adc <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002bac:	f1aa 0204 	sub.w	r2, sl, #4
 8002bb0:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002bb2:	2600      	movs	r6, #0
            break;
 8002bb4:	e4d7      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002bb6:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002bb8:	1d04      	adds	r4, r0, #4
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002bba:	4824      	ldr	r0, [pc, #144]	; (8002c4c <RI_SetRegCommandParser+0x754>)
 8002bbc:	f002 ffaa 	bl	8005b14 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002bc0:	f1aa 0204 	sub.w	r2, sl, #4
 8002bc4:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002bc6:	2600      	movs	r6, #0
            break;
 8002bc8:	e4cd      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002bca:	4b21      	ldr	r3, [pc, #132]	; (8002c50 <RI_SetRegCommandParser+0x758>)
 8002bcc:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002bce:	1d04      	adds	r4, r0, #4
 8002bd0:	e66b      	b.n	80028aa <RI_SetRegCommandParser+0x3b2>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002bd2:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002bd4:	1d04      	adds	r4, r0, #4
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002bd6:	481c      	ldr	r0, [pc, #112]	; (8002c48 <RI_SetRegCommandParser+0x750>)
 8002bd8:	f002 ff9c 	bl	8005b14 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002bdc:	f1aa 0204 	sub.w	r2, sl, #4
 8002be0:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002be2:	2600      	movs	r6, #0
            break;
 8002be4:	e4bf      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
      rxData = rxData+size;
 8002be6:	1d04      	adds	r4, r0, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002be8:	481a      	ldr	r0, [pc, #104]	; (8002c54 <RI_SetRegCommandParser+0x75c>)
 8002bea:	f7fe fb5f 	bl	80012ac <MCI_GetIqdref>
 8002bee:	9005      	str	r0, [sp, #20]
            currComp.q = (int16_t)regdata16;
 8002bf0:	f8ad 6014 	strh.w	r6, [sp, #20]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8002bf4:	e6ac      	b.n	8002950 <RI_SetRegCommandParser+0x458>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8002bf6:	4b13      	ldr	r3, [pc, #76]	; (8002c44 <RI_SetRegCommandParser+0x74c>)
 8002bf8:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002bfa:	1d04      	adds	r4, r0, #4
 8002bfc:	e621      	b.n	8002842 <RI_SetRegCommandParser+0x34a>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002bfe:	aa05      	add	r2, sp, #20
 8002c00:	f10d 0112 	add.w	r1, sp, #18
      rxData = rxData+size;
 8002c04:	1d04      	adds	r4, r0, #4
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002c06:	4814      	ldr	r0, [pc, #80]	; (8002c58 <RI_SetRegCommandParser+0x760>)
 8002c08:	f004 fb28 	bl	800725c <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 8002c0c:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8002c10:	b231      	sxth	r1, r6
 8002c12:	e5a0      	b.n	8002756 <RI_SetRegCommandParser+0x25e>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8002c14:	4b0e      	ldr	r3, [pc, #56]	; (8002c50 <RI_SetRegCommandParser+0x758>)
 8002c16:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002c18:	1d04      	adds	r4, r0, #4
 8002c1a:	e5de      	b.n	80027da <RI_SetRegCommandParser+0x2e2>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8002c1c:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <RI_SetRegCommandParser+0x758>)
 8002c1e:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002c20:	1d04      	adds	r4, r0, #4
 8002c22:	e57f      	b.n	8002724 <RI_SetRegCommandParser+0x22c>
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002c24:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002c26:	1d04      	adds	r4, r0, #4
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002c28:	4808      	ldr	r0, [pc, #32]	; (8002c4c <RI_SetRegCommandParser+0x754>)
 8002c2a:	f002 ff57 	bl	8005adc <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002c2e:	f1aa 0204 	sub.w	r2, sl, #4
 8002c32:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002c34:	2600      	movs	r6, #0
            break;
 8002c36:	e496      	b.n	8002566 <RI_SetRegCommandParser+0x6e>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002c38:	4b02      	ldr	r3, [pc, #8]	; (8002c44 <RI_SetRegCommandParser+0x74c>)
 8002c3a:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002c3c:	1d04      	adds	r4, r0, #4
 8002c3e:	e5b8      	b.n	80027b2 <RI_SetRegCommandParser+0x2ba>
 8002c40:	9e01      	ldr	r6, [sp, #4]
 8002c42:	e4d2      	b.n	80025ea <RI_SetRegCommandParser+0xf2>
 8002c44:	20000570 	.word	0x20000570
 8002c48:	20000134 	.word	0x20000134
 8002c4c:	200003e4 	.word	0x200003e4
 8002c50:	20000574 	.word	0x20000574
 8002c54:	2000083c 	.word	0x2000083c
 8002c58:	200003b0 	.word	0x200003b0

08002c5c <RI_GetRegCommandParser>:
{
 8002c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 8002c60:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t * rxData = pHandle->rxBuffer;
 8002c64:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8002c68:	6886      	ldr	r6, [r0, #8]
    pHandle->txLength = 0;
 8002c6a:	2300      	movs	r3, #0
{
 8002c6c:	b099      	sub	sp, #100	; 0x64
    pHandle->txLength = 0;
 8002c6e:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 8002c70:	f1b8 0f00 	cmp.w	r8, #0
 8002c74:	f000 8337 	beq.w	80032e6 <RI_GetRegCommandParser+0x68a>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8002c78:	f8df a364 	ldr.w	sl, [pc, #868]	; 8002fe0 <RI_GetRegCommandParser+0x384>
 8002c7c:	4607      	mov	r7, r0
 8002c7e:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 8002c80:	464d      	mov	r5, r9
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002c82:	f835 3b02 	ldrh.w	r3, [r5], #2
    switch (typeID)
 8002c86:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8002c8a:	3a08      	subs	r2, #8
    uint16_t regID = dataID & REG_MASK;
 8002c8c:	f023 0307 	bic.w	r3, r3, #7
 8002c90:	b29b      	uxth	r3, r3
    switch (typeID)
 8002c92:	2a20      	cmp	r2, #32
 8002c94:	d812      	bhi.n	8002cbc <RI_GetRegCommandParser+0x60>
 8002c96:	e8df f002 	tbb	[pc, r2]
 8002c9a:	118f      	.short	0x118f
 8002c9c:	11111111 	.word	0x11111111
 8002ca0:	11651111 	.word	0x11651111
 8002ca4:	11111111 	.word	0x11111111
 8002ca8:	119c1111 	.word	0x119c1111
 8002cac:	11111111 	.word	0x11111111
 8002cb0:	11301111 	.word	0x11301111
 8002cb4:	11111111 	.word	0x11111111
 8002cb8:	1111      	.short	0x1111
 8002cba:	15          	.byte	0x15
 8002cbb:	00          	.byte	0x00
 8002cbc:	2007      	movs	r0, #7
}
 8002cbe:	b019      	add	sp, #100	; 0x64
 8002cc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 8002cc4:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002cc8:	f106 0202 	add.w	r2, r6, #2
        switch (regID)
 8002ccc:	f000 82c8 	beq.w	8003260 <RI_GetRegCommandParser+0x604>
 8002cd0:	f200 80ca 	bhi.w	8002e68 <RI_GetRegCommandParser+0x20c>
 8002cd4:	2ba8      	cmp	r3, #168	; 0xa8
 8002cd6:	f000 8274 	beq.w	80031c2 <RI_GetRegCommandParser+0x566>
 8002cda:	f200 80bb 	bhi.w	8002e54 <RI_GetRegCommandParser+0x1f8>
 8002cde:	2b28      	cmp	r3, #40	; 0x28
 8002ce0:	f000 82ae 	beq.w	8003240 <RI_GetRegCommandParser+0x5e4>
 8002ce4:	2b68      	cmp	r3, #104	; 0x68
 8002ce6:	d172      	bne.n	8002dce <RI_GetRegCommandParser+0x172>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002ce8:	233c      	movs	r3, #60	; 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8002cea:	2c3d      	cmp	r4, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8002cec:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002cee:	f200 82db 	bhi.w	80032a8 <RI_GetRegCommandParser+0x64c>
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002cf2:	2008      	movs	r0, #8
}
 8002cf4:	b019      	add	sp, #100	; 0x64
 8002cf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8002cfa:	2ba0      	cmp	r3, #160	; 0xa0
 8002cfc:	f000 8218 	beq.w	8003130 <RI_GetRegCommandParser+0x4d4>
 8002d00:	f200 808a 	bhi.w	8002e18 <RI_GetRegCommandParser+0x1bc>
 8002d04:	2b20      	cmp	r3, #32
 8002d06:	f000 822b 	beq.w	8003160 <RI_GetRegCommandParser+0x504>
 8002d0a:	2b60      	cmp	r3, #96	; 0x60
 8002d0c:	d15f      	bne.n	8002dce <RI_GetRegCommandParser+0x172>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002d0e:	4baf      	ldr	r3, [pc, #700]	; (8002fcc <RI_GetRegCommandParser+0x370>)
 8002d10:	f993 1000 	ldrsb.w	r1, [r3]
 8002d14:	2900      	cmp	r1, #0
 8002d16:	f000 8251 	beq.w	80031bc <RI_GetRegCommandParser+0x560>
 8002d1a:	2c01      	cmp	r4, #1
 8002d1c:	f340 8206 	ble.w	800312c <RI_GetRegCommandParser+0x4d0>
 8002d20:	469c      	mov	ip, r3
 8002d22:	4630      	mov	r0, r6
 8002d24:	f1c6 0201 	rsb	r2, r6, #1
 8002d28:	e002      	b.n	8002d30 <RI_GetRegCommandParser+0xd4>
 8002d2a:	429c      	cmp	r4, r3
 8002d2c:	f340 81fe 	ble.w	800312c <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 8002d30:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002d34:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8002d38:	1883      	adds	r3, r0, r2
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	2900      	cmp	r1, #0
 8002d3e:	d1f4      	bne.n	8002d2a <RI_GetRegCommandParser+0xce>
        txData = txData+size;
 8002d40:	4619      	mov	r1, r3
    *destString = (int8_t)0;
 8002d42:	2200      	movs	r2, #0
        if (freeSpace >= 2U)
 8002d44:	b2a4      	uxth	r4, r4
    *destString = (int8_t)0;
 8002d46:	7032      	strb	r2, [r6, #0]
        pHandle->txLength += size;
 8002d48:	89f8      	ldrh	r0, [r7, #14]
    while (rxLength > 0U)
 8002d4a:	eb09 0208 	add.w	r2, r9, r8
        pHandle->txLength += size;
 8002d4e:	4418      	add	r0, r3
        freeSpaceS16 = freeSpaceS16-size;
 8002d50:	1ae4      	subs	r4, r4, r3
    while (rxLength > 0U)
 8002d52:	b292      	uxth	r2, r2
 8002d54:	b2ab      	uxth	r3, r5
 8002d56:	4293      	cmp	r3, r2
        pHandle->txLength += size;
 8002d58:	81f8      	strh	r0, [r7, #14]
        txData = txData+size;
 8002d5a:	440e      	add	r6, r1
        freeSpaceS16 = freeSpaceS16-size;
 8002d5c:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 8002d5e:	d190      	bne.n	8002c82 <RI_GetRegCommandParser+0x26>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 8002d60:	2000      	movs	r0, #0
 8002d62:	e7ac      	b.n	8002cbe <RI_GetRegCommandParser+0x62>
        if (freeSpace >= 2U)
 8002d64:	b2a4      	uxth	r4, r4
 8002d66:	2c01      	cmp	r4, #1
 8002d68:	d9c3      	bls.n	8002cf2 <RI_GetRegCommandParser+0x96>
          switch (regID)
 8002d6a:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002d6e:	f000 82d3 	beq.w	8003318 <RI_GetRegCommandParser+0x6bc>
 8002d72:	f200 80e8 	bhi.w	8002f46 <RI_GetRegCommandParser+0x2ea>
 8002d76:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002d7a:	f000 8333 	beq.w	80033e4 <RI_GetRegCommandParser+0x788>
 8002d7e:	f240 80c3 	bls.w	8002f08 <RI_GetRegCommandParser+0x2ac>
 8002d82:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002d86:	f000 8323 	beq.w	80033d0 <RI_GetRegCommandParser+0x774>
 8002d8a:	f240 80a7 	bls.w	8002edc <RI_GetRegCommandParser+0x280>
 8002d8e:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002d92:	f000 8358 	beq.w	8003446 <RI_GetRegCommandParser+0x7ea>
 8002d96:	f240 8090 	bls.w	8002eba <RI_GetRegCommandParser+0x25e>
 8002d9a:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002d9e:	f000 8348 	beq.w	8003432 <RI_GetRegCommandParser+0x7d6>
 8002da2:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002da6:	d112      	bne.n	8002dce <RI_GetRegCommandParser+0x172>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002da8:	4650      	mov	r0, sl
 8002daa:	f7fe fa7f 	bl	80012ac <MCI_GetIqdref>
              break;
 8002dae:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002db0:	900e      	str	r0, [sp, #56]	; 0x38
          *size = 2;
 8002db2:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 8002db4:	8030      	strh	r0, [r6, #0]
              break;
 8002db6:	e7c7      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
        if (freeSpace > 0U)
 8002db8:	2c00      	cmp	r4, #0
 8002dba:	d09a      	beq.n	8002cf2 <RI_GetRegCommandParser+0x96>
          switch (regID)
 8002dbc:	2b88      	cmp	r3, #136	; 0x88
 8002dbe:	f000 81f5 	beq.w	80031ac <RI_GetRegCommandParser+0x550>
 8002dc2:	2bc8      	cmp	r3, #200	; 0xc8
 8002dc4:	f000 81ea 	beq.w	800319c <RI_GetRegCommandParser+0x540>
 8002dc8:	2b48      	cmp	r3, #72	; 0x48
 8002dca:	f000 81df 	beq.w	800318c <RI_GetRegCommandParser+0x530>
 8002dce:	2005      	movs	r0, #5
  return (retVal);
 8002dd0:	e775      	b.n	8002cbe <RI_GetRegCommandParser+0x62>
        if (freeSpace >= 4U)
 8002dd2:	b2a4      	uxth	r4, r4
 8002dd4:	2c03      	cmp	r4, #3
 8002dd6:	d98c      	bls.n	8002cf2 <RI_GetRegCommandParser+0x96>
          switch (regID)
 8002dd8:	2b98      	cmp	r3, #152	; 0x98
 8002dda:	f000 8253 	beq.w	8003284 <RI_GetRegCommandParser+0x628>
 8002dde:	d90c      	bls.n	8002dfa <RI_GetRegCommandParser+0x19e>
 8002de0:	2bd8      	cmp	r3, #216	; 0xd8
 8002de2:	f000 8253 	beq.w	800328c <RI_GetRegCommandParser+0x630>
 8002de6:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8002dea:	d1f0      	bne.n	8002dce <RI_GetRegCommandParser+0x172>
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 8002dec:	4878      	ldr	r0, [pc, #480]	; (8002fd0 <RI_GetRegCommandParser+0x374>)
 8002dee:	f004 fa4f 	bl	8007290 <STO_PLL_GetObservedBemfLevel>
 8002df2:	2104      	movs	r1, #4
 8002df4:	6030      	str	r0, [r6, #0]
          *size = 4;
 8002df6:	460b      	mov	r3, r1
 8002df8:	e7a6      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8002dfa:	2b18      	cmp	r3, #24
 8002dfc:	f000 824d 	beq.w	800329a <RI_GetRegCommandParser+0x63e>
 8002e00:	2b58      	cmp	r3, #88	; 0x58
 8002e02:	d1e4      	bne.n	8002dce <RI_GetRegCommandParser+0x172>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002e04:	4650      	mov	r0, sl
 8002e06:	f7fe fa1b 	bl	8001240 <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8002e0a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002e0e:	0040      	lsls	r0, r0, #1
 8002e10:	2104      	movs	r1, #4
 8002e12:	6030      	str	r0, [r6, #0]
          *size = 4;
 8002e14:	460b      	mov	r3, r1
 8002e16:	e797      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8002e18:	2be0      	cmp	r3, #224	; 0xe0
 8002e1a:	d1d8      	bne.n	8002dce <RI_GetRegCommandParser+0x172>
        retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8002e1c:	4b6d      	ldr	r3, [pc, #436]	; (8002fd4 <RI_GetRegCommandParser+0x378>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002e20:	f993 1024 	ldrsb.w	r1, [r3, #36]	; 0x24
 8002e24:	2900      	cmp	r1, #0
 8002e26:	f000 81c9 	beq.w	80031bc <RI_GetRegCommandParser+0x560>
 8002e2a:	2c01      	cmp	r4, #1
 8002e2c:	f340 817e 	ble.w	800312c <RI_GetRegCommandParser+0x4d0>
 8002e30:	f103 0c24 	add.w	ip, r3, #36	; 0x24
 8002e34:	4630      	mov	r0, r6
 8002e36:	f1c6 0201 	rsb	r2, r6, #1
 8002e3a:	e002      	b.n	8002e42 <RI_GetRegCommandParser+0x1e6>
 8002e3c:	42a3      	cmp	r3, r4
 8002e3e:	f280 8175 	bge.w	800312c <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 8002e42:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002e46:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8002e4a:	1883      	adds	r3, r0, r2
 8002e4c:	b29b      	uxth	r3, r3
 8002e4e:	2900      	cmp	r1, #0
 8002e50:	d1f4      	bne.n	8002e3c <RI_GetRegCommandParser+0x1e0>
 8002e52:	e775      	b.n	8002d40 <RI_GetRegCommandParser+0xe4>
 8002e54:	2be8      	cmp	r3, #232	; 0xe8
 8002e56:	d1ba      	bne.n	8002dce <RI_GetRegCommandParser+0x172>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002e58:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 8002e5a:	2c0f      	cmp	r4, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8002e5c:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8002e5e:	f67f af48 	bls.w	8002cf2 <RI_GetRegCommandParser+0x96>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 8002e62:	4b5d      	ldr	r3, [pc, #372]	; (8002fd8 <RI_GetRegCommandParser+0x37c>)
        if (freeSpace >= 2U)
 8002e64:	b2a4      	uxth	r4, r4
 8002e66:	e1b3      	b.n	80031d0 <RI_GetRegCommandParser+0x574>
 8002e68:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8002e6c:	f000 81c0 	beq.w	80031f0 <RI_GetRegCommandParser+0x594>
 8002e70:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8002e74:	d10e      	bne.n	8002e94 <RI_GetRegCommandParser+0x238>
            *rawSize = 4;
 8002e76:	2304      	movs	r3, #4
 8002e78:	8033      	strh	r3, [r6, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 8002e7a:	4650      	mov	r0, sl
 8002e7c:	f7fe fa16 	bl	80012ac <MCI_GetIqdref>
 8002e80:	8070      	strh	r0, [r6, #2]
 8002e82:	9004      	str	r0, [sp, #16]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002e84:	4650      	mov	r0, sl
 8002e86:	f7fe fa11 	bl	80012ac <MCI_GetIqdref>
        if (freeSpace >= 2U)
 8002e8a:	b2a4      	uxth	r4, r4
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002e8c:	9003      	str	r0, [sp, #12]
 8002e8e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002e92:	e00c      	b.n	8002eae <RI_GetRegCommandParser+0x252>
 8002e94:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8002e98:	d199      	bne.n	8002dce <RI_GetRegCommandParser+0x172>
            *rawSize = 4;
 8002e9a:	2304      	movs	r3, #4
 8002e9c:	8033      	strh	r3, [r6, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 8002e9e:	4650      	mov	r0, sl
 8002ea0:	f7fe f9c4 	bl	800122c <MCI_GetLastRampFinalTorque>
 8002ea4:	8070      	strh	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002ea6:	4650      	mov	r0, sl
        if (freeSpace >= 2U)
 8002ea8:	b2a4      	uxth	r4, r4
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 8002eaa:	f7fe f9c3 	bl	8001234 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 8002eae:	8833      	ldrh	r3, [r6, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 8002eb0:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 8002eb2:	3302      	adds	r3, #2
 8002eb4:	b29b      	uxth	r3, r3
        txData = txData+size;
 8002eb6:	4619      	mov	r1, r3
 8002eb8:	e746      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8002eba:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002ebe:	f000 82a0 	beq.w	8003402 <RI_GetRegCommandParser+0x7a6>
 8002ec2:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002ec6:	d182      	bne.n	8002dce <RI_GetRegCommandParser+0x172>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8002ec8:	4650      	mov	r0, sl
 8002eca:	f7fe f9d3 	bl	8001274 <MCI_GetIalphabeta>
              break;
 8002ece:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 8002ed0:	9011      	str	r0, [sp, #68]	; 0x44
 8002ed2:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002ed6:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8002ed8:	460b      	mov	r3, r1
              break;
 8002eda:	e735      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8002edc:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8002ee0:	f000 8287 	beq.w	80033f2 <RI_GetRegCommandParser+0x796>
 8002ee4:	f240 80c6 	bls.w	8003074 <RI_GetRegCommandParser+0x418>
 8002ee8:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8002eec:	f000 8299 	beq.w	8003422 <RI_GetRegCommandParser+0x7c6>
 8002ef0:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8002ef4:	f47f af6b 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8002ef8:	4650      	mov	r0, sl
 8002efa:	f7fe f9ad 	bl	8001258 <MCI_GetIab>
              break;
 8002efe:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIab(pMCIN).a;
 8002f00:	9014      	str	r0, [sp, #80]	; 0x50
          *size = 2;
 8002f02:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIab(pMCIN).a;
 8002f04:	8030      	strh	r0, [r6, #0]
              break;
 8002f06:	e71f      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8002f08:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002f0c:	f000 8281 	beq.w	8003412 <RI_GetRegCommandParser+0x7b6>
 8002f10:	f240 80de 	bls.w	80030d0 <RI_GetRegCommandParser+0x474>
 8002f14:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002f18:	f000 82d0 	beq.w	80034bc <RI_GetRegCommandParser+0x860>
 8002f1c:	d976      	bls.n	800300c <RI_GetRegCommandParser+0x3b0>
 8002f1e:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8002f22:	f000 82bf 	beq.w	80034a4 <RI_GetRegCommandParser+0x848>
 8002f26:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8002f2a:	f47f af50 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002f2e:	f10d 010a 	add.w	r1, sp, #10
 8002f32:	4827      	ldr	r0, [pc, #156]	; (8002fd0 <RI_GetRegCommandParser+0x374>)
 8002f34:	aa15      	add	r2, sp, #84	; 0x54
 8002f36:	f004 f991 	bl	800725c <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8002f3a:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 8002f3e:	8033      	strh	r3, [r6, #0]
      if (retVal == MCP_CMD_OK )
 8002f40:	2102      	movs	r1, #2
          *size = 2;
 8002f42:	460b      	mov	r3, r1
 8002f44:	e700      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8002f46:	f241 4250 	movw	r2, #5200	; 0x1450
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	f000 82a3 	beq.w	8003496 <RI_GetRegCommandParser+0x83a>
 8002f50:	d917      	bls.n	8002f82 <RI_GetRegCommandParser+0x326>
 8002f52:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8002f56:	4293      	cmp	r3, r2
 8002f58:	f000 829b 	beq.w	8003492 <RI_GetRegCommandParser+0x836>
 8002f5c:	d978      	bls.n	8003050 <RI_GetRegCommandParser+0x3f4>
 8002f5e:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8002f62:	4293      	cmp	r3, r2
 8002f64:	f000 828e 	beq.w	8003484 <RI_GetRegCommandParser+0x828>
 8002f68:	d960      	bls.n	800302c <RI_GetRegCommandParser+0x3d0>
 8002f6a:	f641 1210 	movw	r2, #6416	; 0x1910
 8002f6e:	4293      	cmp	r3, r2
 8002f70:	f47f af2d 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8002f74:	4819      	ldr	r0, [pc, #100]	; (8002fdc <RI_GetRegCommandParser+0x380>)
 8002f76:	f002 fdbd 	bl	8005af4 <PID_GetKPDivisorPOW2>
 8002f7a:	2102      	movs	r1, #2
 8002f7c:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8002f7e:	460b      	mov	r3, r1
 8002f80:	e6e2      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8002f82:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8002f86:	f000 8276 	beq.w	8003476 <RI_GetRegCommandParser+0x81a>
 8002f8a:	d92b      	bls.n	8002fe4 <RI_GetRegCommandParser+0x388>
 8002f8c:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8002f90:	f000 8269 	beq.w	8003466 <RI_GetRegCommandParser+0x80a>
 8002f94:	d908      	bls.n	8002fa8 <RI_GetRegCommandParser+0x34c>
 8002f96:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8002f9a:	d002      	beq.n	8002fa2 <RI_GetRegCommandParser+0x346>
 8002f9c:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002fa0:	d177      	bne.n	8003092 <RI_GetRegCommandParser+0x436>
 8002fa2:	2102      	movs	r1, #2
 8002fa4:	460b      	mov	r3, r1
 8002fa6:	e6cf      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8002fa8:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8002fac:	f000 8253 	beq.w	8003456 <RI_GetRegCommandParser+0x7fa>
 8002fb0:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8002fb4:	f47f af0b 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 8002fb8:	4805      	ldr	r0, [pc, #20]	; (8002fd0 <RI_GetRegCommandParser+0x374>)
 8002fba:	f004 f93b 	bl	8007234 <STO_PLL_GetEstimatedCurrent>
              break;
 8002fbe:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 8002fc0:	9007      	str	r0, [sp, #28]
 8002fc2:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8002fc6:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8002fc8:	460b      	mov	r3, r1
              break;
 8002fca:	e6bd      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8002fcc:	08007690 	.word	0x08007690
 8002fd0:	200003b0 	.word	0x200003b0
 8002fd4:	20000588 	.word	0x20000588
 8002fd8:	20000584 	.word	0x20000584
 8002fdc:	200003e4 	.word	0x200003e4
 8002fe0:	2000083c 	.word	0x2000083c
 8002fe4:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002fe8:	f000 81ea 	beq.w	80033c0 <RI_GetRegCommandParser+0x764>
 8002fec:	d97f      	bls.n	80030ee <RI_GetRegCommandParser+0x492>
 8002fee:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8002ff2:	f000 81db 	beq.w	80033ac <RI_GetRegCommandParser+0x750>
 8002ff6:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8002ffa:	f47f aee8 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8002ffe:	48bb      	ldr	r0, [pc, #748]	; (80032ec <RI_GetRegCommandParser+0x690>)
 8003000:	f003 fd72 	bl	8006ae8 <SPD_GetElAngle>
              break;
 8003004:	2102      	movs	r1, #2
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003006:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003008:	460b      	mov	r3, r1
              break;
 800300a:	e69d      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 800300c:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8003010:	f000 81ca 	beq.w	80033a8 <RI_GetRegCommandParser+0x74c>
 8003014:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8003018:	f47f aed9 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 800301c:	4bb4      	ldr	r3, [pc, #720]	; (80032f0 <RI_GetRegCommandParser+0x694>)
 800301e:	6818      	ldr	r0, [r3, #0]
 8003020:	f002 fd62 	bl	8005ae8 <PID_GetKI>
              break;
 8003024:	2102      	movs	r1, #2
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003026:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003028:	460b      	mov	r3, r1
              break;
 800302a:	e68d      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 800302c:	f241 6210 	movw	r2, #5648	; 0x1610
 8003030:	4293      	cmp	r3, r2
 8003032:	f000 81b7 	beq.w	80033a4 <RI_GetRegCommandParser+0x748>
 8003036:	f241 6250 	movw	r2, #5712	; 0x1650
 800303a:	4293      	cmp	r3, r2
 800303c:	f47f aec7 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 8003040:	4bac      	ldr	r3, [pc, #688]	; (80032f4 <RI_GetRegCommandParser+0x698>)
 8003042:	6818      	ldr	r0, [r3, #0]
 8003044:	f002 fd80 	bl	8005b48 <PID_GetKDDivisorPOW2>
 8003048:	2102      	movs	r1, #2
 800304a:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800304c:	460b      	mov	r3, r1
 800304e:	e67b      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8003050:	f241 5210 	movw	r2, #5392	; 0x1510
 8003054:	4293      	cmp	r3, r2
 8003056:	f000 8180 	beq.w	800335a <RI_GetRegCommandParser+0x6fe>
 800305a:	d928      	bls.n	80030ae <RI_GetRegCommandParser+0x452>
 800305c:	f241 5250 	movw	r2, #5456	; 0x1550
 8003060:	4293      	cmp	r3, r2
 8003062:	f000 8172 	beq.w	800334a <RI_GetRegCommandParser+0x6ee>
 8003066:	f241 5290 	movw	r2, #5520	; 0x1590
 800306a:	4293      	cmp	r3, r2
 800306c:	f47f aeaf 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 8003070:	4b9f      	ldr	r3, [pc, #636]	; (80032f0 <RI_GetRegCommandParser+0x694>)
 8003072:	e7e6      	b.n	8003042 <RI_GetRegCommandParser+0x3e6>
 8003074:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8003078:	f000 818d 	beq.w	8003396 <RI_GetRegCommandParser+0x73a>
 800307c:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8003080:	f47f aea5 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 8003084:	489c      	ldr	r0, [pc, #624]	; (80032f8 <RI_GetRegCommandParser+0x69c>)
 8003086:	f002 fa09 	bl	800549c <VBS_GetAvBusVoltage_V>
              break;
 800308a:	2102      	movs	r1, #2
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 800308c:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800308e:	460b      	mov	r3, r1
              break;
 8003090:	e65a      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8003092:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8003096:	f47f ae9a 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 800309a:	4894      	ldr	r0, [pc, #592]	; (80032ec <RI_GetRegCommandParser+0x690>)
 800309c:	f004 f8be 	bl	800721c <STO_PLL_GetEstimatedBemf>
              break;
 80030a0:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 80030a2:	9005      	str	r0, [sp, #20]
 80030a4:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80030a8:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80030aa:	460b      	mov	r3, r1
              break;
 80030ac:	e64c      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 80030ae:	f241 4290 	movw	r2, #5264	; 0x1490
 80030b2:	4293      	cmp	r3, r2
 80030b4:	f000 8168 	beq.w	8003388 <RI_GetRegCommandParser+0x72c>
 80030b8:	f241 42d0 	movw	r2, #5328	; 0x14d0
 80030bc:	4293      	cmp	r3, r2
 80030be:	f47f ae86 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 80030c2:	488e      	ldr	r0, [pc, #568]	; (80032fc <RI_GetRegCommandParser+0x6a0>)
 80030c4:	f002 fd40 	bl	8005b48 <PID_GetKDDivisorPOW2>
 80030c8:	2102      	movs	r1, #2
 80030ca:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80030cc:	460b      	mov	r3, r1
 80030ce:	e63b      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 80030d0:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 80030d4:	f000 8151 	beq.w	800337a <RI_GetRegCommandParser+0x71e>
 80030d8:	d91b      	bls.n	8003112 <RI_GetRegCommandParser+0x4b6>
 80030da:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 80030de:	f000 8144 	beq.w	800336a <RI_GetRegCommandParser+0x70e>
 80030e2:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 80030e6:	f47f ae72 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 80030ea:	4b82      	ldr	r3, [pc, #520]	; (80032f4 <RI_GetRegCommandParser+0x698>)
 80030ec:	e797      	b.n	800301e <RI_GetRegCommandParser+0x3c2>
 80030ee:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 80030f2:	f000 8122 	beq.w	800333a <RI_GetRegCommandParser+0x6de>
 80030f6:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80030fa:	f47f ae68 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 80030fe:	4650      	mov	r0, sl
 8003100:	f7fe f8e2 	bl	80012c8 <MCI_GetVqd>
              break;
 8003104:	2102      	movs	r1, #2
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003106:	900b      	str	r0, [sp, #44]	; 0x2c
 8003108:	f3c0 400f 	ubfx	r0, r0, #16, #16
 800310c:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800310e:	460b      	mov	r3, r1
              break;
 8003110:	e61a      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
 8003112:	2b90      	cmp	r3, #144	; 0x90
 8003114:	f000 810a 	beq.w	800332c <RI_GetRegCommandParser+0x6d0>
 8003118:	2bd0      	cmp	r3, #208	; 0xd0
 800311a:	f47f ae58 	bne.w	8002dce <RI_GetRegCommandParser+0x172>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 800311e:	4877      	ldr	r0, [pc, #476]	; (80032fc <RI_GetRegCommandParser+0x6a0>)
 8003120:	f002 fce2 	bl	8005ae8 <PID_GetKI>
              break;
 8003124:	2102      	movs	r1, #2
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003126:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003128:	460b      	mov	r3, r1
              break;
 800312a:	e60d      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
    retVal = MCP_ERROR_STRING_FORMAT;
 800312c:	2006      	movs	r0, #6
 800312e:	e5c6      	b.n	8002cbe <RI_GetRegCommandParser+0x62>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 8003130:	4b73      	ldr	r3, [pc, #460]	; (8003300 <RI_GetRegCommandParser+0x6a4>)
 8003132:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003134:	f993 1000 	ldrsb.w	r1, [r3]
 8003138:	2900      	cmp	r1, #0
 800313a:	d03f      	beq.n	80031bc <RI_GetRegCommandParser+0x560>
 800313c:	2c01      	cmp	r4, #1
 800313e:	ddf5      	ble.n	800312c <RI_GetRegCommandParser+0x4d0>
 8003140:	469c      	mov	ip, r3
 8003142:	4630      	mov	r0, r6
 8003144:	f1c6 0201 	rsb	r2, r6, #1
 8003148:	e001      	b.n	800314e <RI_GetRegCommandParser+0x4f2>
 800314a:	42a3      	cmp	r3, r4
 800314c:	daee      	bge.n	800312c <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 800314e:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003152:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003156:	1883      	adds	r3, r0, r2
 8003158:	b29b      	uxth	r3, r3
 800315a:	2900      	cmp	r1, #0
 800315c:	d1f5      	bne.n	800314a <RI_GetRegCommandParser+0x4ee>
 800315e:	e5ef      	b.n	8002d40 <RI_GetRegCommandParser+0xe4>
 8003160:	4b68      	ldr	r3, [pc, #416]	; (8003304 <RI_GetRegCommandParser+0x6a8>)
 8003162:	f993 1000 	ldrsb.w	r1, [r3]
 8003166:	b349      	cbz	r1, 80031bc <RI_GetRegCommandParser+0x560>
 8003168:	2c01      	cmp	r4, #1
 800316a:	dddf      	ble.n	800312c <RI_GetRegCommandParser+0x4d0>
 800316c:	469c      	mov	ip, r3
 800316e:	4630      	mov	r0, r6
 8003170:	f1c6 0201 	rsb	r2, r6, #1
 8003174:	e001      	b.n	800317a <RI_GetRegCommandParser+0x51e>
 8003176:	42a3      	cmp	r3, r4
 8003178:	dad8      	bge.n	800312c <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 800317a:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800317e:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003182:	1883      	adds	r3, r0, r2
 8003184:	b29b      	uxth	r3, r3
 8003186:	2900      	cmp	r1, #0
 8003188:	d1f5      	bne.n	8003176 <RI_GetRegCommandParser+0x51a>
 800318a:	e5d9      	b.n	8002d40 <RI_GetRegCommandParser+0xe4>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 800318c:	4650      	mov	r0, sl
 800318e:	f7fd ffd1 	bl	8001134 <MCI_GetSTMState>
        if (freeSpace >= 2U)
 8003192:	2101      	movs	r1, #1
 8003194:	b2a4      	uxth	r4, r4
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 8003196:	7030      	strb	r0, [r6, #0]
          *size = 1;
 8003198:	460b      	mov	r3, r1
 800319a:	e5d5      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 800319c:	485a      	ldr	r0, [pc, #360]	; (8003308 <RI_GetRegCommandParser+0x6ac>)
 800319e:	f003 fc8f 	bl	8006ac0 <RUC_GetNumberOfPhases>
              break;
 80031a2:	2101      	movs	r1, #1
        if (freeSpace >= 2U)
 80031a4:	b2a4      	uxth	r4, r4
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 80031a6:	7030      	strb	r0, [r6, #0]
          *size = 1;
 80031a8:	460b      	mov	r3, r1
              break;
 80031aa:	e5cd      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80031ac:	4650      	mov	r0, sl
 80031ae:	f7fe f815 	bl	80011dc <MCI_GetControlMode>
              break;
 80031b2:	2101      	movs	r1, #1
        if (freeSpace >= 2U)
 80031b4:	b2a4      	uxth	r4, r4
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80031b6:	7030      	strb	r0, [r6, #0]
          *size = 1;
 80031b8:	460b      	mov	r3, r1
              break;
 80031ba:	e5c5      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80031bc:	2101      	movs	r1, #1
  *size= 1U ; /* /0 is the min String size */
 80031be:	460b      	mov	r3, r1
 80031c0:	e5bf      	b.n	8002d42 <RI_GetRegCommandParser+0xe6>
        *rawSize = sizeof(ApplicationConfig_reg_t);
 80031c2:	230e      	movs	r3, #14
        if ((*rawSize) +2  > freeSpace)
 80031c4:	2c0f      	cmp	r4, #15
        *rawSize = sizeof(ApplicationConfig_reg_t);
 80031c6:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 80031c8:	f77f ad93 	ble.w	8002cf2 <RI_GetRegCommandParser+0x96>
          memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 80031cc:	4b4f      	ldr	r3, [pc, #316]	; (800330c <RI_GetRegCommandParser+0x6b0>)
        if (freeSpace >= 2U)
 80031ce:	b2a4      	uxth	r4, r4
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f8d3 c000 	ldr.w	ip, [r3]
 80031d6:	6858      	ldr	r0, [r3, #4]
 80031d8:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80031dc:	f8c2 e008 	str.w	lr, [r2, #8]
 80031e0:	f8c2 c000 	str.w	ip, [r2]
 80031e4:	6050      	str	r0, [r2, #4]
 80031e6:	899b      	ldrh	r3, [r3, #12]
 80031e8:	8193      	strh	r3, [r2, #12]
        if (freeSpace >= 2U)
 80031ea:	2110      	movs	r1, #16
        *size = (*rawSize) + 2U;
 80031ec:	460b      	mov	r3, r1
 80031ee:	e5ab      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80031f0:	2328      	movs	r3, #40	; 0x28
            if (((*rawSize) + 2U) > freeSpace)
 80031f2:	2c29      	cmp	r4, #41	; 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 80031f4:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 80031f6:	f67f ad7c 	bls.w	8002cf2 <RI_GetRegCommandParser+0x96>
 80031fa:	f04f 0b00 	mov.w	fp, #0
 80031fe:	9401      	str	r4, [sp, #4]
 8003200:	465c      	mov	r4, fp
 8003202:	46b3      	mov	fp, r6
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8003204:	b2e1      	uxtb	r1, r4
 8003206:	aa15      	add	r2, sp, #84	; 0x54
 8003208:	483f      	ldr	r0, [pc, #252]	; (8003308 <RI_GetRegCommandParser+0x6ac>)
 800320a:	f003 fc5d 	bl	8006ac8 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800320e:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 8003212:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003216:	0052      	lsls	r2, r2, #1
 8003218:	f8cb 2002 	str.w	r2, [fp, #2]
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 800321c:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 8003220:	f8ab 2006 	strh.w	r2, [fp, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8003224:	3401      	adds	r4, #1
                *durationms  = revUpPhase.hDurationms;
 8003226:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 800322a:	f82b 2f08 	strh.w	r2, [fp, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 800322e:	2c05      	cmp	r4, #5
 8003230:	d1e8      	bne.n	8003204 <RI_GetRegCommandParser+0x5a8>
        *size = (*rawSize) + 2U;
 8003232:	8833      	ldrh	r3, [r6, #0]
        if (freeSpace >= 2U)
 8003234:	9c01      	ldr	r4, [sp, #4]
        *size = (*rawSize) + 2U;
 8003236:	3302      	adds	r3, #2
 8003238:	b29b      	uxth	r3, r3
        if (freeSpace >= 2U)
 800323a:	b2a4      	uxth	r4, r4
        txData = txData+size;
 800323c:	4619      	mov	r1, r3
        break;
 800323e:	e583      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003240:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 8003242:	2c0b      	cmp	r4, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003244:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003246:	f67f ad54 	bls.w	8002cf2 <RI_GetRegCommandParser+0x96>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800324a:	4b31      	ldr	r3, [pc, #196]	; (8003310 <RI_GetRegCommandParser+0x6b4>)
 800324c:	6818      	ldr	r0, [r3, #0]
 800324e:	6010      	str	r0, [r2, #0]
        if (freeSpace >= 2U)
 8003250:	210c      	movs	r1, #12
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003252:	6858      	ldr	r0, [r3, #4]
 8003254:	891b      	ldrh	r3, [r3, #8]
 8003256:	8113      	strh	r3, [r2, #8]
        if (freeSpace >= 2U)
 8003258:	b2a4      	uxth	r4, r4
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800325a:	6050      	str	r0, [r2, #4]
        *size = (*rawSize) + 2U;
 800325c:	460b      	mov	r3, r1
 800325e:	e573      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 8003260:	4650      	mov	r0, sl
 8003262:	f7fd ffdf 	bl	8001224 <MCI_GetLastRampFinalSpeed>
 8003266:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800326a:	0040      	lsls	r0, r0, #1
 800326c:	f8c6 0002 	str.w	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 8003270:	4650      	mov	r0, sl
 8003272:	f7fd ffdf 	bl	8001234 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 8003276:	2306      	movs	r3, #6
        if (freeSpace >= 2U)
 8003278:	2108      	movs	r1, #8
            *rawSize = 6;
 800327a:	8033      	strh	r3, [r6, #0]
        if (freeSpace >= 2U)
 800327c:	b2a4      	uxth	r4, r4
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800327e:	80f0      	strh	r0, [r6, #6]
        *size = (*rawSize) + 2U;
 8003280:	460b      	mov	r3, r1
 8003282:	e561      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003284:	4650      	mov	r0, sl
 8003286:	f7fd ffe3 	bl	8001250 <MCI_GetMecSpeedRefUnit>
 800328a:	e5be      	b.n	8002e0a <RI_GetRegCommandParser+0x1ae>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 800328c:	4817      	ldr	r0, [pc, #92]	; (80032ec <RI_GetRegCommandParser+0x690>)
 800328e:	f003 fffb 	bl	8007288 <STO_PLL_GetEstimatedBemfLevel>
 8003292:	2104      	movs	r1, #4
 8003294:	6030      	str	r0, [r6, #0]
          *size = 4;
 8003296:	460b      	mov	r3, r1
 8003298:	e556      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 800329a:	4650      	mov	r0, sl
 800329c:	f7fd ff98 	bl	80011d0 <MCI_GetFaultState>
 80032a0:	2104      	movs	r1, #4
 80032a2:	6030      	str	r0, [r6, #0]
          *size = 4;
 80032a4:	460b      	mov	r3, r1
 80032a6:	e54f      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80032a8:	4b1a      	ldr	r3, [pc, #104]	; (8003314 <RI_GetRegCommandParser+0x6b8>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 80032b0:	f8d3 c000 	ldr.w	ip, [r3]
 80032b4:	6858      	ldr	r0, [r3, #4]
 80032b6:	6899      	ldr	r1, [r3, #8]
 80032b8:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80032bc:	f8c2 e00c 	str.w	lr, [r2, #12]
 80032c0:	3310      	adds	r3, #16
 80032c2:	455b      	cmp	r3, fp
 80032c4:	f8c2 c000 	str.w	ip, [r2]
 80032c8:	6050      	str	r0, [r2, #4]
 80032ca:	6091      	str	r1, [r2, #8]
 80032cc:	f102 0210 	add.w	r2, r2, #16
 80032d0:	d1ee      	bne.n	80032b0 <RI_GetRegCommandParser+0x654>
 80032d2:	6859      	ldr	r1, [r3, #4]
 80032d4:	6818      	ldr	r0, [r3, #0]
 80032d6:	689b      	ldr	r3, [r3, #8]
 80032d8:	6051      	str	r1, [r2, #4]
        if (freeSpace >= 2U)
 80032da:	213e      	movs	r1, #62	; 0x3e
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80032dc:	6093      	str	r3, [r2, #8]
        if (freeSpace >= 2U)
 80032de:	b2a4      	uxth	r4, r4
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80032e0:	6010      	str	r0, [r2, #0]
        *size = (*rawSize) + 2U;
 80032e2:	460b      	mov	r3, r1
 80032e4:	e530      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
  uint8_t retVal = MCP_CMD_NOK;
 80032e6:	2001      	movs	r0, #1
 80032e8:	e4e9      	b.n	8002cbe <RI_GetRegCommandParser+0x62>
 80032ea:	bf00      	nop
 80032ec:	200003b0 	.word	0x200003b0
 80032f0:	20000570 	.word	0x20000570
 80032f4:	20000574 	.word	0x20000574
 80032f8:	20000000 	.word	0x20000000
 80032fc:	20000134 	.word	0x20000134
 8003300:	2000058c 	.word	0x2000058c
 8003304:	080076a0 	.word	0x080076a0
 8003308:	20000324 	.word	0x20000324
 800330c:	20000580 	.word	0x20000580
 8003310:	08007728 	.word	0x08007728
 8003314:	20000588 	.word	0x20000588
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8003318:	4650      	mov	r0, sl
 800331a:	f7fd ffc7 	bl	80012ac <MCI_GetIqdref>
              break;
 800331e:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8003320:	900d      	str	r0, [sp, #52]	; 0x34
 8003322:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003326:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003328:	460b      	mov	r3, r1
              break;
 800332a:	e50d      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 800332c:	4864      	ldr	r0, [pc, #400]	; (80034c0 <RI_GetRegCommandParser+0x864>)
 800332e:	f002 fbd7 	bl	8005ae0 <PID_GetKP>
 8003332:	2102      	movs	r1, #2
 8003334:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003336:	460b      	mov	r3, r1
 8003338:	e506      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 800333a:	4650      	mov	r0, sl
 800333c:	f7fd ffc4 	bl	80012c8 <MCI_GetVqd>
              break;
 8003340:	2102      	movs	r1, #2
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003342:	900c      	str	r0, [sp, #48]	; 0x30
          *size = 2;
 8003344:	460b      	mov	r3, r1
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003346:	8030      	strh	r0, [r6, #0]
              break;
 8003348:	e4fe      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 800334a:	4b5e      	ldr	r3, [pc, #376]	; (80034c4 <RI_GetRegCommandParser+0x868>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 800334c:	6818      	ldr	r0, [r3, #0]
 800334e:	f002 fbdb 	bl	8005b08 <PID_GetKIDivisorPOW2>
 8003352:	2102      	movs	r1, #2
 8003354:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003356:	460b      	mov	r3, r1
 8003358:	e4f6      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 800335a:	4b5a      	ldr	r3, [pc, #360]	; (80034c4 <RI_GetRegCommandParser+0x868>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 800335c:	6818      	ldr	r0, [r3, #0]
 800335e:	f002 fbc9 	bl	8005af4 <PID_GetKPDivisorPOW2>
 8003362:	2102      	movs	r1, #2
 8003364:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003366:	460b      	mov	r3, r1
 8003368:	e4ee      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 800336a:	4b57      	ldr	r3, [pc, #348]	; (80034c8 <RI_GetRegCommandParser+0x86c>)
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	f002 fbb7 	bl	8005ae0 <PID_GetKP>
              break;
 8003372:	2102      	movs	r1, #2
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 8003374:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003376:	460b      	mov	r3, r1
              break;
 8003378:	e4e6      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 800337a:	4851      	ldr	r0, [pc, #324]	; (80034c0 <RI_GetRegCommandParser+0x864>)
 800337c:	f002 fbe0 	bl	8005b40 <PID_GetKD>
              break;
 8003380:	2102      	movs	r1, #2
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 8003382:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003384:	460b      	mov	r3, r1
              break;
 8003386:	e4df      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 8003388:	484d      	ldr	r0, [pc, #308]	; (80034c0 <RI_GetRegCommandParser+0x864>)
 800338a:	f002 fbbd 	bl	8005b08 <PID_GetKIDivisorPOW2>
 800338e:	2102      	movs	r1, #2
 8003390:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003392:	460b      	mov	r3, r1
 8003394:	e4d8      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 8003396:	484d      	ldr	r0, [pc, #308]	; (80034cc <RI_GetRegCommandParser+0x870>)
 8003398:	f002 fba2 	bl	8005ae0 <PID_GetKP>
 800339c:	2102      	movs	r1, #2
 800339e:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80033a0:	460b      	mov	r3, r1
 80033a2:	e4d1      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 80033a4:	4b48      	ldr	r3, [pc, #288]	; (80034c8 <RI_GetRegCommandParser+0x86c>)
 80033a6:	e7d1      	b.n	800334c <RI_GetRegCommandParser+0x6f0>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80033a8:	4b46      	ldr	r3, [pc, #280]	; (80034c4 <RI_GetRegCommandParser+0x868>)
 80033aa:	e7df      	b.n	800336c <RI_GetRegCommandParser+0x710>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80033ac:	4650      	mov	r0, sl
 80033ae:	f7fd ff99 	bl	80012e4 <MCI_GetValphabeta>
              break;
 80033b2:	2102      	movs	r1, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80033b4:	9009      	str	r0, [sp, #36]	; 0x24
 80033b6:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80033ba:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80033bc:	460b      	mov	r3, r1
              break;
 80033be:	e4c3      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80033c0:	4650      	mov	r0, sl
 80033c2:	f7fd ff8f 	bl	80012e4 <MCI_GetValphabeta>
              break;
 80033c6:	2102      	movs	r1, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80033c8:	900a      	str	r0, [sp, #40]	; 0x28
          *size = 2;
 80033ca:	460b      	mov	r3, r1
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80033cc:	8030      	strh	r0, [r6, #0]
              break;
 80033ce:	e4bb      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80033d0:	4650      	mov	r0, sl
 80033d2:	f7fd ff41 	bl	8001258 <MCI_GetIab>
              break;
 80033d6:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIab(pMCIN).b;
 80033d8:	9013      	str	r0, [sp, #76]	; 0x4c
 80033da:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80033de:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80033e0:	460b      	mov	r3, r1
              break;
 80033e2:	e4b1      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 80033e4:	4839      	ldr	r0, [pc, #228]	; (80034cc <RI_GetRegCommandParser+0x870>)
 80033e6:	f002 fb7f 	bl	8005ae8 <PID_GetKI>
 80033ea:	2102      	movs	r1, #2
 80033ec:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80033ee:	460b      	mov	r3, r1
 80033f0:	e4aa      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 80033f2:	4b37      	ldr	r3, [pc, #220]	; (80034d0 <RI_GetRegCommandParser+0x874>)
 80033f4:	6818      	ldr	r0, [r3, #0]
 80033f6:	f002 fb55 	bl	8005aa4 <NTC_GetAvTemp_C>
              break;
 80033fa:	2102      	movs	r1, #2
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 80033fc:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80033fe:	460b      	mov	r3, r1
              break;
 8003400:	e4a2      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003402:	4650      	mov	r0, sl
 8003404:	f7fd ff36 	bl	8001274 <MCI_GetIalphabeta>
              break;
 8003408:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800340a:	9012      	str	r0, [sp, #72]	; 0x48
          *size = 2;
 800340c:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 800340e:	8030      	strh	r0, [r6, #0]
              break;
 8003410:	e49a      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003412:	4b2d      	ldr	r3, [pc, #180]	; (80034c8 <RI_GetRegCommandParser+0x86c>)
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003414:	6818      	ldr	r0, [r3, #0]
 8003416:	f002 fb93 	bl	8005b40 <PID_GetKD>
              break;
 800341a:	2102      	movs	r1, #2
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 800341c:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800341e:	460b      	mov	r3, r1
              break;
 8003420:	e492      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]); //cstat !MISRAC2012-Rule-11.3
 8003422:	4b2c      	ldr	r3, [pc, #176]	; (80034d4 <RI_GetRegCommandParser+0x878>)
 8003424:	6818      	ldr	r0, [r3, #0]
 8003426:	f002 faf9 	bl	8005a1c <MPM_GetAvrgElMotorPowerW>
              break;
 800342a:	2102      	movs	r1, #2
              *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]); //cstat !MISRAC2012-Rule-11.3
 800342c:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800342e:	460b      	mov	r3, r1
              break;
 8003430:	e48a      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8003432:	4650      	mov	r0, sl
 8003434:	f7fd ff2c 	bl	8001290 <MCI_GetIqd>
              break;
 8003438:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqd(pMCIN).d;
 800343a:	900f      	str	r0, [sp, #60]	; 0x3c
 800343c:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003440:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003442:	460b      	mov	r3, r1
              break;
 8003444:	e480      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003446:	4650      	mov	r0, sl
 8003448:	f7fd ff22 	bl	8001290 <MCI_GetIqd>
              break;
 800344c:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqd(pMCIN).q;
 800344e:	9010      	str	r0, [sp, #64]	; 0x40
          *size = 2;
 8003450:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003452:	8030      	strh	r0, [r6, #0]
              break;
 8003454:	e478      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003456:	4820      	ldr	r0, [pc, #128]	; (80034d8 <RI_GetRegCommandParser+0x87c>)
 8003458:	f003 feec 	bl	8007234 <STO_PLL_GetEstimatedCurrent>
              break;
 800345c:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 800345e:	9008      	str	r0, [sp, #32]
          *size = 2;
 8003460:	460b      	mov	r3, r1
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003462:	8030      	strh	r0, [r6, #0]
              break;
 8003464:	e470      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003466:	481c      	ldr	r0, [pc, #112]	; (80034d8 <RI_GetRegCommandParser+0x87c>)
 8003468:	f003 fed8 	bl	800721c <STO_PLL_GetEstimatedBemf>
              break;
 800346c:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 800346e:	9006      	str	r0, [sp, #24]
          *size = 2;
 8003470:	460b      	mov	r3, r1
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003472:	8030      	strh	r0, [r6, #0]
              break;
 8003474:	e468      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003476:	4818      	ldr	r0, [pc, #96]	; (80034d8 <RI_GetRegCommandParser+0x87c>)
 8003478:	f003 fb78 	bl	8006b6c <SPD_GetS16Speed>
              break;
 800347c:	2102      	movs	r1, #2
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 800347e:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003480:	460b      	mov	r3, r1
              break;
 8003482:	e461      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8003484:	4811      	ldr	r0, [pc, #68]	; (80034cc <RI_GetRegCommandParser+0x870>)
 8003486:	f002 fb3f 	bl	8005b08 <PID_GetKIDivisorPOW2>
 800348a:	2102      	movs	r1, #2
 800348c:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800348e:	460b      	mov	r3, r1
 8003490:	e45a      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8003492:	4b0d      	ldr	r3, [pc, #52]	; (80034c8 <RI_GetRegCommandParser+0x86c>)
 8003494:	e762      	b.n	800335c <RI_GetRegCommandParser+0x700>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 8003496:	480a      	ldr	r0, [pc, #40]	; (80034c0 <RI_GetRegCommandParser+0x864>)
 8003498:	f002 fb2c 	bl	8005af4 <PID_GetKPDivisorPOW2>
 800349c:	2102      	movs	r1, #2
 800349e:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80034a0:	460b      	mov	r3, r1
 80034a2:	e451      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 80034a4:	f10d 010a 	add.w	r1, sp, #10
 80034a8:	480b      	ldr	r0, [pc, #44]	; (80034d8 <RI_GetRegCommandParser+0x87c>)
 80034aa:	aa15      	add	r2, sp, #84	; 0x54
 80034ac:	f003 fed6 	bl	800725c <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 80034b0:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 80034b4:	8033      	strh	r3, [r6, #0]
              break;
 80034b6:	2102      	movs	r1, #2
          *size = 2;
 80034b8:	460b      	mov	r3, r1
 80034ba:	e445      	b.n	8002d48 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 80034bc:	4b01      	ldr	r3, [pc, #4]	; (80034c4 <RI_GetRegCommandParser+0x868>)
 80034be:	e7a9      	b.n	8003414 <RI_GetRegCommandParser+0x7b8>
 80034c0:	20000134 	.word	0x20000134
 80034c4:	20000570 	.word	0x20000570
 80034c8:	20000574 	.word	0x20000574
 80034cc:	200003e4 	.word	0x200003e4
 80034d0:	2000057c 	.word	0x2000057c
 80034d4:	2000056c 	.word	0x2000056c
 80034d8:	200003b0 	.word	0x200003b0

080034dc <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 80034dc:	f000 0038 	and.w	r0, r0, #56	; 0x38
 80034e0:	3808      	subs	r0, #8
 80034e2:	b2c0      	uxtb	r0, r0
 80034e4:	2810      	cmp	r0, #16
 80034e6:	bf9a      	itte	ls
 80034e8:	4b01      	ldrls	r3, [pc, #4]	; (80034f0 <RI_GetIDSize+0x14>)
 80034ea:	5c18      	ldrbls	r0, [r3, r0]
 80034ec:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 80034ee:	4770      	bx	lr
 80034f0:	080079ac 	.word	0x080079ac

080034f4 <RI_GetPtrReg>:

    uint16_t regID = dataID & REG_MASK;
    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 80034f4:	f000 0338 	and.w	r3, r0, #56	; 0x38
 80034f8:	2b10      	cmp	r3, #16
 80034fa:	d003      	beq.n	8003504 <RI_GetPtrReg+0x10>
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_beta_est);
            break;
          }
          default:
          {
            *dataPtr = &nullData16;
 80034fc:	4b48      	ldr	r3, [pc, #288]	; (8003620 <RI_GetPtrReg+0x12c>)
 80034fe:	600b      	str	r3, [r1, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003500:	2005      	movs	r0, #5
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 8003502:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003504:	f020 0007 	bic.w	r0, r0, #7
 8003508:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 800350c:	b283      	uxth	r3, r0
 800350e:	d05c      	beq.n	80035ca <RI_GetPtrReg+0xd6>
 8003510:	d810      	bhi.n	8003534 <RI_GetPtrReg+0x40>
 8003512:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003516:	d05e      	beq.n	80035d6 <RI_GetPtrReg+0xe2>
 8003518:	d826      	bhi.n	8003568 <RI_GetPtrReg+0x74>
 800351a:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 800351e:	d060      	beq.n	80035e2 <RI_GetPtrReg+0xee>
 8003520:	d916      	bls.n	8003550 <RI_GetPtrReg+0x5c>
 8003522:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003526:	d1e9      	bne.n	80034fc <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003528:	4b3e      	ldr	r3, [pc, #248]	; (8003624 <RI_GetPtrReg+0x130>)
 800352a:	685b      	ldr	r3, [r3, #4]
 800352c:	3306      	adds	r3, #6
  uint8_t retVal = MCP_CMD_OK;
 800352e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003530:	600b      	str	r3, [r1, #0]
            break;
 8003532:	4770      	bx	lr
 8003534:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8003538:	d059      	beq.n	80035ee <RI_GetPtrReg+0xfa>
 800353a:	d928      	bls.n	800358e <RI_GetPtrReg+0x9a>
 800353c:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8003540:	d059      	beq.n	80035f6 <RI_GetPtrReg+0x102>
 8003542:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8003546:	d11b      	bne.n	8003580 <RI_GetPtrReg+0x8c>
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_beta_est);
 8003548:	4b37      	ldr	r3, [pc, #220]	; (8003628 <RI_GetPtrReg+0x134>)
 800354a:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800354c:	2000      	movs	r0, #0
            break;
 800354e:	4770      	bx	lr
 8003550:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003554:	d05f      	beq.n	8003616 <RI_GetPtrReg+0x122>
 8003556:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 800355a:	d1cf      	bne.n	80034fc <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 800355c:	4b31      	ldr	r3, [pc, #196]	; (8003624 <RI_GetPtrReg+0x130>)
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	3302      	adds	r3, #2
  uint8_t retVal = MCP_CMD_OK;
 8003562:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003564:	600b      	str	r3, [r1, #0]
            break;
 8003566:	4770      	bx	lr
 8003568:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 800356c:	d047      	beq.n	80035fe <RI_GetPtrReg+0x10a>
 800356e:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8003572:	d118      	bne.n	80035a6 <RI_GetPtrReg+0xb2>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003574:	4b2b      	ldr	r3, [pc, #172]	; (8003624 <RI_GetPtrReg+0x130>)
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	3312      	adds	r3, #18
  uint8_t retVal = MCP_CMD_OK;
 800357a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 800357c:	600b      	str	r3, [r1, #0]
            break;
 800357e:	4770      	bx	lr
 8003580:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8003584:	d1ba      	bne.n	80034fc <RI_GetPtrReg+0x8>
            *dataPtr = &(stoPLLSensor[vmotorID]->_Super.hAvrMecSpeedUnit);
 8003586:	4b29      	ldr	r3, [pc, #164]	; (800362c <RI_GetPtrReg+0x138>)
 8003588:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800358a:	2000      	movs	r0, #0
            break;
 800358c:	4770      	bx	lr
 800358e:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003592:	d03a      	beq.n	800360a <RI_GetPtrReg+0x116>
 8003594:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003598:	d10e      	bne.n	80035b8 <RI_GetPtrReg+0xc4>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 800359a:	4b22      	ldr	r3, [pc, #136]	; (8003624 <RI_GetPtrReg+0x130>)
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	331c      	adds	r3, #28
  uint8_t retVal = MCP_CMD_OK;
 80035a0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 80035a2:	600b      	str	r3, [r1, #0]
            break;
 80035a4:	4770      	bx	lr
 80035a6:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80035aa:	d1a7      	bne.n	80034fc <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80035ac:	4b1d      	ldr	r3, [pc, #116]	; (8003624 <RI_GetPtrReg+0x130>)
 80035ae:	685b      	ldr	r3, [r3, #4]
 80035b0:	330e      	adds	r3, #14
  uint8_t retVal = MCP_CMD_OK;
 80035b2:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 80035b4:	600b      	str	r3, [r1, #0]
            break;
 80035b6:	4770      	bx	lr
 80035b8:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 80035bc:	d19e      	bne.n	80034fc <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80035be:	4b19      	ldr	r3, [pc, #100]	; (8003624 <RI_GetPtrReg+0x130>)
 80035c0:	685b      	ldr	r3, [r3, #4]
 80035c2:	3318      	adds	r3, #24
  uint8_t retVal = MCP_CMD_OK;
 80035c4:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 80035c6:	600b      	str	r3, [r1, #0]
            break;
 80035c8:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80035ca:	4b16      	ldr	r3, [pc, #88]	; (8003624 <RI_GetPtrReg+0x130>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	3316      	adds	r3, #22
  uint8_t retVal = MCP_CMD_OK;
 80035d0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 80035d2:	600b      	str	r3, [r1, #0]
            break;
 80035d4:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80035d6:	4b13      	ldr	r3, [pc, #76]	; (8003624 <RI_GetPtrReg+0x130>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	330c      	adds	r3, #12
  uint8_t retVal = MCP_CMD_OK;
 80035dc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 80035de:	600b      	str	r3, [r1, #0]
            break;
 80035e0:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80035e2:	4b10      	ldr	r3, [pc, #64]	; (8003624 <RI_GetPtrReg+0x130>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	3304      	adds	r3, #4
  uint8_t retVal = MCP_CMD_OK;
 80035e8:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 80035ea:	600b      	str	r3, [r1, #0]
            break;
 80035ec:	4770      	bx	lr
            *dataPtr = &(stoPLLSensor[vmotorID]->_Super.hElAngle);
 80035ee:	4b10      	ldr	r3, [pc, #64]	; (8003630 <RI_GetPtrReg+0x13c>)
 80035f0:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80035f2:	2000      	movs	r0, #0
            break;
 80035f4:	4770      	bx	lr
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_alfa_est);
 80035f6:	4b0f      	ldr	r3, [pc, #60]	; (8003634 <RI_GetPtrReg+0x140>)
 80035f8:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 80035fa:	2000      	movs	r0, #0
            break;
 80035fc:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 80035fe:	4b09      	ldr	r3, [pc, #36]	; (8003624 <RI_GetPtrReg+0x130>)
 8003600:	685b      	ldr	r3, [r3, #4]
 8003602:	3310      	adds	r3, #16
  uint8_t retVal = MCP_CMD_OK;
 8003604:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003606:	600b      	str	r3, [r1, #0]
            break;
 8003608:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 800360a:	4b06      	ldr	r3, [pc, #24]	; (8003624 <RI_GetPtrReg+0x130>)
 800360c:	685b      	ldr	r3, [r3, #4]
 800360e:	331a      	adds	r3, #26
  uint8_t retVal = MCP_CMD_OK;
 8003610:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003612:	600b      	str	r3, [r1, #0]
            break;
 8003614:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003616:	4b03      	ldr	r3, [pc, #12]	; (8003624 <RI_GetPtrReg+0x130>)
 8003618:	685b      	ldr	r3, [r3, #4]
 800361a:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 800361c:	2000      	movs	r0, #0
             break;
 800361e:	4770      	bx	lr
 8003620:	20001bbc 	.word	0x20001bbc
 8003624:	2000083c 	.word	0x2000083c
 8003628:	20000422 	.word	0x20000422
 800362c:	200003bc 	.word	0x200003bc
 8003630:	200003b4 	.word	0x200003b4
 8003634:	20000420 	.word	0x20000420

08003638 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003638:	4b6b      	ldr	r3, [pc, #428]	; (80037e8 <RCM_RegisterRegConv+0x1b0>)
 800363a:	681a      	ldr	r2, [r3, #0]
{
 800363c:	b570      	push	{r4, r5, r6, lr}
 800363e:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003640:	2a00      	cmp	r2, #0
 8003642:	d02f      	beq.n	80036a4 <RCM_RegisterRegConv+0x6c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003644:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003648:	7910      	ldrb	r0, [r2, #4]
 800364a:	4584      	cmp	ip, r0
 800364c:	d01d      	beq.n	800368a <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800364e:	685c      	ldr	r4, [r3, #4]
 8003650:	2c00      	cmp	r4, #0
 8003652:	f000 80ac 	beq.w	80037ae <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003656:	7922      	ldrb	r2, [r4, #4]
 8003658:	4562      	cmp	r2, ip
  uint8_t handle = 255U;
 800365a:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800365e:	d02b      	beq.n	80036b8 <RCM_RegisterRegConv+0x80>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003660:	689c      	ldr	r4, [r3, #8]
 8003662:	2c00      	cmp	r4, #0
 8003664:	f000 808f 	beq.w	8003786 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003668:	7922      	ldrb	r2, [r4, #4]
 800366a:	4562      	cmp	r2, ip
 800366c:	d02a      	beq.n	80036c4 <RCM_RegisterRegConv+0x8c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 800366e:	68dc      	ldr	r4, [r3, #12]
 8003670:	2c00      	cmp	r4, #0
 8003672:	f000 8091 	beq.w	8003798 <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003676:	7922      	ldrb	r2, [r4, #4]
 8003678:	4562      	cmp	r2, ip
 800367a:	f000 8092 	beq.w	80037a2 <RCM_RegisterRegConv+0x16a>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 800367e:	2803      	cmp	r0, #3
 8003680:	bf88      	it	hi
 8003682:	20ff      	movhi	r0, #255	; 0xff
 8003684:	f240 80a1 	bls.w	80037ca <RCM_RegisterRegConv+0x192>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 8003688:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 800368a:	6810      	ldr	r0, [r2, #0]
 800368c:	680a      	ldr	r2, [r1, #0]
 800368e:	4290      	cmp	r0, r2
 8003690:	d01e      	beq.n	80036d0 <RCM_RegisterRegConv+0x98>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003692:	685c      	ldr	r4, [r3, #4]
 8003694:	2c00      	cmp	r4, #0
 8003696:	d1de      	bne.n	8003656 <RCM_RegisterRegConv+0x1e>
 8003698:	689c      	ldr	r4, [r3, #8]
 800369a:	2c00      	cmp	r4, #0
 800369c:	f000 809a 	beq.w	80037d4 <RCM_RegisterRegConv+0x19c>
      i++;
 80036a0:	2001      	movs	r0, #1
 80036a2:	e7e1      	b.n	8003668 <RCM_RegisterRegConv+0x30>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80036a4:	685c      	ldr	r4, [r3, #4]
 80036a6:	2c00      	cmp	r4, #0
 80036a8:	f000 808d 	beq.w	80037c6 <RCM_RegisterRegConv+0x18e>
 80036ac:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 80036b0:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80036b2:	7922      	ldrb	r2, [r4, #4]
 80036b4:	4562      	cmp	r2, ip
 80036b6:	d1d3      	bne.n	8003660 <RCM_RegisterRegConv+0x28>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80036b8:	6824      	ldr	r4, [r4, #0]
 80036ba:	680a      	ldr	r2, [r1, #0]
 80036bc:	4294      	cmp	r4, r2
 80036be:	d1cf      	bne.n	8003660 <RCM_RegisterRegConv+0x28>
      i++;
 80036c0:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV)
 80036c2:	e006      	b.n	80036d2 <RCM_RegisterRegConv+0x9a>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80036c4:	6824      	ldr	r4, [r4, #0]
 80036c6:	680a      	ldr	r2, [r1, #0]
 80036c8:	4294      	cmp	r4, r2
 80036ca:	d1d0      	bne.n	800366e <RCM_RegisterRegConv+0x36>
      i++;
 80036cc:	2002      	movs	r0, #2
 80036ce:	e000      	b.n	80036d2 <RCM_RegisterRegConv+0x9a>
    uint8_t i = 0;
 80036d0:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 80036d2:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 80036d6:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80036d8:	4c44      	ldr	r4, [pc, #272]	; (80037ec <RCM_RegisterRegConv+0x1b4>)
 80036da:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80036dc:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 80036de:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 80036e2:	d411      	bmi.n	8003708 <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80036e4:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80036e6:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80036ea:	f023 0320 	bic.w	r3, r3, #32
 80036ee:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80036f0:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80036f2:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80036f4:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80036f8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80036fc:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80036fe:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003700:	6893      	ldr	r3, [r2, #8]
 8003702:	f043 0301 	orr.w	r3, r3, #1
 8003706:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003708:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 800370a:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800370e:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003710:	790b      	ldrb	r3, [r1, #4]
 8003712:	2b09      	cmp	r3, #9
 8003714:	d82d      	bhi.n	8003772 <RCM_RegisterRegConv+0x13a>
 8003716:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 800371a:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 800371e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003722:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003726:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 800372a:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 800372e:	fab4 f484 	clz	r4, r4
 8003732:	fa2e fe04 	lsr.w	lr, lr, r4
 8003736:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8003738:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 800373c:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8003740:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8003744:	fa9c f5ac 	rbit	r5, ip
 8003748:	fab5 f585 	clz	r5, r5
 800374c:	fa9c fcac 	rbit	ip, ip
 8003750:	688e      	ldr	r6, [r1, #8]
 8003752:	fabc fc8c 	clz	ip, ip
 8003756:	fa23 f105 	lsr.w	r1, r3, r5
 800375a:	fa23 f30c 	lsr.w	r3, r3, ip
 800375e:	fa06 f503 	lsl.w	r5, r6, r3
 8003762:	2307      	movs	r3, #7
 8003764:	408b      	lsls	r3, r1
 8003766:	ea24 0303 	bic.w	r3, r4, r3
 800376a:	432b      	orrs	r3, r5
 800376c:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8003770:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003772:	2403      	movs	r4, #3
 8003774:	f06f 051d 	mvn.w	r5, #29
 8003778:	fb14 5403 	smlabb	r4, r4, r3, r5
 800377c:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003780:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 8003784:	e7cf      	b.n	8003726 <RCM_RegisterRegConv+0xee>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003786:	2804      	cmp	r0, #4
 8003788:	d917      	bls.n	80037ba <RCM_RegisterRegConv+0x182>
 800378a:	68dc      	ldr	r4, [r3, #12]
 800378c:	b114      	cbz	r4, 8003794 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 800378e:	7922      	ldrb	r2, [r4, #4]
 8003790:	4594      	cmp	ip, r2
 8003792:	d01c      	beq.n	80037ce <RCM_RegisterRegConv+0x196>
 8003794:	680a      	ldr	r2, [r1, #0]
 8003796:	e799      	b.n	80036cc <RCM_RegisterRegConv+0x94>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003798:	2804      	cmp	r0, #4
 800379a:	680a      	ldr	r2, [r1, #0]
 800379c:	d999      	bls.n	80036d2 <RCM_RegisterRegConv+0x9a>
      i++;
 800379e:	2003      	movs	r0, #3
 80037a0:	e797      	b.n	80036d2 <RCM_RegisterRegConv+0x9a>
 80037a2:	680a      	ldr	r2, [r1, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 80037a4:	6824      	ldr	r4, [r4, #0]
 80037a6:	4294      	cmp	r4, r2
 80037a8:	f47f af69 	bne.w	800367e <RCM_RegisterRegConv+0x46>
 80037ac:	e7f7      	b.n	800379e <RCM_RegisterRegConv+0x166>
      i++;
 80037ae:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80037b0:	689c      	ldr	r4, [r3, #8]
 80037b2:	b11c      	cbz	r4, 80037bc <RCM_RegisterRegConv+0x184>
 80037b4:	f891 c004 	ldrb.w	ip, [r1, #4]
 80037b8:	e756      	b.n	8003668 <RCM_RegisterRegConv+0x30>
 80037ba:	4620      	mov	r0, r4
 80037bc:	68dc      	ldr	r4, [r3, #12]
 80037be:	b124      	cbz	r4, 80037ca <RCM_RegisterRegConv+0x192>
 80037c0:	f891 c004 	ldrb.w	ip, [r1, #4]
 80037c4:	e757      	b.n	8003676 <RCM_RegisterRegConv+0x3e>
    uint8_t i = 0;
 80037c6:	4620      	mov	r0, r4
 80037c8:	e7f2      	b.n	80037b0 <RCM_RegisterRegConv+0x178>
 80037ca:	680a      	ldr	r2, [r1, #0]
 80037cc:	e781      	b.n	80036d2 <RCM_RegisterRegConv+0x9a>
 80037ce:	680a      	ldr	r2, [r1, #0]
      i++;
 80037d0:	2002      	movs	r0, #2
 80037d2:	e7e7      	b.n	80037a4 <RCM_RegisterRegConv+0x16c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 80037d4:	68dc      	ldr	r4, [r3, #12]
 80037d6:	2c00      	cmp	r4, #0
 80037d8:	f43f af72 	beq.w	80036c0 <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 80037dc:	7920      	ldrb	r0, [r4, #4]
 80037de:	4560      	cmp	r0, ip
 80037e0:	f47f af6e 	bne.w	80036c0 <RCM_RegisterRegConv+0x88>
      i++;
 80037e4:	2001      	movs	r0, #1
 80037e6:	e7dd      	b.n	80037a4 <RCM_RegisterRegConv+0x16c>
 80037e8:	20001be4 	.word	0x20001be4
 80037ec:	20001bc0 	.word	0x20001bc0

080037f0 <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80037f0:	4b1b      	ldr	r3, [pc, #108]	; (8003860 <RCM_ExecRegularConv+0x70>)
 80037f2:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80037f6:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 80037f8:	6812      	ldr	r2, [r2, #0]
 80037fa:	2b09      	cmp	r3, #9
 80037fc:	d827      	bhi.n	800384e <RCM_ExecRegularConv+0x5e>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 80037fe:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003802:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003806:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800380a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800380e:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003812:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8003816:	fab1 f181 	clz	r1, r1
 800381a:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 800381e:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8003822:	f003 031f 	and.w	r3, r3, #31
 8003826:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 800382a:	f021 011f 	bic.w	r1, r1, #31
 800382e:	430b      	orrs	r3, r1

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 8003830:	0151      	lsls	r1, r2, #5
 8003832:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 8003836:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 800383a:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 800383c:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 800383e:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8003842:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u) {}
 8003844:	079b      	lsls	r3, r3, #30
 8003846:	d5fc      	bpl.n	8003842 <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003848:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return retVal;
}
 800384a:	b280      	uxth	r0, r0
 800384c:	4770      	bx	lr
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 800384e:	2103      	movs	r1, #3
 8003850:	f06f 001d 	mvn.w	r0, #29
 8003854:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003858:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 800385c:	e7d5      	b.n	800380a <RCM_ExecRegularConv+0x1a>
 800385e:	bf00      	nop
 8003860:	20001be4 	.word	0x20001be4

08003864 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8003864:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003866:	4c0f      	ldr	r4, [pc, #60]	; (80038a4 <RCM_ExecUserConv+0x40>)
 8003868:	7823      	ldrb	r3, [r4, #0]
 800386a:	2b01      	cmp	r3, #1
 800386c:	d000      	beq.n	8003870 <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 800386e:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003870:	4b0d      	ldr	r3, [pc, #52]	; (80038a8 <RCM_ExecUserConv+0x44>)
 8003872:	781d      	ldrb	r5, [r3, #0]
 8003874:	4628      	mov	r0, r5
 8003876:	f7ff ffbb 	bl	80037f0 <RCM_ExecRegularConv>
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 800387c:	4a0c      	ldr	r2, [pc, #48]	; (80038b0 <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 800387e:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003882:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003884:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003886:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003888:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 800388a:	2e00      	cmp	r6, #0
 800388c:	d0ef      	beq.n	800386e <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800388e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003892:	4628      	mov	r0, r5
 8003894:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003896:	2300      	movs	r3, #0
 8003898:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 800389a:	4633      	mov	r3, r6
}
 800389c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 80038a0:	4718      	bx	r3
 80038a2:	bf00      	nop
 80038a4:	20001be1 	.word	0x20001be1
 80038a8:	20001be0 	.word	0x20001be0
 80038ac:	20001bc0 	.word	0x20001bc0
 80038b0:	20001be2 	.word	0x20001be2

080038b4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80038b4:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038b6:	4b0d      	ldr	r3, [pc, #52]	; (80038ec <HAL_MspInit+0x38>)
 80038b8:	2100      	movs	r1, #0
 80038ba:	9100      	str	r1, [sp, #0]
 80038bc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038be:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80038c2:	645a      	str	r2, [r3, #68]	; 0x44
 80038c4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80038c6:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 80038ca:	9200      	str	r2, [sp, #0]
 80038cc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 80038ce:	9101      	str	r1, [sp, #4]
 80038d0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80038d2:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80038d6:	641a      	str	r2, [r3, #64]	; 0x40
 80038d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80038de:	9301      	str	r3, [sp, #4]
 80038e0:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80038e2:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80038e4:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 80038e6:	f000 bd5d 	b.w	80043a4 <HAL_NVIC_SetPriorityGrouping>
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800

080038f0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80038f0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 80038f2:	4b20      	ldr	r3, [pc, #128]	; (8003974 <HAL_ADC_MspInit+0x84>)
 80038f4:	6802      	ldr	r2, [r0, #0]
{
 80038f6:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038f8:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 80038fa:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038fc:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003900:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003904:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8003906:	d001      	beq.n	800390c <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003908:	b00a      	add	sp, #40	; 0x28
 800390a:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 800390c:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003910:	9401      	str	r4, [sp, #4]
 8003912:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003914:	4818      	ldr	r0, [pc, #96]	; (8003978 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003916:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800391a:	645a      	str	r2, [r3, #68]	; 0x44
 800391c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800391e:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003922:	9201      	str	r2, [sp, #4]
 8003924:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003926:	9402      	str	r4, [sp, #8]
 8003928:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800392a:	f042 0204 	orr.w	r2, r2, #4
 800392e:	631a      	str	r2, [r3, #48]	; 0x30
 8003930:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003932:	f002 0204 	and.w	r2, r2, #4
 8003936:	9202      	str	r2, [sp, #8]
 8003938:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800393a:	9403      	str	r4, [sp, #12]
 800393c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800393e:	f042 0201 	orr.w	r2, r2, #1
 8003942:	631a      	str	r2, [r3, #48]	; 0x30
 8003944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800394c:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 800394e:	2207      	movs	r2, #7
 8003950:	2303      	movs	r3, #3
 8003952:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003956:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003958:	f000 fe3a 	bl	80045d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 800395c:	2203      	movs	r2, #3
 800395e:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003960:	4806      	ldr	r0, [pc, #24]	; (800397c <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003962:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003964:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003966:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800396a:	f000 fe31 	bl	80045d0 <HAL_GPIO_Init>
}
 800396e:	b00a      	add	sp, #40	; 0x28
 8003970:	bd10      	pop	{r4, pc}
 8003972:	bf00      	nop
 8003974:	40012000 	.word	0x40012000
 8003978:	40020800 	.word	0x40020800
 800397c:	40020000 	.word	0x40020000

08003980 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003980:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003982:	4a19      	ldr	r2, [pc, #100]	; (80039e8 <HAL_TIM_Base_MspInit+0x68>)
 8003984:	6801      	ldr	r1, [r0, #0]
{
 8003986:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003988:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 800398a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800398c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003990:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003994:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 8003996:	d001      	beq.n	800399c <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003998:	b008      	add	sp, #32
 800399a:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 800399c:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 80039a0:	9300      	str	r3, [sp, #0]
 80039a2:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80039a4:	f040 0001 	orr.w	r0, r0, #1
 80039a8:	6450      	str	r0, [r2, #68]	; 0x44
 80039aa:	6c50      	ldr	r0, [r2, #68]	; 0x44
 80039ac:	f000 0001 	and.w	r0, r0, #1
 80039b0:	9000      	str	r0, [sp, #0]
 80039b2:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039b4:	9301      	str	r3, [sp, #4]
 80039b6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80039b8:	480c      	ldr	r0, [pc, #48]	; (80039ec <HAL_TIM_Base_MspInit+0x6c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039ba:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039bc:	4323      	orrs	r3, r4
 80039be:	6313      	str	r3, [r2, #48]	; 0x30
 80039c0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80039c2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80039c4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 80039e0 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039c8:	4023      	ands	r3, r4
 80039ca:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80039cc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 80039ce:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80039d4:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 80039d6:	f000 fdfb 	bl	80045d0 <HAL_GPIO_Init>
}
 80039da:	b008      	add	sp, #32
 80039dc:	bd10      	pop	{r4, pc}
 80039de:	bf00      	nop
 80039e0:	00000040 	.word	0x00000040
 80039e4:	00000002 	.word	0x00000002
 80039e8:	40010000 	.word	0x40010000
 80039ec:	40020000 	.word	0x40020000

080039f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80039f0:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 80039f2:	4a17      	ldr	r2, [pc, #92]	; (8003a50 <HAL_TIM_MspPostInit+0x60>)
 80039f4:	6801      	ldr	r1, [r0, #0]
{
 80039f6:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039f8:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 80039fa:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039fc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003a00:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003a04:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8003a06:	d002      	beq.n	8003a0e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003a08:	b009      	add	sp, #36	; 0x24
 8003a0a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a0e:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a16:	480f      	ldr	r0, [pc, #60]	; (8003a54 <HAL_TIM_MspPostInit+0x64>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a18:	f043 0301 	orr.w	r3, r3, #1
 8003a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a1e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003a20:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8003a48 <HAL_TIM_MspPostInit+0x58>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003a2a:	2202      	movs	r2, #2
 8003a2c:	2302      	movs	r3, #2
 8003a2e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a32:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a34:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8003a36:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a3a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003a3c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a3e:	f000 fdc7 	bl	80045d0 <HAL_GPIO_Init>
}
 8003a42:	b009      	add	sp, #36	; 0x24
 8003a44:	f85d fb04 	ldr.w	pc, [sp], #4
 8003a48:	00000700 	.word	0x00000700
 8003a4c:	00000002 	.word	0x00000002
 8003a50:	40010000 	.word	0x40010000
 8003a54:	40020000 	.word	0x40020000

08003a58 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003a58:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 8003a5a:	4b32      	ldr	r3, [pc, #200]	; (8003b24 <HAL_UART_MspInit+0xcc>)
 8003a5c:	6802      	ldr	r2, [r0, #0]
{
 8003a5e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a60:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8003a62:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a64:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8003a68:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003a6c:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 8003a6e:	d001      	beq.n	8003a74 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8003a70:	b008      	add	sp, #32
 8003a72:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a74:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 8003a78:	9400      	str	r4, [sp, #0]
 8003a7a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003a7c:	4e2a      	ldr	r6, [pc, #168]	; (8003b28 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 8003a7e:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 8003a82:	641a      	str	r2, [r3, #64]	; 0x40
 8003a84:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003a86:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 8003a8a:	9200      	str	r2, [sp, #0]
 8003a8c:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a8e:	9401      	str	r4, [sp, #4]
 8003a90:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003a92:	f042 0201 	orr.w	r2, r2, #1
 8003a96:	631a      	str	r2, [r3, #48]	; 0x30
 8003a98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a9a:	f003 0301 	and.w	r3, r3, #1
 8003a9e:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 8003aa0:	220c      	movs	r2, #12
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003aa8:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aaa:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003aac:	481f      	ldr	r0, [pc, #124]	; (8003b2c <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003aae:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ab2:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003ab4:	f000 fd8c 	bl	80045d0 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003ab8:	4a1d      	ldr	r2, [pc, #116]	; (8003b30 <HAL_UART_MspInit+0xd8>)
 8003aba:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003abe:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ac2:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003ac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ac8:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003acc:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8003ad0:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003ad4:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003ad8:	f000 fce2 	bl	80044a0 <HAL_DMA_Init>
 8003adc:	b9d8      	cbnz	r0, 8003b16 <HAL_UART_MspInit+0xbe>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8003ade:	4c15      	ldr	r4, [pc, #84]	; (8003b34 <HAL_UART_MspInit+0xdc>)
 8003ae0:	4915      	ldr	r1, [pc, #84]	; (8003b38 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003ae2:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003ae4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003ae8:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003aea:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003aee:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8003af0:	2140      	movs	r1, #64	; 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003af2:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003af6:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003afa:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003afe:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003b02:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003b04:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003b06:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8003b08:	f000 fcca 	bl	80044a0 <HAL_DMA_Init>
 8003b0c:	b930      	cbnz	r0, 8003b1c <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003b0e:	636c      	str	r4, [r5, #52]	; 0x34
 8003b10:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8003b12:	b008      	add	sp, #32
 8003b14:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8003b16:	f7fd fa85 	bl	8001024 <Error_Handler>
 8003b1a:	e7e0      	b.n	8003ade <HAL_UART_MspInit+0x86>
      Error_Handler();
 8003b1c:	f7fd fa82 	bl	8001024 <Error_Handler>
 8003b20:	e7f5      	b.n	8003b0e <HAL_UART_MspInit+0xb6>
 8003b22:	bf00      	nop
 8003b24:	40004400 	.word	0x40004400
 8003b28:	200006f0 	.word	0x200006f0
 8003b2c:	40020000 	.word	0x40020000
 8003b30:	40026088 	.word	0x40026088
 8003b34:	20000750 	.word	0x20000750
 8003b38:	400260a0 	.word	0x400260a0

08003b3c <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 8003b3c:	4b05      	ldr	r3, [pc, #20]	; (8003b54 <ADC_IRQHandler+0x18>)
 8003b3e:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8003b40:	0752      	lsls	r2, r2, #29
 8003b42:	d400      	bmi.n	8003b46 <ADC_IRQHandler+0xa>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8003b44:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8003b46:	681a      	ldr	r2, [r3, #0]
 8003b48:	f022 020c 	bic.w	r2, r2, #12
 8003b4c:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 8003b4e:	f7fe b849 	b.w	8001be4 <TSK_HighFrequencyTask>
 8003b52:	bf00      	nop
 8003b54:	40012000 	.word	0x40012000

08003b58 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8003b58:	4804      	ldr	r0, [pc, #16]	; (8003b6c <TIM1_UP_TIM10_IRQHandler+0x14>)
 8003b5a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8003b5e:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8003b60:	f06f 0201 	mvn.w	r2, #1
 8003b64:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8003b66:	f002 bc7d 	b.w	8006464 <R3_1_TIMx_UP_IRQHandler>
 8003b6a:	bf00      	nop
 8003b6c:	20000274 	.word	0x20000274

08003b70 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003b70:	4808      	ldr	r0, [pc, #32]	; (8003b94 <TIM1_BRK_TIM9_IRQHandler+0x24>)
{
 8003b72:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 8003b74:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8003b78:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 8003b7a:	691a      	ldr	r2, [r3, #16]
 8003b7c:	0612      	lsls	r2, r2, #24
 8003b7e:	d504      	bpl.n	8003b8a <TIM1_BRK_TIM9_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8003b80:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b84:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 8003b86:	f002 fc8f 	bl	80064a8 <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 8003b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 8003b8e:	f7fd bfe5 	b.w	8001b5c <MC_Scheduler>
 8003b92:	bf00      	nop
 8003b94:	20000274 	.word	0x20000274

08003b98 <DMA1_Stream5_IRQHandler>:
  {
    retVal = 0;
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
 8003b98:	4b05      	ldr	r3, [pc, #20]	; (8003bb0 <DMA1_Stream5_IRQHandler+0x18>)
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) ) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	051b      	lsls	r3, r3, #20
 8003b9e:	d400      	bmi.n	8003ba2 <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

}
 8003ba0:	4770      	bx	lr
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003ba2:	4b04      	ldr	r3, [pc, #16]	; (8003bb4 <DMA1_Stream5_IRQHandler+0x1c>)
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 8003ba4:	4804      	ldr	r0, [pc, #16]	; (8003bb8 <DMA1_Stream5_IRQHandler+0x20>)
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8003ba6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	f7fc bfc4 	b.w	8000b38 <ASPEP_HWDataReceivedIT>
 8003bb0:	40026000 	.word	0x40026000
 8003bb4:	40026008 	.word	0x40026008
 8003bb8:	20000600 	.word	0x20000600

08003bbc <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USARTA_IRQHandler(void)
{
 8003bbc:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 8003bbe:	4b40      	ldr	r3, [pc, #256]	; (8003cc0 <USART2_IRQHandler+0x104>)
 8003bc0:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USARTA_IRQn 0 */

  /* USER CODE END USARTA_IRQn 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8003bc2:	0651      	lsls	r1, r2, #25
{
 8003bc4:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 8003bc6:	d46d      	bmi.n	8003ca4 <USART2_IRQHandler+0xe8>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 8003bc8:	4b3d      	ldr	r3, [pc, #244]	; (8003cc0 <USART2_IRQHandler+0x104>)
 8003bca:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003bcc:	0712      	lsls	r2, r2, #28
 8003bce:	d402      	bmi.n	8003bd6 <USART2_IRQHandler+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8003bd0:	681a      	ldr	r2, [r3, #0]
 8003bd2:	0794      	lsls	r4, r2, #30
 8003bd4:	d55e      	bpl.n	8003c94 <USART2_IRQHandler+0xd8>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003bd6:	4b3a      	ldr	r3, [pc, #232]	; (8003cc0 <USART2_IRQHandler+0x104>)
 8003bd8:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003bda:	07d2      	lsls	r2, r2, #31
 8003bdc:	d523      	bpl.n	8003c26 <USART2_IRQHandler+0x6a>
  tmpreg = USARTx->SR;
 8003bde:	681a      	ldr	r2, [r3, #0]
 8003be0:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003be2:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 8003be4:	685a      	ldr	r2, [r3, #4]
 8003be6:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8003be8:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 8003bea:	681a      	ldr	r2, [r3, #0]
 8003bec:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003bee:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 8003bf0:	685a      	ldr	r2, [r3, #4]
 8003bf2:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8003bf4:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8003bf6:	681a      	ldr	r2, [r3, #0]
 8003bf8:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 8003bfa:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 8003bfc:	685b      	ldr	r3, [r3, #4]
 8003bfe:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003c00:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003c02:	4a30      	ldr	r2, [pc, #192]	; (8003cc4 <USART2_IRQHandler+0x108>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c04:	e852 3f00 	ldrex	r3, [r2]
 8003c08:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c0c:	e842 3100 	strex	r1, r3, [r2]
 8003c10:	2900      	cmp	r1, #0
 8003c12:	d1f7      	bne.n	8003c04 <USART2_IRQHandler+0x48>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003c14:	4a2c      	ldr	r2, [pc, #176]	; (8003cc8 <USART2_IRQHandler+0x10c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c16:	e852 3f00 	ldrex	r3, [r2]
 8003c1a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	e842 3100 	strex	r1, r3, [r2]
 8003c22:	2900      	cmp	r1, #0
 8003c24:	d1f7      	bne.n	8003c16 <USART2_IRQHandler+0x5a>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8003c26:	4b26      	ldr	r3, [pc, #152]	; (8003cc0 <USART2_IRQHandler+0x104>)
 8003c28:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 8003c2a:	06d1      	lsls	r1, r2, #27
 8003c2c:	d530      	bpl.n	8003c90 <USART2_IRQHandler+0xd4>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 8003c2e:	68db      	ldr	r3, [r3, #12]
 8003c30:	06db      	lsls	r3, r3, #27
 8003c32:	d52d      	bpl.n	8003c90 <USART2_IRQHandler+0xd4>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003c34:	4a24      	ldr	r2, [pc, #144]	; (8003cc8 <USART2_IRQHandler+0x10c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c36:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003c3a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c3e:	e842 3100 	strex	r1, r3, [r2]
 8003c42:	2900      	cmp	r1, #0
 8003c44:	d1f7      	bne.n	8003c36 <USART2_IRQHandler+0x7a>
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8003c46:	4b1f      	ldr	r3, [pc, #124]	; (8003cc4 <USART2_IRQHandler+0x108>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c48:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003c4c:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c50:	e843 2100 	strex	r1, r2, [r3]
 8003c54:	2900      	cmp	r1, #0
 8003c56:	d1f7      	bne.n	8003c48 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c58:	e853 2f00 	ldrex	r2, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c60:	e843 2100 	strex	r1, r2, [r3]
 8003c64:	2900      	cmp	r1, #0
 8003c66:	d1f7      	bne.n	8003c58 <USART2_IRQHandler+0x9c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8003c68:	4a15      	ldr	r2, [pc, #84]	; (8003cc0 <USART2_IRQHandler+0x104>)
 8003c6a:	6852      	ldr	r2, [r2, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003c6c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003c70:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c74:	e843 2100 	strex	r1, r2, [r3]
 8003c78:	2900      	cmp	r1, #0
 8003c7a:	d1f7      	bne.n	8003c6c <USART2_IRQHandler+0xb0>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003c7c:	4b13      	ldr	r3, [pc, #76]	; (8003ccc <USART2_IRQHandler+0x110>)
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003c7e:	4814      	ldr	r0, [pc, #80]	; (8003cd0 <USART2_IRQHandler+0x114>)
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream) );
 8003c80:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c84:	605a      	str	r2, [r3, #4]
  }

  /* USER CODE BEGIN USARTA_IRQn 1 */

  /* USER CODE END USARTA_IRQn 1 */
}
 8003c86:	b004      	add	sp, #16
 8003c88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 8003c8c:	f7fc bfa2 	b.w	8000bd4 <ASPEP_HWDMAReset>
}
 8003c90:	b004      	add	sp, #16
 8003c92:	bd10      	pop	{r4, pc}
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 8003c94:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 8003c96:	0758      	lsls	r0, r3, #29
 8003c98:	d5c5      	bpl.n	8003c26 <USART2_IRQHandler+0x6a>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8003c9a:	4b09      	ldr	r3, [pc, #36]	; (8003cc0 <USART2_IRQHandler+0x104>)
 8003c9c:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 8003c9e:	07d2      	lsls	r2, r2, #31
 8003ca0:	d5c1      	bpl.n	8003c26 <USART2_IRQHandler+0x6a>
 8003ca2:	e79c      	b.n	8003bde <USART2_IRQHandler+0x22>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003ca4:	490b      	ldr	r1, [pc, #44]	; (8003cd4 <USART2_IRQHandler+0x118>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 8003ca6:	480a      	ldr	r0, [pc, #40]	; (8003cd0 <USART2_IRQHandler+0x114>)
 8003ca8:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003cac:	f06f 0440 	mvn.w	r4, #64	; 0x40
 8003cb0:	f022 0201 	bic.w	r2, r2, #1
 8003cb4:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
 8003cb8:	601c      	str	r4, [r3, #0]
 8003cba:	f7fc fd9d 	bl	80007f8 <ASPEP_HWDataTransmittedIT>
 8003cbe:	e783      	b.n	8003bc8 <USART2_IRQHandler+0xc>
 8003cc0:	40004400 	.word	0x40004400
 8003cc4:	40004414 	.word	0x40004414
 8003cc8:	4000440c 	.word	0x4000440c
 8003ccc:	40026008 	.word	0x40026008
 8003cd0:	20000600 	.word	0x20000600
 8003cd4:	40026000 	.word	0x40026000

08003cd8 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8003cd8:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 8003cda:	f7fe f9df 	bl	800209c <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 8003cde:	e7fe      	b.n	8003cde <HardFault_Handler+0x6>

08003ce0 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8003ce0:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8003ce2:	4c0a      	ldr	r4, [pc, #40]	; (8003d0c <SysTick_Handler+0x2c>)
 8003ce4:	7823      	ldrb	r3, [r4, #0]
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	d006      	beq.n	8003cf8 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 8003cea:	3301      	adds	r3, #1
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8003cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003cf4:	f7fe b9c6 	b.w	8002084 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8003cf8:	f000 f90e 	bl	8003f18 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 8003cfc:	f000 fbcc 	bl	8004498 <HAL_SYSTICK_IRQHandler>
 8003d00:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8003d02:	7023      	strb	r3, [r4, #0]
}
 8003d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8003d08:	f7fe b9bc 	b.w	8002084 <MC_RunMotorControlTasks>
 8003d0c:	20000674 	.word	0x20000674

08003d10 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8003d10:	4b04      	ldr	r3, [pc, #16]	; (8003d24 <EXTI15_10_IRQHandler+0x14>)
 8003d12:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8003d14:	0492      	lsls	r2, r2, #18
 8003d16:	d400      	bmi.n	8003d1a <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 8003d18:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 8003d1a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003d1e:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8003d20:	f7fe b9cc 	b.w	80020bc <UI_HandleStartStopButton_cb>
 8003d24:	40013c00 	.word	0x40013c00

08003d28 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8003d28:	6802      	ldr	r2, [r0, #0]
 8003d2a:	4611      	mov	r1, r2
 8003d2c:	f06f 0340 	mvn.w	r3, #64	; 0x40
{
 8003d30:	b470      	push	{r4, r5, r6}
 8003d32:	f841 3b0c 	str.w	r3, [r1], #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d36:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 8003d3a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d3e:	e841 3400 	strex	r4, r3, [r1]
 8003d42:	2c00      	cmp	r4, #0
 8003d44:	d1f7      	bne.n	8003d36 <UASPEP_INIT+0xe>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8003d46:	f102 0114 	add.w	r1, r2, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d4a:	e851 3f00 	ldrex	r3, [r1]
 8003d4e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d52:	e841 3400 	strex	r4, r3, [r1]
 8003d56:	2c00      	cmp	r4, #0
 8003d58:	d1f7      	bne.n	8003d4a <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003d5a:	6901      	ldr	r1, [r0, #16]
 8003d5c:	4e16      	ldr	r6, [pc, #88]	; (8003db8 <UASPEP_INIT+0x90>)
 8003d5e:	6883      	ldr	r3, [r0, #8]
 8003d60:	5c74      	ldrb	r4, [r6, r1]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003d62:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003d64:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 8003d66:	1d11      	adds	r1, r2, #4
 8003d68:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8003d6a:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003d6c:	4611      	mov	r1, r2
 8003d6e:	f06f 0440 	mvn.w	r4, #64	; 0x40
 8003d72:	f841 4b14 	str.w	r4, [r1], #20
 8003d76:	5cf4      	ldrb	r4, [r6, r3]
 8003d78:	592b      	ldr	r3, [r5, r4]
 8003d7a:	f043 0310 	orr.w	r3, r3, #16
 8003d7e:	512b      	str	r3, [r5, r4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d80:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 8003d84:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d88:	e841 3400 	strex	r4, r3, [r1]
 8003d8c:	2c00      	cmp	r4, #0
 8003d8e:	d1f7      	bne.n	8003d80 <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8003d90:	68c3      	ldr	r3, [r0, #12]
 8003d92:	5cf3      	ldrb	r3, [r6, r3]
 8003d94:	441d      	add	r5, r3
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 8003d96:	1d11      	adds	r1, r2, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 8003d98:	f06f 0340 	mvn.w	r3, #64	; 0x40
 8003d9c:	60a9      	str	r1, [r5, #8]
 8003d9e:	f842 3b14 	str.w	r3, [r2], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003da2:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 8003da6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003daa:	e842 3100 	strex	r1, r3, [r2]
 8003dae:	2900      	cmp	r1, #0
 8003db0:	d1f7      	bne.n	8003da2 <UASPEP_INIT+0x7a>
}
 8003db2:	bc70      	pop	{r4, r5, r6}
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	080079c0 	.word	0x080079c0

08003dbc <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 8003dbc:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 8003dbe:	6906      	ldr	r6, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 8003dc0:	4f1a      	ldr	r7, [pc, #104]	; (8003e2c <UASPEP_SEND_PACKET+0x70>)
 8003dc2:	6884      	ldr	r4, [r0, #8]
 8003dc4:	5dbb      	ldrb	r3, [r7, r6]
 8003dc6:	58e5      	ldr	r5, [r4, r3]
 8003dc8:	07ed      	lsls	r5, r5, #31
 8003dca:	4423      	add	r3, r4
 8003dcc:	d421      	bmi.n	8003e12 <UASPEP_SEND_PACKET+0x56>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003dce:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003dd0:	6859      	ldr	r1, [r3, #4]
 8003dd2:	0c09      	lsrs	r1, r1, #16
 8003dd4:	0409      	lsls	r1, r1, #16
 8003dd6:	4311      	orrs	r1, r2
 8003dd8:	6059      	str	r1, [r3, #4]
  if (NULL == DMAx)
 8003dda:	b1a4      	cbz	r4, 8003e06 <UASPEP_SEND_PACKET+0x4a>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 8003ddc:	2e03      	cmp	r6, #3
 8003dde:	f104 0308 	add.w	r3, r4, #8
 8003de2:	bf88      	it	hi
 8003de4:	f104 030c 	addhi.w	r3, r4, #12
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8003de8:	f016 0603 	ands.w	r6, r6, #3
 8003dec:	d014      	beq.n	8003e18 <UASPEP_SEND_PACKET+0x5c>
 8003dee:	2e01      	cmp	r6, #1
 8003df0:	d018      	beq.n	8003e24 <UASPEP_SEND_PACKET+0x68>
 8003df2:	2e02      	cmp	r6, #2
 8003df4:	bf0c      	ite	eq
 8003df6:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 8003dfa:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 8003dfe:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003e00:	6903      	ldr	r3, [r0, #16]
 8003e02:	5cfb      	ldrb	r3, [r7, r3]
 8003e04:	4423      	add	r3, r4
 8003e06:	681a      	ldr	r2, [r3, #0]
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8003e08:	2001      	movs	r0, #1
 8003e0a:	4302      	orrs	r2, r0
  else
  {
    result = false;
  }
  return result;
}
 8003e0c:	bcf0      	pop	{r4, r5, r6, r7}
 8003e0e:	601a      	str	r2, [r3, #0]
 8003e10:	4770      	bx	lr
    result = false;
 8003e12:	2000      	movs	r0, #0
}
 8003e14:	bcf0      	pop	{r4, r5, r6, r7}
 8003e16:	4770      	bx	lr
 8003e18:	2220      	movs	r2, #32
 8003e1a:	601a      	str	r2, [r3, #0]
 8003e1c:	6903      	ldr	r3, [r0, #16]
 8003e1e:	5cfb      	ldrb	r3, [r7, r3]
 8003e20:	4423      	add	r3, r4
 8003e22:	e7f0      	b.n	8003e06 <UASPEP_SEND_PACKET+0x4a>
 8003e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8003e28:	e7f7      	b.n	8003e1a <UASPEP_SEND_PACKET+0x5e>
 8003e2a:	bf00      	nop
 8003e2c:	080079c0 	.word	0x080079c0

08003e30 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8003e30:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8003e32:	68c3      	ldr	r3, [r0, #12]
 8003e34:	4d09      	ldr	r5, [pc, #36]	; (8003e5c <UASPEP_RECEIVE_BUFFER+0x2c>)
 8003e36:	6844      	ldr	r4, [r0, #4]
 8003e38:	5ce8      	ldrb	r0, [r5, r3]
 8003e3a:	eb04 0c00 	add.w	ip, r4, r0
 8003e3e:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8003e42:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8003e46:	0c1b      	lsrs	r3, r3, #16
 8003e48:	041b      	lsls	r3, r3, #16
 8003e4a:	431a      	orrs	r2, r3
 8003e4c:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8003e50:	5823      	ldr	r3, [r4, r0]
 8003e52:	f043 0301 	orr.w	r3, r3, #1
 8003e56:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
}
 8003e58:	bc30      	pop	{r4, r5}
 8003e5a:	4770      	bx	lr
 8003e5c:	080079c0 	.word	0x080079c0

08003e60 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8003e60:	6802      	ldr	r2, [r0, #0]
{
 8003e62:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8003e64:	6813      	ldr	r3, [r2, #0]
 8003e66:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003e68:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 8003e6a:	6853      	ldr	r3, [r2, #4]
 8003e6c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8003e6e:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8003e70:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e72:	e852 3f00 	ldrex	r3, [r2]
 8003e76:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e7a:	e842 3100 	strex	r1, r3, [r2]
 8003e7e:	2900      	cmp	r1, #0
 8003e80:	d1f7      	bne.n	8003e72 <UASPEP_IDLE_ENABLE+0x12>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 8003e82:	b002      	add	sp, #8
 8003e84:	4770      	bx	lr
 8003e86:	bf00      	nop

08003e88 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003e88:	4a03      	ldr	r2, [pc, #12]	; (8003e98 <SystemInit+0x10>)
 8003e8a:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 8003e8e:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003e92:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003e96:	4770      	bx	lr
 8003e98:	e000ed00 	.word	0xe000ed00

08003e9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003e9c:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003e9e:	4a0e      	ldr	r2, [pc, #56]	; (8003ed8 <HAL_InitTick+0x3c>)
 8003ea0:	4b0e      	ldr	r3, [pc, #56]	; (8003edc <HAL_InitTick+0x40>)
 8003ea2:	7812      	ldrb	r2, [r2, #0]
 8003ea4:	681b      	ldr	r3, [r3, #0]
{
 8003ea6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003ea8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003eac:	fbb0 f0f2 	udiv	r0, r0, r2
 8003eb0:	fbb3 f0f0 	udiv	r0, r3, r0
 8003eb4:	f000 fad4 	bl	8004460 <HAL_SYSTICK_Config>
 8003eb8:	b908      	cbnz	r0, 8003ebe <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003eba:	2d0f      	cmp	r5, #15
 8003ebc:	d901      	bls.n	8003ec2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 8003ebe:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 8003ec0:	bd38      	pop	{r3, r4, r5, pc}
 8003ec2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003ec4:	4602      	mov	r2, r0
 8003ec6:	4629      	mov	r1, r5
 8003ec8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ecc:	f000 fa7c 	bl	80043c8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003ed0:	4b03      	ldr	r3, [pc, #12]	; (8003ee0 <HAL_InitTick+0x44>)
 8003ed2:	4620      	mov	r0, r4
 8003ed4:	601d      	str	r5, [r3, #0]
}
 8003ed6:	bd38      	pop	{r3, r4, r5, pc}
 8003ed8:	2000067c 	.word	0x2000067c
 8003edc:	20000678 	.word	0x20000678
 8003ee0:	20000680 	.word	0x20000680

08003ee4 <HAL_Init>:
{
 8003ee4:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003ee6:	4b0b      	ldr	r3, [pc, #44]	; (8003f14 <HAL_Init+0x30>)
 8003ee8:	681a      	ldr	r2, [r3, #0]
 8003eea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003eee:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003ef6:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003efe:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003f00:	2003      	movs	r0, #3
 8003f02:	f000 fa4f 	bl	80043a4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8003f06:	2004      	movs	r0, #4
 8003f08:	f7ff ffc8 	bl	8003e9c <HAL_InitTick>
  HAL_MspInit();
 8003f0c:	f7ff fcd2 	bl	80038b4 <HAL_MspInit>
}
 8003f10:	2000      	movs	r0, #0
 8003f12:	bd08      	pop	{r3, pc}
 8003f14:	40023c00 	.word	0x40023c00

08003f18 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8003f18:	4a03      	ldr	r2, [pc, #12]	; (8003f28 <HAL_IncTick+0x10>)
 8003f1a:	4b04      	ldr	r3, [pc, #16]	; (8003f2c <HAL_IncTick+0x14>)
 8003f1c:	6811      	ldr	r1, [r2, #0]
 8003f1e:	781b      	ldrb	r3, [r3, #0]
 8003f20:	440b      	add	r3, r1
 8003f22:	6013      	str	r3, [r2, #0]
}
 8003f24:	4770      	bx	lr
 8003f26:	bf00      	nop
 8003f28:	20001bf4 	.word	0x20001bf4
 8003f2c:	2000067c 	.word	0x2000067c

08003f30 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8003f30:	4b01      	ldr	r3, [pc, #4]	; (8003f38 <HAL_GetTick+0x8>)
 8003f32:	6818      	ldr	r0, [r3, #0]
}
 8003f34:	4770      	bx	lr
 8003f36:	bf00      	nop
 8003f38:	20001bf4 	.word	0x20001bf4

08003f3c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003f3c:	2800      	cmp	r0, #0
 8003f3e:	f000 809f 	beq.w	8004080 <HAL_ADC_Init+0x144>
{
 8003f42:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8003f44:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8003f46:	4604      	mov	r4, r0
 8003f48:	b13d      	cbz	r5, 8003f5a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f4a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8003f4c:	06db      	lsls	r3, r3, #27
 8003f4e:	d50c      	bpl.n	8003f6a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8003f50:	2300      	movs	r3, #0
 8003f52:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8003f56:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8003f58:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 8003f5a:	f7ff fcc9 	bl	80038f0 <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 8003f5e:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f60:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8003f62:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003f66:	06db      	lsls	r3, r3, #27
 8003f68:	d4f2      	bmi.n	8003f50 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 8003f6a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f6c:	4a48      	ldr	r2, [pc, #288]	; (8004090 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 8003f6e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f72:	f023 0302 	bic.w	r3, r3, #2
 8003f76:	f043 0302 	orr.w	r3, r3, #2
 8003f7a:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f7c:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f7e:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003f80:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 8003f84:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003f86:	6851      	ldr	r1, [r2, #4]
 8003f88:	6860      	ldr	r0, [r4, #4]
 8003f8a:	4301      	orrs	r1, r0
 8003f8c:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f8e:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f90:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003f92:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003f94:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003f98:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003f9a:	6859      	ldr	r1, [r3, #4]
 8003f9c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8003fa0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003fa2:	6859      	ldr	r1, [r3, #4]
 8003fa4:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 8003fa8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003faa:	685a      	ldr	r2, [r3, #4]
 8003fac:	4302      	orrs	r2, r0
 8003fae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fb0:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fb2:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003fb4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 8003fb8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fba:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fbc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003fbe:	4302      	orrs	r2, r0
 8003fc0:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003fc2:	4a34      	ldr	r2, [pc, #208]	; (8004094 <HAL_ADC_Init+0x158>)
 8003fc4:	4291      	cmp	r1, r2
 8003fc6:	d052      	beq.n	800406e <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fc8:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fca:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003fcc:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8003fd0:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003fd2:	689a      	ldr	r2, [r3, #8]
 8003fd4:	4311      	orrs	r1, r2
 8003fd6:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003fd8:	6899      	ldr	r1, [r3, #8]
 8003fda:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 8003fde:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003fe0:	689a      	ldr	r2, [r3, #8]
 8003fe2:	432a      	orrs	r2, r5
 8003fe4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003fe6:	689a      	ldr	r2, [r3, #8]
 8003fe8:	f022 0202 	bic.w	r2, r2, #2
 8003fec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003fee:	689a      	ldr	r2, [r3, #8]
 8003ff0:	7e21      	ldrb	r1, [r4, #24]
 8003ff2:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8003ff6:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003ff8:	f894 2020 	ldrb.w	r2, [r4, #32]
 8003ffc:	2a00      	cmp	r2, #0
 8003ffe:	d041      	beq.n	8004084 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004000:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004002:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004004:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004008:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800400a:	6858      	ldr	r0, [r3, #4]
 800400c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8004010:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004012:	1e51      	subs	r1, r2, #1
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800401a:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800401c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800401e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004020:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004022:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004026:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004028:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800402a:	3901      	subs	r1, #1
 800402c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004030:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004032:	6899      	ldr	r1, [r3, #8]
 8004034:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004038:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800403a:	6899      	ldr	r1, [r3, #8]
 800403c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8004040:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8004044:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004046:	6899      	ldr	r1, [r3, #8]
 8004048:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800404c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800404e:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004050:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004052:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8004056:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004058:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800405a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800405c:	f023 0303 	bic.w	r3, r3, #3
 8004060:	f043 0301 	orr.w	r3, r3, #1
 8004064:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004066:	2300      	movs	r3, #0
 8004068:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800406c:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800406e:	689a      	ldr	r2, [r3, #8]
 8004070:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004074:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004076:	689a      	ldr	r2, [r3, #8]
 8004078:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800407c:	609a      	str	r2, [r3, #8]
 800407e:	e7b2      	b.n	8003fe6 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 8004080:	2001      	movs	r0, #1
}
 8004082:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004084:	685a      	ldr	r2, [r3, #4]
 8004086:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800408a:	605a      	str	r2, [r3, #4]
 800408c:	e7c6      	b.n	800401c <HAL_ADC_Init+0xe0>
 800408e:	bf00      	nop
 8004090:	40012300 	.word	0x40012300
 8004094:	0f000001 	.word	0x0f000001

08004098 <HAL_ADC_ConfigChannel>:
{
 8004098:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 800409a:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 800409e:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80040a0:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80040a2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80040a4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80040a6:	f000 809c 	beq.w	80041e2 <HAL_ADC_ConfigChannel+0x14a>
 80040aa:	2301      	movs	r3, #1
 80040ac:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040b0:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80040b2:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80040b4:	2c09      	cmp	r4, #9
 80040b6:	d82d      	bhi.n	8004114 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040b8:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040ba:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80040bc:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80040c0:	f04f 0c07 	mov.w	ip, #7
 80040c4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80040c8:	ea25 050c 	bic.w	r5, r5, ip
 80040cc:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040ce:	691d      	ldr	r5, [r3, #16]
 80040d0:	fa02 f20e 	lsl.w	r2, r2, lr
 80040d4:	432a      	orrs	r2, r5
 80040d6:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 80040d8:	684a      	ldr	r2, [r1, #4]
 80040da:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80040dc:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 80040de:	d82f      	bhi.n	8004140 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040e0:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80040e4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80040e6:	3a05      	subs	r2, #5
 80040e8:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040ec:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80040f0:	fa0e f202 	lsl.w	r2, lr, r2
 80040f4:	ea21 0202 	bic.w	r2, r1, r2
 80040f8:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80040fa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040fc:	ea4c 0202 	orr.w	r2, ip, r2
 8004100:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004102:	4a39      	ldr	r2, [pc, #228]	; (80041e8 <HAL_ADC_ConfigChannel+0x150>)
 8004104:	4293      	cmp	r3, r2
 8004106:	d030      	beq.n	800416a <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8004108:	2300      	movs	r3, #0
 800410a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800410e:	4618      	mov	r0, r3
}
 8004110:	b003      	add	sp, #12
 8004112:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004114:	fa1f fc84 	uxth.w	ip, r4
 8004118:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 800411c:	68dd      	ldr	r5, [r3, #12]
 800411e:	f1a2 0e1e 	sub.w	lr, r2, #30
 8004122:	2207      	movs	r2, #7
 8004124:	fa02 f20e 	lsl.w	r2, r2, lr
 8004128:	ea25 0202 	bic.w	r2, r5, r2
 800412c:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800412e:	688a      	ldr	r2, [r1, #8]
 8004130:	68dd      	ldr	r5, [r3, #12]
 8004132:	fa02 f20e 	lsl.w	r2, r2, lr
 8004136:	432a      	orrs	r2, r5
 8004138:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800413a:	684a      	ldr	r2, [r1, #4]
 800413c:	2a06      	cmp	r2, #6
 800413e:	d9cf      	bls.n	80040e0 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8004140:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004142:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8004146:	d836      	bhi.n	80041b6 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004148:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800414a:	3a23      	subs	r2, #35	; 0x23
 800414c:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800414e:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004152:	fa05 f202 	lsl.w	r2, r5, r2
 8004156:	ea21 0202 	bic.w	r2, r1, r2
 800415a:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800415c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800415e:	ea4c 0202 	orr.w	r2, ip, r2
 8004162:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004164:	4a20      	ldr	r2, [pc, #128]	; (80041e8 <HAL_ADC_ConfigChannel+0x150>)
 8004166:	4293      	cmp	r3, r2
 8004168:	d1ce      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x70>
 800416a:	2c12      	cmp	r4, #18
 800416c:	d032      	beq.n	80041d4 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800416e:	f1a4 0310 	sub.w	r3, r4, #16
 8004172:	2b01      	cmp	r3, #1
 8004174:	d8c8      	bhi.n	8004108 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004176:	4a1d      	ldr	r2, [pc, #116]	; (80041ec <HAL_ADC_ConfigChannel+0x154>)
 8004178:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800417a:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800417c:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8004180:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8004182:	d1c1      	bne.n	8004108 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8004184:	4b1a      	ldr	r3, [pc, #104]	; (80041f0 <HAL_ADC_ConfigChannel+0x158>)
 8004186:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 8004190:	f202 3283 	addw	r2, r2, #899	; 0x383
 8004194:	fba2 2303 	umull	r2, r3, r2, r3
 8004198:	0c9b      	lsrs	r3, r3, #18
 800419a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 800419e:	005b      	lsls	r3, r3, #1
 80041a0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80041a2:	9b01      	ldr	r3, [sp, #4]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d0af      	beq.n	8004108 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 80041a8:	9b01      	ldr	r3, [sp, #4]
 80041aa:	3b01      	subs	r3, #1
 80041ac:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80041ae:	9b01      	ldr	r3, [sp, #4]
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d1f9      	bne.n	80041a8 <HAL_ADC_ConfigChannel+0x110>
 80041b4:	e7a8      	b.n	8004108 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041b6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80041b8:	3a41      	subs	r2, #65	; 0x41
 80041ba:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041bc:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80041c0:	fa05 f202 	lsl.w	r2, r5, r2
 80041c4:	ea21 0202 	bic.w	r2, r1, r2
 80041c8:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80041ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80041cc:	ea4c 0202 	orr.w	r2, ip, r2
 80041d0:	62da      	str	r2, [r3, #44]	; 0x2c
 80041d2:	e796      	b.n	8004102 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80041d4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80041d8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80041dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80041e0:	e792      	b.n	8004108 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 80041e2:	2002      	movs	r0, #2
}
 80041e4:	b003      	add	sp, #12
 80041e6:	bd30      	pop	{r4, r5, pc}
 80041e8:	40012000 	.word	0x40012000
 80041ec:	40012300 	.word	0x40012300
 80041f0:	20000678 	.word	0x20000678

080041f4 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 80041f4:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 80041f6:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80041fa:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 80041fc:	2b01      	cmp	r3, #1
 80041fe:	f000 80c8 	beq.w	8004392 <HAL_ADCEx_InjectedConfigChannel+0x19e>
 8004202:	2301      	movs	r3, #1
 8004204:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004208:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800420a:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800420c:	2d09      	cmp	r5, #9
 800420e:	d868      	bhi.n	80042e2 <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004210:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004212:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004214:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8004218:	2707      	movs	r7, #7
 800421a:	fa07 f70c 	lsl.w	r7, r7, ip
 800421e:	ea24 0407 	bic.w	r4, r4, r7
 8004222:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004224:	691c      	ldr	r4, [r3, #16]
 8004226:	fa02 f20c 	lsl.w	r2, r2, ip
 800422a:	4322      	orrs	r2, r4
 800422c:	611a      	str	r2, [r3, #16]
 800422e:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004230:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004232:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004236:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004238:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800423c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800423e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8004240:	f10e 32ff 	add.w	r2, lr, #4294967295
 8004244:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004248:	1ce2      	adds	r2, r4, #3
 800424a:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800424e:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004250:	b2d2      	uxtb	r2, r2
 8004252:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8004254:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004258:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800425c:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004260:	fa0e f202 	lsl.w	r2, lr, r2
 8004264:	ea27 0202 	bic.w	r2, r7, r2
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800426a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800426c:	ea4c 0202 	orr.w	r2, ip, r2
 8004270:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004272:	4a49      	ldr	r2, [pc, #292]	; (8004398 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 8004274:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 8004276:	689a      	ldr	r2, [r3, #8]
 8004278:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 800427c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 800427e:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 8004280:	d066      	beq.n	8004350 <HAL_ADCEx_InjectedConfigChannel+0x15c>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 8004282:	4316      	orrs	r6, r2
 8004284:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 8004286:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004288:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 800428a:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800428e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 8004290:	689a      	ldr	r2, [r3, #8]
 8004292:	4332      	orrs	r2, r6
 8004294:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 8004296:	7d4a      	ldrb	r2, [r1, #21]
 8004298:	2a00      	cmp	r2, #0
 800429a:	d034      	beq.n	8004306 <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 800429c:	685a      	ldr	r2, [r3, #4]
 800429e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80042a2:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80042a4:	7d0a      	ldrb	r2, [r1, #20]
 80042a6:	2a00      	cmp	r2, #0
 80042a8:	d034      	beq.n	8004314 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80042aa:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 80042ac:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80042ae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80042b2:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80042b4:	d034      	beq.n	8004320 <HAL_ADCEx_InjectedConfigChannel+0x12c>
 80042b6:	2c03      	cmp	r4, #3
 80042b8:	d059      	beq.n	800436e <HAL_ADCEx_InjectedConfigChannel+0x17a>
 80042ba:	2c01      	cmp	r4, #1
 80042bc:	d04c      	beq.n	8004358 <HAL_ADCEx_InjectedConfigChannel+0x164>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80042be:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80042c0:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80042c2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80042c6:	f022 020f 	bic.w	r2, r2, #15
 80042ca:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80042cc:	6a1a      	ldr	r2, [r3, #32]
 80042ce:	430a      	orrs	r2, r1
 80042d0:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 80042d2:	4a32      	ldr	r2, [pc, #200]	; (800439c <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 80042d4:	4293      	cmp	r3, r2
 80042d6:	d030      	beq.n	800433a <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80042d8:	2300      	movs	r3, #0
 80042da:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80042de:	4618      	mov	r0, r3
}
 80042e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 80042e2:	fa1f fc85 	uxth.w	ip, r5
 80042e6:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 80042ea:	f1a2 041e 	sub.w	r4, r2, #30
 80042ee:	2707      	movs	r7, #7
 80042f0:	68da      	ldr	r2, [r3, #12]
 80042f2:	40a7      	lsls	r7, r4
 80042f4:	ea22 0207 	bic.w	r2, r2, r7
 80042f8:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 80042fa:	688a      	ldr	r2, [r1, #8]
 80042fc:	40a2      	lsls	r2, r4
 80042fe:	68dc      	ldr	r4, [r3, #12]
 8004300:	4322      	orrs	r2, r4
 8004302:	60da      	str	r2, [r3, #12]
 8004304:	e794      	b.n	8004230 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004306:	685a      	ldr	r2, [r3, #4]
 8004308:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800430c:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800430e:	7d0a      	ldrb	r2, [r1, #20]
 8004310:	2a00      	cmp	r2, #0
 8004312:	d1ca      	bne.n	80042aa <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004314:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004316:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004318:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800431c:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 800431e:	d1ca      	bne.n	80042b6 <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004320:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004322:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004324:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004328:	f022 020f 	bic.w	r2, r2, #15
 800432c:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800432e:	699a      	ldr	r2, [r3, #24]
 8004330:	430a      	orrs	r2, r1
 8004332:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004334:	4a19      	ldr	r2, [pc, #100]	; (800439c <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8004336:	4293      	cmp	r3, r2
 8004338:	d1ce      	bne.n	80042d8 <HAL_ADCEx_InjectedConfigChannel+0xe4>
 800433a:	2d12      	cmp	r5, #18
 800433c:	d022      	beq.n	8004384 <HAL_ADCEx_InjectedConfigChannel+0x190>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800433e:	3d10      	subs	r5, #16
 8004340:	2d01      	cmp	r5, #1
 8004342:	d8c9      	bhi.n	80042d8 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004344:	4a16      	ldr	r2, [pc, #88]	; (80043a0 <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 8004346:	6853      	ldr	r3, [r2, #4]
 8004348:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800434c:	6053      	str	r3, [r2, #4]
 800434e:	e7c3      	b.n	80042d8 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004350:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004354:	609a      	str	r2, [r3, #8]
 8004356:	e79e      	b.n	8004296 <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004358:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800435a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800435c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004360:	f022 020f 	bic.w	r2, r2, #15
 8004364:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004366:	695a      	ldr	r2, [r3, #20]
 8004368:	430a      	orrs	r2, r1
 800436a:	615a      	str	r2, [r3, #20]
      break;
 800436c:	e7b1      	b.n	80042d2 <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800436e:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 8004370:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 8004372:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004376:	f022 020f 	bic.w	r2, r2, #15
 800437a:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 800437c:	69da      	ldr	r2, [r3, #28]
 800437e:	430a      	orrs	r2, r1
 8004380:	61da      	str	r2, [r3, #28]
      break;
 8004382:	e7a6      	b.n	80042d2 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004384:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8004388:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800438c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 8004390:	e7a2      	b.n	80042d8 <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 8004392:	2002      	movs	r0, #2
}
 8004394:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004396:	bf00      	nop
 8004398:	000f0001 	.word	0x000f0001
 800439c:	40012000 	.word	0x40012000
 80043a0:	40012300 	.word	0x40012300

080043a4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80043a4:	4907      	ldr	r1, [pc, #28]	; (80043c4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80043a6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043a8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043aa:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80043ae:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80043b2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80043b4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80043b6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80043ba:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80043be:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80043c0:	4770      	bx	lr
 80043c2:	bf00      	nop
 80043c4:	e000ed00 	.word	0xe000ed00

080043c8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80043c8:	4b1c      	ldr	r3, [pc, #112]	; (800443c <HAL_NVIC_SetPriority+0x74>)
 80043ca:	68db      	ldr	r3, [r3, #12]
 80043cc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043d0:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043d2:	f1c3 0e07 	rsb	lr, r3, #7
 80043d6:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043da:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80043de:	bf28      	it	cs
 80043e0:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80043e4:	f1bc 0f06 	cmp.w	ip, #6
 80043e8:	d91b      	bls.n	8004422 <HAL_NVIC_SetPriority+0x5a>
 80043ea:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80043ec:	f04f 3cff 	mov.w	ip, #4294967295
 80043f0:	fa0c fc03 	lsl.w	ip, ip, r3
 80043f4:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80043f8:	f04f 3cff 	mov.w	ip, #4294967295
 80043fc:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004400:	ea21 010c 	bic.w	r1, r1, ip
 8004404:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004406:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004408:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 800440c:	db0c      	blt.n	8004428 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800440e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004412:	0109      	lsls	r1, r1, #4
 8004414:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004418:	b2c9      	uxtb	r1, r1
 800441a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800441e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004422:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004424:	4613      	mov	r3, r2
 8004426:	e7e7      	b.n	80043f8 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004428:	4b05      	ldr	r3, [pc, #20]	; (8004440 <HAL_NVIC_SetPriority+0x78>)
 800442a:	f000 000f 	and.w	r0, r0, #15
 800442e:	0109      	lsls	r1, r1, #4
 8004430:	4403      	add	r3, r0
 8004432:	b2c9      	uxtb	r1, r1
 8004434:	7619      	strb	r1, [r3, #24]
 8004436:	f85d fb04 	ldr.w	pc, [sp], #4
 800443a:	bf00      	nop
 800443c:	e000ed00 	.word	0xe000ed00
 8004440:	e000ecfc 	.word	0xe000ecfc

08004444 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004444:	2800      	cmp	r0, #0
 8004446:	db08      	blt.n	800445a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004448:	0941      	lsrs	r1, r0, #5
 800444a:	4a04      	ldr	r2, [pc, #16]	; (800445c <HAL_NVIC_EnableIRQ+0x18>)
 800444c:	f000 001f 	and.w	r0, r0, #31
 8004450:	2301      	movs	r3, #1
 8004452:	fa03 f000 	lsl.w	r0, r3, r0
 8004456:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 800445a:	4770      	bx	lr
 800445c:	e000e100 	.word	0xe000e100

08004460 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004460:	3801      	subs	r0, #1
 8004462:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004466:	d210      	bcs.n	800448a <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004468:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800446a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800446e:	4c08      	ldr	r4, [pc, #32]	; (8004490 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004470:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004472:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8004476:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800447a:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800447c:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800447e:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004480:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8004482:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004486:	6119      	str	r1, [r3, #16]
 8004488:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 800448a:	2001      	movs	r0, #1
 800448c:	4770      	bx	lr
 800448e:	bf00      	nop
 8004490:	e000ed00 	.word	0xe000ed00

08004494 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004494:	4770      	bx	lr
 8004496:	bf00      	nop

08004498 <HAL_SYSTICK_IRQHandler>:
{
 8004498:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 800449a:	f7ff fffb 	bl	8004494 <HAL_SYSTICK_Callback>
}
 800449e:	bd08      	pop	{r3, pc}

080044a0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80044a0:	b538      	push	{r3, r4, r5, lr}
 80044a2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 80044a4:	f7ff fd44 	bl	8003f30 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80044a8:	2c00      	cmp	r4, #0
 80044aa:	d052      	beq.n	8004552 <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80044ac:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 80044ae:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 80044b0:	2102      	movs	r1, #2
 80044b2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 80044b6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 80044ba:	681a      	ldr	r2, [r3, #0]
 80044bc:	f022 0201 	bic.w	r2, r2, #1
 80044c0:	4605      	mov	r5, r0
 80044c2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044c4:	e005      	b.n	80044d2 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80044c6:	f7ff fd33 	bl	8003f30 <HAL_GetTick>
 80044ca:	1b43      	subs	r3, r0, r5
 80044cc:	2b05      	cmp	r3, #5
 80044ce:	d839      	bhi.n	8004544 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80044d0:	6823      	ldr	r3, [r4, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	07d1      	lsls	r1, r2, #31
 80044d6:	d4f6      	bmi.n	80044c6 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044d8:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 80044dc:	68e1      	ldr	r1, [r4, #12]
 80044de:	4302      	orrs	r2, r0
 80044e0:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e2:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044e6:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80044e8:	432a      	orrs	r2, r5
 80044ea:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044ec:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 80044ee:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80044f0:	4302      	orrs	r2, r0
 80044f2:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80044f4:	4933      	ldr	r1, [pc, #204]	; (80045c4 <HAL_DMA_Init+0x124>)
 80044f6:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 80044f8:	6a25      	ldr	r5, [r4, #32]
 80044fa:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80044fc:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80044fe:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004500:	2904      	cmp	r1, #4
 8004502:	d028      	beq.n	8004556 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004504:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004506:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004508:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800450c:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800450e:	b2d8      	uxtb	r0, r3
 8004510:	4a2d      	ldr	r2, [pc, #180]	; (80045c8 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8004512:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004514:	3810      	subs	r0, #16
 8004516:	fba2 5200 	umull	r5, r2, r2, r0
 800451a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800451c:	492b      	ldr	r1, [pc, #172]	; (80045cc <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800451e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004522:	5c89      	ldrb	r1, [r1, r2]
 8004524:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004526:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 800452a:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800452c:	bf88      	it	hi
 800452e:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004530:	223f      	movs	r2, #63	; 0x3f
 8004532:	408a      	lsls	r2, r1
 8004534:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004536:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004538:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 800453a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800453c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 800453e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004542:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004544:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004546:	2220      	movs	r2, #32
 8004548:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800454a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 800454e:	4618      	mov	r0, r3
}
 8004550:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004552:	2001      	movs	r0, #1
}
 8004554:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004556:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 800455a:	4329      	orrs	r1, r5
 800455c:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 800455e:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004560:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8004562:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004564:	f021 0107 	bic.w	r1, r1, #7
 8004568:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 800456a:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800456e:	2d00      	cmp	r5, #0
 8004570:	d0cd      	beq.n	800450e <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004572:	b178      	cbz	r0, 8004594 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004574:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004578:	d016      	beq.n	80045a8 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800457a:	2a02      	cmp	r2, #2
 800457c:	d903      	bls.n	8004586 <HAL_DMA_Init+0xe6>
 800457e:	2a03      	cmp	r2, #3
 8004580:	d1c5      	bne.n	800450e <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004582:	01ea      	lsls	r2, r5, #7
 8004584:	d5c3      	bpl.n	800450e <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8004586:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004588:	2240      	movs	r2, #64	; 0x40
 800458a:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 800458c:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8004590:	4618      	mov	r0, r3
}
 8004592:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8004594:	2a01      	cmp	r2, #1
 8004596:	d003      	beq.n	80045a0 <HAL_DMA_Init+0x100>
 8004598:	f032 0202 	bics.w	r2, r2, #2
 800459c:	d1b7      	bne.n	800450e <HAL_DMA_Init+0x6e>
 800459e:	e7f0      	b.n	8004582 <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80045a0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 80045a4:	d1b3      	bne.n	800450e <HAL_DMA_Init+0x6e>
 80045a6:	e7ee      	b.n	8004586 <HAL_DMA_Init+0xe6>
    switch (tmp)
 80045a8:	2a03      	cmp	r2, #3
 80045aa:	d8b0      	bhi.n	800450e <HAL_DMA_Init+0x6e>
 80045ac:	a001      	add	r0, pc, #4	; (adr r0, 80045b4 <HAL_DMA_Init+0x114>)
 80045ae:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 80045b2:	bf00      	nop
 80045b4:	08004587 	.word	0x08004587
 80045b8:	08004583 	.word	0x08004583
 80045bc:	08004587 	.word	0x08004587
 80045c0:	080045a1 	.word	0x080045a1
 80045c4:	f010803f 	.word	0xf010803f
 80045c8:	aaaaaaab 	.word	0xaaaaaaab
 80045cc:	080079e0 	.word	0x080079e0

080045d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045d4:	2200      	movs	r2, #0
 80045d6:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80045d8:	4e70      	ldr	r6, [pc, #448]	; (800479c <HAL_GPIO_Init+0x1cc>)
{
 80045da:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045dc:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 80045de:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045e2:	4689      	mov	r9, r1
 80045e4:	e004      	b.n	80045f0 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045e6:	3301      	adds	r3, #1
 80045e8:	2b10      	cmp	r3, #16
 80045ea:	f102 0202 	add.w	r2, r2, #2
 80045ee:	d078      	beq.n	80046e2 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 80045f0:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045f4:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 80045f8:	43a1      	bics	r1, r4
 80045fa:	d1f4      	bne.n	80045e6 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045fc:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8004600:	f00c 0103 	and.w	r1, ip, #3
 8004604:	1e4d      	subs	r5, r1, #1
 8004606:	2d01      	cmp	r5, #1
 8004608:	d96e      	bls.n	80046e8 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800460a:	2903      	cmp	r1, #3
 800460c:	f040 80ae 	bne.w	800476c <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004610:	4091      	lsls	r1, r2
 8004612:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8004614:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004616:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004618:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800461a:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 800461e:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004620:	d0e1      	beq.n	80045e6 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004622:	4d5f      	ldr	r5, [pc, #380]	; (80047a0 <HAL_GPIO_Init+0x1d0>)
 8004624:	2100      	movs	r1, #0
 8004626:	9103      	str	r1, [sp, #12]
 8004628:	6c69      	ldr	r1, [r5, #68]	; 0x44
 800462a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 800462e:	6469      	str	r1, [r5, #68]	; 0x44
 8004630:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8004632:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004636:	9103      	str	r1, [sp, #12]
 8004638:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 800463a:	f023 0103 	bic.w	r1, r3, #3
 800463e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004642:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004646:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 800464a:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800464e:	00bf      	lsls	r7, r7, #2
 8004650:	250f      	movs	r5, #15
 8004652:	40bd      	lsls	r5, r7
 8004654:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004658:	4d52      	ldr	r5, [pc, #328]	; (80047a4 <HAL_GPIO_Init+0x1d4>)
 800465a:	42a8      	cmp	r0, r5
 800465c:	d017      	beq.n	800468e <HAL_GPIO_Init+0xbe>
 800465e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004662:	42a8      	cmp	r0, r5
 8004664:	f000 8086 	beq.w	8004774 <HAL_GPIO_Init+0x1a4>
 8004668:	4d4f      	ldr	r5, [pc, #316]	; (80047a8 <HAL_GPIO_Init+0x1d8>)
 800466a:	42a8      	cmp	r0, r5
 800466c:	f000 8087 	beq.w	800477e <HAL_GPIO_Init+0x1ae>
 8004670:	4d4e      	ldr	r5, [pc, #312]	; (80047ac <HAL_GPIO_Init+0x1dc>)
 8004672:	42a8      	cmp	r0, r5
 8004674:	f000 808a 	beq.w	800478c <HAL_GPIO_Init+0x1bc>
 8004678:	4d4d      	ldr	r5, [pc, #308]	; (80047b0 <HAL_GPIO_Init+0x1e0>)
 800467a:	42a8      	cmp	r0, r5
 800467c:	bf0c      	ite	eq
 800467e:	f04f 0e04 	moveq.w	lr, #4
 8004682:	f04f 0e07 	movne.w	lr, #7
 8004686:	fa0e f707 	lsl.w	r7, lr, r7
 800468a:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 800468e:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8004692:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004694:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004698:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 800469c:	bf0c      	ite	eq
 800469e:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80046a0:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 80046a4:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 80046a6:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046a8:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 80046ac:	bf0c      	ite	eq
 80046ae:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80046b0:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 80046b4:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 80046b6:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80046b8:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 80046bc:	bf0c      	ite	eq
 80046be:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 80046c0:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 80046c4:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80046c6:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80046c8:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046cc:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 80046d0:	bf0c      	ite	eq
 80046d2:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 80046d4:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046d8:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 80046da:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80046dc:	f102 0202 	add.w	r2, r2, #2
 80046e0:	d186      	bne.n	80045f0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80046e2:	b005      	add	sp, #20
 80046e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046e8:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 80046ec:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046ee:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80046f2:	2503      	movs	r5, #3
 80046f4:	fa05 fe02 	lsl.w	lr, r5, r2
 80046f8:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 80046fc:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8004700:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004702:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004704:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004708:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800470c:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8004710:	409f      	lsls	r7, r3
 8004712:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004716:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004718:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800471a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800471e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004722:	4097      	lsls	r7, r2
 8004724:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004728:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 800472a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800472c:	fa01 f102 	lsl.w	r1, r1, r2
 8004730:	f47f af70 	bne.w	8004614 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8004734:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004738:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800473c:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004740:	f8de 7020 	ldr.w	r7, [lr, #32]
 8004744:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004746:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800474a:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800474e:	fa07 f708 	lsl.w	r7, r7, r8
 8004752:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004754:	270f      	movs	r7, #15
 8004756:	fa07 f808 	lsl.w	r8, r7, r8
 800475a:	9f00      	ldr	r7, [sp, #0]
 800475c:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004760:	9f01      	ldr	r7, [sp, #4]
 8004762:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8004766:	f8ce 7020 	str.w	r7, [lr, #32]
 800476a:	e753      	b.n	8004614 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800476c:	2503      	movs	r5, #3
 800476e:	4095      	lsls	r5, r2
 8004770:	43ed      	mvns	r5, r5
 8004772:	e7d1      	b.n	8004718 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004774:	fa0a f707 	lsl.w	r7, sl, r7
 8004778:	ea48 0807 	orr.w	r8, r8, r7
 800477c:	e787      	b.n	800468e <HAL_GPIO_Init+0xbe>
 800477e:	f04f 0e02 	mov.w	lr, #2
 8004782:	fa0e f707 	lsl.w	r7, lr, r7
 8004786:	ea48 0807 	orr.w	r8, r8, r7
 800478a:	e780      	b.n	800468e <HAL_GPIO_Init+0xbe>
 800478c:	f04f 0e03 	mov.w	lr, #3
 8004790:	fa0e f707 	lsl.w	r7, lr, r7
 8004794:	ea48 0807 	orr.w	r8, r8, r7
 8004798:	e779      	b.n	800468e <HAL_GPIO_Init+0xbe>
 800479a:	bf00      	nop
 800479c:	40013c00 	.word	0x40013c00
 80047a0:	40023800 	.word	0x40023800
 80047a4:	40020000 	.word	0x40020000
 80047a8:	40020800 	.word	0x40020800
 80047ac:	40020c00 	.word	0x40020c00
 80047b0:	40021000 	.word	0x40021000

080047b4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047b4:	b902      	cbnz	r2, 80047b8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047b6:	0409      	lsls	r1, r1, #16
 80047b8:	6181      	str	r1, [r0, #24]
  }
}
 80047ba:	4770      	bx	lr

080047bc <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80047bc:	2800      	cmp	r0, #0
 80047be:	f000 81a2 	beq.w	8004b06 <HAL_RCC_OscConfig+0x34a>
{
 80047c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047c6:	6803      	ldr	r3, [r0, #0]
 80047c8:	07dd      	lsls	r5, r3, #31
{
 80047ca:	b082      	sub	sp, #8
 80047cc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80047ce:	d52f      	bpl.n	8004830 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047d0:	499e      	ldr	r1, [pc, #632]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 80047d2:	688a      	ldr	r2, [r1, #8]
 80047d4:	f002 020c 	and.w	r2, r2, #12
 80047d8:	2a04      	cmp	r2, #4
 80047da:	f000 80ed 	beq.w	80049b8 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80047de:	688a      	ldr	r2, [r1, #8]
 80047e0:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80047e4:	2a08      	cmp	r2, #8
 80047e6:	f000 80e3 	beq.w	80049b0 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80047ea:	6863      	ldr	r3, [r4, #4]
 80047ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80047f0:	f000 80ec 	beq.w	80049cc <HAL_RCC_OscConfig+0x210>
 80047f4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80047f8:	f000 8175 	beq.w	8004ae6 <HAL_RCC_OscConfig+0x32a>
 80047fc:	4d93      	ldr	r5, [pc, #588]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 80047fe:	682a      	ldr	r2, [r5, #0]
 8004800:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004804:	602a      	str	r2, [r5, #0]
 8004806:	682a      	ldr	r2, [r5, #0]
 8004808:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800480c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800480e:	2b00      	cmp	r3, #0
 8004810:	f040 80e1 	bne.w	80049d6 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004814:	f7ff fb8c 	bl	8003f30 <HAL_GetTick>
 8004818:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800481a:	e005      	b.n	8004828 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800481c:	f7ff fb88 	bl	8003f30 <HAL_GetTick>
 8004820:	1b80      	subs	r0, r0, r6
 8004822:	2864      	cmp	r0, #100	; 0x64
 8004824:	f200 8101 	bhi.w	8004a2a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004828:	682b      	ldr	r3, [r5, #0]
 800482a:	039b      	lsls	r3, r3, #14
 800482c:	d4f6      	bmi.n	800481c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800482e:	6823      	ldr	r3, [r4, #0]
 8004830:	079f      	lsls	r7, r3, #30
 8004832:	d528      	bpl.n	8004886 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004834:	4a85      	ldr	r2, [pc, #532]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 8004836:	6891      	ldr	r1, [r2, #8]
 8004838:	f011 0f0c 	tst.w	r1, #12
 800483c:	f000 8090 	beq.w	8004960 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004840:	6891      	ldr	r1, [r2, #8]
 8004842:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004846:	2908      	cmp	r1, #8
 8004848:	f000 8086 	beq.w	8004958 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800484c:	68e3      	ldr	r3, [r4, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	f000 810e 	beq.w	8004a70 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004854:	4b7e      	ldr	r3, [pc, #504]	; (8004a50 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004856:	4e7d      	ldr	r6, [pc, #500]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8004858:	2201      	movs	r2, #1
 800485a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 800485c:	f7ff fb68 	bl	8003f30 <HAL_GetTick>
 8004860:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004862:	e005      	b.n	8004870 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004864:	f7ff fb64 	bl	8003f30 <HAL_GetTick>
 8004868:	1b40      	subs	r0, r0, r5
 800486a:	2802      	cmp	r0, #2
 800486c:	f200 80dd 	bhi.w	8004a2a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004870:	6833      	ldr	r3, [r6, #0]
 8004872:	0798      	lsls	r0, r3, #30
 8004874:	d5f6      	bpl.n	8004864 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004876:	6833      	ldr	r3, [r6, #0]
 8004878:	6922      	ldr	r2, [r4, #16]
 800487a:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800487e:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004882:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	071a      	lsls	r2, r3, #28
 8004888:	d451      	bmi.n	800492e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800488a:	0758      	lsls	r0, r3, #29
 800488c:	d52f      	bpl.n	80048ee <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800488e:	4a6f      	ldr	r2, [pc, #444]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 8004890:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004892:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004896:	d07f      	beq.n	8004998 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8004898:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489a:	4e6e      	ldr	r6, [pc, #440]	; (8004a54 <HAL_RCC_OscConfig+0x298>)
 800489c:	6833      	ldr	r3, [r6, #0]
 800489e:	05d9      	lsls	r1, r3, #23
 80048a0:	f140 80b3 	bpl.w	8004a0a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048a4:	68a3      	ldr	r3, [r4, #8]
 80048a6:	2b01      	cmp	r3, #1
 80048a8:	f000 80c3 	beq.w	8004a32 <HAL_RCC_OscConfig+0x276>
 80048ac:	2b05      	cmp	r3, #5
 80048ae:	f000 812c 	beq.w	8004b0a <HAL_RCC_OscConfig+0x34e>
 80048b2:	4e66      	ldr	r6, [pc, #408]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 80048b4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80048b6:	f022 0201 	bic.w	r2, r2, #1
 80048ba:	6732      	str	r2, [r6, #112]	; 0x70
 80048bc:	6f32      	ldr	r2, [r6, #112]	; 0x70
 80048be:	f022 0204 	bic.w	r2, r2, #4
 80048c2:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	f040 80b9 	bne.w	8004a3c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80048ca:	f7ff fb31 	bl	8003f30 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048ce:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 80048d2:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048d4:	e005      	b.n	80048e2 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80048d6:	f7ff fb2b 	bl	8003f30 <HAL_GetTick>
 80048da:	1bc0      	subs	r0, r0, r7
 80048dc:	4540      	cmp	r0, r8
 80048de:	f200 80a4 	bhi.w	8004a2a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80048e2:	6f33      	ldr	r3, [r6, #112]	; 0x70
 80048e4:	0798      	lsls	r0, r3, #30
 80048e6:	d4f6      	bmi.n	80048d6 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80048e8:	2d00      	cmp	r5, #0
 80048ea:	f040 8106 	bne.w	8004afa <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ee:	69a0      	ldr	r0, [r4, #24]
 80048f0:	b1c8      	cbz	r0, 8004926 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80048f2:	4d56      	ldr	r5, [pc, #344]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 80048f4:	68ab      	ldr	r3, [r5, #8]
 80048f6:	f003 030c 	and.w	r3, r3, #12
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	f000 80c9 	beq.w	8004a92 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004900:	4b53      	ldr	r3, [pc, #332]	; (8004a50 <HAL_RCC_OscConfig+0x294>)
 8004902:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004904:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004906:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004908:	f000 8109 	beq.w	8004b1e <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800490c:	f7ff fb10 	bl	8003f30 <HAL_GetTick>
 8004910:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004912:	e005      	b.n	8004920 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004914:	f7ff fb0c 	bl	8003f30 <HAL_GetTick>
 8004918:	1b00      	subs	r0, r0, r4
 800491a:	2802      	cmp	r0, #2
 800491c:	f200 8085 	bhi.w	8004a2a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004920:	682b      	ldr	r3, [r5, #0]
 8004922:	019b      	lsls	r3, r3, #6
 8004924:	d4f6      	bmi.n	8004914 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004926:	2000      	movs	r0, #0
}
 8004928:	b002      	add	sp, #8
 800492a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800492e:	6963      	ldr	r3, [r4, #20]
 8004930:	b30b      	cbz	r3, 8004976 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8004932:	4b47      	ldr	r3, [pc, #284]	; (8004a50 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004934:	4e45      	ldr	r6, [pc, #276]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8004936:	2201      	movs	r2, #1
 8004938:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800493c:	f7ff faf8 	bl	8003f30 <HAL_GetTick>
 8004940:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004942:	e004      	b.n	800494e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004944:	f7ff faf4 	bl	8003f30 <HAL_GetTick>
 8004948:	1b40      	subs	r0, r0, r5
 800494a:	2802      	cmp	r0, #2
 800494c:	d86d      	bhi.n	8004a2a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800494e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004950:	079b      	lsls	r3, r3, #30
 8004952:	d5f7      	bpl.n	8004944 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004954:	6823      	ldr	r3, [r4, #0]
 8004956:	e798      	b.n	800488a <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004958:	6852      	ldr	r2, [r2, #4]
 800495a:	0256      	lsls	r6, r2, #9
 800495c:	f53f af76 	bmi.w	800484c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004960:	4a3a      	ldr	r2, [pc, #232]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 8004962:	6812      	ldr	r2, [r2, #0]
 8004964:	0795      	lsls	r5, r2, #30
 8004966:	d544      	bpl.n	80049f2 <HAL_RCC_OscConfig+0x236>
 8004968:	68e2      	ldr	r2, [r4, #12]
 800496a:	2a01      	cmp	r2, #1
 800496c:	d041      	beq.n	80049f2 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 800496e:	2001      	movs	r0, #1
}
 8004970:	b002      	add	sp, #8
 8004972:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004976:	4a36      	ldr	r2, [pc, #216]	; (8004a50 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004978:	4e34      	ldr	r6, [pc, #208]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 800497a:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 800497e:	f7ff fad7 	bl	8003f30 <HAL_GetTick>
 8004982:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004984:	e004      	b.n	8004990 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004986:	f7ff fad3 	bl	8003f30 <HAL_GetTick>
 800498a:	1b40      	subs	r0, r0, r5
 800498c:	2802      	cmp	r0, #2
 800498e:	d84c      	bhi.n	8004a2a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004990:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004992:	079f      	lsls	r7, r3, #30
 8004994:	d4f7      	bmi.n	8004986 <HAL_RCC_OscConfig+0x1ca>
 8004996:	e7dd      	b.n	8004954 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004998:	9301      	str	r3, [sp, #4]
 800499a:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800499c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a0:	6413      	str	r3, [r2, #64]	; 0x40
 80049a2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 80049a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80049a8:	9301      	str	r3, [sp, #4]
 80049aa:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80049ac:	2501      	movs	r5, #1
 80049ae:	e774      	b.n	800489a <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049b0:	684a      	ldr	r2, [r1, #4]
 80049b2:	0250      	lsls	r0, r2, #9
 80049b4:	f57f af19 	bpl.w	80047ea <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049b8:	4a24      	ldr	r2, [pc, #144]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 80049ba:	6812      	ldr	r2, [r2, #0]
 80049bc:	0391      	lsls	r1, r2, #14
 80049be:	f57f af37 	bpl.w	8004830 <HAL_RCC_OscConfig+0x74>
 80049c2:	6862      	ldr	r2, [r4, #4]
 80049c4:	2a00      	cmp	r2, #0
 80049c6:	f47f af33 	bne.w	8004830 <HAL_RCC_OscConfig+0x74>
 80049ca:	e7d0      	b.n	800496e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80049cc:	4a1f      	ldr	r2, [pc, #124]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 80049ce:	6813      	ldr	r3, [r2, #0]
 80049d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049d4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80049d6:	f7ff faab 	bl	8003f30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049da:	4e1c      	ldr	r6, [pc, #112]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 80049dc:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049de:	e004      	b.n	80049ea <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80049e0:	f7ff faa6 	bl	8003f30 <HAL_GetTick>
 80049e4:	1b40      	subs	r0, r0, r5
 80049e6:	2864      	cmp	r0, #100	; 0x64
 80049e8:	d81f      	bhi.n	8004a2a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80049ea:	6833      	ldr	r3, [r6, #0]
 80049ec:	039a      	lsls	r2, r3, #14
 80049ee:	d5f7      	bpl.n	80049e0 <HAL_RCC_OscConfig+0x224>
 80049f0:	e71d      	b.n	800482e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80049f2:	4916      	ldr	r1, [pc, #88]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 80049f4:	6920      	ldr	r0, [r4, #16]
 80049f6:	680a      	ldr	r2, [r1, #0]
 80049f8:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 80049fc:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8004a00:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a02:	071a      	lsls	r2, r3, #28
 8004a04:	f57f af41 	bpl.w	800488a <HAL_RCC_OscConfig+0xce>
 8004a08:	e791      	b.n	800492e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004a0a:	6833      	ldr	r3, [r6, #0]
 8004a0c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004a10:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8004a12:	f7ff fa8d 	bl	8003f30 <HAL_GetTick>
 8004a16:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004a18:	6833      	ldr	r3, [r6, #0]
 8004a1a:	05da      	lsls	r2, r3, #23
 8004a1c:	f53f af42 	bmi.w	80048a4 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004a20:	f7ff fa86 	bl	8003f30 <HAL_GetTick>
 8004a24:	1bc0      	subs	r0, r0, r7
 8004a26:	2802      	cmp	r0, #2
 8004a28:	d9f6      	bls.n	8004a18 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 8004a2a:	2003      	movs	r0, #3
}
 8004a2c:	b002      	add	sp, #8
 8004a2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004a32:	4a06      	ldr	r2, [pc, #24]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
 8004a34:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 8004a3c:	f7ff fa78 	bl	8003f30 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a40:	4f02      	ldr	r7, [pc, #8]	; (8004a4c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8004a42:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a44:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a48:	e00b      	b.n	8004a62 <HAL_RCC_OscConfig+0x2a6>
 8004a4a:	bf00      	nop
 8004a4c:	40023800 	.word	0x40023800
 8004a50:	42470000 	.word	0x42470000
 8004a54:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004a58:	f7ff fa6a 	bl	8003f30 <HAL_GetTick>
 8004a5c:	1b80      	subs	r0, r0, r6
 8004a5e:	4540      	cmp	r0, r8
 8004a60:	d8e3      	bhi.n	8004a2a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004a62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004a64:	079b      	lsls	r3, r3, #30
 8004a66:	d5f7      	bpl.n	8004a58 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8004a68:	2d00      	cmp	r5, #0
 8004a6a:	f43f af40 	beq.w	80048ee <HAL_RCC_OscConfig+0x132>
 8004a6e:	e044      	b.n	8004afa <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 8004a70:	4a42      	ldr	r2, [pc, #264]	; (8004b7c <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a72:	4e43      	ldr	r6, [pc, #268]	; (8004b80 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 8004a74:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8004a76:	f7ff fa5b 	bl	8003f30 <HAL_GetTick>
 8004a7a:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7c:	e004      	b.n	8004a88 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004a7e:	f7ff fa57 	bl	8003f30 <HAL_GetTick>
 8004a82:	1b40      	subs	r0, r0, r5
 8004a84:	2802      	cmp	r0, #2
 8004a86:	d8d0      	bhi.n	8004a2a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a88:	6833      	ldr	r3, [r6, #0]
 8004a8a:	0799      	lsls	r1, r3, #30
 8004a8c:	d4f7      	bmi.n	8004a7e <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a8e:	6823      	ldr	r3, [r4, #0]
 8004a90:	e6f9      	b.n	8004886 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a92:	2801      	cmp	r0, #1
 8004a94:	f43f af48 	beq.w	8004928 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 8004a98:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004a9a:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004a9c:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004aa0:	4291      	cmp	r1, r2
 8004aa2:	f47f af64 	bne.w	800496e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aa6:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aa8:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aac:	4291      	cmp	r1, r2
 8004aae:	f47f af5e 	bne.w	800496e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ab2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004ab4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 8004ab8:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004aba:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 8004abe:	f47f af56 	bne.w	800496e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ac2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 8004ac4:	0852      	lsrs	r2, r2, #1
 8004ac6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 8004aca:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004acc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8004ad0:	f47f af4d 	bne.w	800496e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004ad4:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8004ad6:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004ada:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 8004ade:	bf14      	ite	ne
 8004ae0:	2001      	movne	r0, #1
 8004ae2:	2000      	moveq	r0, #0
 8004ae4:	e720      	b.n	8004928 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ae6:	4b26      	ldr	r3, [pc, #152]	; (8004b80 <HAL_RCC_OscConfig+0x3c4>)
 8004ae8:	681a      	ldr	r2, [r3, #0]
 8004aea:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8004aee:	601a      	str	r2, [r3, #0]
 8004af0:	681a      	ldr	r2, [r3, #0]
 8004af2:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8004af6:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004af8:	e76d      	b.n	80049d6 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 8004afa:	4a21      	ldr	r2, [pc, #132]	; (8004b80 <HAL_RCC_OscConfig+0x3c4>)
 8004afc:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004afe:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004b02:	6413      	str	r3, [r2, #64]	; 0x40
 8004b04:	e6f3      	b.n	80048ee <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8004b06:	2001      	movs	r0, #1
}
 8004b08:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b0a:	4b1d      	ldr	r3, [pc, #116]	; (8004b80 <HAL_RCC_OscConfig+0x3c4>)
 8004b0c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b0e:	f042 0204 	orr.w	r2, r2, #4
 8004b12:	671a      	str	r2, [r3, #112]	; 0x70
 8004b14:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004b16:	f042 0201 	orr.w	r2, r2, #1
 8004b1a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004b1c:	e78e      	b.n	8004a3c <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 8004b1e:	f7ff fa07 	bl	8003f30 <HAL_GetTick>
 8004b22:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b24:	e005      	b.n	8004b32 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b26:	f7ff fa03 	bl	8003f30 <HAL_GetTick>
 8004b2a:	1b80      	subs	r0, r0, r6
 8004b2c:	2802      	cmp	r0, #2
 8004b2e:	f63f af7c 	bhi.w	8004a2a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004b32:	682b      	ldr	r3, [r5, #0]
 8004b34:	0199      	lsls	r1, r3, #6
 8004b36:	d4f6      	bmi.n	8004b26 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b38:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 8004b3c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 8004b3e:	430b      	orrs	r3, r1
 8004b40:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8004b44:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8004b48:	0852      	lsrs	r2, r2, #1
 8004b4a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 8004b4e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8004b50:	490a      	ldr	r1, [pc, #40]	; (8004b7c <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b52:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8004b56:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004b58:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 8004b5a:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 8004b5c:	f7ff f9e8 	bl	8003f30 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b60:	4d07      	ldr	r5, [pc, #28]	; (8004b80 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8004b62:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b64:	e005      	b.n	8004b72 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004b66:	f7ff f9e3 	bl	8003f30 <HAL_GetTick>
 8004b6a:	1b00      	subs	r0, r0, r4
 8004b6c:	2802      	cmp	r0, #2
 8004b6e:	f63f af5c 	bhi.w	8004a2a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b72:	682b      	ldr	r3, [r5, #0]
 8004b74:	019a      	lsls	r2, r3, #6
 8004b76:	d5f6      	bpl.n	8004b66 <HAL_RCC_OscConfig+0x3aa>
 8004b78:	e6d5      	b.n	8004926 <HAL_RCC_OscConfig+0x16a>
 8004b7a:	bf00      	nop
 8004b7c:	42470000 	.word	0x42470000
 8004b80:	40023800 	.word	0x40023800

08004b84 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 8004b84:	4b01      	ldr	r3, [pc, #4]	; (8004b8c <HAL_RCC_EnableCSS+0x8>)
 8004b86:	2201      	movs	r2, #1
 8004b88:	64da      	str	r2, [r3, #76]	; 0x4c
}
 8004b8a:	4770      	bx	lr
 8004b8c:	42470000 	.word	0x42470000

08004b90 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b90:	4916      	ldr	r1, [pc, #88]	; (8004bec <HAL_RCC_GetSysClockFreq+0x5c>)
{
 8004b92:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004b94:	688b      	ldr	r3, [r1, #8]
 8004b96:	f003 030c 	and.w	r3, r3, #12
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d01b      	beq.n	8004bd6 <HAL_RCC_GetSysClockFreq+0x46>
 8004b9e:	2b08      	cmp	r3, #8
 8004ba0:	d117      	bne.n	8004bd2 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004ba2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004ba6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004ba8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004bac:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004bb0:	d113      	bne.n	8004bda <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bb2:	480f      	ldr	r0, [pc, #60]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x60>)
 8004bb4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004bb8:	fba1 0100 	umull	r0, r1, r1, r0
 8004bbc:	f7fb fb0c 	bl	80001d8 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004bc0:	4b0a      	ldr	r3, [pc, #40]	; (8004bec <HAL_RCC_GetSysClockFreq+0x5c>)
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 8004bc8:	3301      	adds	r3, #1
 8004bca:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 8004bcc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8004bd0:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8004bd2:	4807      	ldr	r0, [pc, #28]	; (8004bf0 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8004bd4:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004bd6:	4807      	ldr	r0, [pc, #28]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8004bd8:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004bda:	4806      	ldr	r0, [pc, #24]	; (8004bf4 <HAL_RCC_GetSysClockFreq+0x64>)
 8004bdc:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8004be0:	2300      	movs	r3, #0
 8004be2:	fba1 0100 	umull	r0, r1, r1, r0
 8004be6:	f7fb faf7 	bl	80001d8 <__aeabi_uldivmod>
 8004bea:	e7e9      	b.n	8004bc0 <HAL_RCC_GetSysClockFreq+0x30>
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	00f42400 	.word	0x00f42400
 8004bf4:	007a1200 	.word	0x007a1200

08004bf8 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	f000 8087 	beq.w	8004d0c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004bfe:	4a48      	ldr	r2, [pc, #288]	; (8004d20 <HAL_RCC_ClockConfig+0x128>)
 8004c00:	6813      	ldr	r3, [r2, #0]
 8004c02:	f003 0307 	and.w	r3, r3, #7
 8004c06:	428b      	cmp	r3, r1
{
 8004c08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004c0c:	460d      	mov	r5, r1
 8004c0e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004c10:	d209      	bcs.n	8004c26 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c12:	b2cb      	uxtb	r3, r1
 8004c14:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c16:	6813      	ldr	r3, [r2, #0]
 8004c18:	f003 0307 	and.w	r3, r3, #7
 8004c1c:	428b      	cmp	r3, r1
 8004c1e:	d002      	beq.n	8004c26 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8004c20:	2001      	movs	r0, #1
}
 8004c22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004c26:	6823      	ldr	r3, [r4, #0]
 8004c28:	0798      	lsls	r0, r3, #30
 8004c2a:	d514      	bpl.n	8004c56 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c2c:	0759      	lsls	r1, r3, #29
 8004c2e:	d504      	bpl.n	8004c3a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004c30:	493c      	ldr	r1, [pc, #240]	; (8004d24 <HAL_RCC_ClockConfig+0x12c>)
 8004c32:	688a      	ldr	r2, [r1, #8]
 8004c34:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8004c38:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c3a:	071a      	lsls	r2, r3, #28
 8004c3c:	d504      	bpl.n	8004c48 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004c3e:	4939      	ldr	r1, [pc, #228]	; (8004d24 <HAL_RCC_ClockConfig+0x12c>)
 8004c40:	688a      	ldr	r2, [r1, #8]
 8004c42:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8004c46:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004c48:	4936      	ldr	r1, [pc, #216]	; (8004d24 <HAL_RCC_ClockConfig+0x12c>)
 8004c4a:	68a0      	ldr	r0, [r4, #8]
 8004c4c:	688a      	ldr	r2, [r1, #8]
 8004c4e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8004c52:	4302      	orrs	r2, r0
 8004c54:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004c56:	07df      	lsls	r7, r3, #31
 8004c58:	d521      	bpl.n	8004c9e <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004c5a:	6862      	ldr	r2, [r4, #4]
 8004c5c:	2a01      	cmp	r2, #1
 8004c5e:	d057      	beq.n	8004d10 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c60:	1e93      	subs	r3, r2, #2
 8004c62:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004c64:	4b2f      	ldr	r3, [pc, #188]	; (8004d24 <HAL_RCC_ClockConfig+0x12c>)
 8004c66:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004c68:	d94d      	bls.n	8004d06 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004c6a:	0799      	lsls	r1, r3, #30
 8004c6c:	d5d8      	bpl.n	8004c20 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004c6e:	4e2d      	ldr	r6, [pc, #180]	; (8004d24 <HAL_RCC_ClockConfig+0x12c>)
 8004c70:	68b3      	ldr	r3, [r6, #8]
 8004c72:	f023 0303 	bic.w	r3, r3, #3
 8004c76:	4313      	orrs	r3, r2
 8004c78:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8004c7a:	f7ff f959 	bl	8003f30 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c7e:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 8004c82:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c84:	e004      	b.n	8004c90 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004c86:	f7ff f953 	bl	8003f30 <HAL_GetTick>
 8004c8a:	1bc0      	subs	r0, r0, r7
 8004c8c:	4540      	cmp	r0, r8
 8004c8e:	d844      	bhi.n	8004d1a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004c90:	68b3      	ldr	r3, [r6, #8]
 8004c92:	6862      	ldr	r2, [r4, #4]
 8004c94:	f003 030c 	and.w	r3, r3, #12
 8004c98:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8004c9c:	d1f3      	bne.n	8004c86 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004c9e:	4a20      	ldr	r2, [pc, #128]	; (8004d20 <HAL_RCC_ClockConfig+0x128>)
 8004ca0:	6813      	ldr	r3, [r2, #0]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	42ab      	cmp	r3, r5
 8004ca8:	d906      	bls.n	8004cb8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004caa:	b2eb      	uxtb	r3, r5
 8004cac:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004cae:	6813      	ldr	r3, [r2, #0]
 8004cb0:	f003 0307 	and.w	r3, r3, #7
 8004cb4:	42ab      	cmp	r3, r5
 8004cb6:	d1b3      	bne.n	8004c20 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004cb8:	6823      	ldr	r3, [r4, #0]
 8004cba:	075a      	lsls	r2, r3, #29
 8004cbc:	d506      	bpl.n	8004ccc <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004cbe:	4919      	ldr	r1, [pc, #100]	; (8004d24 <HAL_RCC_ClockConfig+0x12c>)
 8004cc0:	68e0      	ldr	r0, [r4, #12]
 8004cc2:	688a      	ldr	r2, [r1, #8]
 8004cc4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 8004cc8:	4302      	orrs	r2, r0
 8004cca:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004ccc:	071b      	lsls	r3, r3, #28
 8004cce:	d507      	bpl.n	8004ce0 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004cd0:	4a14      	ldr	r2, [pc, #80]	; (8004d24 <HAL_RCC_ClockConfig+0x12c>)
 8004cd2:	6921      	ldr	r1, [r4, #16]
 8004cd4:	6893      	ldr	r3, [r2, #8]
 8004cd6:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8004cda:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 8004cde:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004ce0:	f7ff ff56 	bl	8004b90 <HAL_RCC_GetSysClockFreq>
 8004ce4:	4a0f      	ldr	r2, [pc, #60]	; (8004d24 <HAL_RCC_ClockConfig+0x12c>)
 8004ce6:	4c10      	ldr	r4, [pc, #64]	; (8004d28 <HAL_RCC_ClockConfig+0x130>)
 8004ce8:	6892      	ldr	r2, [r2, #8]
 8004cea:	4910      	ldr	r1, [pc, #64]	; (8004d2c <HAL_RCC_ClockConfig+0x134>)
 8004cec:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8004cf0:	4603      	mov	r3, r0
 8004cf2:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8004cf4:	480e      	ldr	r0, [pc, #56]	; (8004d30 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cf6:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8004cf8:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004cfa:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 8004cfc:	f7ff f8ce 	bl	8003e9c <HAL_InitTick>
  return HAL_OK;
 8004d00:	2000      	movs	r0, #0
}
 8004d02:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004d06:	0198      	lsls	r0, r3, #6
 8004d08:	d4b1      	bmi.n	8004c6e <HAL_RCC_ClockConfig+0x76>
 8004d0a:	e789      	b.n	8004c20 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 8004d0c:	2001      	movs	r0, #1
}
 8004d0e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004d10:	4b04      	ldr	r3, [pc, #16]	; (8004d24 <HAL_RCC_ClockConfig+0x12c>)
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	039e      	lsls	r6, r3, #14
 8004d16:	d4aa      	bmi.n	8004c6e <HAL_RCC_ClockConfig+0x76>
 8004d18:	e782      	b.n	8004c20 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 8004d1a:	2003      	movs	r0, #3
 8004d1c:	e781      	b.n	8004c22 <HAL_RCC_ClockConfig+0x2a>
 8004d1e:	bf00      	nop
 8004d20:	40023c00 	.word	0x40023c00
 8004d24:	40023800 	.word	0x40023800
 8004d28:	080079c8 	.word	0x080079c8
 8004d2c:	20000678 	.word	0x20000678
 8004d30:	20000680 	.word	0x20000680

08004d34 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8004d34:	4b01      	ldr	r3, [pc, #4]	; (8004d3c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8004d36:	6818      	ldr	r0, [r3, #0]
 8004d38:	4770      	bx	lr
 8004d3a:	bf00      	nop
 8004d3c:	20000678 	.word	0x20000678

08004d40 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d40:	4b04      	ldr	r3, [pc, #16]	; (8004d54 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8004d42:	4905      	ldr	r1, [pc, #20]	; (8004d58 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004d44:	689b      	ldr	r3, [r3, #8]
 8004d46:	4a05      	ldr	r2, [pc, #20]	; (8004d5c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8004d48:	6808      	ldr	r0, [r1, #0]
 8004d4a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 8004d4e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004d50:	40d8      	lsrs	r0, r3
 8004d52:	4770      	bx	lr
 8004d54:	40023800 	.word	0x40023800
 8004d58:	20000678 	.word	0x20000678
 8004d5c:	080079d8 	.word	0x080079d8

08004d60 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d60:	4b04      	ldr	r3, [pc, #16]	; (8004d74 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8004d62:	4905      	ldr	r1, [pc, #20]	; (8004d78 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004d64:	689b      	ldr	r3, [r3, #8]
 8004d66:	4a05      	ldr	r2, [pc, #20]	; (8004d7c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8004d68:	6808      	ldr	r0, [r1, #0]
 8004d6a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 8004d6e:	5cd3      	ldrb	r3, [r2, r3]
}
 8004d70:	40d8      	lsrs	r0, r3
 8004d72:	4770      	bx	lr
 8004d74:	40023800 	.word	0x40023800
 8004d78:	20000678 	.word	0x20000678
 8004d7c:	080079d8 	.word	0x080079d8

08004d80 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d80:	2800      	cmp	r0, #0
 8004d82:	d076      	beq.n	8004e72 <HAL_TIM_Base_Init+0xf2>
{
 8004d84:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004d8a:	4604      	mov	r4, r0
 8004d8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d055      	beq.n	8004e40 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d94:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d96:	4938      	ldr	r1, [pc, #224]	; (8004e78 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004d9e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004da0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004da2:	d052      	beq.n	8004e4a <HAL_TIM_Base_Init+0xca>
 8004da4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004da8:	d021      	beq.n	8004dee <HAL_TIM_Base_Init+0x6e>
 8004daa:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004dae:	428a      	cmp	r2, r1
 8004db0:	d01d      	beq.n	8004dee <HAL_TIM_Base_Init+0x6e>
 8004db2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004db6:	428a      	cmp	r2, r1
 8004db8:	d019      	beq.n	8004dee <HAL_TIM_Base_Init+0x6e>
 8004dba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dbe:	428a      	cmp	r2, r1
 8004dc0:	d015      	beq.n	8004dee <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004dc2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8004dc6:	428a      	cmp	r2, r1
 8004dc8:	d015      	beq.n	8004df6 <HAL_TIM_Base_Init+0x76>
 8004dca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dce:	428a      	cmp	r2, r1
 8004dd0:	d011      	beq.n	8004df6 <HAL_TIM_Base_Init+0x76>
 8004dd2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004dd6:	428a      	cmp	r2, r1
 8004dd8:	d00d      	beq.n	8004df6 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dda:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ddc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004dde:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004de2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004de4:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004de6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004de8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004dea:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dec:	e010      	b.n	8004e10 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8004dee:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004df0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004df4:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004df6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004df8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004dfe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e04:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e06:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004e08:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004e0a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e0c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e0e:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e10:	2301      	movs	r3, #1
 8004e12:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004e1c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004e20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004e24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004e2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004e30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004e34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004e38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004e3c:	2000      	movs	r0, #0
}
 8004e3e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004e40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8004e44:	f7fe fd9c 	bl	8003980 <HAL_TIM_Base_MspInit>
 8004e48:	e7a4      	b.n	8004d94 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004e4a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e4c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004e4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004e52:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004e54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004e58:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004e5a:	69a1      	ldr	r1, [r4, #24]
 8004e5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e60:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004e62:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004e64:	68e3      	ldr	r3, [r4, #12]
 8004e66:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004e68:	6863      	ldr	r3, [r4, #4]
 8004e6a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004e6c:	6963      	ldr	r3, [r4, #20]
 8004e6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004e70:	e7ce      	b.n	8004e10 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 8004e72:	2001      	movs	r0, #1
}
 8004e74:	4770      	bx	lr
 8004e76:	bf00      	nop
 8004e78:	40010000 	.word	0x40010000

08004e7c <HAL_TIM_PWM_MspInit>:
 8004e7c:	4770      	bx	lr
 8004e7e:	bf00      	nop

08004e80 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 8004e80:	2800      	cmp	r0, #0
 8004e82:	d076      	beq.n	8004f72 <HAL_TIM_PWM_Init+0xf2>
{
 8004e84:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 8004e86:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8004e8a:	4604      	mov	r4, r0
 8004e8c:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8004e90:	2b00      	cmp	r3, #0
 8004e92:	d055      	beq.n	8004f40 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e94:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e96:	4938      	ldr	r1, [pc, #224]	; (8004f78 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 8004e98:	2302      	movs	r3, #2
 8004e9a:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004e9e:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 8004ea0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004ea2:	d052      	beq.n	8004f4a <HAL_TIM_PWM_Init+0xca>
 8004ea4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 8004ea8:	d021      	beq.n	8004eee <HAL_TIM_PWM_Init+0x6e>
 8004eaa:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 8004eae:	428a      	cmp	r2, r1
 8004eb0:	d01d      	beq.n	8004eee <HAL_TIM_PWM_Init+0x6e>
 8004eb2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004eb6:	428a      	cmp	r2, r1
 8004eb8:	d019      	beq.n	8004eee <HAL_TIM_PWM_Init+0x6e>
 8004eba:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ebe:	428a      	cmp	r2, r1
 8004ec0:	d015      	beq.n	8004eee <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004ec2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 8004ec6:	428a      	cmp	r2, r1
 8004ec8:	d015      	beq.n	8004ef6 <HAL_TIM_PWM_Init+0x76>
 8004eca:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ece:	428a      	cmp	r2, r1
 8004ed0:	d011      	beq.n	8004ef6 <HAL_TIM_PWM_Init+0x76>
 8004ed2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8004ed6:	428a      	cmp	r2, r1
 8004ed8:	d00d      	beq.n	8004ef6 <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004eda:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004edc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ede:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004ee2:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8004ee4:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8004ee6:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004ee8:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004eea:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004eec:	e010      	b.n	8004f10 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 8004eee:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ef0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004ef4:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004ef6:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004ef8:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 8004efa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004efe:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f00:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f04:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f06:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8004f08:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 8004f0a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f0c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f0e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8004f10:	2301      	movs	r3, #1
 8004f12:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f14:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f18:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 8004f1c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8004f20:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8004f24:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f28:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004f2c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004f30:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8004f34:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8004f38:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 8004f3c:	2000      	movs	r0, #0
}
 8004f3e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8004f40:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8004f44:	f7ff ff9a 	bl	8004e7c <HAL_TIM_PWM_MspInit>
 8004f48:	e7a4      	b.n	8004e94 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 8004f4a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f4c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8004f52:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8004f54:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004f58:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004f5a:	69a1      	ldr	r1, [r4, #24]
 8004f5c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004f60:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8004f62:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004f64:	68e3      	ldr	r3, [r4, #12]
 8004f66:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8004f68:	6863      	ldr	r3, [r4, #4]
 8004f6a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 8004f6c:	6963      	ldr	r3, [r4, #20]
 8004f6e:	6313      	str	r3, [r2, #48]	; 0x30
 8004f70:	e7ce      	b.n	8004f10 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 8004f72:	2001      	movs	r0, #1
}
 8004f74:	4770      	bx	lr
 8004f76:	bf00      	nop
 8004f78:	40010000 	.word	0x40010000

08004f7c <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 8004f7c:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8004f80:	2b01      	cmp	r3, #1
 8004f82:	f000 80ca 	beq.w	800511a <HAL_TIM_PWM_ConfigChannel+0x19e>
 8004f86:	2301      	movs	r3, #1
{
 8004f88:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 8004f8a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004f8e:	2a0c      	cmp	r2, #12
 8004f90:	d808      	bhi.n	8004fa4 <HAL_TIM_PWM_ConfigChannel+0x28>
 8004f92:	e8df f002 	tbb	[pc, r2]
 8004f96:	073d      	.short	0x073d
 8004f98:	07680707 	.word	0x07680707
 8004f9c:	07960707 	.word	0x07960707
 8004fa0:	0707      	.short	0x0707
 8004fa2:	0e          	.byte	0x0e
 8004fa3:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 8004fa4:	2300      	movs	r3, #0
 8004fa6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 8004faa:	2201      	movs	r2, #1
}
 8004fac:	4610      	mov	r0, r2
 8004fae:	bcf0      	pop	{r4, r5, r6, r7}
 8004fb0:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004fb2:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fb4:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004fb6:	6a1a      	ldr	r2, [r3, #32]
 8004fb8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8004fbc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8004fbe:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8004fc0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8004fc2:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004fc4:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fc8:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fcc:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 8004fce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004fd2:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004fd6:	4e6b      	ldr	r6, [pc, #428]	; (8005184 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8004fd8:	42b3      	cmp	r3, r6
 8004fda:	f000 80bd 	beq.w	8005158 <HAL_TIM_PWM_ConfigChannel+0x1dc>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004fde:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004fe0:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004fe2:	684c      	ldr	r4, [r1, #4]
 8004fe4:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004fe6:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fe8:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004fea:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004fec:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004ff2:	69dc      	ldr	r4, [r3, #28]
 8004ff4:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8004ff8:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004ffa:	69d9      	ldr	r1, [r3, #28]
 8004ffc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005000:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8005002:	2300      	movs	r3, #0
 8005004:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005008:	2200      	movs	r2, #0
}
 800500a:	4610      	mov	r0, r2
 800500c:	bcf0      	pop	{r4, r5, r6, r7}
 800500e:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005010:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005012:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005014:	6a1a      	ldr	r2, [r3, #32]
 8005016:	f022 0201 	bic.w	r2, r2, #1
 800501a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800501c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800501e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005020:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005022:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005026:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8005028:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800502a:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 800502e:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005030:	4e54      	ldr	r6, [pc, #336]	; (8005184 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8005032:	42b3      	cmp	r3, r6
 8005034:	d074      	beq.n	8005120 <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 8005036:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005038:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800503a:	684c      	ldr	r4, [r1, #4]
 800503c:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800503e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005040:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005042:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005044:	f042 0208 	orr.w	r2, r2, #8
 8005048:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800504a:	699c      	ldr	r4, [r3, #24]
 800504c:	f024 0404 	bic.w	r4, r4, #4
 8005050:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005052:	6999      	ldr	r1, [r3, #24]
 8005054:	4329      	orrs	r1, r5
 8005056:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8005058:	2300      	movs	r3, #0
 800505a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800505e:	2200      	movs	r2, #0
}
 8005060:	4610      	mov	r0, r2
 8005062:	bcf0      	pop	{r4, r5, r6, r7}
 8005064:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005066:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005068:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800506a:	6a1a      	ldr	r2, [r3, #32]
 800506c:	f022 0210 	bic.w	r2, r2, #16
 8005070:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 8005072:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005074:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005076:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005078:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800507c:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005080:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 8005082:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005086:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800508a:	4e3e      	ldr	r6, [pc, #248]	; (8005184 <HAL_TIM_PWM_ConfigChannel+0x208>)
 800508c:	42b3      	cmp	r3, r6
 800508e:	d054      	beq.n	800513a <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 8005090:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005092:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 8005094:	684c      	ldr	r4, [r1, #4]
 8005096:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 8005098:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800509a:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800509c:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800509e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80050a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80050a4:	699c      	ldr	r4, [r3, #24]
 80050a6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80050aa:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80050ac:	6999      	ldr	r1, [r3, #24]
 80050ae:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80050b2:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 80050b4:	2300      	movs	r3, #0
 80050b6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80050ba:	2200      	movs	r2, #0
}
 80050bc:	4610      	mov	r0, r2
 80050be:	bcf0      	pop	{r4, r5, r6, r7}
 80050c0:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80050c2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80050c4:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80050c6:	6a1a      	ldr	r2, [r3, #32]
 80050c8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050cc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80050ce:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80050d0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80050d2:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050d4:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 80050d8:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050da:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 80050dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050e0:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050e4:	4e27      	ldr	r6, [pc, #156]	; (8005184 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80050e6:	42b3      	cmp	r3, r6
 80050e8:	d03c      	beq.n	8005164 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 80050ea:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 80050ec:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 80050ee:	684c      	ldr	r4, [r1, #4]
 80050f0:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 80050f2:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050f4:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80050f6:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80050f8:	f042 0208 	orr.w	r2, r2, #8
 80050fc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80050fe:	69dc      	ldr	r4, [r3, #28]
 8005100:	f024 0404 	bic.w	r4, r4, #4
 8005104:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005106:	69d9      	ldr	r1, [r3, #28]
 8005108:	4329      	orrs	r1, r5
 800510a:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 800510c:	2300      	movs	r3, #0
 800510e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005112:	2200      	movs	r2, #0
}
 8005114:	4610      	mov	r0, r2
 8005116:	bcf0      	pop	{r4, r5, r6, r7}
 8005118:	4770      	bx	lr
  __HAL_LOCK(htim);
 800511a:	2202      	movs	r2, #2
}
 800511c:	4610      	mov	r0, r2
 800511e:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005120:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005122:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005126:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8005128:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800512c:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005130:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8005132:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005136:	4335      	orrs	r5, r6
 8005138:	e77d      	b.n	8005036 <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800513a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800513c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005140:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005144:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005148:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800514c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800514e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005152:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8005156:	e79b      	b.n	8005090 <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005158:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800515a:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800515e:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8005162:	e73c      	b.n	8004fde <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005164:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005166:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800516a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800516e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005172:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005176:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 8005178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800517c:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 8005180:	e7b3      	b.n	80050ea <HAL_TIM_PWM_ConfigChannel+0x16e>
 8005182:	bf00      	nop
 8005184:	40010000 	.word	0x40010000

08005188 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 8005188:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 800518c:	2a01      	cmp	r2, #1
 800518e:	d050      	beq.n	8005232 <HAL_TIM_SlaveConfigSynchro+0xaa>
 8005190:	4603      	mov	r3, r0
{
 8005192:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 8005194:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005196:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 8005198:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 800519c:	2001      	movs	r0, #1
 800519e:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80051a2:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80051a4:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80051a6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80051a8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80051ac:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80051ae:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80051b2:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80051b4:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80051b6:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80051b8:	d060      	beq.n	800527c <HAL_TIM_SlaveConfigSynchro+0xf4>
 80051ba:	d90f      	bls.n	80051dc <HAL_TIM_SlaveConfigSynchro+0x54>
 80051bc:	2860      	cmp	r0, #96	; 0x60
 80051be:	d03a      	beq.n	8005236 <HAL_TIM_SlaveConfigSynchro+0xae>
 80051c0:	2870      	cmp	r0, #112	; 0x70
 80051c2:	d10e      	bne.n	80051e2 <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051c4:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80051c8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051ca:	432a      	orrs	r2, r5
 80051cc:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80051ce:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051d2:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 80051d6:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051d8:	60a2      	str	r2, [r4, #8]
 80051da:	e00f      	b.n	80051fc <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 80051dc:	2840      	cmp	r0, #64	; 0x40
 80051de:	d03d      	beq.n	800525c <HAL_TIM_SlaveConfigSynchro+0xd4>
 80051e0:	d907      	bls.n	80051f2 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 80051e2:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 80051e4:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 80051e6:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 80051ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80051ee:	bc70      	pop	{r4, r5, r6}
 80051f0:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 80051f2:	2820      	cmp	r0, #32
 80051f4:	d002      	beq.n	80051fc <HAL_TIM_SlaveConfigSynchro+0x74>
 80051f6:	d912      	bls.n	800521e <HAL_TIM_SlaveConfigSynchro+0x96>
 80051f8:	2830      	cmp	r0, #48	; 0x30
 80051fa:	d1f2      	bne.n	80051e2 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 80051fc:	68e2      	ldr	r2, [r4, #12]
 80051fe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005202:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005204:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8005206:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8005208:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800520a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800520e:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005210:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005214:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8005218:	4608      	mov	r0, r1
}
 800521a:	bc70      	pop	{r4, r5, r6}
 800521c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800521e:	f030 0210 	bics.w	r2, r0, #16
 8005222:	d0eb      	beq.n	80051fc <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8005224:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005226:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005228:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800522c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005230:	e7dd      	b.n	80051ee <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8005232:	2002      	movs	r0, #2
}
 8005234:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005236:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005238:	690a      	ldr	r2, [r1, #16]
 800523a:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800523c:	f020 0010 	bic.w	r0, r0, #16
 8005240:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005242:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005244:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005248:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800524c:	6a22      	ldr	r2, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800524e:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005250:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005254:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8005258:	6222      	str	r2, [r4, #32]
 800525a:	e7cf      	b.n	80051fc <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800525c:	2d05      	cmp	r5, #5
 800525e:	d0c0      	beq.n	80051e2 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8005260:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005262:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005264:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005266:	f020 0001 	bic.w	r0, r0, #1
 800526a:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800526c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800526e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005272:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 8005276:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 8005278:	6225      	str	r5, [r4, #32]
      break;
 800527a:	e7bf      	b.n	80051fc <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800527c:	6888      	ldr	r0, [r1, #8]
 800527e:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 8005280:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005282:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 8005286:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005288:	6a20      	ldr	r0, [r4, #32]
 800528a:	f020 0001 	bic.w	r0, r0, #1
 800528e:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005290:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005292:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005296:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 800529a:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 800529c:	6221      	str	r1, [r4, #32]
 800529e:	e7ad      	b.n	80051fc <HAL_TIM_SlaveConfigSynchro+0x74>

080052a0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80052a0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80052a4:	2b01      	cmp	r3, #1
 80052a6:	d02f      	beq.n	8005308 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80052a8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80052aa:	2202      	movs	r2, #2
{
 80052ac:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80052ae:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80052b2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052b4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80052b6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80052b8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80052bc:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80052be:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80052c0:	4a12      	ldr	r2, [pc, #72]	; (800530c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d012      	beq.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052ca:	d00f      	beq.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052cc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 80052d0:	4293      	cmp	r3, r2
 80052d2:	d00b      	beq.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052d4:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052d8:	4293      	cmp	r3, r2
 80052da:	d007      	beq.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052dc:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 80052e0:	4293      	cmp	r3, r2
 80052e2:	d003      	beq.n	80052ec <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80052e4:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 80052e8:	4293      	cmp	r3, r2
 80052ea:	d104      	bne.n	80052f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052ec:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ee:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052f2:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052f4:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 80052f6:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 80052f8:	2201      	movs	r2, #1
 80052fa:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 80052fe:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005302:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8005304:	4618      	mov	r0, r3
}
 8005306:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005308:	2002      	movs	r0, #2
}
 800530a:	4770      	bx	lr
 800530c:	40010000 	.word	0x40010000

08005310 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005310:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005314:	2b01      	cmp	r3, #1
 8005316:	d023      	beq.n	8005360 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8005318:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800531a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800531e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005322:	4602      	mov	r2, r0
 8005324:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005326:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005328:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800532a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800532e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005330:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005334:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005336:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005338:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800533c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800533e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005340:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005342:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005346:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005348:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800534c:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800534e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005350:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8005352:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005354:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005358:	4608      	mov	r0, r1
}
 800535a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800535e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005360:	2002      	movs	r0, #2
}
 8005362:	4770      	bx	lr

08005364 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005364:	2800      	cmp	r0, #0
 8005366:	f000 808f 	beq.w	8005488 <HAL_UART_Init+0x124>
{
 800536a:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800536c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 8005370:	4604      	mov	r4, r0
 8005372:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 8005376:	2b00      	cmp	r3, #0
 8005378:	f000 8081 	beq.w	800547e <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800537c:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800537e:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 8005380:	2224      	movs	r2, #36	; 0x24
 8005382:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 8005386:	68da      	ldr	r2, [r3, #12]
 8005388:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800538c:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800538e:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005390:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005392:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 8005396:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005398:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800539a:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800539c:	4302      	orrs	r2, r0
 800539e:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80053a0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053a2:	4302      	orrs	r2, r0
 80053a4:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80053a6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80053aa:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80053ae:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80053b0:	430a      	orrs	r2, r1
 80053b2:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053b4:	695a      	ldr	r2, [r3, #20]
 80053b6:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053b8:	4934      	ldr	r1, [pc, #208]	; (800548c <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053ba:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80053be:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053c0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80053c2:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80053c4:	d035      	beq.n	8005432 <HAL_UART_Init+0xce>
 80053c6:	4a32      	ldr	r2, [pc, #200]	; (8005490 <HAL_UART_Init+0x12c>)
 80053c8:	4293      	cmp	r3, r2
 80053ca:	d032      	beq.n	8005432 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80053cc:	f7ff fcb8 	bl	8004d40 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80053d0:	69e3      	ldr	r3, [r4, #28]
 80053d2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80053d6:	d032      	beq.n	800543e <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80053d8:	6863      	ldr	r3, [r4, #4]
 80053da:	2119      	movs	r1, #25
 80053dc:	009a      	lsls	r2, r3, #2
 80053de:	fba0 0101 	umull	r0, r1, r0, r1
 80053e2:	0f9b      	lsrs	r3, r3, #30
 80053e4:	f7fa fef8 	bl	80001d8 <__aeabi_uldivmod>
 80053e8:	492a      	ldr	r1, [pc, #168]	; (8005494 <HAL_UART_Init+0x130>)
 80053ea:	fba1 3200 	umull	r3, r2, r1, r0
 80053ee:	0952      	lsrs	r2, r2, #5
 80053f0:	2564      	movs	r5, #100	; 0x64
 80053f2:	fb05 0012 	mls	r0, r5, r2, r0
 80053f6:	0100      	lsls	r0, r0, #4
 80053f8:	3032      	adds	r0, #50	; 0x32
 80053fa:	6823      	ldr	r3, [r4, #0]
 80053fc:	fba1 1000 	umull	r1, r0, r1, r0
 8005400:	0112      	lsls	r2, r2, #4
 8005402:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8005406:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005408:	691a      	ldr	r2, [r3, #16]
 800540a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800540e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005410:	695a      	ldr	r2, [r3, #20]
 8005412:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005416:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005418:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800541a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 800541c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 800541e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005422:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005424:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005426:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800542a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 800542e:	4628      	mov	r0, r5
}
 8005430:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8005432:	f7ff fc95 	bl	8004d60 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005436:	69e3      	ldr	r3, [r4, #28]
 8005438:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800543c:	d1cc      	bne.n	80053d8 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800543e:	6862      	ldr	r2, [r4, #4]
 8005440:	2119      	movs	r1, #25
 8005442:	1892      	adds	r2, r2, r2
 8005444:	f04f 0300 	mov.w	r3, #0
 8005448:	415b      	adcs	r3, r3
 800544a:	fba0 0101 	umull	r0, r1, r0, r1
 800544e:	f7fa fec3 	bl	80001d8 <__aeabi_uldivmod>
 8005452:	4b10      	ldr	r3, [pc, #64]	; (8005494 <HAL_UART_Init+0x130>)
 8005454:	fba3 2100 	umull	r2, r1, r3, r0
 8005458:	094d      	lsrs	r5, r1, #5
 800545a:	2264      	movs	r2, #100	; 0x64
 800545c:	fb02 0215 	mls	r2, r2, r5, r0
 8005460:	00d2      	lsls	r2, r2, #3
 8005462:	3232      	adds	r2, #50	; 0x32
 8005464:	fba3 3202 	umull	r3, r2, r3, r2
 8005468:	f3c2 1142 	ubfx	r1, r2, #5, #3
 800546c:	0912      	lsrs	r2, r2, #4
 800546e:	6823      	ldr	r3, [r4, #0]
 8005470:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8005474:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005478:	440a      	add	r2, r1
 800547a:	609a      	str	r2, [r3, #8]
 800547c:	e7c4      	b.n	8005408 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 800547e:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005482:	f7fe fae9 	bl	8003a58 <HAL_UART_MspInit>
 8005486:	e779      	b.n	800537c <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8005488:	2001      	movs	r0, #1
}
 800548a:	4770      	bx	lr
 800548c:	40011000 	.word	0x40011000
 8005490:	40011400 	.word	0x40011400
 8005494:	51eb851f 	.word	0x51eb851f

08005498 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 8005498:	88c0      	ldrh	r0, [r0, #6]
 800549a:	4770      	bx	lr

0800549c <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 800549c:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 800549e:	8840      	ldrh	r0, [r0, #2]
 80054a0:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 80054a4:	0c00      	lsrs	r0, r0, #16
 80054a6:	4770      	bx	lr

080054a8 <Circle_Limitation>:

#if defined CIRCLE_LIMITATION_SQRT_M0
const uint16_t SqrtTable[1025] = SQRT_CIRCLE_LIMITATION;
#endif
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 80054a8:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 80054aa:	8803      	ldrh	r3, [r0, #0]
 80054ac:	140d      	asrs	r5, r1, #16
{
 80054ae:	b084      	sub	sp, #16
 80054b0:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 80054b2:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 80054b6:	fb03 f303 	mul.w	r3, r3, r3
{
 80054ba:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 80054bc:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 80054c0:	428b      	cmp	r3, r1
 80054c2:	da10      	bge.n	80054e6 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 80054c4:	8846      	ldrh	r6, [r0, #2]
 80054c6:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 80054ca:	4282      	cmp	r2, r0
 80054cc:	dd14      	ble.n	80054f8 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 80054ce:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 80054d0:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 80054d4:	bfb8      	it	lt
 80054d6:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 80054d8:	f7fb fffa 	bl	80014d0 <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 80054dc:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 80054de:	bfb8      	it	lt
 80054e0:	4240      	neglt	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 80054e2:	b235      	sxth	r5, r6
      Local_Vqd.q = (int16_t)new_q;
 80054e4:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 80054e6:	b2a4      	uxth	r4, r4
 80054e8:	2000      	movs	r0, #0
 80054ea:	f364 000f 	bfi	r0, r4, #0, #16
 80054ee:	b2ad      	uxth	r5, r5
 80054f0:	f365 401f 	bfi	r0, r5, #16, #16
}
 80054f4:	b004      	add	sp, #16
 80054f6:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 80054f8:	1a98      	subs	r0, r3, r2
 80054fa:	f7fb ffe9 	bl	80014d0 <MCM_Sqrt>
        if (Vqd.q < 0)
 80054fe:	2c00      	cmp	r4, #0
 8005500:	daf0      	bge.n	80054e4 <Circle_Limitation+0x3c>
          new_q = -new_q;
 8005502:	4240      	negs	r0, r0
 8005504:	e7ee      	b.n	80054e4 <Circle_Limitation+0x3c>
 8005506:	bf00      	nop

08005508 <MCP_ReceivedPacket>:
#include "register_interface.h"
#include "mc_config.h"
#include "mcp_config.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8005508:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 800550a:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800550c:	882a      	ldrh	r2, [r5, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 800550e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8005512:	f022 0307 	bic.w	r3, r2, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005516:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 800551a:	b082      	sub	sp, #8
 800551c:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 800551e:	b29b      	uxth	r3, r3
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005520:	f000 8082 	beq.w	8005628 <MCP_ReceivedPacket+0x120>
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 8005524:	4e71      	ldr	r6, [pc, #452]	; (80056ec <MCP_ReceivedPacket+0x1e4>)
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8005526:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8005528:	f002 0207 	and.w	r2, r2, #7
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 800552c:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 800552e:	eb06 1642 	add.w	r6, r6, r2, lsl #5
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005532:	6822      	ldr	r2, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005534:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005536:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005538:	8991      	ldrh	r1, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800553a:	3802      	subs	r0, #2
 800553c:	b280      	uxth	r0, r0
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800553e:	3901      	subs	r1, #1
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 8005540:	f04f 0c00 	mov.w	ip, #0

    switch (command)
 8005544:	2b38      	cmp	r3, #56	; 0x38
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005546:	81a0      	strh	r0, [r4, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005548:	b289      	uxth	r1, r1
    pHandle->txLength = 0;
 800554a:	f8a4 c00e 	strh.w	ip, [r4, #14]
    switch (command)
 800554e:	d829      	bhi.n	80055a4 <MCP_ReceivedPacket+0x9c>
 8005550:	2b38      	cmp	r3, #56	; 0x38
 8005552:	d81e      	bhi.n	8005592 <MCP_ReceivedPacket+0x8a>
 8005554:	e8df f003 	tbb	[pc, r3]
 8005558:	1d1d1d98 	.word	0x1d1d1d98
 800555c:	1d1d1d1d 	.word	0x1d1d1d1d
 8005560:	1d1d1da0 	.word	0x1d1d1da0
 8005564:	1d1d1d1d 	.word	0x1d1d1d1d
 8005568:	1d1d1da5 	.word	0x1d1d1da5
 800556c:	1d1d1d1d 	.word	0x1d1d1d1d
 8005570:	1d1d1d8a 	.word	0x1d1d1d8a
 8005574:	1d1d1d1d 	.word	0x1d1d1d1d
 8005578:	1d1d1d84 	.word	0x1d1d1d84
 800557c:	1d1d1d1d 	.word	0x1d1d1d1d
 8005580:	1d1d1daa 	.word	0x1d1d1daa
 8005584:	1d1d1d1d 	.word	0x1d1d1d1d
 8005588:	1d1d1d80 	.word	0x1d1d1d80
 800558c:	1d1d1d1d 	.word	0x1d1d1d1d
 8005590:	92          	.byte	0x92
 8005591:	00          	.byte	0x00
 8005592:	2300      	movs	r3, #0
 8005594:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005596:	68a2      	ldr	r2, [r4, #8]
 8005598:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 800559a:	89e3      	ldrh	r3, [r4, #14]
 800559c:	3301      	adds	r3, #1
 800559e:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 80055a0:	b002      	add	sp, #8
 80055a2:	bd70      	pop	{r4, r5, r6, pc}
    switch (command)
 80055a4:	2b60      	cmp	r3, #96	; 0x60
 80055a6:	d839      	bhi.n	800561c <MCP_ReceivedPacket+0x114>
 80055a8:	2b47      	cmp	r3, #71	; 0x47
 80055aa:	d93a      	bls.n	8005622 <MCP_ReceivedPacket+0x11a>
 80055ac:	3b48      	subs	r3, #72	; 0x48
 80055ae:	2b18      	cmp	r3, #24
 80055b0:	d8ef      	bhi.n	8005592 <MCP_ReceivedPacket+0x8a>
 80055b2:	a201      	add	r2, pc, #4	; (adr r2, 80055b8 <MCP_ReceivedPacket+0xb0>)
 80055b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80055b8:	0800564d 	.word	0x0800564d
 80055bc:	08005593 	.word	0x08005593
 80055c0:	08005593 	.word	0x08005593
 80055c4:	08005593 	.word	0x08005593
 80055c8:	08005593 	.word	0x08005593
 80055cc:	08005593 	.word	0x08005593
 80055d0:	08005593 	.word	0x08005593
 80055d4:	08005593 	.word	0x08005593
 80055d8:	080056e5 	.word	0x080056e5
 80055dc:	08005593 	.word	0x08005593
 80055e0:	08005593 	.word	0x08005593
 80055e4:	08005593 	.word	0x08005593
 80055e8:	08005593 	.word	0x08005593
 80055ec:	08005593 	.word	0x08005593
 80055f0:	08005593 	.word	0x08005593
 80055f4:	08005593 	.word	0x08005593
 80055f8:	080056e5 	.word	0x080056e5
 80055fc:	08005593 	.word	0x08005593
 8005600:	08005593 	.word	0x08005593
 8005604:	08005593 	.word	0x08005593
 8005608:	08005593 	.word	0x08005593
 800560c:	08005593 	.word	0x08005593
 8005610:	08005593 	.word	0x08005593
 8005614:	08005593 	.word	0x08005593
 8005618:	080056e5 	.word	0x080056e5
 800561c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005620:	d060      	beq.n	80056e4 <MCP_ReceivedPacket+0x1dc>
 8005622:	4663      	mov	r3, ip
 8005624:	2002      	movs	r0, #2
 8005626:	e7b6      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005628:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 800562a:	6822      	ldr	r2, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800562c:	3802      	subs	r0, #2
      userCommand = (command >> 3) & 0x1f;
 800562e:	f3c3 03c7 	ubfx	r3, r3, #3, #8
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005632:	8991      	ldrh	r1, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005634:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005636:	3502      	adds	r5, #2
    pHandle->txLength = 0;
 8005638:	2200      	movs	r2, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 800563a:	f013 0f1e 	tst.w	r3, #30
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 800563e:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005640:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0;
 8005642:	81e2      	strh	r2, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005644:	d03d      	beq.n	80056c2 <MCP_ReceivedPacket+0x1ba>
        MCPResponse = MCP_CMD_OK;
 8005646:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8005648:	200d      	movs	r0, #13
 800564a:	e7a4      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
        MCI_Clear_Iqdref(pMCI);
 800564c:	4630      	mov	r0, r6
 800564e:	f7fb fe5b 	bl	8001308 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005652:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005654:	2000      	movs	r0, #0
        break;
 8005656:	e79e      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
        if (IDLE == MCI_GetSTMState(pMCI))
 8005658:	4630      	mov	r0, r6
 800565a:	f7fb fd6b 	bl	8001134 <MCI_GetSTMState>
 800565e:	b128      	cbz	r0, 800566c <MCP_ReceivedPacket+0x164>
          (void)MCI_StopMotor(pMCI);
 8005660:	4630      	mov	r0, r6
 8005662:	f7fb fd83 	bl	800116c <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005666:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8005668:	2000      	movs	r0, #0
 800566a:	e794      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 800566c:	4630      	mov	r0, r6
 800566e:	f7fb fd67 	bl	8001140 <MCI_StartMotor>
 8005672:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005676:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005678:	b2c0      	uxtb	r0, r0
 800567a:	e78c      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
        (void)MCI_FaultAcknowledged(pMCI);
 800567c:	4630      	mov	r0, r6
 800567e:	f7fb fd95 	bl	80011ac <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005682:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005684:	2000      	movs	r0, #0
        break;
 8005686:	e786      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005688:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 800568a:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 800568c:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 800568e:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005690:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005692:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005694:	2000      	movs	r0, #0
      break;
 8005696:	e77e      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8005698:	4620      	mov	r0, r4
 800569a:	f7fc ff2d 	bl	80024f8 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 800569e:	89e3      	ldrh	r3, [r4, #14]
        break;
 80056a0:	e779      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 80056a2:	4620      	mov	r0, r4
 80056a4:	f7fd fada 	bl	8002c5c <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80056a8:	89e3      	ldrh	r3, [r4, #14]
        break;
 80056aa:	e774      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
        if (RUN == MCI_GetSTMState(pMCI))
 80056ac:	4630      	mov	r0, r6
 80056ae:	f7fb fd41 	bl	8001134 <MCI_GetSTMState>
 80056b2:	2806      	cmp	r0, #6
 80056b4:	d1d7      	bne.n	8005666 <MCP_ReceivedPacket+0x15e>
          MCI_StopRamp(pMCI);
 80056b6:	4630      	mov	r0, r6
 80056b8:	f7fb fdbe 	bl	8001238 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80056bc:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 80056be:	2000      	movs	r0, #0
 80056c0:	e769      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80056c2:	3901      	subs	r1, #1
      userCommand = (command >> 3) & 0x1f;
 80056c4:	f003 031f 	and.w	r3, r3, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80056c8:	b20a      	sxth	r2, r1
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 80056ca:	4909      	ldr	r1, [pc, #36]	; (80056f0 <MCP_ReceivedPacket+0x1e8>)
 80056cc:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 80056d0:	2e00      	cmp	r6, #0
 80056d2:	d0b8      	beq.n	8005646 <MCP_ReceivedPacket+0x13e>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 80056d4:	68a3      	ldr	r3, [r4, #8]
 80056d6:	9300      	str	r3, [sp, #0]
 80056d8:	4629      	mov	r1, r5
 80056da:	f104 030e 	add.w	r3, r4, #14
 80056de:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 80056e0:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 80056e2:	e758      	b.n	8005596 <MCP_ReceivedPacket+0x8e>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 80056e4:	b20a      	sxth	r2, r1
  uint8_t userCommand=0;
 80056e6:	2300      	movs	r3, #0
 80056e8:	e7ef      	b.n	80056ca <MCP_ReceivedPacket+0x1c2>
 80056ea:	bf00      	nop
 80056ec:	2000083c 	.word	0x2000083c
 80056f0:	20001b48 	.word	0x20001b48

080056f4 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 80056f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 80056f6:	7fc3      	ldrb	r3, [r0, #31]
 80056f8:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 80056fc:	429a      	cmp	r2, r3
{
 80056fe:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005700:	d002      	beq.n	8005708 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 8005702:	3301      	adds	r3, #1
 8005704:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8005706:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8005708:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 800570a:	2300      	movs	r3, #0
 800570c:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 800570e:	b1a5      	cbz	r5, 800573a <MCPA_dataLog+0x46>
 8005710:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005712:	8ba2      	ldrh	r2, [r4, #28]
 8005714:	42aa      	cmp	r2, r5
 8005716:	d24e      	bcs.n	80057b6 <MCPA_dataLog+0xc2>
 8005718:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 800571c:	2bfe      	cmp	r3, #254	; 0xfe
 800571e:	d066      	beq.n	80057ee <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005720:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005724:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 8005726:	8b22      	ldrh	r2, [r4, #24]
 8005728:	6820      	ldr	r0, [r4, #0]
 800572a:	3202      	adds	r2, #2
 800572c:	2309      	movs	r3, #9
 800572e:	6845      	ldr	r5, [r0, #4]
 8005730:	b292      	uxth	r2, r2
 8005732:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8005734:	2300      	movs	r3, #0
 8005736:	8323      	strh	r3, [r4, #24]
}
 8005738:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 800573a:	4601      	mov	r1, r0
 800573c:	2209      	movs	r2, #9
 800573e:	f851 0b14 	ldr.w	r0, [r1], #20
 8005742:	6803      	ldr	r3, [r0, #0]
 8005744:	4798      	blx	r3
 8005746:	b390      	cbz	r0, 80057ae <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8005748:	4b4b      	ldr	r3, [pc, #300]	; (8005878 <MCPA_dataLog+0x184>)
 800574a:	6961      	ldr	r1, [r4, #20]
 800574c:	681b      	ldr	r3, [r3, #0]
 800574e:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005750:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8005754:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 8005758:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 800575c:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 800575e:	4290      	cmp	r0, r2
          pHandle->bufferIndex = 4U;
 8005760:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005762:	d101      	bne.n	8005768 <MCPA_dataLog+0x74>
 8005764:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005766:	e7d4      	b.n	8005712 <MCPA_dataLog+0x1e>
            pHandle->HFNumBuff = pHandle->HFNum;
 8005768:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
            pHandle->MFNumBuff = pHandle->MFNum;
 800576c:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
            pHandle->HFRateBuff = pHandle->HFRate;
 8005770:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
            pHandle->MarkBuff = pHandle->Mark;
 8005774:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            pHandle->HFNumBuff = pHandle->HFNum;
 8005778:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 800577c:	185a      	adds	r2, r3, r1
            pHandle->MFNumBuff = pHandle->MFNum;
 800577e:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005782:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MFRateBuff = pHandle->MFRate;
 8005784:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff = pHandle->HFRate;
 8005788:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 800578c:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff = pHandle->MFRate;
 800578e:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005792:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8005794:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8005798:	f001 fed0 	bl	800753c <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 800579c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 80057a0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 80057a4:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 80057a8:	441a      	add	r2, r3
 80057aa:	f001 fec7 	bl	800753c <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 80057ae:	8b25      	ldrh	r5, [r4, #24]
 80057b0:	2d00      	cmp	r5, #0
 80057b2:	d1ad      	bne.n	8005710 <MCPA_dataLog+0x1c>
}
 80057b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80057b6:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 80057ba:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80057bc:	b36e      	cbz	r6, 800581a <MCPA_dataLog+0x126>
 80057be:	68a2      	ldr	r2, [r4, #8]
 80057c0:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 80057c4:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80057c6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80057ca:	8800      	ldrh	r0, [r0, #0]
 80057cc:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80057d0:	8b25      	ldrh	r5, [r4, #24]
 80057d2:	3502      	adds	r5, #2
 80057d4:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80057d6:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 80057d8:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 80057da:	d1f4      	bne.n	80057c6 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 80057dc:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80057e0:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 80057e2:	2bfd      	cmp	r3, #253	; 0xfd
 80057e4:	4618      	mov	r0, r3
 80057e6:	d91d      	bls.n	8005824 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 80057e8:	4295      	cmp	r5, r2
 80057ea:	d897      	bhi.n	800571c <MCPA_dataLog+0x28>
}
 80057ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80057ee:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 80057f2:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 80057f6:	4418      	add	r0, r3
 80057f8:	4298      	cmp	r0, r3
 80057fa:	dd91      	ble.n	8005720 <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 80057fc:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 80057fe:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005800:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8005804:	6812      	ldr	r2, [r2, #0]
 8005806:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005808:	1c5a      	adds	r2, r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 800580a:	5cf3      	ldrb	r3, [r6, r3]
 800580c:	441d      	add	r5, r3
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800580e:	b2d3      	uxtb	r3, r2
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005810:	b2ad      	uxth	r5, r5
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005812:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005814:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005816:	dbf3      	blt.n	8005800 <MCPA_dataLog+0x10c>
 8005818:	e782      	b.n	8005720 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 800581a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 800581e:	28fd      	cmp	r0, #253	; 0xfd
 8005820:	f63f af71 	bhi.w	8005706 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8005824:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005828:	4283      	cmp	r3, r0
 800582a:	d007      	beq.n	800583c <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 800582c:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 800582e:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 8005830:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005834:	42aa      	cmp	r2, r5
 8005836:	f4ff af73 	bcc.w	8005720 <MCPA_dataLog+0x2c>
}
 800583a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800583c:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8005840:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8005842:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005844:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8005846:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800584a:	dd12      	ble.n	8005872 <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 800584c:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005850:	f8d4 c010 	ldr.w	ip, [r4, #16]
              logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005854:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005856:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800585e:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005862:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005864:	441d      	add	r5, r3
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005866:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005868:	b2ad      	uxth	r5, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800586a:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 800586c:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 800586e:	dbf2      	blt.n	8005856 <MCPA_dataLog+0x162>
 8005870:	e7e0      	b.n	8005834 <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005872:	8b25      	ldrh	r5, [r4, #24]
 8005874:	e7de      	b.n	8005834 <MCPA_dataLog+0x140>
 8005876:	bf00      	nop
 8005878:	20001bf8 	.word	0x20001bf8

0800587c <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 800587c:	8b03      	ldrh	r3, [r0, #24]
 800587e:	b19b      	cbz	r3, 80058a8 <MCPA_flushDataLog+0x2c>
{
 8005880:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8005882:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8005886:	2afe      	cmp	r2, #254	; 0xfe
 8005888:	4604      	mov	r4, r0
 800588a:	d00e      	beq.n	80058aa <MCPA_flushDataLog+0x2e>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 800588c:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 800588e:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005892:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8005894:	8b22      	ldrh	r2, [r4, #24]
 8005896:	6820      	ldr	r0, [r4, #0]
 8005898:	3202      	adds	r2, #2
 800589a:	2309      	movs	r3, #9
 800589c:	6845      	ldr	r5, [r0, #4]
 800589e:	b292      	uxth	r2, r2
 80058a0:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 80058a2:	2300      	movs	r3, #0
 80058a4:	8323      	strh	r3, [r4, #24]
  }   
}
 80058a6:	bd70      	pop	{r4, r5, r6, pc}
 80058a8:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80058aa:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 80058ae:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 80058b2:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80058b4:	4494      	add	ip, r2
 80058b6:	4562      	cmp	r2, ip
 80058b8:	dae9      	bge.n	800588e <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80058ba:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80058bc:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 80058be:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 80058c2:	6800      	ldr	r0, [r0, #0]
 80058c4:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80058c6:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80058c8:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80058ca:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80058cc:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80058ce:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80058d0:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 80058d2:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 80058d4:	dbf3      	blt.n	80058be <MCPA_flushDataLog+0x42>
 80058d6:	e7da      	b.n	800588e <MCPA_flushDataLog+0x12>

080058d8 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 80058d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 80058dc:	880f      	ldrh	r7, [r1, #0]
{
 80058de:	4604      	mov	r4, r0

    if (buffSize == 0)
 80058e0:	2f00      	cmp	r7, #0
 80058e2:	d044      	beq.n	800596e <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 80058e4:	6803      	ldr	r3, [r0, #0]
 80058e6:	89db      	ldrh	r3, [r3, #14]
 80058e8:	42bb      	cmp	r3, r7
 80058ea:	d33d      	bcc.n	8005968 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 80058ec:	788b      	ldrb	r3, [r1, #2]
 80058ee:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 80058f2:	78ca      	ldrb	r2, [r1, #3]
 80058f4:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 80058f8:	790b      	ldrb	r3, [r1, #4]
 80058fa:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 80058fe:	794e      	ldrb	r6, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8005900:	7f83      	ldrb	r3, [r0, #30]
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8005902:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8005906:	4416      	add	r6, r2
 8005908:	429e      	cmp	r6, r3
 800590a:	dc52      	bgt.n	80059b2 <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 800590c:	3106      	adds	r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800590e:	2e00      	cmp	r6, #0
 8005910:	d056      	beq.n	80059c0 <MCPA_cfgLog+0xe8>
 8005912:	2500      	movs	r5, #0
 8005914:	4688      	mov	r8, r1
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 8005916:	462e      	mov	r6, r5
 8005918:	e011      	b.n	800593e <MCPA_cfgLog+0x66>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 800591a:	68e3      	ldr	r3, [r4, #12]
 800591c:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 800591e:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005920:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005924:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 8005928:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800592a:	f105 0c01 	add.w	ip, r5, #1
 800592e:	fa5f f58c 	uxtb.w	r5, ip
 8005932:	4403      	add	r3, r0
         logSize = logSize+pHandle->dataSizeTable[i];
 8005934:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005936:	429d      	cmp	r5, r3
        pCfgData++;
 8005938:	4641      	mov	r1, r8
         logSize = logSize+pHandle->dataSizeTable[i];
 800593a:	b296      	uxth	r6, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 800593c:	da11      	bge.n	8005962 <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 800593e:	f838 9b02 	ldrh.w	r9, [r8], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8005942:	6861      	ldr	r1, [r4, #4]
 8005944:	4648      	mov	r0, r9
 8005946:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 800594a:	f7fd fdd3 	bl	80034f4 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 800594e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005952:	42ab      	cmp	r3, r5
 8005954:	f04f 0002 	mov.w	r0, #2
 8005958:	d8df      	bhi.n	800591a <MCPA_cfgLog+0x42>
 800595a:	4648      	mov	r0, r9
 800595c:	f7fd fdbe 	bl	80034dc <RI_GetIDSize>
 8005960:	e7db      	b.n	800591a <MCPA_cfgLog+0x42>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 8005962:	1db3      	adds	r3, r6, #6
 8005964:	429f      	cmp	r7, r3
 8005966:	d21a      	bcs.n	800599e <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8005968:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 800596a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 800596e:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8005970:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8005974:	b153      	cbz	r3, 800598c <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005976:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005978:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 800597c:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 800597e:	8b22      	ldrh	r2, [r4, #24]
 8005980:	6820      	ldr	r0, [r4, #0]
 8005982:	3202      	adds	r2, #2
 8005984:	6845      	ldr	r5, [r0, #4]
 8005986:	b292      	uxth	r2, r2
 8005988:	2309      	movs	r3, #9
 800598a:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 800598c:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 800598e:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8005992:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8005994:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8005998:	8320      	strh	r0, [r4, #24]
}
 800599a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 800599e:	1eba      	subs	r2, r7, #2
 80059a0:	1b92      	subs	r2, r2, r6
 80059a2:	8362      	strh	r2, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 80059a4:	780b      	ldrb	r3, [r1, #0]
 80059a6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
       if (0U == pHandle->Mark)
 80059aa:	b12b      	cbz	r3, 80059b8 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 80059ac:	2000      	movs	r0, #0
}
 80059ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 80059b2:	200a      	movs	r0, #10
}
 80059b4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 80059b8:	8b23      	ldrh	r3, [r4, #24]
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d0e6      	beq.n	800598c <MCPA_cfgLog+0xb4>
 80059be:	e7da      	b.n	8005976 <MCPA_cfgLog+0x9e>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 80059c0:	2306      	movs	r3, #6
 80059c2:	e7cf      	b.n	8005964 <MCPA_cfgLog+0x8c>

080059c4 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear(MotorPowMeas_Handle_t *pHandle)
{
 80059c4:	b510      	push	{r4, lr}
  {
#endif
    uint16_t i;
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
    {
      pHandle->hMeasBuffer[i] = 0;
 80059c6:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 80059ca:	4604      	mov	r4, r0
      pHandle->hMeasBuffer[i] = 0;
 80059cc:	2100      	movs	r1, #0
 80059ce:	f001 fdc3 	bl	8007558 <memset>
    }
    pHandle->hNextMeasBufferIndex = 0u;
 80059d2:	2300      	movs	r3, #0
 80059d4:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    pHandle->hLastMeasBufferIndex = 0u;
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 80059d8:	bd10      	pop	{r4, pc}
 80059da:	bf00      	nop

080059dc <MPM_CalcElMotorPower>:
#endif
    uint16_t i;
    int32_t wAux = 0;

    /* Store the measured values in the buffer.*/
    pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80059dc:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
    pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
    pHandle->hNextMeasBufferIndex++;
 80059e0:	1c53      	adds	r3, r2, #1
 80059e2:	b29b      	uxth	r3, r3
    if (pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT)
 80059e4:	2b7f      	cmp	r3, #127	; 0x7f
    {
      pHandle->hNextMeasBufferIndex = 0u;
 80059e6:	bf88      	it	hi
 80059e8:	2300      	movhi	r3, #0
{
 80059ea:	b500      	push	{lr}
    pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 80059ec:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
    pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 80059f0:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 80059f4:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
      pHandle->hNextMeasBufferIndex = 0u;
 80059f8:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
    int32_t wAux = 0;
 80059fc:	2200      	movs	r2, #0
 80059fe:	1e83      	subs	r3, r0, #2
    }
    /* Compute the average measured motor power */
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
    {
      wAux += (int32_t)(pHandle->hMeasBuffer[i]);
 8005a00:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
 8005a04:	4573      	cmp	r3, lr
      wAux += (int32_t)(pHandle->hMeasBuffer[i]);
 8005a06:	4462      	add	r2, ip
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
 8005a08:	d1fa      	bne.n	8005a00 <MPM_CalcElMotorPower+0x24>
    }
    wAux /= ((int32_t)MPM_BUFFER_LENGHT);
 8005a0a:	2a00      	cmp	r2, #0
 8005a0c:	bfb8      	it	lt
 8005a0e:	327f      	addlt	r2, #127	; 0x7f
 8005a10:	11d2      	asrs	r2, r2, #7
    pHandle->hAvrgElMotorPowerW = (int16_t)wAux;
 8005a12:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  }
#endif

  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8005a16:	4608      	mov	r0, r1
 8005a18:	f85d fb04 	ldr.w	pc, [sp], #4

08005a1c <MPM_GetAvrgElMotorPowerW>:
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrgElMotorPowerW);
#else
  return (pHandle->hAvrgElMotorPowerW);
#endif
}
 8005a1c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8005a20:	4770      	bx	lr
 8005a22:	bf00      	nop

08005a24 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8005a24:	8a03      	ldrh	r3, [r0, #16]
 8005a26:	8b42      	ldrh	r2, [r0, #26]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d306      	bcc.n	8005a3a <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 8005a2c:	8b82      	ldrh	r2, [r0, #28]
 8005a2e:	429a      	cmp	r2, r3
 8005a30:	d901      	bls.n	8005a36 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 8005a32:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8005a34:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8005a36:	8ac0      	ldrh	r0, [r0, #22]
 8005a38:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 8005a3a:	2008      	movs	r0, #8
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop

08005a40 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8005a40:	2300      	movs	r3, #0
 8005a42:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8005a44:	4770      	bx	lr
 8005a46:	bf00      	nop

08005a48 <NTC_Init>:
{
 8005a48:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 8005a4a:	7803      	ldrb	r3, [r0, #0]
{
 8005a4c:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8005a4e:	b123      	cbz	r3, 8005a5a <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8005a50:	8a43      	ldrh	r3, [r0, #18]
 8005a52:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 8005a54:	2200      	movs	r2, #0
 8005a56:	82c2      	strh	r2, [r0, #22]
}
 8005a58:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 8005a5a:	3004      	adds	r0, #4
 8005a5c:	f7fd fdec 	bl	8003638 <RCM_RegisterRegConv>
 8005a60:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 8005a64:	4620      	mov	r0, r4
 8005a66:	f7ff ffeb 	bl	8005a40 <NTC_Clear>
}
 8005a6a:	bd10      	pop	{r4, pc}

08005a6c <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 8005a6c:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 8005a6e:	7803      	ldrb	r3, [r0, #0]
{
 8005a70:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 8005a72:	b113      	cbz	r3, 8005a7a <NTC_CalcAvTemp+0xe>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 8005a74:	2000      	movs	r0, #0
 8005a76:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8005a78:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8005a7a:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8005a7e:	f7fd feb7 	bl	80037f0 <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 8005a82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8005a86:	4298      	cmp	r0, r3
 8005a88:	d007      	beq.n	8005a9a <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8005a8a:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 8005a8c:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 8005a8e:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 8005a90:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 8005a94:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 8005a98:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 8005a9a:	4620      	mov	r0, r4
 8005a9c:	f7ff ffc2 	bl	8005a24 <NTC_SetFaultState>
 8005aa0:	82e0      	strh	r0, [r4, #22]
}
 8005aa2:	bd10      	pop	{r4, pc}

08005aa4 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 8005aa4:	7803      	ldrb	r3, [r0, #0]
 8005aa6:	b95b      	cbnz	r3, 8005ac0 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 8005aa8:	8a02      	ldrh	r2, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 8005aaa:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 8005aac:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8005ab0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 8005ab2:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 8005ab4:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 8005ab8:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 8005abc:	b200      	sxth	r0, r0
 8005abe:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 8005ac0:	8a80      	ldrh	r0, [r0, #20]
}
 8005ac2:	b200      	sxth	r0, r0
 8005ac4:	4770      	bx	lr
 8005ac6:	bf00      	nop

08005ac8 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 8005ac8:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8005aca:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8005acc:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 8005ace:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8005ad0:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8005ad2:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8005ad4:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005ad6:	4770      	bx	lr

08005ad8 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8005ad8:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005ada:	4770      	bx	lr

08005adc <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 8005adc:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005ade:	4770      	bx	lr

08005ae0 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8005ae0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8005ae4:	4770      	bx	lr
 8005ae6:	bf00      	nop

08005ae8 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8005ae8:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop

08005af0 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8005af0:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8005af2:	4770      	bx	lr

08005af4 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8005af4:	8b80      	ldrh	r0, [r0, #28]
 8005af6:	4770      	bx	lr

08005af8 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8005af8:	2301      	movs	r3, #1
 8005afa:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 8005afc:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8005afe:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005b00:	4770      	bx	lr
 8005b02:	bf00      	nop

08005b04 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8005b04:	8b40      	ldrh	r0, [r0, #26]
 8005b06:	4770      	bx	lr

08005b08 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8005b08:	8bc0      	ldrh	r0, [r0, #30]
 8005b0a:	4770      	bx	lr

08005b0c <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 8005b0c:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005b0e:	4770      	bx	lr

08005b10 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8005b10:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005b12:	4770      	bx	lr

08005b14 <PID_SetKIDivisorPOW2>:
{
 8005b14:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8005b16:	2301      	movs	r3, #1
{
 8005b18:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8005b1a:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8005b1c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8005b20:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8005b22:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8005b24:	8343      	strh	r3, [r0, #26]
{
 8005b26:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8005b28:	f7ff fff2 	bl	8005b10 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 8005b2c:	4902      	ldr	r1, [pc, #8]	; (8005b38 <PID_SetKIDivisorPOW2+0x24>)
 8005b2e:	4628      	mov	r0, r5
 8005b30:	40a1      	lsls	r1, r4
 8005b32:	f7ff ffeb 	bl	8005b0c <PID_SetLowerIntegralTermLimit>
}
 8005b36:	bd38      	pop	{r3, r4, r5, pc}
 8005b38:	ffff8001 	.word	0xffff8001

08005b3c <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 8005b3c:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005b3e:	4770      	bx	lr

08005b40 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8005b40:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8005b44:	4770      	bx	lr
 8005b46:	bf00      	nop

08005b48 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8005b48:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 8005b4a:	4770      	bx	lr

08005b4c <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8005b50:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8005b52:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8005b54:	4770      	bx	lr
 8005b56:	bf00      	nop

08005b58 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005b58:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 8005b5c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8005b60:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8005b64:	b510      	push	{r4, lr}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8005b66:	fb01 f303 	mul.w	r3, r1, r3
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 8005b6a:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
    if (0 == pHandle->hKiGain)
 8005b6e:	b162      	cbz	r2, 8005b8a <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 8005b70:	fb01 f202 	mul.w	r2, r1, r2
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 8005b74:	6881      	ldr	r1, [r0, #8]

      if (wIntegral_sum_temp < 0)
 8005b76:	188c      	adds	r4, r1, r2
 8005b78:	d420      	bmi.n	8005bbc <PI_Controller+0x64>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 8005b7a:	2900      	cmp	r1, #0
 8005b7c:	db2a      	blt.n	8005bd4 <PI_Controller+0x7c>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005b7e:	68c2      	ldr	r2, [r0, #12]
 8005b80:	42a2      	cmp	r2, r4
 8005b82:	db02      	blt.n	8005b8a <PI_Controller+0x32>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 8005b84:	6902      	ldr	r2, [r0, #16]
 8005b86:	42a2      	cmp	r2, r4
 8005b88:	dd22      	ble.n	8005bd0 <PI_Controller+0x78>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 8005b8a:	8b81      	ldrh	r1, [r0, #28]
 8005b8c:	410b      	asrs	r3, r1
 8005b8e:	8bc1      	ldrh	r1, [r0, #30]
 8005b90:	fa42 f101 	asr.w	r1, r2, r1
 8005b94:	440b      	add	r3, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 8005b96:	459c      	cmp	ip, r3
 8005b98:	da05      	bge.n	8005ba6 <PI_Controller+0x4e>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 8005b9a:	ebac 0303 	sub.w	r3, ip, r3
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 8005b9e:	441a      	add	r2, r3
 8005ba0:	6082      	str	r2, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 8005ba2:	4660      	mov	r0, ip
 8005ba4:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 8005ba6:	459e      	cmp	lr, r3
      wDischarge = hLowerOutputLimit - wOutput_32;
 8005ba8:	bfc9      	itett	gt
 8005baa:	ebae 0303 	subgt.w	r3, lr, r3
    returnValue = (int16_t)wOutput_32;
 8005bae:	fa0f fc83 	sxthle.w	ip, r3
    pHandle->wIntegralTerm += wDischarge;
 8005bb2:	18d2      	addgt	r2, r2, r3
 8005bb4:	46f4      	movgt	ip, lr
 8005bb6:	6082      	str	r2, [r0, #8]
}
 8005bb8:	4660      	mov	r0, ip
 8005bba:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 8005bbc:	2900      	cmp	r1, #0
 8005bbe:	ddde      	ble.n	8005b7e <PI_Controller+0x26>
          if (wIntegral_Term > 0)
 8005bc0:	2a00      	cmp	r2, #0
 8005bc2:	dddc      	ble.n	8005b7e <PI_Controller+0x26>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 8005bc4:	68c2      	ldr	r2, [r0, #12]
 8005bc6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005bca:	428a      	cmp	r2, r1
 8005bcc:	d1dd      	bne.n	8005b8a <PI_Controller+0x32>
            wIntegral_sum_temp = INT32_MAX;
 8005bce:	4614      	mov	r4, r2
 8005bd0:	4622      	mov	r2, r4
 8005bd2:	e7da      	b.n	8005b8a <PI_Controller+0x32>
            wIntegral_sum_temp = -INT32_MAX;
 8005bd4:	4902      	ldr	r1, [pc, #8]	; (8005be0 <PI_Controller+0x88>)
 8005bd6:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 8005bda:	bf28      	it	cs
 8005bdc:	460c      	movcs	r4, r1
 8005bde:	e7ce      	b.n	8005b7e <PI_Controller+0x26>
 8005be0:	80000001 	.word	0x80000001

08005be4 <PQD_CalcElMotorPower>:
  {
#endif
    int32_t wAux;
    int32_t wAux2;
    int32_t wAux3;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8005be4:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8005be8:	b570      	push	{r4, r5, r6, lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005bea:	8b11      	ldrh	r1, [r2, #24]
 8005bec:	89d4      	ldrh	r4, [r2, #14]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8005bee:	8993      	ldrh	r3, [r2, #12]
 8005bf0:	8ad2      	ldrh	r2, [r2, #22]
    wAux /= 65536;

    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 8005bf2:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 8005bf6:	4605      	mov	r5, r0
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8005bf8:	fb14 f401 	smulbb	r4, r4, r1
    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 8005bfc:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8005c00:	fb13 4402 	smlabb	r4, r3, r2, r4
    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 8005c04:	f7ff fc4a 	bl	800549c <VBS_GetAvBusVoltage_V>
    wAux /= 65536;
 8005c08:	1e23      	subs	r3, r4, #0
    wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005c0a:	490f      	ldr	r1, [pc, #60]	; (8005c48 <PQD_CalcElMotorPower+0x64>)
    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 8005c0c:	fb06 f000 	mul.w	r0, r6, r0
    wAux /= 65536;
 8005c10:	bfb8      	it	lt
 8005c12:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
    wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005c16:	ea4f 72e0 	mov.w	r2, r0, asr #31
    wAux /= 65536;
 8005c1a:	bfb8      	it	lt
 8005c1c:	33ff      	addlt	r3, #255	; 0xff
    wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8005c1e:	fb81 1000 	smull	r1, r0, r1, r0
 8005c22:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
    wAux /= 65536;
 8005c26:	141b      	asrs	r3, r3, #16

    wAux3 = wAux * wAux2;
 8005c28:	fb00 f303 	mul.w	r3, r0, r3
    wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
    wAux3 /= 10;
    wAux3 /= 65536;
 8005c2c:	4907      	ldr	r1, [pc, #28]	; (8005c4c <PQD_CalcElMotorPower+0x68>)
    wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 8005c2e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8005c32:	005b      	lsls	r3, r3, #1
    wAux3 /= 65536;
 8005c34:	fb81 2103 	smull	r2, r1, r1, r3
 8005c38:	17db      	asrs	r3, r3, #31

    (void)MPM_CalcElMotorPower(&pHandle->_super, (int16_t)wAux3);
 8005c3a:	4628      	mov	r0, r5
 8005c3c:	ebc3 41a1 	rsb	r1, r3, r1, asr #18
#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8005c40:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)MPM_CalcElMotorPower(&pHandle->_super, (int16_t)wAux3);
 8005c44:	f7ff beca 	b.w	80059dc <MPM_CalcElMotorPower>
 8005c48:	1b4e81b5 	.word	0x1b4e81b5
 8005c4c:	66666667 	.word	0x66666667

08005c50 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8005c50:	4b17      	ldr	r3, [pc, #92]	; (8005cb0 <startTimers+0x60>)
 8005c52:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 8005c54:	07d2      	lsls	r2, r2, #31
 8005c56:	d415      	bmi.n	8005c84 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8005c58:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c5a:	f042 0201 	orr.w	r2, r2, #1
 8005c5e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8005c60:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8005c62:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005c64:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005c68:	f002 0201 	and.w	r2, r2, #1
 8005c6c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 8005c6e:	9a01      	ldr	r2, [sp, #4]
 8005c70:	694a      	ldr	r2, [r1, #20]
 8005c72:	f042 0201 	orr.w	r2, r2, #1
 8005c76:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 8005c78:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005c7a:	f022 0201 	bic.w	r2, r2, #1
 8005c7e:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 8005c80:	b002      	add	sp, #8
 8005c82:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 8005c84:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005c88:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005c8a:	6859      	ldr	r1, [r3, #4]
 8005c8c:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005c90:	f041 0120 	orr.w	r1, r1, #32
 8005c94:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8005c96:	6959      	ldr	r1, [r3, #20]
 8005c98:	f041 0101 	orr.w	r1, r1, #1
 8005c9c:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 8005c9e:	6859      	ldr	r1, [r3, #4]
 8005ca0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 8005ca4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 8005ca8:	430a      	orrs	r2, r1
 8005caa:	605a      	str	r2, [r3, #4]
 8005cac:	4770      	bx	lr
 8005cae:	bf00      	nop
 8005cb0:	40023800 	.word	0x40023800

08005cb4 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005cb4:	3201      	adds	r2, #1
{
 8005cb6:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 8005cb8:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005cba:	f06f 0602 	mvn.w	r6, #2
 8005cbe:	0155      	lsls	r5, r2, #5
 8005cc0:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 8005cc2:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 8005cc4:	f893 c000 	ldrb.w	ip, [r3]
 8005cc8:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 8005ccc:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8005cd0:	d80c      	bhi.n	8005cec <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8005cd2:	6904      	ldr	r4, [r0, #16]
 8005cd4:	07a4      	lsls	r4, r4, #30
 8005cd6:	d5f5      	bpl.n	8005cc4 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8005cd8:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 8005cdc:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 8005cde:	6106      	str	r6, [r0, #16]
 8005ce0:	d8f0      	bhi.n	8005cc4 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8005ce2:	781c      	ldrb	r4, [r3, #0]
 8005ce4:	2c0f      	cmp	r4, #15
 8005ce6:	d8ed      	bhi.n	8005cc4 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8005ce8:	2301      	movs	r3, #1
 8005cea:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
}
 8005cec:	bd70      	pop	{r4, r5, r6, pc}
 8005cee:	bf00      	nop

08005cf0 <R3_1_GetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005cf0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
{
 8005cf4:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005cf6:	685c      	ldr	r4, [r3, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8005cf8:	6a22      	ldr	r2, [r4, #32]
 8005cfa:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005cfe:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 8005d00:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70

  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005d04:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005d08:	6d1c      	ldr	r4, [r3, #80]	; 0x50
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005d0a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 8005d0c:	682b      	ldr	r3, [r5, #0]
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005d0e:	6824      	ldr	r4, [r4, #0]
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005d10:	005b      	lsls	r3, r3, #1
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005d12:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8005d16:	b29b      	uxth	r3, r3
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8005d18:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 8005d1c:	2a05      	cmp	r2, #5
 8005d1e:	f200 80a8 	bhi.w	8005e72 <R3_1_GetPhaseCurrents+0x182>
 8005d22:	e8df f002 	tbb	[pc, r2]
 8005d26:	1c37      	.short	0x1c37
 8005d28:	3703031c 	.word	0x3703031c
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005d2c:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005d2e:	1ad3      	subs	r3, r2, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8005d30:	4a53      	ldr	r2, [pc, #332]	; (8005e80 <R3_1_GetPhaseCurrents+0x190>)
 8005d32:	4293      	cmp	r3, r2
 8005d34:	db5c      	blt.n	8005df0 <R3_1_GetPhaseCurrents+0x100>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005d36:	6fc2      	ldr	r2, [r0, #124]	; 0x7c

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8005d38:	4d51      	ldr	r5, [pc, #324]	; (8005e80 <R3_1_GetPhaseCurrents+0x190>)
      else  if ( wAux > INT16_MAX )
 8005d3a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005d3e:	eba2 0c0c 	sub.w	ip, r2, ip
        pStator_Currents->a = INT16_MAX;
 8005d42:	bfa8      	it	ge
 8005d44:	f647 73ff 	movwge	r3, #32767	; 0x7fff
      if ( wAux < -INT16_MAX )
 8005d48:	45ac      	cmp	ip, r5
        pStator_Currents->a = ( int16_t )wAux;
 8005d4a:	800b      	strh	r3, [r1, #0]
      if ( wAux < -INT16_MAX )
 8005d4c:	da57      	bge.n	8005dfe <R3_1_GetPhaseCurrents+0x10e>
    default:
    {
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
 8005d4e:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = -INT16_MAX;
 8005d52:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005d54:	fa1f f38e 	uxth.w	r3, lr
 8005d58:	f248 0201 	movw	r2, #32769	; 0x8001
 8005d5c:	e033      	b.n	8005dc6 <R3_1_GetPhaseCurrents+0xd6>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 8005d5e:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8005d60:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 8005d62:	4b47      	ldr	r3, [pc, #284]	; (8005e80 <R3_1_GetPhaseCurrents+0x190>)
 8005d64:	429c      	cmp	r4, r3
 8005d66:	db3d      	blt.n	8005de4 <R3_1_GetPhaseCurrents+0xf4>
      else  if ( wAux > INT16_MAX )
 8005d68:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 8005d6c:	db71      	blt.n	8005e52 <R3_1_GetPhaseCurrents+0x162>
        pStator_Currents->a = INT16_MAX;
 8005d6e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005d72:	4613      	mov	r3, r2
 8005d74:	800a      	strh	r2, [r1, #0]
 8005d76:	4614      	mov	r4, r2
 8005d78:	4696      	mov	lr, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 8005d7a:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 8005d7e:	ebac 0202 	sub.w	r2, ip, r2
 8005d82:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 8005d84:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 8005d88:	db4e      	blt.n	8005e28 <R3_1_GetPhaseCurrents+0x138>
        pStator_Currents->b = INT16_MAX;
 8005d8a:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8005d8e:	804a      	strh	r2, [r1, #2]
 8005d90:	4615      	mov	r5, r2
 8005d92:	e018      	b.n	8005dc6 <R3_1_GetPhaseCurrents+0xd6>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005d94:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
      if ( wAux < -INT16_MAX )
 8005d96:	4a3a      	ldr	r2, [pc, #232]	; (8005e80 <R3_1_GetPhaseCurrents+0x190>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 8005d98:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 8005d9a:	4293      	cmp	r3, r2
 8005d9c:	db1c      	blt.n	8005dd8 <R3_1_GetPhaseCurrents+0xe8>
      else  if ( wAux > INT16_MAX )
 8005d9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005da2:	db48      	blt.n	8005e36 <R3_1_GetPhaseCurrents+0x146>
        pStator_Currents->b = INT16_MAX;
 8005da4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005da8:	461a      	mov	r2, r3
 8005daa:	804b      	strh	r3, [r1, #2]
 8005dac:	461d      	mov	r5, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 8005dae:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 8005db2:	ebac 0404 	sub.w	r4, ip, r4
 8005db6:	1ae3      	subs	r3, r4, r3
      if ( wAux > INT16_MAX )
 8005db8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005dbc:	db2c      	blt.n	8005e18 <R3_1_GetPhaseCurrents+0x128>
        pStator_Currents->a = INT16_MAX;
 8005dbe:	f647 73ff 	movw	r3, #32767	; 0x7fff
 8005dc2:	800b      	strh	r3, [r1, #0]
 8005dc4:	469e      	mov	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005dc6:	4413      	add	r3, r2
 8005dc8:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 8005dca:	f8a0 e054 	strh.w	lr, [r0, #84]	; 0x54
  pHandle->_Super.Ib = pStator_Currents->b;
 8005dce:	f8a0 5056 	strh.w	r5, [r0, #86]	; 0x56
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005dd2:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
}
 8005dd6:	bd30      	pop	{r4, r5, pc}
        pStator_Currents->b = -INT16_MAX;
 8005dd8:	4613      	mov	r3, r2
 8005dda:	804a      	strh	r2, [r1, #2]
 8005ddc:	461d      	mov	r5, r3
 8005dde:	f248 0201 	movw	r2, #32769	; 0x8001
 8005de2:	e7e4      	b.n	8005dae <R3_1_GetPhaseCurrents+0xbe>
        pStator_Currents->a = -INT16_MAX;
 8005de4:	461c      	mov	r4, r3
 8005de6:	800b      	strh	r3, [r1, #0]
 8005de8:	46a6      	mov	lr, r4
 8005dea:	f248 0301 	movw	r3, #32769	; 0x8001
 8005dee:	e7c4      	b.n	8005d7a <R3_1_GetPhaseCurrents+0x8a>
        pStator_Currents->a = -INT16_MAX;
 8005df0:	800a      	strh	r2, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005df2:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
      if ( wAux < -INT16_MAX )
 8005df4:	4d22      	ldr	r5, [pc, #136]	; (8005e80 <R3_1_GetPhaseCurrents+0x190>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8005df6:	eba2 0c0c 	sub.w	ip, r2, ip
      if ( wAux < -INT16_MAX )
 8005dfa:	45ac      	cmp	ip, r5
 8005dfc:	dba7      	blt.n	8005d4e <R3_1_GetPhaseCurrents+0x5e>
      else  if ( wAux > INT16_MAX )
 8005dfe:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 8005e02:	db1c      	blt.n	8005e3e <R3_1_GetPhaseCurrents+0x14e>
        pStator_Currents->b = INT16_MAX;
 8005e04:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = pStator_Currents->a;
 8005e08:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = INT16_MAX;
 8005e0c:	804b      	strh	r3, [r1, #2]
 8005e0e:	461a      	mov	r2, r3
 8005e10:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005e12:	fa1f f38e 	uxth.w	r3, lr
 8005e16:	e7d6      	b.n	8005dc6 <R3_1_GetPhaseCurrents+0xd6>
      else  if ( wAux < -INT16_MAX )
 8005e18:	4c19      	ldr	r4, [pc, #100]	; (8005e80 <R3_1_GetPhaseCurrents+0x190>)
 8005e1a:	42a3      	cmp	r3, r4
 8005e1c:	da1f      	bge.n	8005e5e <R3_1_GetPhaseCurrents+0x16e>
        pStator_Currents->a = -INT16_MAX;
 8005e1e:	800c      	strh	r4, [r1, #0]
 8005e20:	f248 0301 	movw	r3, #32769	; 0x8001
 8005e24:	46a6      	mov	lr, r4
 8005e26:	e7ce      	b.n	8005dc6 <R3_1_GetPhaseCurrents+0xd6>
      else  if ( wAux < -INT16_MAX )
 8005e28:	4d15      	ldr	r5, [pc, #84]	; (8005e80 <R3_1_GetPhaseCurrents+0x190>)
 8005e2a:	42aa      	cmp	r2, r5
 8005e2c:	da1d      	bge.n	8005e6a <R3_1_GetPhaseCurrents+0x17a>
        pStator_Currents->b = -INT16_MAX;
 8005e2e:	804d      	strh	r5, [r1, #2]
 8005e30:	f248 0201 	movw	r2, #32769	; 0x8001
 8005e34:	e7c7      	b.n	8005dc6 <R3_1_GetPhaseCurrents+0xd6>
        pStator_Currents->b = ( int16_t )wAux;
 8005e36:	b21d      	sxth	r5, r3
 8005e38:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005e3a:	b29a      	uxth	r2, r3
 8005e3c:	e7b7      	b.n	8005dae <R3_1_GetPhaseCurrents+0xbe>
  pHandle->_Super.Ia = pStator_Currents->a;
 8005e3e:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = ( int16_t )wAux;
 8005e42:	fa0f f58c 	sxth.w	r5, ip
 8005e46:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005e48:	fa1f f38e 	uxth.w	r3, lr
 8005e4c:	fa1f f28c 	uxth.w	r2, ip
 8005e50:	e7b9      	b.n	8005dc6 <R3_1_GetPhaseCurrents+0xd6>
        pStator_Currents->a = ( int16_t )wAux;
 8005e52:	fa0f fe84 	sxth.w	lr, r4
 8005e56:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005e5a:	b2a3      	uxth	r3, r4
 8005e5c:	e78d      	b.n	8005d7a <R3_1_GetPhaseCurrents+0x8a>
        pStator_Currents->a = ( int16_t )wAux;
 8005e5e:	fa0f fe83 	sxth.w	lr, r3
 8005e62:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	e7ad      	b.n	8005dc6 <R3_1_GetPhaseCurrents+0xd6>
        pStator_Currents->b = ( int16_t )wAux;
 8005e6a:	b215      	sxth	r5, r2
 8005e6c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005e6e:	b292      	uxth	r2, r2
 8005e70:	e7a9      	b.n	8005dc6 <R3_1_GetPhaseCurrents+0xd6>
  pHandle->_Super.Ia = pStator_Currents->a;
 8005e72:	f9b1 e000 	ldrsh.w	lr, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 8005e76:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8005e7a:	880b      	ldrh	r3, [r1, #0]
 8005e7c:	884a      	ldrh	r2, [r1, #2]
 8005e7e:	e7a2      	b.n	8005dc6 <R3_1_GetPhaseCurrents+0xd6>
 8005e80:	ffff8001 	.word	0xffff8001

08005e84 <R3_1_HFCurrentsCalibrationAB>:
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005e84:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
{
 8005e88:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005e8a:	685c      	ldr	r4, [r3, #4]
 8005e8c:	6a22      	ldr	r2, [r4, #32]
 8005e8e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8005e92:	6222      	str	r2, [r4, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005e94:	f890 208f 	ldrb.w	r2, [r0, #143]	; 0x8f
 8005e98:	2a0f      	cmp	r2, #15
 8005e9a:	d813      	bhi.n	8005ec4 <R3_1_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8005e9c:	f890 408e 	ldrb.w	r4, [r0, #142]	; 0x8e
 8005ea0:	6f82      	ldr	r2, [r0, #120]	; 0x78
 8005ea2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005ea6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005ea8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 8005eaa:	6824      	ldr	r4, [r4, #0]
 8005eac:	4422      	add	r2, r4
 8005eae:	6782      	str	r2, [r0, #120]	; 0x78
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005eb0:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 8005eb2:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005eb6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
    pHandle->PolarizationCounter++;
 8005eb8:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005eba:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 8005ebc:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005ebe:	67c2      	str	r2, [r0, #124]	; 0x7c
    pHandle->PolarizationCounter++;
 8005ec0:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005ec4:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8005ec6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8005eca:	600b      	str	r3, [r1, #0]
}
 8005ecc:	4770      	bx	lr
 8005ece:	bf00      	nop

08005ed0 <R3_1_HFCurrentsCalibrationC>:
  *         the offset computation.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 8005ed0:	b410      	push	{r4}
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8005ed2:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 8005ed6:	6862      	ldr	r2, [r4, #4]
 8005ed8:	6a13      	ldr	r3, [r2, #32]
 8005eda:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005ede:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8005ee0:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
 8005ee4:	2b0f      	cmp	r3, #15
 8005ee6:	d810      	bhi.n	8005f0a <R3_1_HFCurrentsCalibrationC+0x3a>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005ee8:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
 8005eec:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8005ef0:	3214      	adds	r2, #20
 8005ef2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005ef6:	6812      	ldr	r2, [r2, #0]
 8005ef8:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 8005efa:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8005efe:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pHandle->PolarizationCounter++;
 8005f02:	3301      	adds	r3, #1
 8005f04:	b2db      	uxtb	r3, r3
 8005f06:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 8005f0a:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 8005f0c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8005f10:	600b      	str	r3, [r1, #0]
}
 8005f12:	4770      	bx	lr

08005f14 <R3_1_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005f14:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94

  pHandle->_Super.TurnOnLowSidesAction = true;
 8005f18:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005f1c:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 8005f1e:	f880 c071 	strb.w	ip, [r0, #113]	; 0x71
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005f22:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005f24:	f06f 0001 	mvn.w	r0, #1
 8005f28:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005f2a:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005f2c:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005f2e:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005f30:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8005f32:	07db      	lsls	r3, r3, #31
 8005f34:	d5fc      	bpl.n	8005f30 <R3_1_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005f36:	f06f 0301 	mvn.w	r3, #1
 8005f3a:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005f3c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8005f3e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8005f42:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8005f44:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8005f48:	2b02      	cmp	r3, #2
 8005f4a:	d000      	beq.n	8005f4e <R3_1_TurnOnLowSides+0x3a>
 8005f4c:	4770      	bx	lr
{
 8005f4e:	b410      	push	{r4}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8005f50:	e9d1 2002 	ldrd	r2, r0, [r1, #8]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8005f54:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8005f58:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005f5a:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 8005f5e:	6184      	str	r4, [r0, #24]
  }
  return; 
}
 8005f60:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005f64:	619a      	str	r2, [r3, #24]
 8005f66:	4770      	bx	lr

08005f68 <R3_1_SwitchOnPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005f68:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8005f6c:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005f70:	684b      	ldr	r3, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005f72:	f04f 0c00 	mov.w	ip, #0
{  
 8005f76:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 8005f78:	f880 c071 	strb.w	ip, [r0, #113]	; 0x71
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 8005f7c:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8005f7e:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 8005f80:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 8005f82:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 8005f84:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005f86:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 8005f8a:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005f8c:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8005f8e:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8005f90:	07d2      	lsls	r2, r2, #31
 8005f92:	d5fc      	bpl.n	8005f8e <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005f94:	f06f 0201 	mvn.w	r2, #1
 8005f98:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 8005f9a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005f9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005fa0:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8005fa2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fa4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005fa8:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8005faa:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 8005fae:	2a02      	cmp	r2, #2
 8005fb0:	d008      	beq.n	8005fc4 <R3_1_SwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8005fb2:	f06f 0201 	mvn.w	r2, #1
 8005fb6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 8005fb8:	68da      	ldr	r2, [r3, #12]
 8005fba:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8005fbe:	bc30      	pop	{r4, r5}
 8005fc0:	60da      	str	r2, [r3, #12]
 8005fc2:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 8005fc4:	6a18      	ldr	r0, [r3, #32]
 8005fc6:	f240 5255 	movw	r2, #1365	; 0x555
 8005fca:	4210      	tst	r0, r2
 8005fcc:	d009      	beq.n	8005fe2 <R3_1_SwitchOnPWM+0x7a>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8005fce:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8005fd2:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
 8005fd6:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005fd8:	e9d1 4106 	ldrd	r4, r1, [r1, #24]
 8005fdc:	6184      	str	r4, [r0, #24]
 8005fde:	6191      	str	r1, [r2, #24]
}
 8005fe0:	e7e7      	b.n	8005fb2 <R3_1_SwitchOnPWM+0x4a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8005fe2:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8005fe6:	688d      	ldr	r5, [r1, #8]
 8005fe8:	69ca      	ldr	r2, [r1, #28]
 8005fea:	0424      	lsls	r4, r4, #16
 8005fec:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8005fee:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 8005ff2:	0400      	lsls	r0, r0, #16
 8005ff4:	0412      	lsls	r2, r2, #16
 8005ff6:	61a8      	str	r0, [r5, #24]
 8005ff8:	61a2      	str	r2, [r4, #24]
}
 8005ffa:	e7da      	b.n	8005fb2 <R3_1_SwitchOnPWM+0x4a>

08005ffc <R3_1_SwitchOffPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8005ffc:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 8006000:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006002:	68d3      	ldr	r3, [r2, #12]
 8006004:	f023 0301 	bic.w	r3, r3, #1
 8006008:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800600a:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800600c:	f04f 0c00 	mov.w	ip, #0
 8006010:	f880 c071 	strb.w	ip, [r0, #113]	; 0x71

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 8006014:	f890 0092 	ldrb.w	r0, [r0, #146]	; 0x92
 8006018:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800601c:	6453      	str	r3, [r2, #68]	; 0x44
 800601e:	b918      	cbnz	r0, 8006028 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006020:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8006024:	2b02      	cmp	r3, #2
 8006026:	d009      	beq.n	800603c <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006028:	f06f 0301 	mvn.w	r3, #1
 800602c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800602e:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8006030:	07db      	lsls	r3, r3, #31
 8006032:	d5fc      	bpl.n	800602e <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006034:	f06f 0301 	mvn.w	r3, #1
 8006038:	6113      	str	r3, [r2, #16]
 800603a:	4770      	bx	lr
{
 800603c:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800603e:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006042:	688d      	ldr	r5, [r1, #8]
 8006044:	69cb      	ldr	r3, [r1, #28]
 8006046:	0424      	lsls	r4, r4, #16
 8006048:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800604a:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 800604e:	041b      	lsls	r3, r3, #16
 8006050:	0400      	lsls	r0, r0, #16
 8006052:	61a8      	str	r0, [r5, #24]
 8006054:	61a3      	str	r3, [r4, #24]
 8006056:	f06f 0301 	mvn.w	r3, #1
 800605a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800605c:	6913      	ldr	r3, [r2, #16]
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800605e:	07d9      	lsls	r1, r3, #31
 8006060:	d5fc      	bpl.n	800605c <R3_1_SwitchOffPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006062:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8006066:	bc30      	pop	{r4, r5}
 8006068:	6113      	str	r3, [r2, #16]
 800606a:	4770      	bx	lr

0800606c <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 800606c:	b410      	push	{r4}

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800606e:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 8006072:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006074:	6a13      	ldr	r3, [r2, #32]
 8006076:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800607a:	6213      	str	r3, [r2, #32]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 800607c:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 8006080:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 8006082:	480e      	ldr	r0, [pc, #56]	; (80060bc <R3_1_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 8006084:	3214      	adds	r2, #20
 8006086:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800608a:	6812      	ldr	r2, [r2, #0]
 800608c:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if (wAux > -INT16_MAX)
 8006090:	4283      	cmp	r3, r0
 8006092:	db05      	blt.n	80060a0 <R3_1_RLGetPhaseCurrents+0x34>
  {
    if (wAux < INT16_MAX)
 8006094:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8006098:	4293      	cmp	r3, r2
 800609a:	dc0b      	bgt.n	80060b4 <R3_1_RLGetPhaseCurrents+0x48>
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 800609c:	b21b      	sxth	r3, r3
 800609e:	e000      	b.n	80060a2 <R3_1_RLGetPhaseCurrents+0x36>
 80060a0:	4b07      	ldr	r3, [pc, #28]	; (80060c0 <R3_1_RLGetPhaseCurrents+0x54>)
  pStator_Currents->b = ( int16_t )( wAux );

}
 80060a2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = ( int16_t )( wAux );
 80060a6:	2200      	movs	r2, #0
 80060a8:	f363 020f 	bfi	r2, r3, #0, #16
 80060ac:	f363 421f 	bfi	r2, r3, #16, #16
 80060b0:	600a      	str	r2, [r1, #0]
}
 80060b2:	4770      	bx	lr
 80060b4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80060b8:	e7f3      	b.n	80060a2 <R3_1_RLGetPhaseCurrents+0x36>
 80060ba:	bf00      	nop
 80060bc:	ffff8002 	.word	0xffff8002
 80060c0:	ffff8001 	.word	0xffff8001

080060c4 <R3_1_RLTurnOnLowSides>:
  * @retval none
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80060c4:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 80060c8:	684a      	ldr	r2, [r1, #4]
{  
 80060ca:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80060cc:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80060d0:	2400      	movs	r4, #0
 80060d2:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80060d4:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80060d6:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 80060d8:	07db      	lsls	r3, r3, #31
 80060da:	d5fc      	bpl.n	80060d6 <R3_1_RLTurnOnLowSides+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80060dc:	f06f 0301 	mvn.w	r3, #1
 80060e0:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80060e2:	6c53      	ldr	r3, [r2, #68]	; 0x44
 80060e4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80060e8:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80060ea:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 80060ee:	2b02      	cmp	r3, #2
 80060f0:	d10a      	bne.n	8006108 <R3_1_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80060f2:	6888      	ldr	r0, [r1, #8]
 80060f4:	694c      	ldr	r4, [r1, #20]
 80060f6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80060fa:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80060fc:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006100:	0412      	lsls	r2, r2, #16
 8006102:	041b      	lsls	r3, r3, #16
 8006104:	6182      	str	r2, [r0, #24]
 8006106:	618b      	str	r3, [r1, #24]
  }
  return; 
}
 8006108:	f85d 4b04 	ldr.w	r4, [sp], #4
 800610c:	4770      	bx	lr
 800610e:	bf00      	nop

08006110 <R3_1_RLSwitchOnPWM>:
  * @retval none
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006110:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006114:	2200      	movs	r2, #0
{
 8006116:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006118:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 800611c:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8006120:	681a      	ldr	r2, [r3, #0]
 8006122:	06d2      	lsls	r2, r2, #27
 8006124:	d4fc      	bmi.n	8006120 <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	06d5      	lsls	r5, r2, #27
 800612a:	d5fc      	bpl.n	8006126 <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 800612c:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006130:	2001      	movs	r0, #1
 8006132:	3a05      	subs	r2, #5
 8006134:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006136:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006138:	f06f 0201 	mvn.w	r2, #1
 800613c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800613e:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006140:	07d2      	lsls	r2, r2, #31
 8006142:	d5fc      	bpl.n	800613e <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006144:	f06f 0201 	mvn.w	r2, #1
 8006148:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800614a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800614c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006150:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006152:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006154:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006158:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800615a:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 800615e:	2a02      	cmp	r2, #2
 8006160:	d00b      	beq.n	800617a <R3_1_RLSwitchOnPWM+0x6a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006162:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006166:	f06f 0104 	mvn.w	r1, #4
 800616a:	6021      	str	r1, [r4, #0]
 800616c:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800616e:	68da      	ldr	r2, [r3, #12]
 8006170:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 8006174:	bc30      	pop	{r4, r5}
 8006176:	60da      	str	r2, [r3, #12]
 8006178:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 800617a:	6a18      	ldr	r0, [r3, #32]
 800617c:	f240 5255 	movw	r2, #1365	; 0x555
 8006180:	4210      	tst	r0, r2
 8006182:	d00a      	beq.n	800619a <R3_1_RLSwitchOnPWM+0x8a>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006184:	688a      	ldr	r2, [r1, #8]
 8006186:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006188:	6190      	str	r0, [r2, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 800618a:	68ca      	ldr	r2, [r1, #12]
 800618c:	6988      	ldr	r0, [r1, #24]
 800618e:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006190:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006192:	6909      	ldr	r1, [r1, #16]
 8006194:	0412      	lsls	r2, r2, #16
 8006196:	618a      	str	r2, [r1, #24]
}
 8006198:	e7e3      	b.n	8006162 <R3_1_RLSwitchOnPWM+0x52>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800619a:	e9d1 0205 	ldrd	r0, r2, [r1, #20]
 800619e:	688d      	ldr	r5, [r1, #8]
 80061a0:	0400      	lsls	r0, r0, #16
 80061a2:	61a8      	str	r0, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80061a4:	68c8      	ldr	r0, [r1, #12]
 80061a6:	0412      	lsls	r2, r2, #16
 80061a8:	6182      	str	r2, [r0, #24]
 80061aa:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80061ac:	6909      	ldr	r1, [r1, #16]
 80061ae:	0412      	lsls	r2, r2, #16
 80061b0:	618a      	str	r2, [r1, #24]
}
 80061b2:	e7d6      	b.n	8006162 <R3_1_RLSwitchOnPWM+0x52>

080061b4 <R3_1_Init>:
{
 80061b4:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80061b6:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 80061ba:	6823      	ldr	r3, [r4, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80061bc:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80061be:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80061c0:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80061c4:	f021 0120 	bic.w	r1, r1, #32
 80061c8:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80061ca:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80061cc:	6859      	ldr	r1, [r3, #4]
 80061ce:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80061d2:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 80061d4:	f06f 0104 	mvn.w	r1, #4
 80061d8:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 80061da:	6811      	ldr	r1, [r2, #0]
 80061dc:	f021 0101 	bic.w	r1, r1, #1
 80061e0:	6011      	str	r1, [r2, #0]
    if ( TIMx == TIM1 )
 80061e2:	491b      	ldr	r1, [pc, #108]	; (8006250 <R3_1_Init+0x9c>)
 80061e4:	428a      	cmp	r2, r1
 80061e6:	d02d      	beq.n	8006244 <R3_1_Init+0x90>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80061e8:	f06f 0180 	mvn.w	r1, #128	; 0x80
 80061ec:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 80061ee:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
 80061f2:	b119      	cbz	r1, 80061fc <R3_1_Init+0x48>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 80061f4:	68d1      	ldr	r1, [r2, #12]
 80061f6:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 80061fa:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 80061fc:	6a11      	ldr	r1, [r2, #32]
 80061fe:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 8006202:	f041 0105 	orr.w	r1, r1, #5
 8006206:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006208:	689a      	ldr	r2, [r3, #8]
 800620a:	f042 0201 	orr.w	r2, r2, #1
 800620e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006210:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006212:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006216:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800621a:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800621c:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800621e:	685a      	ldr	r2, [r3, #4]
 8006220:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006224:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8006226:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->OverCurrentFlag = false;
 8006228:	2100      	movs	r1, #0
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800622a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 800622e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006232:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
 8006236:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006238:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 800623a:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
    pHandle->_Super.DTTest = 0u;
 800623e:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
}
 8006242:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8006244:	4d03      	ldr	r5, [pc, #12]	; (8006254 <R3_1_Init+0xa0>)
 8006246:	68e9      	ldr	r1, [r5, #12]
 8006248:	f041 0101 	orr.w	r1, r1, #1
 800624c:	60e9      	str	r1, [r5, #12]
}
 800624e:	e7cb      	b.n	80061e8 <R3_1_Init+0x34>
 8006250:	40010000 	.word	0x40010000
 8006254:	e0042000 	.word	0xe0042000

08006258 <R3_1_SetOffsetCalib>:
{
 8006258:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800625a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800625e:	680b      	ldr	r3, [r1, #0]
 8006260:	6783      	str	r3, [r0, #120]	; 0x78
  pHdl->offsetCalibStatus = true;
 8006262:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8006264:	e9c0 421f 	strd	r4, r2, [r0, #124]	; 0x7c
  pHdl->offsetCalibStatus = true;
 8006268:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
 800626c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006270:	4770      	bx	lr
 8006272:	bf00      	nop

08006274 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 8006274:	e9d0 231f 	ldrd	r2, r3, [r0, #124]	; 0x7c
 8006278:	6f80      	ldr	r0, [r0, #120]	; 0x78
 800627a:	608b      	str	r3, [r1, #8]
 800627c:	e9c1 0200 	strd	r0, r2, [r1]
}
 8006280:	4770      	bx	lr
 8006282:	bf00      	nop

08006284 <R3_1_CurrentReadingCalibration>:
{
 8006284:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006286:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
  if (false == pHandle->_Super.offsetCalibStatus)
 800628a:	f890 6074 	ldrb.w	r6, [r0, #116]	; 0x74
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800628e:	685c      	ldr	r4, [r3, #4]
{
 8006290:	b084      	sub	sp, #16
 8006292:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 8006294:	b356      	cbz	r6, 80062ec <R3_1_CurrentReadingCalibration+0x68>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 8006296:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 8006298:	f8b5 308c 	ldrh.w	r3, [r5, #140]	; 0x8c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 800629c:	f022 0208 	bic.w	r2, r2, #8
 80062a0:	61a2      	str	r2, [r4, #24]
 80062a2:	69a2      	ldr	r2, [r4, #24]
 80062a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062a8:	61a2      	str	r2, [r4, #24]
 80062aa:	69e2      	ldr	r2, [r4, #28]
 80062ac:	f022 0208 	bic.w	r2, r2, #8
 80062b0:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80062b2:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80062b4:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80062b6:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80062b8:	69a3      	ldr	r3, [r4, #24]
 80062ba:	f043 0308 	orr.w	r3, r3, #8
 80062be:	61a3      	str	r3, [r4, #24]
 80062c0:	69a3      	ldr	r3, [r4, #24]
 80062c2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80062c6:	61a3      	str	r3, [r4, #24]
 80062c8:	69e3      	ldr	r3, [r4, #28]
 80062ca:	f043 0308 	orr.w	r3, r3, #8
 80062ce:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 80062d0:	6a23      	ldr	r3, [r4, #32]
 80062d2:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector = SECTOR_5;
 80062d6:	2104      	movs	r1, #4
  pHandle->BrakeActionLock = false;
 80062d8:	2200      	movs	r2, #0
 80062da:	f043 0305 	orr.w	r3, r3, #5
 80062de:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 80062e0:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
  pHandle->BrakeActionLock = false;
 80062e4:	f885 2092 	strb.w	r2, [r5, #146]	; 0x92
}
 80062e8:	b004      	add	sp, #16
 80062ea:	bd70      	pop	{r4, r5, r6, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 80062ec:	6843      	ldr	r3, [r0, #4]
 80062ee:	9302      	str	r3, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 80062f0:	6983      	ldr	r3, [r0, #24]
 80062f2:	9303      	str	r3, [sp, #12]
    pHandle->PolarizationCounter = 0u;
 80062f4:	f880 608f 	strb.w	r6, [r0, #143]	; 0x8f
  CLEAR_BIT(TIMx->CCER, Channels);
 80062f8:	6a23      	ldr	r3, [r4, #32]
    pHandle->PhaseAOffset = 0u;
 80062fa:	6786      	str	r6, [r0, #120]	; 0x78
 80062fc:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8006300:	f023 0305 	bic.w	r3, r3, #5
    pHandle->PhaseCOffset = 0u;
 8006304:	e9c0 661f 	strd	r6, r6, [r0, #124]	; 0x7c
 8006308:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 800630a:	4b22      	ldr	r3, [pc, #136]	; (8006394 <R3_1_CurrentReadingCalibration+0x110>)
 800630c:	6043      	str	r3, [r0, #4]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 800630e:	4b22      	ldr	r3, [pc, #136]	; (8006398 <R3_1_CurrentReadingCalibration+0x114>)
 8006310:	6183      	str	r3, [r0, #24]
    pHandle->CalibSector = SECTOR_5;
 8006312:	2304      	movs	r3, #4
 8006314:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    pHandle->_Super.Sector = SECTOR_5;
 8006318:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    R3_1_SwitchOnPWM( &pHandle->_Super );
 800631c:	f7ff fe24 	bl	8005f68 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8006320:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8006324:	f105 0148 	add.w	r1, r5, #72	; 0x48
 8006328:	f105 038f 	add.w	r3, r5, #143	; 0x8f
 800632c:	f892 2073 	ldrb.w	r2, [r2, #115]	; 0x73
 8006330:	4620      	mov	r0, r4
 8006332:	e9cd 1300 	strd	r1, r3, [sp]
 8006336:	f7ff fcbd 	bl	8005cb4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 800633a:	4628      	mov	r0, r5
 800633c:	f7ff fe5e 	bl	8005ffc <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8006340:	4a16      	ldr	r2, [pc, #88]	; (800639c <R3_1_CurrentReadingCalibration+0x118>)
 8006342:	606a      	str	r2, [r5, #4]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006344:	4628      	mov	r0, r5
    pHandle->PolarizationCounter = 0u;
 8006346:	f885 608f 	strb.w	r6, [r5, #143]	; 0x8f
    pHandle->CalibSector = SECTOR_1;
 800634a:	f885 608e 	strb.w	r6, [r5, #142]	; 0x8e
    pHandle->_Super.Sector = SECTOR_1;
 800634e:	f885 6070 	strb.w	r6, [r5, #112]	; 0x70
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006352:	f7ff fe09 	bl	8005f68 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8006356:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 800635a:	9b01      	ldr	r3, [sp, #4]
 800635c:	f892 2073 	ldrb.w	r2, [r2, #115]	; 0x73
 8006360:	9900      	ldr	r1, [sp, #0]
 8006362:	4620      	mov	r0, r4
 8006364:	f7ff fca6 	bl	8005cb4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8006368:	4628      	mov	r0, r5
 800636a:	f7ff fe47 	bl	8005ffc <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 800636e:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    pHandle->PhaseCOffset >>= 3;
 8006372:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    pHandle->PhaseAOffset >>= 3;
 8006376:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 8006378:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseCOffset >>= 3;
 800637a:	08db      	lsrs	r3, r3, #3
    pHandle->PhaseBOffset >>= 3;
 800637c:	e9c5 121e 	strd	r1, r2, [r5, #120]	; 0x78
    pHandle->PhaseCOffset >>= 3;
 8006380:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8006384:	9a02      	ldr	r2, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8006386:	9b03      	ldr	r3, [sp, #12]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 8006388:	606a      	str	r2, [r5, #4]
    pHandle->_Super.offsetCalibStatus = true;
 800638a:	2101      	movs	r1, #1
 800638c:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 8006390:	61ab      	str	r3, [r5, #24]
 8006392:	e780      	b.n	8006296 <R3_1_CurrentReadingCalibration+0x12>
 8006394:	08005e85 	.word	0x08005e85
 8006398:	080063d9 	.word	0x080063d9
 800639c:	08005ed1 	.word	0x08005ed1

080063a0 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80063a0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 80063a4:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80063a8:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 80063aa:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
{
 80063ae:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 80063b0:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80063b4:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80063b6:	639a      	str	r2, [r3, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 80063b8:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
  WRITE_REG(TIMx->CCR3, CompareValue);
 80063bc:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80063be:	6a1b      	ldr	r3, [r3, #32]
}
 80063c0:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 80063c4:	2a01      	cmp	r2, #1
    hAux = MC_FOC_DURATION;
 80063c6:	bf12      	itee	ne
 80063c8:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 80063cc:	2300      	moveq	r3, #0
 80063ce:	f8a0 3048 	strheq.w	r3, [r0, #72]	; 0x48
}
 80063d2:	4610      	mov	r0, r2
 80063d4:	4770      	bx	lr
 80063d6:	bf00      	nop

080063d8 <R3_1_SetADCSampPointCalibration>:
{
 80063d8:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 80063da:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
  pHandle->_Super.Sector = pHandle->CalibSector;
 80063de:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
 80063e2:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80063e6:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 80063ea:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 80063ec:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 80063f0:	b289      	uxth	r1, r1
 80063f2:	f7ff ffd5 	bl	80063a0 <R3_1_WriteTIMRegisters>
}
 80063f6:	bd10      	pop	{r4, pc}

080063f8 <R3_1_SetADCSampPointSectX>:
{
 80063f8:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 80063fa:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 80063fe:	f8b0 e08c 	ldrh.w	lr, [r0, #140]	; 0x8c
 8006402:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 8006406:	ebae 0201 	sub.w	r2, lr, r1
 800640a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 800640e:	b292      	uxth	r2, r2
 8006410:	429a      	cmp	r2, r3
 8006412:	d908      	bls.n	8006426 <R3_1_SetADCSampPointSectX+0x2e>
    pHandle->_Super.Sector = SECTOR_5;
 8006414:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006416:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 800641a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 800641e:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006420:	f7ff ffbe 	bl	80063a0 <R3_1_WriteTIMRegisters>
}
 8006424:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8006426:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
 800642a:	eba1 0c0c 	sub.w	ip, r1, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 800642e:	fa1f fc8c 	uxth.w	ip, ip
 8006432:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8006436:	d906      	bls.n	8006446 <R3_1_SetADCSampPointSectX+0x4e>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8006438:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 800643c:	1ac9      	subs	r1, r1, r3
 800643e:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006440:	f7ff ffae 	bl	80063a0 <R3_1_WriteTIMRegisters>
}
 8006444:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8006446:	440b      	add	r3, r1
 8006448:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 800644a:	458e      	cmp	lr, r1
 800644c:	d8e8      	bhi.n	8006420 <R3_1_SetADCSampPointSectX+0x28>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800644e:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006450:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006454:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006458:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 800645c:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 800645e:	f7ff ff9f 	bl	80063a0 <R3_1_WriteTIMRegisters>
}
 8006462:	bd10      	pop	{r4, pc}

08006464 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006464:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
{
 8006468:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800646a:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 800646e:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8006470:	6890      	ldr	r0, [r2, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006472:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8006476:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 800647a:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 800647c:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
 8006480:	3008      	adds	r0, #8
 8006482:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006486:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8006488:	6a20      	ldr	r0, [r4, #32]
 800648a:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 800648e:	6220      	str	r0, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006490:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006492:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8006496:	4329      	orrs	r1, r5
 8006498:	6091      	str	r1, [r2, #8]
}
 800649a:	f103 006e 	add.w	r0, r3, #110	; 0x6e
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800649e:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
}
 80064a2:	bc30      	pop	{r4, r5}
 80064a4:	4770      	bx	lr
 80064a6:	bf00      	nop

080064a8 <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 80064a8:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
 80064ac:	b92b      	cbnz	r3, 80064ba <R3_1_BRK_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80064ae:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80064b2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 80064b6:	2a02      	cmp	r2, #2
 80064b8:	d004      	beq.n	80064c4 <R3_1_BRK_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 80064ba:	2301      	movs	r3, #1
 80064bc:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
}
 80064c0:	306e      	adds	r0, #110	; 0x6e
 80064c2:	4770      	bx	lr
{
 80064c4:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80064c6:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 80064ca:	689d      	ldr	r5, [r3, #8]
 80064cc:	69da      	ldr	r2, [r3, #28]
 80064ce:	0424      	lsls	r4, r4, #16
 80064d0:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 80064d2:	e9d3 5403 	ldrd	r5, r4, [r3, #12]
 80064d6:	0409      	lsls	r1, r1, #16
 80064d8:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 80064da:	2301      	movs	r3, #1
 80064dc:	61a9      	str	r1, [r5, #24]
}
 80064de:	306e      	adds	r0, #110	; 0x6e
 80064e0:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 80064e2:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 80064e6:	bc30      	pop	{r4, r5}
 80064e8:	4770      	bx	lr
 80064ea:	bf00      	nop

080064ec <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 80064ec:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 80064f0:	b90b      	cbnz	r3, 80064f6 <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 80064f2:	4618      	mov	r0, r3
}
 80064f4:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 80064f6:	2300      	movs	r3, #0
 80064f8:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
    retVal |= MC_BREAK_IN;
 80064fc:	2040      	movs	r0, #64	; 0x40
 80064fe:	4770      	bx	lr

08006500 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8006500:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
{
 8006504:	b430      	push	{r4, r5}
  if (pHandle->_Super.RLDetectionMode == false)
 8006506:	2900      	cmp	r1, #0
 8006508:	d135      	bne.n	8006576 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800650a:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
 800650e:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006510:	699a      	ldr	r2, [r3, #24]
 8006512:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006516:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800651a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800651c:	6a1a      	ldr	r2, [r3, #32]
 800651e:	f042 0201 	orr.w	r2, r2, #1
 8006522:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	f022 0204 	bic.w	r2, r2, #4
 800652a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800652c:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 800652e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
 8006532:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006534:	f103 0418 	add.w	r4, r3, #24
 8006538:	d02a      	beq.n	8006590 <R3_1_RLDetectionModeEnable+0x90>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 800653a:	2a02      	cmp	r2, #2
 800653c:	d10d      	bne.n	800655a <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800653e:	699a      	ldr	r2, [r3, #24]
 8006540:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006544:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006548:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800654a:	6a1a      	ldr	r2, [r3, #32]
 800654c:	f042 0210 	orr.w	r2, r2, #16
 8006550:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006552:	6a1a      	ldr	r2, [r3, #32]
 8006554:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006558:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800655a:	6862      	ldr	r2, [r4, #4]
 800655c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006560:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8006564:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006566:	6a1a      	ldr	r2, [r3, #32]
 8006568:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800656c:	621a      	str	r2, [r3, #32]
 800656e:	6a1a      	ldr	r2, [r3, #32]
 8006570:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006574:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006576:	4b0e      	ldr	r3, [pc, #56]	; (80065b0 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8006578:	490e      	ldr	r1, [pc, #56]	; (80065b4 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800657a:	4a0f      	ldr	r2, [pc, #60]	; (80065b8 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 800657c:	4c0f      	ldr	r4, [pc, #60]	; (80065bc <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 800657e:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8006580:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006582:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006584:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8006588:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 800658a:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
}
 800658e:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006590:	699a      	ldr	r2, [r3, #24]
 8006592:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006596:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800659a:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 800659c:	6a1a      	ldr	r2, [r3, #32]
 800659e:	f022 0210 	bic.w	r2, r2, #16
 80065a2:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 80065a4:	6a1a      	ldr	r2, [r3, #32]
 80065a6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80065aa:	621a      	str	r2, [r3, #32]
}
 80065ac:	e7d5      	b.n	800655a <R3_1_RLDetectionModeEnable+0x5a>
 80065ae:	bf00      	nop
 80065b0:	080060c5 	.word	0x080060c5
 80065b4:	08006111 	.word	0x08006111
 80065b8:	08005ffd 	.word	0x08005ffd
 80065bc:	0800606d 	.word	0x0800606d

080065c0 <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 80065c0:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 80065c4:	2b00      	cmp	r3, #0
 80065c6:	d049      	beq.n	800665c <R3_1_RLDetectionModeDisable+0x9c>
{
 80065c8:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80065ca:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 80065ce:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 80065d0:	681a      	ldr	r2, [r3, #0]
 80065d2:	06d4      	lsls	r4, r2, #27
 80065d4:	d5fc      	bpl.n	80065d0 <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 80065d6:	681a      	ldr	r2, [r3, #0]
 80065d8:	06d2      	lsls	r2, r2, #27
 80065da:	d4fc      	bmi.n	80065d6 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 80065dc:	f891 2073 	ldrb.w	r2, [r1, #115]	; 0x73
 80065e0:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80065e2:	699a      	ldr	r2, [r3, #24]
 80065e4:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80065e8:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 80065ec:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80065ee:	6a1a      	ldr	r2, [r3, #32]
 80065f0:	f042 0201 	orr.w	r2, r2, #1
 80065f4:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 80065f6:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 80065fa:	2a01      	cmp	r2, #1
 80065fc:	d02f      	beq.n	800665e <R3_1_RLDetectionModeDisable+0x9e>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 80065fe:	2a02      	cmp	r2, #2
 8006600:	d053      	beq.n	80066aa <R3_1_RLDetectionModeDisable+0xea>
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006602:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8006606:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006608:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800660a:	699c      	ldr	r4, [r3, #24]
 800660c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006610:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006614:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006616:	6a1c      	ldr	r4, [r3, #32]
 8006618:	f044 0410 	orr.w	r4, r4, #16
 800661c:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800661e:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006620:	69dc      	ldr	r4, [r3, #28]
 8006622:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8006626:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 800662a:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 800662c:	6a1c      	ldr	r4, [r3, #32]
 800662e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006632:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8006634:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006636:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8006638:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 800663a:	4a2f      	ldr	r2, [pc, #188]	; (80066f8 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800663c:	4c2f      	ldr	r4, [pc, #188]	; (80066fc <R3_1_RLDetectionModeDisable+0x13c>)
 800663e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006642:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8006644:	492e      	ldr	r1, [pc, #184]	; (8006700 <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006646:	6042      	str	r2, [r0, #4]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006648:	4a2e      	ldr	r2, [pc, #184]	; (8006704 <R3_1_RLDetectionModeDisable+0x144>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 800664a:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 800664c:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 800664e:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8006652:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8006656:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
}
 800665a:	4770      	bx	lr
 800665c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 800665e:	6a1c      	ldr	r4, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006660:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8006664:	f044 0404 	orr.w	r4, r4, #4
 8006668:	0852      	lsrs	r2, r2, #1
 800666a:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800666c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800666e:	699c      	ldr	r4, [r3, #24]
 8006670:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006674:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006678:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 800667a:	6a1c      	ldr	r4, [r3, #32]
 800667c:	f044 0410 	orr.w	r4, r4, #16
 8006680:	621c      	str	r4, [r3, #32]
 8006682:	6a1c      	ldr	r4, [r3, #32]
 8006684:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8006688:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 800668a:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 800668c:	69dc      	ldr	r4, [r3, #28]
 800668e:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8006692:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006696:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006698:	6a1c      	ldr	r4, [r3, #32]
 800669a:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 800669e:	621c      	str	r4, [r3, #32]
 80066a0:	6a1c      	ldr	r4, [r3, #32]
 80066a2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 80066a6:	621c      	str	r4, [r3, #32]
}
 80066a8:	e7c4      	b.n	8006634 <R3_1_RLDetectionModeDisable+0x74>
  CLEAR_BIT(TIMx->CCER, Channels);
 80066aa:	6a1c      	ldr	r4, [r3, #32]
 80066ac:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 80066b0:	f024 0404 	bic.w	r4, r4, #4
 80066b4:	0852      	lsrs	r2, r2, #1
 80066b6:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80066b8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80066ba:	699c      	ldr	r4, [r3, #24]
 80066bc:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 80066c0:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 80066c4:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 80066c6:	6a1c      	ldr	r4, [r3, #32]
 80066c8:	f044 0410 	orr.w	r4, r4, #16
 80066cc:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80066ce:	6a1c      	ldr	r4, [r3, #32]
 80066d0:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 80066d4:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 80066d6:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 80066d8:	69dc      	ldr	r4, [r3, #28]
 80066da:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 80066de:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 80066e2:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 80066e4:	6a1c      	ldr	r4, [r3, #32]
 80066e6:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 80066ea:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 80066ec:	6a1c      	ldr	r4, [r3, #32]
 80066ee:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80066f2:	621c      	str	r4, [r3, #32]
}
 80066f4:	e79e      	b.n	8006634 <R3_1_RLDetectionModeDisable+0x74>
 80066f6:	bf00      	nop
 80066f8:	08005cf1 	.word	0x08005cf1
 80066fc:	08005f15 	.word	0x08005f15
 8006700:	08005f69 	.word	0x08005f69
 8006704:	08005ffd 	.word	0x08005ffd

08006708 <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006708:	f8b0 308c 	ldrh.w	r3, [r0, #140]	; 0x8c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800670c:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006710:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006714:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8006716:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 800671a:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 800671c:	f04f 0c03 	mov.w	ip, #3
 8006720:	f880 c070 	strb.w	ip, [r0, #112]	; 0x70
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8006724:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006728:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 800672a:	6a12      	ldr	r2, [r2, #32]
  if (pHandle->_Super.SWerror == 1u)
 800672c:	2b01      	cmp	r3, #1
    hAux = MC_FOC_DURATION;
 800672e:	bf12      	itee	ne
 8006730:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8006734:	2200      	moveq	r2, #0
 8006736:	f8a0 2048 	strheq.w	r2, [r0, #72]	; 0x48
}
 800673a:	4618      	mov	r0, r3
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006740:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8006744:	8b82      	ldrh	r2, [r0, #28]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006746:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006748:	4494      	add	ip, r2
{
 800674a:	b410      	push	{r4}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 800674c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006750:	b14b      	cbz	r3, 8006766 <RVBS_Clear+0x26>
    {
      pHandle->aBuffer[index] = aux;
 8006752:	6a04      	ldr	r4, [r0, #32]
 8006754:	2300      	movs	r3, #0
 8006756:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006758:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 800675a:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 800675e:	8b01      	ldrh	r1, [r0, #24]
 8006760:	b29a      	uxth	r2, r3
 8006762:	4291      	cmp	r1, r2
 8006764:	d8f7      	bhi.n	8006756 <RVBS_Clear+0x16>
    }
    pHandle->_Super.LatestConv = aux;
 8006766:	2300      	movs	r3, #0
 8006768:	f36c 030f 	bfi	r3, ip, #0, #16
 800676c:	f36c 431f 	bfi	r3, ip, #16, #16
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8006770:	2200      	movs	r2, #0
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8006772:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.LatestConv = aux;
 8006776:	6043      	str	r3, [r0, #4]
    pHandle->index = 0U;
 8006778:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 800677c:	4770      	bx	lr
 800677e:	bf00      	nop

08006780 <RVBS_Init>:
{
 8006780:	b510      	push	{r4, lr}
 8006782:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006784:	300c      	adds	r0, #12
 8006786:	f7fc ff57 	bl	8003638 <RCM_RegisterRegConv>
 800678a:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    RVBS_Clear(pHandle);
 800678e:	4620      	mov	r0, r4
 8006790:	f7ff ffd6 	bl	8006740 <RVBS_Clear>
}
 8006794:	bd10      	pop	{r4, pc}
 8006796:	bf00      	nop

08006798 <RVBS_CheckFaultState>:
    fault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006798:	88c3      	ldrh	r3, [r0, #6]
 800679a:	8b42      	ldrh	r2, [r0, #26]
 800679c:	429a      	cmp	r2, r3
 800679e:	d305      	bcc.n	80067ac <RVBS_CheckFaultState+0x14>
    {
      fault = MC_OVER_VOLT;
    }
    else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 80067a0:	8b80      	ldrh	r0, [r0, #28]
    {
      fault = MC_UNDER_VOLT;
    }
    else
    {
      fault = MC_NO_ERROR;
 80067a2:	4298      	cmp	r0, r3
 80067a4:	bf8c      	ite	hi
 80067a6:	2004      	movhi	r0, #4
 80067a8:	2000      	movls	r0, #0
 80067aa:	4770      	bx	lr
      fault = MC_OVER_VOLT;
 80067ac:	2002      	movs	r0, #2
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 80067ae:	4770      	bx	lr

080067b0 <RVBS_CalcAvVbus>:
{
 80067b0:	b538      	push	{r3, r4, r5, lr}
 80067b2:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80067b4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80067b8:	f7fd f81a 	bl	80037f0 <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 80067bc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80067c0:	4298      	cmp	r0, r3
 80067c2:	d024      	beq.n	800680e <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 80067c4:	6a23      	ldr	r3, [r4, #32]
 80067c6:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 80067ca:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80067ce:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 80067d2:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 80067d6:	d00d      	beq.n	80067f4 <RVBS_CalcAvVbus+0x44>
 80067d8:	3a01      	subs	r2, #1
 80067da:	b2d2      	uxtb	r2, r2
 80067dc:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 80067e0:	3b02      	subs	r3, #2
      wtemp = 0u;
 80067e2:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 80067e4:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80067e8:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 80067ea:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 80067ec:	d1fa      	bne.n	80067e4 <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 80067ee:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 80067f2:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 80067f4:	f10e 3eff 	add.w	lr, lr, #4294967295
 80067f8:	4575      	cmp	r5, lr
        pHandle->index++;
 80067fa:	bf34      	ite	cc
 80067fc:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 80067fe:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006800:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8006802:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 8006804:	bf34      	ite	cc
 8006806:	f884 5025 	strbcc.w	r5, [r4, #37]	; 0x25
        pHandle->index = 0U;
 800680a:	f884 3025 	strbcs.w	r3, [r4, #37]	; 0x25
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 800680e:	4620      	mov	r0, r4
 8006810:	f7ff ffc2 	bl	8006798 <RVBS_CheckFaultState>
 8006814:	8120      	strh	r0, [r4, #8]
}
 8006816:	bd38      	pop	{r3, r4, r5, pc}

08006818 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8006818:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 800681a:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 800681c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8006820:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8006824:	6142      	str	r2, [r0, #20]
    FD_Init(& (pHandle->fd));
#endif
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8006826:	4770      	bx	lr

08006828 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 8006828:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 800682c:	2901      	cmp	r1, #1
 800682e:	d90c      	bls.n	800684a <REMNG_Calc+0x22>
{
 8006830:	b410      	push	{r4}
    {
      /* Increment/decrement the reference value. */
      current_ref += pHandle->IncDecAmount;
 8006832:	e9d0 4204 	ldrd	r4, r2, [r0, #16]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 8006836:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 8006838:	4423      	add	r3, r4
      pHandle->RampRemainingStep --;
 800683a:	60c1      	str	r1, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
 800683c:	6083      	str	r3, [r0, #8]

#ifdef FASTDIV
    ret_val = FD_FastDiv(&(pHandle->fd), pHandle->Ext, ((int32_t)pHandle->ScalingFactor));
#else
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800683e:	fb93 f2f2 	sdiv	r2, r3, r2
#endif
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8006842:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006846:	4610      	mov	r0, r2
 8006848:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 800684a:	d005      	beq.n	8006858 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 800684c:	6942      	ldr	r2, [r0, #20]
    pHandle->Ext = current_ref;
 800684e:	6083      	str	r3, [r0, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006850:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8006854:	4610      	mov	r0, r2
 8006856:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006858:	6842      	ldr	r2, [r0, #4]
 800685a:	6943      	ldr	r3, [r0, #20]
      pHandle->RampRemainingStep = 0U;
 800685c:	2100      	movs	r1, #0
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 800685e:	fb02 f303 	mul.w	r3, r2, r3
      pHandle->RampRemainingStep = 0U;
 8006862:	60c1      	str	r1, [r0, #12]
    pHandle->Ext = current_ref;
 8006864:	6083      	str	r3, [r0, #8]
}
 8006866:	4610      	mov	r0, r2
 8006868:	4770      	bx	lr
 800686a:	bf00      	nop

0800686c <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 800686c:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 800686e:	fab0 f080 	clz	r0, r0
 8006872:	0940      	lsrs	r0, r0, #5
 8006874:	4770      	bx	lr
 8006876:	bf00      	nop

08006878 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8006878:	2800      	cmp	r0, #0
 800687a:	bfb8      	it	lt
 800687c:	4240      	neglt	r0, r0
{
 800687e:	2301      	movs	r3, #1
  {
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8006880:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006884:	e002      	b.n	800688c <getScalingFactor+0x14>
  for (i = 1U; i < 32U; i++)
 8006886:	3301      	adds	r3, #1
 8006888:	2b20      	cmp	r3, #32
 800688a:	d007      	beq.n	800689c <getScalingFactor+0x24>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 800688c:	fa21 f203 	lsr.w	r2, r1, r3
    if (TargetAbs >= limit)
 8006890:	4290      	cmp	r0, r2
 8006892:	d3f8      	bcc.n	8006886 <getScalingFactor+0xe>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8006894:	3b01      	subs	r3, #1
 8006896:	2001      	movs	r0, #1
 8006898:	4098      	lsls	r0, r3
}
 800689a:	4770      	bx	lr
 800689c:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop

080068a4 <REMNG_ExecRamp>:
{
 80068a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80068a8:	4605      	mov	r5, r0
 80068aa:	460e      	mov	r6, r1
    if (0U == Durationms)
 80068ac:	4614      	mov	r4, r2
 80068ae:	b95a      	cbnz	r2, 80068c8 <REMNG_ExecRamp+0x24>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 80068b0:	4608      	mov	r0, r1
 80068b2:	f7ff ffe1 	bl	8006878 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 80068b6:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 80068ba:	6168      	str	r0, [r5, #20]
      pHandle->RampRemainingStep = 0U;
 80068bc:	e9c5 6402 	strd	r6, r4, [r5, #8]
      pHandle->IncDecAmount = 0;
 80068c0:	612c      	str	r4, [r5, #16]
}
 80068c2:	2001      	movs	r0, #1
 80068c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 80068c8:	6943      	ldr	r3, [r0, #20]
 80068ca:	6887      	ldr	r7, [r0, #8]
 80068cc:	fb97 f7f3 	sdiv	r7, r7, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 80068d0:	eba1 0807 	sub.w	r8, r1, r7
 80068d4:	4640      	mov	r0, r8
 80068d6:	f7ff ffcf 	bl	8006878 <getScalingFactor>
 80068da:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 80068dc:	4638      	mov	r0, r7
 80068de:	f7ff ffcb 	bl	8006878 <getScalingFactor>
 80068e2:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 80068e4:	4630      	mov	r0, r6
 80068e6:	f7ff ffc7 	bl	8006878 <getScalingFactor>
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 80068ea:	682a      	ldr	r2, [r5, #0]
      pHandle->TargetFinal = TargetFinal;
 80068ec:	606e      	str	r6, [r5, #4]
      if (wScalingFactor <  wScalingFactor2)
 80068ee:	45ca      	cmp	sl, r9
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 80068f0:	fb02 f404 	mul.w	r4, r2, r4
      aux /= 1000U;
 80068f4:	4a0c      	ldr	r2, [pc, #48]	; (8006928 <REMNG_ExecRamp+0x84>)
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 80068f6:	4603      	mov	r3, r0
        if (wScalingFactor < wScalingFactor3)
 80068f8:	bf2c      	ite	cs
 80068fa:	4648      	movcs	r0, r9
 80068fc:	4650      	movcc	r0, sl
        if (wScalingFactor2 < wScalingFactor3)
 80068fe:	4298      	cmp	r0, r3
      aux /= 1000U;
 8006900:	fba2 2404 	umull	r2, r4, r2, r4
 8006904:	bf28      	it	cs
 8006906:	4618      	movcs	r0, r3
 8006908:	09a4      	lsrs	r4, r4, #6
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 800690a:	fb00 f707 	mul.w	r7, r0, r7
      pHandle->RampRemainingStep++;
 800690e:	3401      	adds	r4, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8006910:	fb00 f308 	mul.w	r3, r0, r8
      pHandle->ScalingFactor = wScalingFactorMin;
 8006914:	6168      	str	r0, [r5, #20]
      pHandle->RampRemainingStep++;
 8006916:	60ec      	str	r4, [r5, #12]
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8006918:	60af      	str	r7, [r5, #8]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 800691a:	fb93 f4f4 	sdiv	r4, r3, r4
}
 800691e:	2001      	movs	r0, #1
      pHandle->IncDecAmount = aux1;
 8006920:	612c      	str	r4, [r5, #16]
}
 8006922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006926:	bf00      	nop
 8006928:	10624dd3 	.word	0x10624dd3

0800692c <RUC_Init>:
  * @param  pPWM: Pointer on the PWM structure.
  *  @retval none
  */
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL, PWMC_Handle_t *pPWM)
{
 800692c:	b410      	push	{r4}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 800692e:	6681      	str	r1, [r0, #104]	; 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006930:	6941      	ldr	r1, [r0, #20]
{
 8006932:	9c01      	ldr	r4, [sp, #4]
    pHandle->pPWM = pPWM;
 8006934:	6744      	str	r4, [r0, #116]	; 0x74
    pHandle->OTFSCLowside = false;
 8006936:	f04f 0c00 	mov.w	ip, #0
    pHandle->pSNSL = pSNSL;
 800693a:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
    pHandle->OTFSCLowside = false;
 800693e:	f8a0 c054 	strh.w	ip, [r0, #84]	; 0x54
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006942:	b301      	cbz	r1, 8006986 <RUC_Init+0x5a>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006944:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006946:	b30b      	cbz	r3, 800698c <RUC_Init+0x60>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006948:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800694a:	b30b      	cbz	r3, 8006990 <RUC_Init+0x64>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 800694c:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 800694e:	b30b      	cbz	r3, 8006994 <RUC_Init+0x68>
 8006950:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 8006952:	2105      	movs	r1, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006954:	b1c3      	cbz	r3, 8006988 <RUC_Init+0x5c>
 8006956:	2204      	movs	r2, #4
 8006958:	2105      	movs	r1, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800695a:	8803      	ldrh	r3, [r0, #0]
 800695c:	4c0e      	ldr	r4, [pc, #56]	; (8006998 <RUC_Init+0x6c>)
 800695e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006962:	fb0c f303 	mul.w	r3, ip, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006966:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 800696a:	fba4 4303 	umull	r4, r3, r4, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 800696e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006972:	2400      	movs	r4, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006974:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006976:	6154      	str	r4, [r2, #20]
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8006978:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->bPhaseNbr = bPhase;
 800697c:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006980:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
}
 8006984:	4770      	bx	lr
      bPhase++;
 8006986:	2101      	movs	r1, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006988:	1e4a      	subs	r2, r1, #1
 800698a:	e7e6      	b.n	800695a <RUC_Init+0x2e>
      bPhase++;
 800698c:	2102      	movs	r1, #2
 800698e:	e7fb      	b.n	8006988 <RUC_Init+0x5c>
 8006990:	2103      	movs	r1, #3
 8006992:	e7f9      	b.n	8006988 <RUC_Init+0x5c>
 8006994:	2104      	movs	r1, #4
 8006996:	e7f7      	b.n	8006988 <RUC_Init+0x5c>
 8006998:	10624dd3 	.word	0x10624dd3

0800699c <RUC_Clear>:
  * @param  hMotorDirection: rotor rotation direction.
  *         This parameter must be -1 or +1.
  *  @retval none
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 800699c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 80069a0:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 80069a2:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 80069a6:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 80069a8:	2600      	movs	r6, #0
{
 80069aa:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 80069ac:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
    pHandle->bOTFRelCounter = 0U;
 80069b0:	f880 6053 	strb.w	r6, [r0, #83]	; 0x53
    pHandle->OTFSCLowside = false;
 80069b4:	f8a0 6054 	strh.w	r6, [r0, #84]	; 0x54

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 80069b8:	4638      	mov	r0, r7

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, STC_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 80069ba:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 80069bc:	f000 fc80 	bl	80072c0 <VSS_Clear>
    STC_SetControlMode(pSTC, STC_TORQUE_MODE);
 80069c0:	4631      	mov	r1, r6
 80069c2:	4640      	mov	r0, r8
 80069c4:	f000 f906 	bl	8006bd4 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 80069c8:	8861      	ldrh	r1, [r4, #2]
 80069ca:	fb11 f105 	smulbb	r1, r1, r5
 80069ce:	b209      	sxth	r1, r1
 80069d0:	4638      	mov	r0, r7
 80069d2:	f000 fd2d 	bl	8007430 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 80069d6:	4632      	mov	r2, r6
 80069d8:	4631      	mov	r1, r6
 80069da:	4640      	mov	r0, r8
 80069dc:	f000 f8fe 	bl	8006bdc <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 80069e0:	8a21      	ldrh	r1, [r4, #16]
 80069e2:	89a2      	ldrh	r2, [r4, #12]
 80069e4:	fb11 f105 	smulbb	r1, r1, r5
 80069e8:	b209      	sxth	r1, r1
 80069ea:	4640      	mov	r0, r8
 80069ec:	f000 f8f6 	bl	8006bdc <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 80069f0:	89e1      	ldrh	r1, [r4, #14]
 80069f2:	89a2      	ldrh	r2, [r4, #12]
 80069f4:	fb11 f105 	smulbb	r1, r1, r5
 80069f8:	b209      	sxth	r1, r1
 80069fa:	4638      	mov	r0, r7
 80069fc:	f000 fd20 	bl	8007440 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8006a00:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8006a02:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 8006a04:	4a06      	ldr	r2, [pc, #24]	; (8006a20 <RUC_Clear+0x84>)

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 8006a06:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8006a0a:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 8006a0e:	fba2 2303 	umull	r2, r3, r2, r3
 8006a12:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006a14:	6962      	ldr	r2, [r4, #20]
 8006a16:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8006a18:	3301      	adds	r3, #1
 8006a1a:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8006a1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a20:	10624dd3 	.word	0x10624dd3

08006a24 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8006a24:	8883      	ldrh	r3, [r0, #4]
{
 8006a26:	b510      	push	{r4, lr}
 8006a28:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 8006a2a:	bb43      	cbnz	r3, 8006a7e <RUC_Exec+0x5a>

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 8006a2c:	68a0      	ldr	r0, [r4, #8]
 8006a2e:	b328      	cbz	r0, 8006a7c <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed.*/
        /* Gives the next command to STC and VSS.*/
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8006a30:	8881      	ldrh	r1, [r0, #4]
 8006a32:	88e3      	ldrh	r3, [r4, #6]
 8006a34:	8802      	ldrh	r2, [r0, #0]
 8006a36:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8006a38:	fb11 f103 	smulbb	r1, r1, r3
 8006a3c:	b209      	sxth	r1, r1
 8006a3e:	f000 f8cd 	bl	8006bdc <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8006a42:	68a3      	ldr	r3, [r4, #8]
 8006a44:	88e0      	ldrh	r0, [r4, #6]
 8006a46:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8006a48:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8006a4a:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 8006a4e:	b209      	sxth	r1, r1
 8006a50:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8006a52:	f000 fcf5 	bl	8007440 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks.*/
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8006a56:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8006a58:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8006a5a:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8006a5c:	4a0b      	ldr	r2, [pc, #44]	; (8006a8c <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /*Set the next phases parameter pointer.*/
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 8006a5e:	6889      	ldr	r1, [r1, #8]
 8006a60:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8006a62:	fb00 f303 	mul.w	r3, r0, r3
 8006a66:	fba2 2303 	umull	r2, r3, r2, r3

        /*Increases the rev up stages counter.*/
        pHandle->bStageCnt++;
 8006a6a:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8006a6e:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 8006a70:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 8006a72:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 8006a74:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 8006a76:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  bool retVal = true;
 8006a7a:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8006a7c:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 8006a7e:	3b01      	subs	r3, #1
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d0d1      	beq.n	8006a2c <RUC_Exec+0x8>
  bool retVal = true;
 8006a88:	2001      	movs	r0, #1
}
 8006a8a:	bd10      	pop	{r4, pc}
 8006a8c:	10624dd3 	.word	0x10624dd3

08006a90 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 8006a90:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 8006a94:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 8006a98:	4282      	cmp	r2, r0
 8006a9a:	bf34      	ite	cc
 8006a9c:	2000      	movcc	r0, #0
 8006a9e:	2001      	movcs	r0, #1
 8006aa0:	4770      	bx	lr
 8006aa2:	bf00      	nop

08006aa4 <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 8006aa4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006aa8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 8006aac:	f8d2 c002 	ldr.w	ip, [r2, #2]
 8006ab0:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 8006ab4:	4618      	mov	r0, r3
 8006ab6:	8813      	ldrh	r3, [r2, #0]
 8006ab8:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8006aba:	2001      	movs	r0, #1
 8006abc:	4770      	bx	lr
 8006abe:	bf00      	nop

08006ac0 <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 8006ac0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 8006ac4:	4770      	bx	lr
 8006ac6:	bf00      	nop

08006ac8 <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8006ac8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8006acc:	0089      	lsls	r1, r1, #2
 8006ace:	f101 0308 	add.w	r3, r1, #8
 8006ad2:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8006ad4:	4401      	add	r1, r0
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8006ad6:	f8d3 3006 	ldr.w	r3, [r3, #6]
 8006ada:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8006ade:	898b      	ldrh	r3, [r1, #12]
 8006ae0:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8006ae2:	2001      	movs	r0, #1
 8006ae4:	4770      	bx	lr
 8006ae6:	bf00      	nop

08006ae8 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8006ae8:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006aec:	4770      	bx	lr
 8006aee:	bf00      	nop

08006af0 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8006af0:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop

08006af8 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8006af8:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 8006afc:	4770      	bx	lr
 8006afe:	bf00      	nop

08006b00 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8006b00:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8006b04:	8a81      	ldrh	r1, [r0, #20]
{
 8006b06:	b500      	push	{lr}
    if (*pMecSpeedUnit < 0)
 8006b08:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 8006b0a:	bfb8      	it	lt
 8006b0c:	425b      	neglt	r3, r3
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006b0e:	f8b0 e016 	ldrh.w	lr, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8006b12:	f890 c003 	ldrb.w	ip, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8006b16:	7802      	ldrb	r2, [r0, #0]
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8006b18:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 8006b1a:	459e      	cmp	lr, r3
 8006b1c:	d819      	bhi.n	8006b52 <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8006b1e:	4299      	cmp	r1, r3
 8006b20:	bf2c      	ite	cs
 8006b22:	2300      	movcs	r3, #0
 8006b24:	2301      	movcc	r3, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8006b26:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8006b2a:	f8b0 e018 	ldrh.w	lr, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 8006b2e:	2900      	cmp	r1, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8006b30:	bfb8      	it	lt
 8006b32:	4249      	neglt	r1, r1
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8006b34:	b289      	uxth	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8006b36:	458e      	cmp	lr, r1
 8006b38:	d300      	bcc.n	8006b3c <SPD_IsMecSpeedReliable+0x3c>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 8006b3a:	b163      	cbz	r3, 8006b56 <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 8006b3c:	4594      	cmp	ip, r2
 8006b3e:	d901      	bls.n	8006b44 <SPD_IsMecSpeedReliable+0x44>
      {
        bSpeedErrorNumber++;
 8006b40:	3201      	adds	r2, #1
 8006b42:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006b44:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8006b46:	ebb2 000c 	subs.w	r0, r2, ip
 8006b4a:	bf18      	it	ne
 8006b4c:	2001      	movne	r0, #1
 8006b4e:	f85d fb04 	ldr.w	pc, [sp], #4
      SpeedError = true;
 8006b52:	2301      	movs	r3, #1
 8006b54:	e7e7      	b.n	8006b26 <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 8006b56:	4594      	cmp	ip, r2
 8006b58:	bf88      	it	hi
 8006b5a:	2200      	movhi	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8006b5c:	7002      	strb	r2, [r0, #0]
}
 8006b5e:	ebb2 000c 	subs.w	r0, r2, ip
 8006b62:	bf18      	it	ne
 8006b64:	2001      	movne	r0, #1
 8006b66:	f85d fb04 	ldr.w	pc, [sp], #4
 8006b6a:	bf00      	nop

08006b6c <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 8006b6c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8006b70:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wAux *= INT16_MAX;
 8006b74:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 8006b78:	fb93 f0f0 	sdiv	r0, r3, r0
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 8006b7c:	b200      	sxth	r0, r0
 8006b7e:	4770      	bx	lr

08006b80 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8006b80:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 8006b84:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8006b86:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 8006b8a:	6142      	str	r2, [r0, #20]
{
 8006b8c:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 8006b8e:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 8006b92:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 8006b94:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 8006b96:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 8006b9a:	0409      	lsls	r1, r1, #16
 8006b9c:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 8006ba0:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8006ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 8006ba6:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006ba8:	6183      	str	r3, [r0, #24]
}
 8006baa:	4770      	bx	lr

08006bac <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 8006bac:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8006bae:	4770      	bx	lr

08006bb0 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 8006bb0:	6940      	ldr	r0, [r0, #20]
 8006bb2:	4770      	bx	lr

08006bb4 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (STC_SPEED_MODE == pHandle->Mode)
 8006bb4:	7803      	ldrb	r3, [r0, #0]
 8006bb6:	2b01      	cmp	r3, #1
 8006bb8:	d000      	beq.n	8006bbc <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8006bba:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 8006bbc:	6900      	ldr	r0, [r0, #16]
 8006bbe:	2100      	movs	r1, #0
 8006bc0:	f7fe bf96 	b.w	8005af0 <PID_SetIntegralTerm>

08006bc4 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 8006bc4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 8006bc8:	4770      	bx	lr
 8006bca:	bf00      	nop

08006bcc <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 8006bcc:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8006bd0:	4770      	bx	lr
 8006bd2:	bf00      	nop

08006bd4 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006bd4:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8006bd6:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8006bd8:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8006bda:	4770      	bx	lr

08006bdc <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 8006bdc:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (STC_TORQUE_MODE == pHandle->Mode)
 8006bde:	7803      	ldrb	r3, [r0, #0]
{
 8006be0:	4604      	mov	r4, r0
 8006be2:	460d      	mov	r5, r1
 8006be4:	4616      	mov	r6, r2
    if (STC_TORQUE_MODE == pHandle->Mode)
 8006be6:	b1f3      	cbz	r3, 8006c26 <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8006be8:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 8006bea:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8006bee:	4299      	cmp	r1, r3
 8006bf0:	dd01      	ble.n	8006bf6 <STC_ExecRamp+0x1a>
        allowedRange = false;
 8006bf2:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8006bf4:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8006bf6:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 8006bfa:	428b      	cmp	r3, r1
 8006bfc:	dcf9      	bgt.n	8006bf2 <STC_ExecRamp+0x16>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 8006bfe:	8c23      	ldrh	r3, [r4, #32]
 8006c00:	4299      	cmp	r1, r3
 8006c02:	da03      	bge.n	8006c0c <STC_ExecRamp+0x30>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8006c04:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8006c08:	428b      	cmp	r3, r1
 8006c0a:	dbf2      	blt.n	8006bf2 <STC_ExecRamp+0x16>
      if (0U == hDurationms)
 8006c0c:	b9ae      	cbnz	r6, 8006c3a <STC_ExecRamp+0x5e>
        if (STC_SPEED_MODE == pHandle->Mode)
 8006c0e:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8006c10:	042d      	lsls	r5, r5, #16
        if (STC_SPEED_MODE == pHandle->Mode)
 8006c12:	2b01      	cmp	r3, #1
        pHandle->RampRemainingStep = 0U;
 8006c14:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8006c18:	bf0c      	ite	eq
 8006c1a:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 8006c1c:	60a5      	strne	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 8006c1e:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8006c20:	61a3      	str	r3, [r4, #24]
 8006c22:	2001      	movs	r0, #1
}
 8006c24:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8006c26:	f7ff ffd1 	bl	8006bcc <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 8006c2a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 8006c2c:	429d      	cmp	r5, r3
 8006c2e:	dce0      	bgt.n	8006bf2 <STC_ExecRamp+0x16>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8006c30:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8006c34:	42ab      	cmp	r3, r5
 8006c36:	dcdc      	bgt.n	8006bf2 <STC_ExecRamp+0x16>
 8006c38:	e7e8      	b.n	8006c0c <STC_ExecRamp+0x30>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8006c3a:	8ba3      	ldrh	r3, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 8006c3c:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 8006c3e:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8006c42:	4e06      	ldr	r6, [pc, #24]	; (8006c5c <STC_ExecRamp+0x80>)
 8006c44:	fba6 2303 	umull	r2, r3, r6, r3
 8006c48:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 8006c4a:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 8006c4c:	1a28      	subs	r0, r5, r0
 8006c4e:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 8006c50:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8006c52:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8006c56:	61a0      	str	r0, [r4, #24]
 8006c58:	2001      	movs	r0, #1
}
 8006c5a:	bd70      	pop	{r4, r5, r6, pc}
 8006c5c:	10624dd3 	.word	0x10624dd3

08006c60 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8006c60:	2300      	movs	r3, #0
 8006c62:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8006c64:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8006c66:	4770      	bx	lr

08006c68 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8006c68:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (STC_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 8006c6a:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (STC_TORQUE_MODE == pHandle->Mode)
 8006c6e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8006c70:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 8006c72:	2a00      	cmp	r2, #0
 8006c74:	bf08      	it	eq
 8006c76:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 8006c78:	2b01      	cmp	r3, #1
{
 8006c7a:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 8006c7c:	d908      	bls.n	8006c90 <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 8006c7e:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 8006c80:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 8006c82:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 8006c84:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (STC_SPEED_MODE == pHandle->Mode)
 8006c86:	2a01      	cmp	r2, #1
 8006c88:	d00b      	beq.n	8006ca2 <STC_CalcTorqueReference+0x3a>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 8006c8a:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 8006c8c:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 8006c8e:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 8006c90:	d1f9      	bne.n	8006c86 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006c92:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 8006c96:	2300      	movs	r3, #0
    if (STC_SPEED_MODE == pHandle->Mode)
 8006c98:	2a01      	cmp	r2, #1
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 8006c9a:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 8006c9e:	60c3      	str	r3, [r0, #12]
    if (STC_SPEED_MODE == pHandle->Mode)
 8006ca0:	d1f3      	bne.n	8006c8a <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 8006ca2:	6960      	ldr	r0, [r4, #20]
 8006ca4:	f7ff ff24 	bl	8006af0 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 8006ca8:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 8006cac:	b209      	sxth	r1, r1
 8006cae:	6920      	ldr	r0, [r4, #16]
 8006cb0:	f7fe ff52 	bl	8005b58 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 8006cb4:	0403      	lsls	r3, r0, #16
 8006cb6:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 8006cba:	bd38      	pop	{r3, r4, r5, pc}

08006cbc <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 8006cbc:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 8006cc0:	4770      	bx	lr
 8006cc2:	bf00      	nop

08006cc4 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 8006cc4:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 8006cc8:	2200      	movs	r2, #0
 8006cca:	b299      	uxth	r1, r3
 8006ccc:	f361 020f 	bfi	r2, r1, #0, #16
 8006cd0:	0c1b      	lsrs	r3, r3, #16
 8006cd2:	f363 421f 	bfi	r2, r3, #16, #16
{
 8006cd6:	b082      	sub	sp, #8
}
 8006cd8:	4610      	mov	r0, r2
 8006cda:	b002      	add	sp, #8
 8006cdc:	4770      	bx	lr
 8006cde:	bf00      	nop

08006ce0 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8006ce0:	b510      	push	{r4, lr}
 8006ce2:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8006ce4:	6940      	ldr	r0, [r0, #20]
 8006ce6:	f7ff ff03 	bl	8006af0 <SPD_GetAvrgMecSpeedUnit>
 8006cea:	0400      	lsls	r0, r0, #16
 8006cec:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8006cee:	bd10      	pop	{r4, pc}

08006cf0 <STO_PLL_CalcElAngle>:
  * @param  pHandle: handler of the current instance of the STO component
  * @param  pInputVars_str pointer to the observer inputs structure
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8006cf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8006cf4:	4604      	mov	r4, r0
{
 8006cf6:	b087      	sub	sp, #28
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8006cf8:	2800      	cmp	r0, #0
 8006cfa:	f000 80cc 	beq.w	8006e96 <STO_PLL_CalcElAngle+0x1a6>
 8006cfe:	2900      	cmp	r1, #0
 8006d00:	f000 80cc 	beq.w	8006e9c <STO_PLL_CalcElAngle+0x1ac>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8006d04:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8006d08:	6e87      	ldr	r7, [r0, #104]	; 0x68
 8006d0a:	ebc3 32c3 	rsb	r2, r3, r3, lsl #15
 8006d0e:	4297      	cmp	r7, r2
 8006d10:	ea4f 30c3 	mov.w	r0, r3, lsl #15
 8006d14:	f340 80dd 	ble.w	8006ed2 <STO_PLL_CalcElAngle+0x1e2>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8006d18:	66a2      	str	r2, [r4, #104]	; 0x68
 8006d1a:	4617      	mov	r7, r2
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8006d1c:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8006d20:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8006d22:	9601      	str	r6, [sp, #4]
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8006d24:	fa47 f605 	asr.w	r6, r7, r5
 8006d28:	9602      	str	r6, [sp, #8]
 8006d2a:	fa0f fe86 	sxth.w	lr, r6
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8006d2e:	9e01      	ldr	r6, [sp, #4]
 8006d30:	42b2      	cmp	r2, r6
 8006d32:	f280 80c8 	bge.w	8006ec6 <STO_PLL_CalcElAngle+0x1d6>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8006d36:	66e2      	str	r2, [r4, #108]	; 0x6c
 8006d38:	9201      	str	r2, [sp, #4]
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8006d3a:	9b01      	ldr	r3, [sp, #4]
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8006d3c:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8006d40:	fa43 f505 	asr.w	r5, r3, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8006d44:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8006d48:	ebc3 32c3 	rsb	r2, r3, r3, lsl #15
 8006d4c:	4591      	cmp	r9, r2
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8006d4e:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8006d52:	ea4f 30c3 	mov.w	r0, r3, lsl #15
 8006d56:	f340 80ae 	ble.w	8006eb6 <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8006d5a:	6622      	str	r2, [r4, #96]	; 0x60
 8006d5c:	4691      	mov	r9, r2
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8006d5e:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
 8006d62:	4542      	cmp	r2, r8
 8006d64:	f280 80a1 	bge.w	8006eaa <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8006d68:	6662      	str	r2, [r4, #100]	; 0x64
 8006d6a:	4690      	mov	r8, r2
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hIalfa_err = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006d6c:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8006d6e:	8908      	ldrh	r0, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006d70:	f8ad 300c 	strh.w	r3, [sp, #12]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8006d74:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8006d78:	f8b1 a006 	ldrh.w	sl, [r1, #6]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8006d7c:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8006d80:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 8006d84:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
    pHandle->hBemf_beta_est = hAux_Beta;
 8006d88:	f8a4 c072 	strh.w	ip, [r4, #114]	; 0x72
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 8006d8c:	fb00 f303 	mul.w	r3, r0, r3
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006d90:	141e      	asrs	r6, r3, #16
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 8006d92:	fb01 f000 	mul.w	r0, r1, r0
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8006d96:	fa49 f302 	asr.w	r3, r9, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006d9a:	9903      	ldr	r1, [sp, #12]
    pHandle->hBemf_alfa_est = hAux_Alfa;
 8006d9c:	f8a4 e070 	strh.w	lr, [r4, #112]	; 0x70
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8006da0:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8006da4:	eba2 0a0a 	sub.w	sl, r2, sl
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8006da8:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 8006dac:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006db0:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 8006db2:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
    wAux = ((int32_t)pHandle->hC1) * hAux;
 8006db6:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 8006dba:	eba9 0303 	sub.w	r3, r9, r3
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 8006dbe:	f9b4 b028 	ldrsh.w	fp, [r4, #40]	; 0x28
    wAux = wAux * pHandle->hC6;
 8006dc2:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	; 0x2a
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 8006dc6:	b209      	sxth	r1, r1
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 8006dc8:	fa0f fa8a 	sxth.w	sl, sl
    wIalfa_est_Next += wAux;
 8006dcc:	fb08 3301 	mla	r3, r8, r1, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006dd0:	1400      	asrs	r0, r0, #16
    wIbeta_est_Next += wAux;
 8006dd2:	fb08 280a 	mla	r8, r8, sl, r2
    wIalfa_est_Next += wAux;
 8006dd6:	fb0b 3306 	mla	r3, fp, r6, r3
    wIbeta_est_Next += wAux;
 8006dda:	fb0b 8800 	mla	r8, fp, r0, r8
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8006dde:	9e01      	ldr	r6, [sp, #4]
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8006de0:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006de4:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8006de6:	fb00 6a0a 	mla	sl, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 8006dea:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 8006dee:	fb01 7100 	mla	r1, r1, r0, r7
    wIalfa_est_Next -= wAux;
 8006df2:	fb06 371e 	mls	r7, r6, lr, r3

    if (0 == pHandle->hForcedDirection)
 8006df6:	f994 0124 	ldrsb.w	r0, [r4, #292]	; 0x124
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 8006dfa:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    wIbeta_est_Next -= wAux;
 8006dfe:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006e02:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8006e06:	fa4e f202 	asr.w	r2, lr, r2
    wAux = wAux * pHandle->hC6;
 8006e0a:	fb0c fc09 	mul.w	ip, ip, r9
    wAux = wAux * pHandle->hC6;
 8006e0e:	fb02 f209 	mul.w	r2, r2, r9
    wBemf_alfa_est_Next += wAux;
 8006e12:	fb0c 1803 	mla	r8, ip, r3, r1
    wBemf_beta_est_Next -= wAux;
 8006e16:	fb02 aa13 	mls	sl, r2, r3, sl
    if (0 == pHandle->hForcedDirection)
 8006e1a:	2800      	cmp	r0, #0
 8006e1c:	d142      	bne.n	8006ea4 <STO_PLL_CalcElAngle+0x1b4>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8006e24:	bfa8      	it	ge
 8006e26:	f04f 0901 	movge.w	r9, #1
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 8006e2a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8006e2e:	f7fa fa9f 	bl	8001370 <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8006e32:	9b02      	ldr	r3, [sp, #8]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8006e34:	fb15 f509 	smulbb	r5, r5, r9
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8006e38:	fb13 f109 	smulbb	r1, r3, r9
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 8006e3c:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 8006e3e:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8006e42:	fb10 f021 	smultb	r0, r0, r1
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8006e46:	f340 31cf 	sbfx	r1, r0, #15, #16
 8006e4a:	f345 35cf 	sbfx	r5, r5, #15, #16
 8006e4e:	1a69      	subs	r1, r5, r1
 8006e50:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8006e54:	f7fe fe80 	bl	8005b58 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8006e58:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8006e5c:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8006e60:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8006e62:	3301      	adds	r3, #1
 8006e64:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8006e66:	429a      	cmp	r2, r3
 8006e68:	bf0a      	itet	eq
 8006e6a:	2200      	moveq	r2, #0
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8006e6c:	461a      	movne	r2, r3
    bBuffer_index = 0U;
 8006e6e:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 8006e70:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8006e74:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 8006e78:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 8006e7c:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
    pHandle->_Super.hElAngle += hRotor_Speed;
 8006e80:	88a1      	ldrh	r1, [r4, #4]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 8006e82:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 8006e86:	4408      	add	r0, r1
    pHandle->Ibeta_est = wIbeta_est_Next;
 8006e88:	e9c4 6819 	strd	r6, r8, [r4, #100]	; 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 8006e8c:	b200      	sxth	r0, r0
    pHandle->Ialfa_est = wIalfa_est_Next;
 8006e8e:	6627      	str	r7, [r4, #96]	; 0x60
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 8006e90:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 8006e94:	80a0      	strh	r0, [r4, #4]
}
 8006e96:	b007      	add	sp, #28
 8006e98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 8006e9c:	4608      	mov	r0, r1
}
 8006e9e:	b007      	add	sp, #28
 8006ea0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8006ea4:	fa1f f980 	uxth.w	r9, r0
 8006ea8:	e7bf      	b.n	8006e2a <STO_PLL_CalcElAngle+0x13a>
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8006eaa:	1a1b      	subs	r3, r3, r0
 8006eac:	4598      	cmp	r8, r3
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8006eae:	bfdc      	itt	le
 8006eb0:	6663      	strle	r3, [r4, #100]	; 0x64
 8006eb2:	4698      	movle	r8, r3
 8006eb4:	e75a      	b.n	8006d6c <STO_PLL_CalcElAngle+0x7c>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 8006eb6:	eba3 0800 	sub.w	r8, r3, r0
 8006eba:	45c1      	cmp	r9, r8
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 8006ebc:	bfdc      	itt	le
 8006ebe:	f8c4 8060 	strle.w	r8, [r4, #96]	; 0x60
 8006ec2:	46c1      	movle	r9, r8
 8006ec4:	e74b      	b.n	8006d5e <STO_PLL_CalcElAngle+0x6e>
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8006ec6:	1a1b      	subs	r3, r3, r0
 8006ec8:	429e      	cmp	r6, r3
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 8006eca:	bfdc      	itt	le
 8006ecc:	66e3      	strle	r3, [r4, #108]	; 0x6c
 8006ece:	9301      	strle	r3, [sp, #4]
 8006ed0:	e733      	b.n	8006d3a <STO_PLL_CalcElAngle+0x4a>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8006ed2:	1a1d      	subs	r5, r3, r0
 8006ed4:	42af      	cmp	r7, r5
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 8006ed6:	bfdc      	itt	le
 8006ed8:	66a5      	strle	r5, [r4, #104]	; 0x68
 8006eda:	462f      	movle	r7, r5
 8006edc:	e71e      	b.n	8006d1c <STO_PLL_CalcElAngle+0x2c>
 8006ede:	bf00      	nop

08006ee0 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8006ee0:	b570      	push	{r4, r5, r6, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8006ee2:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006ee6:	2d00      	cmp	r5, #0
 8006ee8:	f000 809e 	beq.w	8007028 <STO_PLL_CalcAvrgMecSpeedUnit+0x148>
 8006eec:	f105 3cff 	add.w	ip, r5, #4294967295
 8006ef0:	fa5f f38c 	uxtb.w	r3, ip
 8006ef4:	f100 0472 	add.w	r4, r0, #114	; 0x72
 8006ef8:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 8006efc:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8006f00:	2200      	movs	r2, #0
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006f02:	4623      	mov	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8006f04:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006f08:	459c      	cmp	ip, r3
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8006f0a:	4472      	add	r2, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006f0c:	d1fa      	bne.n	8006f04 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 8006f0e:	fb92 fef5 	sdiv	lr, r2, r5
 8006f12:	2200      	movs	r2, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8006f14:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 8006f18:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006f1c:	4564      	cmp	r4, ip
      wAvrQuadraticError += wError;
 8006f1e:	fb03 2203 	mla	r2, r3, r3, r2
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8006f22:	d1f7      	bne.n	8006f14 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8006f24:	fbb2 f2f5 	udiv	r2, r2, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8006f28:	fb0e f40e 	mul.w	r4, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8006f2c:	17e6      	asrs	r6, r4, #31
 8006f2e:	f8b0 5110 	ldrh.w	r5, [r0, #272]	; 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8006f32:	8b43      	ldrh	r3, [r0, #26]
 8006f34:	fb0e fe03 	mul.w	lr, lr, r3
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8006f38:	fba5 4304 	umull	r4, r3, r5, r4
 8006f3c:	fb05 3306 	mla	r3, r5, r6, r3
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 8006f40:	09e4      	lsrs	r4, r4, #7
 8006f42:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8006f46:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8006f48:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8006f4c:	69c5      	ldr	r5, [r0, #28]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8006f4e:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8006f50:	fb0e f303 	mul.w	r3, lr, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8006f54:	bfd8      	it	le
 8006f56:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 8006f5a:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8006f5e:	bfc8      	it	gt
 8006f60:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8006f64:	7845      	ldrb	r5, [r0, #1]
 8006f66:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 8006f6a:	b21d      	sxth	r5, r3
 8006f6c:	800d      	strh	r5, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 8006f6e:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8006f70:	f880 c0f5 	strb.w	ip, [r0, #245]	; 0xf5
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8006f74:	b9ae      	cbnz	r6, 8006fa2 <STO_PLL_CalcAvrgMecSpeedUnit+0xc2>
    if (false == pHandle->IsAlgorithmConverged)
 8006f76:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 8006f7a:	b353      	cbz	r3, 8006fd2 <STO_PLL_CalcAvrgMecSpeedUnit+0xf2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8006f7c:	4294      	cmp	r4, r2
 8006f7e:	dc25      	bgt.n	8006fcc <STO_PLL_CalcAvrgMecSpeedUnit+0xec>
        pHandle->ReliabilityCounter++;
 8006f80:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8006f84:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
        pHandle->ReliabilityCounter++;
 8006f88:	3301      	adds	r3, #1
 8006f8a:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8006f8c:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 8006f8e:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 8006f92:	d81e      	bhi.n	8006fd2 <STO_PLL_CalcAvrgMecSpeedUnit+0xf2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8006f94:	78c2      	ldrb	r2, [r0, #3]
 8006f96:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 8006f98:	2300      	movs	r3, #0
 8006f9a:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 8006f9e:	4618      	mov	r0, r3
 8006fa0:	bd70      	pop	{r4, r5, r6, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8006fa2:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8006fa4:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 8006fa8:	bfb8      	it	lt
 8006faa:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 8006fac:	429d      	cmp	r5, r3
 8006fae:	dc14      	bgt.n	8006fda <STO_PLL_CalcAvrgMecSpeedUnit+0xfa>
    bool bIs_Bemf_Consistent = false;
 8006fb0:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 8006fb2:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 8006fb4:	462e      	mov	r6, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 8006fb6:	e9c0 633f 	strd	r6, r3, [r0, #252]	; 0xfc
    if (false == pHandle->IsAlgorithmConverged)
 8006fba:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 8006fbe:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 8006fc2:	b133      	cbz	r3, 8006fd2 <STO_PLL_CalcAvrgMecSpeedUnit+0xf2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 8006fc4:	4294      	cmp	r4, r2
 8006fc6:	dddb      	ble.n	8006f80 <STO_PLL_CalcAvrgMecSpeedUnit+0xa0>
 8006fc8:	2d00      	cmp	r5, #0
 8006fca:	d0d9      	beq.n	8006f80 <STO_PLL_CalcAvrgMecSpeedUnit+0xa0>
        pHandle->ReliabilityCounter = 0U;
 8006fcc:	2300      	movs	r3, #0
 8006fce:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 8006fd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8006fd6:	f7ff bd93 	b.w	8006b00 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 8006fda:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	; 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 8006fde:	f9b0 c072 	ldrsh.w	ip, [r0, #114]	; 0x72
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8006fe2:	f890 5119 	ldrb.w	r5, [r0, #281]	; 0x119
        wObsBemfSq = wObsBemf * wObsBemf;
 8006fe6:	fb06 f606 	mul.w	r6, r6, r6
        wObsBemfSq += wObsBemf * wObsBemf;
 8006fea:	fb0c 660c 	mla	r6, ip, ip, r6
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 8006fee:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8006ff2:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8006ff6:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8006ffa:	fb03 f505 	mul.w	r5, r3, r5
 8006ffe:	2d00      	cmp	r5, #0
 8007000:	bfb8      	it	lt
 8007002:	353f      	addlt	r5, #63	; 0x3f
 8007004:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8007006:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800700a:	2b00      	cmp	r3, #0
 800700c:	461d      	mov	r5, r3
 800700e:	f890 c118 	ldrb.w	ip, [r0, #280]	; 0x118
 8007012:	bfb8      	it	lt
 8007014:	f103 053f 	addlt.w	r5, r3, #63	; 0x3f
 8007018:	11ad      	asrs	r5, r5, #6
 800701a:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800701e:	42ae      	cmp	r6, r5
 8007020:	bfd4      	ite	le
 8007022:	2500      	movle	r5, #0
 8007024:	2501      	movgt	r5, #1
 8007026:	e7c6      	b.n	8006fb6 <STO_PLL_CalcAvrgMecSpeedUnit+0xd6>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007028:	462a      	mov	r2, r5
 800702a:	462c      	mov	r4, r5
 800702c:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800702e:	46ae      	mov	lr, r5
 8007030:	e77d      	b.n	8006f2e <STO_PLL_CalcAvrgMecSpeedUnit+0x4e>
 8007032:	bf00      	nop

08007034 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8007034:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007038:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800703c:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007040:	1acb      	subs	r3, r1, r3
 8007042:	b29b      	uxth	r3, r3
{
 8007044:	b510      	push	{r4, lr}
    int32_t wSum = pHandle->DppBufferSum;
 8007046:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    if (0 == hBufferSizeDiff)
 800704a:	b973      	cbnz	r3, 800706a <STO_PLL_CalcAvrgElSpeedDpp+0x36>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800704c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007050:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
 8007054:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8007058:	4423      	add	r3, r4
 800705a:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800705c:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
    pHandle->DppBufferSum = wSum;
 8007060:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8007064:	4113      	asrs	r3, r2
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8007066:	81c3      	strh	r3, [r0, #14]
}
 8007068:	bd10      	pop	{r4, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800706a:	4413      	add	r3, r2
 800706c:	fa0f fc83 	sxth.w	ip, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8007070:	4561      	cmp	r1, ip
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 8007072:	b29b      	uxth	r3, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 8007074:	dc05      	bgt.n	8007082 <STO_PLL_CalcAvrgElSpeedDpp+0x4e>
 8007076:	fa1f fe81 	uxth.w	lr, r1
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 800707a:	eba3 030e 	sub.w	r3, r3, lr
 800707e:	fa0f fc83 	sxth.w	ip, r3
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 8007082:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007086:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 800708a:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 800708e:	f9bc 2074 	ldrsh.w	r2, [ip, #116]	; 0x74
 8007092:	4423      	add	r3, r4
 8007094:	1a9b      	subs	r3, r3, r2
 8007096:	e7e1      	b.n	800705c <STO_PLL_CalcAvrgElSpeedDpp+0x28>

08007098 <STO_PLL_Clear>:
{
 8007098:	b510      	push	{r4, lr}
  * @retval none
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 800709a:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 800709e:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 80070a0:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 80070a4:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 80070a8:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 80070ac:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 80070ae:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 80070b0:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 80070b2:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    pHandle->IsAlgorithmConverged = false;
 80070b6:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 80070ba:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    pHandle->ForceConvergency = false;
 80070be:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 80070c2:	b11a      	cbz	r2, 80070cc <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 80070c4:	0052      	lsls	r2, r2, #1
 80070c6:	3074      	adds	r0, #116	; 0x74
 80070c8:	f000 fa46 	bl	8007558 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 80070cc:	2100      	movs	r1, #0
 80070ce:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 80070d2:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 80070d6:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 80070da:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 80070de:	f7fe bd07 	b.w	8005af0 <PID_SetIntegralTerm>
 80070e2:	bf00      	nop

080070e4 <STO_PLL_Init>:
{
 80070e4:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80070e6:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 80070ea:	4b19      	ldr	r3, [pc, #100]	; (8007150 <STO_PLL_Init+0x6c>)
 80070ec:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	; 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 80070f0:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    pHandle->EnableDualCheck = true;
 80070f4:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 80070f6:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 80070f8:	fb93 f3fe 	sdiv	r3, r3, lr
 80070fc:	b21b      	sxth	r3, r3
{
 80070fe:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8007100:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
    pHandle->F3POW2 = 0U;
 8007104:	8641      	strh	r1, [r0, #50]	; 0x32
    while (htempk != 0)
 8007106:	b30b      	cbz	r3, 800714c <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 8007108:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800710a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800710e:	f102 0c01 	add.w	ip, r2, #1
 8007112:	105b      	asrs	r3, r3, #1
 8007114:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 8007116:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800711a:	fa1f f28c 	uxth.w	r2, ip
 800711e:	d1f4      	bne.n	800710a <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8007120:	b20a      	sxth	r2, r1
 8007122:	8660      	strh	r0, [r4, #50]	; 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8007124:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007128:	480a      	ldr	r0, [pc, #40]	; (8007154 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800712a:	8622      	strh	r2, [r4, #48]	; 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800712c:	17cb      	asrs	r3, r1, #31
 800712e:	fb80 0101 	smull	r0, r1, r0, r1
 8007132:	ebc3 2121 	rsb	r1, r3, r1, asr #8
    STO_PLL_Clear(pHandle);
 8007136:	4620      	mov	r0, r4
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007138:	8561      	strh	r1, [r4, #42]	; 0x2a
    STO_PLL_Clear(pHandle);
 800713a:	f7ff ffad 	bl	8007098 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800713e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007142:	f7fe fcc1 	bl	8005ac8 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8007146:	2300      	movs	r3, #0
 8007148:	8263      	strh	r3, [r4, #18]
}
 800714a:	bd10      	pop	{r4, pc}
 800714c:	4671      	mov	r1, lr
 800714e:	e7eb      	b.n	8007128 <STO_PLL_Init+0x44>
 8007150:	000fea5e 	.word	0x000fea5e
 8007154:	06488dc5 	.word	0x06488dc5

08007158 <STO_PLL_IsObserverConverged>:
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 8007158:	f890 3123 	ldrb.w	r3, [r0, #291]	; 0x123
 800715c:	b113      	cbz	r3, 8007164 <STO_PLL_IsObserverConverged+0xc>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800715e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8007162:	800b      	strh	r3, [r1, #0]
    }

    if (true == pHandle->ForceConvergency)
 8007164:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 8007168:	b133      	cbz	r3, 8007178 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 800716a:	2301      	movs	r3, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800716c:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800716e:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007172:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 8007174:	4618      	mov	r0, r3
 8007176:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8007178:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800717c:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
{
 8007180:	b510      	push	{r4, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 8007182:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 8007186:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 800718a:	4614      	mov	r4, r2
      if (wtemp > 0)
 800718c:	dd3b      	ble.n	8007206 <STO_PLL_IsObserverConverged+0xae>
        if (hEstimatedSpeedUnit < 0)
 800718e:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 8007192:	bfbc      	itt	lt
 8007194:	f1cc 0c00 	rsblt	ip, ip, #0
 8007198:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 800719c:	2a00      	cmp	r2, #0
 800719e:	db34      	blt.n	800720a <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 80071a0:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
 80071a4:	b362      	cbz	r2, 8007200 <STO_PLL_IsObserverConverged+0xa8>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 80071a6:	f8b0 1114 	ldrh.w	r1, [r0, #276]	; 0x114
 80071aa:	fa1f f28c 	uxth.w	r2, ip
 80071ae:	4291      	cmp	r1, r2
 80071b0:	d226      	bcs.n	8007200 <STO_PLL_IsObserverConverged+0xa8>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 80071b2:	f890 2113 	ldrb.w	r2, [r0, #275]	; 0x113
 80071b6:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 80071ba:	2a00      	cmp	r2, #0
 80071bc:	bfb8      	it	lt
 80071be:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 80071c0:	f342 120f 	sbfx	r2, r2, #4, #16
 80071c4:	4594      	cmp	ip, r2
 80071c6:	db1b      	blt.n	8007200 <STO_PLL_IsObserverConverged+0xa8>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 80071c8:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80071cc:	fb04 f202 	mul.w	r2, r4, r2
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 80071d0:	2a00      	cmp	r2, #0
 80071d2:	bfb8      	it	lt
 80071d4:	320f      	addlt	r2, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 80071d6:	f342 120f 	sbfx	r2, r2, #4, #16
 80071da:	4594      	cmp	ip, r2
 80071dc:	dc10      	bgt.n	8007200 <STO_PLL_IsObserverConverged+0xa8>
                pHandle->ConsistencyCounter++;
 80071de:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 80071e2:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
                pHandle->ConsistencyCounter++;
 80071e6:	3201      	adds	r2, #1
 80071e8:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 80071ea:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 80071ec:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 80071f0:	d809      	bhi.n	8007206 <STO_PLL_IsObserverConverged+0xae>
      pHandle->_Super.bSpeedErrorNumber = 0U;
 80071f2:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 80071f4:	2301      	movs	r3, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 80071f6:	7002      	strb	r2, [r0, #0]
      pHandle->IsAlgorithmConverged = true;
 80071f8:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
}
 80071fc:	4618      	mov	r0, r3
 80071fe:	bd10      	pop	{r4, pc}
                pHandle->ConsistencyCounter = 0U;
 8007200:	2200      	movs	r2, #0
 8007202:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
}
 8007206:	4618      	mov	r0, r3
 8007208:	bd10      	pop	{r4, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800720a:	4252      	negs	r2, r2
 800720c:	b212      	sxth	r2, r2
 800720e:	800a      	strh	r2, [r1, #0]
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007210:	4614      	mov	r4, r2
        if (true == pHandle->IsSpeedReliable)
 8007212:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
 8007216:	2a00      	cmp	r2, #0
 8007218:	d0f2      	beq.n	8007200 <STO_PLL_IsObserverConverged+0xa8>
 800721a:	e7c4      	b.n	80071a6 <STO_PLL_IsObserverConverged+0x4e>

0800721c <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 800721c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800721e:	2200      	movs	r2, #0
 8007220:	b299      	uxth	r1, r3
 8007222:	f361 020f 	bfi	r2, r1, #0, #16
 8007226:	0c1b      	lsrs	r3, r3, #16
 8007228:	f363 421f 	bfi	r2, r3, #16, #16
{
 800722c:	b082      	sub	sp, #8
}
 800722e:	4610      	mov	r0, r2
 8007230:	b002      	add	sp, #8
 8007232:	4770      	bx	lr

08007234 <STO_PLL_GetEstimatedCurrent>:
  iaux.alpha = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8007234:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007238:	f8b0 c11c 	ldrh.w	ip, [r0, #284]	; 0x11c
 800723c:	fa42 f20c 	asr.w	r2, r2, ip
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8007240:	fa43 f30c 	asr.w	r3, r3, ip
 8007244:	b292      	uxth	r2, r2
 8007246:	2100      	movs	r1, #0
 8007248:	f362 010f 	bfi	r1, r2, #0, #16
 800724c:	b29b      	uxth	r3, r3
 800724e:	f363 411f 	bfi	r1, r3, #16, #16
{
 8007252:	b082      	sub	sp, #8
}
 8007254:	4608      	mov	r0, r1
 8007256:	b002      	add	sp, #8
 8007258:	4770      	bx	lr
 800725a:	bf00      	nop

0800725c <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800725c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8007260:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 8007262:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8007266:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007268:	4770      	bx	lr
 800726a:	bf00      	nop

0800726c <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800726c:	8441      	strh	r1, [r0, #34]	; 0x22
    pHandle->hC4 = hhC2;
 800726e:	84c2      	strh	r2, [r0, #38]	; 0x26
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop

08007274 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 8007274:	6800      	ldr	r0, [r0, #0]
 8007276:	2100      	movs	r1, #0
 8007278:	3034      	adds	r0, #52	; 0x34
 800727a:	f7fe bc39 	b.w	8005af0 <PID_SetIntegralTerm>
 800727e:	bf00      	nop

08007280 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 8007280:	2100      	movs	r1, #0
 8007282:	3034      	adds	r0, #52	; 0x34
 8007284:	f7fe bc34 	b.w	8005af0 <PID_SetIntegralTerm>

08007288 <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 8007288:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 800728c:	4770      	bx	lr
 800728e:	bf00      	nop

08007290 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 8007290:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 8007294:	4770      	bx	lr
 8007296:	bf00      	nop

08007298 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 8007298:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 800729a:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 800729e:	4770      	bx	lr

080072a0 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 80072a0:	6803      	ldr	r3, [r0, #0]
 80072a2:	2201      	movs	r2, #1
 80072a4:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80072a8:	4770      	bx	lr
 80072aa:	bf00      	nop

080072ac <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 80072ac:	6803      	ldr	r3, [r0, #0]
 80072ae:	2201      	movs	r2, #1
 80072b0:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80072b4:	4770      	bx	lr
 80072b6:	bf00      	nop

080072b8 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 80072b8:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80072bc:	4770      	bx	lr
 80072be:	bf00      	nop

080072c0 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80072c0:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80072c2:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80072c4:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 80072c6:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 80072ca:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80072cc:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80072ce:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 80072d0:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 80072d2:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80072d4:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 80072d6:	6303      	str	r3, [r0, #48]	; 0x30
    FD_FastDiv(&(pHandle->fd), 1, (int32_t)(pHandle->hTransitionSteps));
#endif
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 80072d8:	4770      	bx	lr
 80072da:	bf00      	nop

080072dc <VSS_Init>:
{
 80072dc:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 80072de:	f7ff ffef 	bl	80072c0 <VSS_Clear>
}
 80072e2:	bd08      	pop	{r3, pc}

080072e4 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 80072e4:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 80072e8:	b123      	cbz	r3, 80072f4 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 80072ea:	f9b1 3000 	ldrsh.w	r3, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 80072ee:	8083      	strh	r3, [r0, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 80072f0:	4618      	mov	r0, r3
 80072f2:	4770      	bx	lr
{
 80072f4:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 80072f6:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 80072fa:	8e03      	ldrh	r3, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 80072fc:	88c5      	ldrh	r5, [r0, #6]
      if (true == pHandle->bTransitionStarted)
 80072fe:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8007302:	7842      	ldrb	r2, [r0, #1]
 8007304:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007308:	4463      	add	r3, ip
 800730a:	fa1f fe83 	uxth.w	lr, r3
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800730e:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007310:	b21b      	sxth	r3, r3
 8007312:	8603      	strh	r3, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8007314:	80c2      	strh	r2, [r0, #6]
      if (true == pHandle->bTransitionStarted)
 8007316:	b1fc      	cbz	r4, 8007358 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 8007318:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 800731c:	b1fa      	cbz	r2, 800735e <VSS_CalcElAngle+0x7a>
          pHandle->hTransitionRemainingSteps--;
 800731e:	3a01      	subs	r2, #1
 8007320:	b212      	sxth	r2, r2
 8007322:	85c2      	strh	r2, [r0, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8007324:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8007328:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800732a:	db28      	blt.n	800737e <VSS_CalcElAngle+0x9a>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800732c:	eba1 0e0e 	sub.w	lr, r1, lr
 8007330:	fa0f fe8e 	sxth.w	lr, lr
 8007334:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8007336:	f9b0 4036 	ldrsh.w	r4, [r0, #54]	; 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800733a:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800733e:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8007342:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 8007346:	fb12 f205 	smulbb	r2, r2, r5
 800734a:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800734c:	db10      	blt.n	8007370 <VSS_CalcElAngle+0x8c>
            pHandle->bTransitionLocked = true;
 800734e:	2301      	movs	r3, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8007350:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 8007352:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8007356:	b213      	sxth	r3, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8007358:	8083      	strh	r3, [r0, #4]
}
 800735a:	4618      	mov	r0, r3
 800735c:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800735e:	f9b1 3000 	ldrsh.w	r3, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8007362:	7002      	strb	r2, [r0, #0]
          pHandle->bTransitionEnded = true;
 8007364:	2401      	movs	r4, #1
 8007366:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800736a:	8083      	strh	r3, [r0, #4]
}
 800736c:	4618      	mov	r0, r3
 800736e:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 8007370:	f890 4032 	ldrb.w	r4, [r0, #50]	; 0x32
 8007374:	2c00      	cmp	r4, #0
 8007376:	d0ef      	beq.n	8007358 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 8007378:	440a      	add	r2, r1
 800737a:	b213      	sxth	r3, r2
 800737c:	e7ec      	b.n	8007358 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 800737e:	ebae 0e01 	sub.w	lr, lr, r1
 8007382:	fa0f fe8e 	sxth.w	lr, lr
 8007386:	f64f 75ff 	movw	r5, #65535	; 0xffff
 800738a:	e7d4      	b.n	8007336 <VSS_CalcElAngle+0x52>

0800738c <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 800738c:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 800738e:	2b01      	cmp	r3, #1
 8007390:	d923      	bls.n	80073da <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 8007392:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 8007394:	6a42      	ldr	r2, [r0, #36]	; 0x24
 8007396:	6a04      	ldr	r4, [r0, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 8007398:	8b43      	ldrh	r3, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 800739a:	4422      	add	r2, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 800739c:	ea4f 4c22 	mov.w	ip, r2, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80073a0:	69c4      	ldr	r4, [r0, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80073a2:	6242      	str	r2, [r0, #36]	; 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80073a4:	fb0c f303 	mul.w	r3, ip, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80073a8:	7842      	ldrb	r2, [r0, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 80073aa:	f8a0 c00e 	strh.w	ip, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80073ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80073b2:	fb04 f202 	mul.w	r2, r4, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80073b6:	005b      	lsls	r3, r3, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80073b8:	fb93 f3f2 	sdiv	r3, r3, r2
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 80073bc:	b21b      	sxth	r3, r3
 80073be:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 80073c0:	8d02      	ldrh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80073c2:	8183      	strh	r3, [r0, #12]
      pHandle->hRemainingStep--;
 80073c4:	1e53      	subs	r3, r2, #1
 80073c6:	8503      	strh	r3, [r0, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 80073c8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80073cc:	b983      	cbnz	r3, 80073f0 <VSS_CalcAvrgMecSpeedUnit+0x64>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80073ce:	78c2      	ldrb	r2, [r0, #3]
 80073d0:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 80073d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80073d6:	4618      	mov	r0, r3
 80073d8:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 80073da:	d00d      	beq.n	80073f8 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80073dc:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 80073e0:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 80073e2:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80073e6:	bb03      	cbnz	r3, 800742a <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80073e8:	78c2      	ldrb	r2, [r0, #3]
 80073ea:	7002      	strb	r2, [r0, #0]
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	4770      	bx	lr
 80073f0:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 80073f4:	f7ff bb84 	b.w	8006b00 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 80073f8:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 80073fc:	f8a1 c000 	strh.w	ip, [r1]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007400:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007402:	69c2      	ldr	r2, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007404:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007408:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 800740c:	fb02 f20c 	mul.w	r2, r2, ip
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007410:	005b      	lsls	r3, r3, #1
 8007412:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007416:	7842      	ldrb	r2, [r0, #1]
 8007418:	fb12 f303 	smulbb	r3, r2, r3
 800741c:	81c3      	strh	r3, [r0, #14]
    if (false == pHandle->bTransitionEnded)
 800741e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
      pHandle->hRemainingStep = 0U;
 8007422:	2200      	movs	r2, #0
 8007424:	8502      	strh	r2, [r0, #40]	; 0x28
    if (false == pHandle->bTransitionEnded)
 8007426:	2b00      	cmp	r3, #0
 8007428:	d0de      	beq.n	80073e8 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 800742a:	f7ff bb69 	b.w	8006b00 <SPD_IsMecSpeedReliable>
 800742e:	bf00      	nop

08007430 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007430:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8007432:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007434:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 8007438:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 800743a:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800743c:	4770      	bx	lr
 800743e:	bf00      	nop

08007440 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8007440:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007444:	b99b      	cbnz	r3, 800746e <VSS_SetMecAcceleration+0x2e>
{
 8007446:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 8007448:	b992      	cbnz	r2, 8007470 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800744a:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 800744c:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 800744e:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007450:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007454:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007458:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 800745a:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 800745e:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 8007462:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007464:	fb1c f303 	smulbb	r3, ip, r3
 8007468:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800746a:	8541      	strh	r1, [r0, #42]	; 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 800746c:	bd10      	pop	{r4, pc}
 800746e:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8007470:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8007472:	4c16      	ldr	r4, [pc, #88]	; (80074cc <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007474:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8007478:	fb03 f202 	mul.w	r2, r3, r2
 800747c:	fba4 2302 	umull	r2, r3, r4, r2
 8007480:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8007484:	3301      	adds	r3, #1
 8007486:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 8007488:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 800748a:	b923      	cbnz	r3, 8007496 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 800748c:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007490:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007492:	6243      	str	r3, [r0, #36]	; 0x24
}
 8007494:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007496:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007498:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 800749a:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 800749c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80074a0:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 80074a4:	69c2      	ldr	r2, [r0, #28]
 80074a6:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 80074aa:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 80074ae:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80074b2:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 80074b6:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 80074b8:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 80074bc:	fb04 f303 	mul.w	r3, r4, r3
 80074c0:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 80074c2:	ea4f 430c 	mov.w	r3, ip, lsl #16
 80074c6:	6243      	str	r3, [r0, #36]	; 0x24
 80074c8:	e7e4      	b.n	8007494 <VSS_SetMecAcceleration+0x54>
 80074ca:	bf00      	nop
 80074cc:	10624dd3 	.word	0x10624dd3

080074d0 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 80074d0:	b151      	cbz	r1, 80074e8 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 80074d2:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
      pHandle->bTransitionStarted = true;
 80074d6:	2201      	movs	r2, #1
 80074d8:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
      if (0 == pHandle->hTransitionSteps)
 80074dc:	b923      	cbnz	r3, 80074e8 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 80074de:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 80074e2:	7003      	strb	r3, [r0, #0]
        bAux = false;
 80074e4:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 80074e6:	4770      	bx	lr
  bool bAux = true;
 80074e8:	2001      	movs	r0, #1
 80074ea:	4770      	bx	lr

080074ec <VSS_TransitionEnded>:
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 80074ec:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 80074f0:	4770      	bx	lr
 80074f2:	bf00      	nop

080074f4 <__libc_init_array>:
 80074f4:	b570      	push	{r4, r5, r6, lr}
 80074f6:	4d0d      	ldr	r5, [pc, #52]	; (800752c <__libc_init_array+0x38>)
 80074f8:	4c0d      	ldr	r4, [pc, #52]	; (8007530 <__libc_init_array+0x3c>)
 80074fa:	1b64      	subs	r4, r4, r5
 80074fc:	10a4      	asrs	r4, r4, #2
 80074fe:	2600      	movs	r6, #0
 8007500:	42a6      	cmp	r6, r4
 8007502:	d109      	bne.n	8007518 <__libc_init_array+0x24>
 8007504:	4d0b      	ldr	r5, [pc, #44]	; (8007534 <__libc_init_array+0x40>)
 8007506:	4c0c      	ldr	r4, [pc, #48]	; (8007538 <__libc_init_array+0x44>)
 8007508:	f000 f82e 	bl	8007568 <_init>
 800750c:	1b64      	subs	r4, r4, r5
 800750e:	10a4      	asrs	r4, r4, #2
 8007510:	2600      	movs	r6, #0
 8007512:	42a6      	cmp	r6, r4
 8007514:	d105      	bne.n	8007522 <__libc_init_array+0x2e>
 8007516:	bd70      	pop	{r4, r5, r6, pc}
 8007518:	f855 3b04 	ldr.w	r3, [r5], #4
 800751c:	4798      	blx	r3
 800751e:	3601      	adds	r6, #1
 8007520:	e7ee      	b.n	8007500 <__libc_init_array+0xc>
 8007522:	f855 3b04 	ldr.w	r3, [r5], #4
 8007526:	4798      	blx	r3
 8007528:	3601      	adds	r6, #1
 800752a:	e7f2      	b.n	8007512 <__libc_init_array+0x1e>
 800752c:	080079f0 	.word	0x080079f0
 8007530:	080079f0 	.word	0x080079f0
 8007534:	080079f0 	.word	0x080079f0
 8007538:	080079f4 	.word	0x080079f4

0800753c <memcpy>:
 800753c:	440a      	add	r2, r1
 800753e:	4291      	cmp	r1, r2
 8007540:	f100 33ff 	add.w	r3, r0, #4294967295
 8007544:	d100      	bne.n	8007548 <memcpy+0xc>
 8007546:	4770      	bx	lr
 8007548:	b510      	push	{r4, lr}
 800754a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800754e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007552:	4291      	cmp	r1, r2
 8007554:	d1f9      	bne.n	800754a <memcpy+0xe>
 8007556:	bd10      	pop	{r4, pc}

08007558 <memset>:
 8007558:	4402      	add	r2, r0
 800755a:	4603      	mov	r3, r0
 800755c:	4293      	cmp	r3, r2
 800755e:	d100      	bne.n	8007562 <memset+0xa>
 8007560:	4770      	bx	lr
 8007562:	f803 1b01 	strb.w	r1, [r3], #1
 8007566:	e7f9      	b.n	800755c <memset+0x4>

08007568 <_init>:
 8007568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800756a:	bf00      	nop
 800756c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800756e:	bc08      	pop	{r3}
 8007570:	469e      	mov	lr, r3
 8007572:	4770      	bx	lr

08007574 <_fini>:
 8007574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007576:	bf00      	nop
 8007578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800757a:	bc08      	pop	{r3}
 800757c:	469e      	mov	lr, r3
 800757e:	4770      	bx	lr
