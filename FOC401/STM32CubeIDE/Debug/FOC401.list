
FOC401.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007a18  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000468  08007bb0  08007bb0  00017bb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008018  08008018  00020684  2**0
                  CONTENTS
  4 .ARM          00000008  08008018  08008018  00018018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008020  08008020  00020684  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008020  08008020  00018020  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008024  08008024  00018024  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000684  20000000  08008028  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001570  20000688  080086ac  00020688  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001bf8  080086ac  00021bf8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020684  2**0
                  CONTENTS, READONLY
 12 .debug_line   0003593c  00000000  00000000  000206b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_info   00035a84  00000000  00000000  00055ff0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00007177  00000000  00000000  0008ba74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001888  00000000  00000000  00092bf0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_str    000aeba7  00000000  00000000  00094478  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_ranges 00004098  00000000  00000000  00143020  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_loc    00023a05  00000000  00000000  001470b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0000958e  00000000  00000000  0016aabd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0017404b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004688  00000000  00000000  0017409c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000688 	.word	0x20000688
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007b98 	.word	0x08007b98

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000068c 	.word	0x2000068c
 80001d4:	08007b98 	.word	0x08007b98

080001d8 <__aeabi_dmul>:
 80001d8:	b570      	push	{r4, r5, r6, lr}
 80001da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001e6:	bf1d      	ittte	ne
 80001e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001ec:	ea94 0f0c 	teqne	r4, ip
 80001f0:	ea95 0f0c 	teqne	r5, ip
 80001f4:	f000 f8de 	bleq	80003b4 <__aeabi_dmul+0x1dc>
 80001f8:	442c      	add	r4, r5
 80001fa:	ea81 0603 	eor.w	r6, r1, r3
 80001fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000202:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000206:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800020a:	bf18      	it	ne
 800020c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000210:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000214:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000218:	d038      	beq.n	800028c <__aeabi_dmul+0xb4>
 800021a:	fba0 ce02 	umull	ip, lr, r0, r2
 800021e:	f04f 0500 	mov.w	r5, #0
 8000222:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000226:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800022a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800022e:	f04f 0600 	mov.w	r6, #0
 8000232:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000236:	f09c 0f00 	teq	ip, #0
 800023a:	bf18      	it	ne
 800023c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000240:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000244:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000248:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800024c:	d204      	bcs.n	8000258 <__aeabi_dmul+0x80>
 800024e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000252:	416d      	adcs	r5, r5
 8000254:	eb46 0606 	adc.w	r6, r6, r6
 8000258:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800025c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000260:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000264:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000268:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800026c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000270:	bf88      	it	hi
 8000272:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000276:	d81e      	bhi.n	80002b6 <__aeabi_dmul+0xde>
 8000278:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	bd70      	pop	{r4, r5, r6, pc}
 800028c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000290:	ea46 0101 	orr.w	r1, r6, r1
 8000294:	ea40 0002 	orr.w	r0, r0, r2
 8000298:	ea81 0103 	eor.w	r1, r1, r3
 800029c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80002a0:	bfc2      	ittt	gt
 80002a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80002a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80002aa:	bd70      	popgt	{r4, r5, r6, pc}
 80002ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002b0:	f04f 0e00 	mov.w	lr, #0
 80002b4:	3c01      	subs	r4, #1
 80002b6:	f300 80ab 	bgt.w	8000410 <__aeabi_dmul+0x238>
 80002ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002be:	bfde      	ittt	le
 80002c0:	2000      	movle	r0, #0
 80002c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002c6:	bd70      	pople	{r4, r5, r6, pc}
 80002c8:	f1c4 0400 	rsb	r4, r4, #0
 80002cc:	3c20      	subs	r4, #32
 80002ce:	da35      	bge.n	800033c <__aeabi_dmul+0x164>
 80002d0:	340c      	adds	r4, #12
 80002d2:	dc1b      	bgt.n	800030c <__aeabi_dmul+0x134>
 80002d4:	f104 0414 	add.w	r4, r4, #20
 80002d8:	f1c4 0520 	rsb	r5, r4, #32
 80002dc:	fa00 f305 	lsl.w	r3, r0, r5
 80002e0:	fa20 f004 	lsr.w	r0, r0, r4
 80002e4:	fa01 f205 	lsl.w	r2, r1, r5
 80002e8:	ea40 0002 	orr.w	r0, r0, r2
 80002ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002f8:	fa21 f604 	lsr.w	r6, r1, r4
 80002fc:	eb42 0106 	adc.w	r1, r2, r6
 8000300:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000304:	bf08      	it	eq
 8000306:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800030a:	bd70      	pop	{r4, r5, r6, pc}
 800030c:	f1c4 040c 	rsb	r4, r4, #12
 8000310:	f1c4 0520 	rsb	r5, r4, #32
 8000314:	fa00 f304 	lsl.w	r3, r0, r4
 8000318:	fa20 f005 	lsr.w	r0, r0, r5
 800031c:	fa01 f204 	lsl.w	r2, r1, r4
 8000320:	ea40 0002 	orr.w	r0, r0, r2
 8000324:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000328:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000334:	bf08      	it	eq
 8000336:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800033a:	bd70      	pop	{r4, r5, r6, pc}
 800033c:	f1c4 0520 	rsb	r5, r4, #32
 8000340:	fa00 f205 	lsl.w	r2, r0, r5
 8000344:	ea4e 0e02 	orr.w	lr, lr, r2
 8000348:	fa20 f304 	lsr.w	r3, r0, r4
 800034c:	fa01 f205 	lsl.w	r2, r1, r5
 8000350:	ea43 0302 	orr.w	r3, r3, r2
 8000354:	fa21 f004 	lsr.w	r0, r1, r4
 8000358:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800035c:	fa21 f204 	lsr.w	r2, r1, r4
 8000360:	ea20 0002 	bic.w	r0, r0, r2
 8000364:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000368:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800036c:	bf08      	it	eq
 800036e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000372:	bd70      	pop	{r4, r5, r6, pc}
 8000374:	f094 0f00 	teq	r4, #0
 8000378:	d10f      	bne.n	800039a <__aeabi_dmul+0x1c2>
 800037a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800037e:	0040      	lsls	r0, r0, #1
 8000380:	eb41 0101 	adc.w	r1, r1, r1
 8000384:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000388:	bf08      	it	eq
 800038a:	3c01      	subeq	r4, #1
 800038c:	d0f7      	beq.n	800037e <__aeabi_dmul+0x1a6>
 800038e:	ea41 0106 	orr.w	r1, r1, r6
 8000392:	f095 0f00 	teq	r5, #0
 8000396:	bf18      	it	ne
 8000398:	4770      	bxne	lr
 800039a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800039e:	0052      	lsls	r2, r2, #1
 80003a0:	eb43 0303 	adc.w	r3, r3, r3
 80003a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80003a8:	bf08      	it	eq
 80003aa:	3d01      	subeq	r5, #1
 80003ac:	d0f7      	beq.n	800039e <__aeabi_dmul+0x1c6>
 80003ae:	ea43 0306 	orr.w	r3, r3, r6
 80003b2:	4770      	bx	lr
 80003b4:	ea94 0f0c 	teq	r4, ip
 80003b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003bc:	bf18      	it	ne
 80003be:	ea95 0f0c 	teqne	r5, ip
 80003c2:	d00c      	beq.n	80003de <__aeabi_dmul+0x206>
 80003c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003c8:	bf18      	it	ne
 80003ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ce:	d1d1      	bne.n	8000374 <__aeabi_dmul+0x19c>
 80003d0:	ea81 0103 	eor.w	r1, r1, r3
 80003d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003d8:	f04f 0000 	mov.w	r0, #0
 80003dc:	bd70      	pop	{r4, r5, r6, pc}
 80003de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003e2:	bf06      	itte	eq
 80003e4:	4610      	moveq	r0, r2
 80003e6:	4619      	moveq	r1, r3
 80003e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003ec:	d019      	beq.n	8000422 <__aeabi_dmul+0x24a>
 80003ee:	ea94 0f0c 	teq	r4, ip
 80003f2:	d102      	bne.n	80003fa <__aeabi_dmul+0x222>
 80003f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003f8:	d113      	bne.n	8000422 <__aeabi_dmul+0x24a>
 80003fa:	ea95 0f0c 	teq	r5, ip
 80003fe:	d105      	bne.n	800040c <__aeabi_dmul+0x234>
 8000400:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000404:	bf1c      	itt	ne
 8000406:	4610      	movne	r0, r2
 8000408:	4619      	movne	r1, r3
 800040a:	d10a      	bne.n	8000422 <__aeabi_dmul+0x24a>
 800040c:	ea81 0103 	eor.w	r1, r1, r3
 8000410:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000414:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000418:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800041c:	f04f 0000 	mov.w	r0, #0
 8000420:	bd70      	pop	{r4, r5, r6, pc}
 8000422:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000426:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800042a:	bd70      	pop	{r4, r5, r6, pc}

0800042c <__aeabi_drsub>:
 800042c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000430:	e002      	b.n	8000438 <__adddf3>
 8000432:	bf00      	nop

08000434 <__aeabi_dsub>:
 8000434:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000438 <__adddf3>:
 8000438:	b530      	push	{r4, r5, lr}
 800043a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800043e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000442:	ea94 0f05 	teq	r4, r5
 8000446:	bf08      	it	eq
 8000448:	ea90 0f02 	teqeq	r0, r2
 800044c:	bf1f      	itttt	ne
 800044e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000452:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000456:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800045a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800045e:	f000 80e2 	beq.w	8000626 <__adddf3+0x1ee>
 8000462:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000466:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800046a:	bfb8      	it	lt
 800046c:	426d      	neglt	r5, r5
 800046e:	dd0c      	ble.n	800048a <__adddf3+0x52>
 8000470:	442c      	add	r4, r5
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	ea82 0000 	eor.w	r0, r2, r0
 800047e:	ea83 0101 	eor.w	r1, r3, r1
 8000482:	ea80 0202 	eor.w	r2, r0, r2
 8000486:	ea81 0303 	eor.w	r3, r1, r3
 800048a:	2d36      	cmp	r5, #54	; 0x36
 800048c:	bf88      	it	hi
 800048e:	bd30      	pophi	{r4, r5, pc}
 8000490:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000494:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000498:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800049c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80004a0:	d002      	beq.n	80004a8 <__adddf3+0x70>
 80004a2:	4240      	negs	r0, r0
 80004a4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a8:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80004ac:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004b0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004b4:	d002      	beq.n	80004bc <__adddf3+0x84>
 80004b6:	4252      	negs	r2, r2
 80004b8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004bc:	ea94 0f05 	teq	r4, r5
 80004c0:	f000 80a7 	beq.w	8000612 <__adddf3+0x1da>
 80004c4:	f1a4 0401 	sub.w	r4, r4, #1
 80004c8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004cc:	db0d      	blt.n	80004ea <__adddf3+0xb2>
 80004ce:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004d2:	fa22 f205 	lsr.w	r2, r2, r5
 80004d6:	1880      	adds	r0, r0, r2
 80004d8:	f141 0100 	adc.w	r1, r1, #0
 80004dc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004e0:	1880      	adds	r0, r0, r2
 80004e2:	fa43 f305 	asr.w	r3, r3, r5
 80004e6:	4159      	adcs	r1, r3
 80004e8:	e00e      	b.n	8000508 <__adddf3+0xd0>
 80004ea:	f1a5 0520 	sub.w	r5, r5, #32
 80004ee:	f10e 0e20 	add.w	lr, lr, #32
 80004f2:	2a01      	cmp	r2, #1
 80004f4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004f8:	bf28      	it	cs
 80004fa:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004fe:	fa43 f305 	asr.w	r3, r3, r5
 8000502:	18c0      	adds	r0, r0, r3
 8000504:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	d507      	bpl.n	800051e <__adddf3+0xe6>
 800050e:	f04f 0e00 	mov.w	lr, #0
 8000512:	f1dc 0c00 	rsbs	ip, ip, #0
 8000516:	eb7e 0000 	sbcs.w	r0, lr, r0
 800051a:	eb6e 0101 	sbc.w	r1, lr, r1
 800051e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000522:	d31b      	bcc.n	800055c <__adddf3+0x124>
 8000524:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000528:	d30c      	bcc.n	8000544 <__adddf3+0x10c>
 800052a:	0849      	lsrs	r1, r1, #1
 800052c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000530:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000534:	f104 0401 	add.w	r4, r4, #1
 8000538:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800053c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000540:	f080 809a 	bcs.w	8000678 <__adddf3+0x240>
 8000544:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000548:	bf08      	it	eq
 800054a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800054e:	f150 0000 	adcs.w	r0, r0, #0
 8000552:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000556:	ea41 0105 	orr.w	r1, r1, r5
 800055a:	bd30      	pop	{r4, r5, pc}
 800055c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000560:	4140      	adcs	r0, r0
 8000562:	eb41 0101 	adc.w	r1, r1, r1
 8000566:	3c01      	subs	r4, #1
 8000568:	bf28      	it	cs
 800056a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800056e:	d2e9      	bcs.n	8000544 <__adddf3+0x10c>
 8000570:	f091 0f00 	teq	r1, #0
 8000574:	bf04      	itt	eq
 8000576:	4601      	moveq	r1, r0
 8000578:	2000      	moveq	r0, #0
 800057a:	fab1 f381 	clz	r3, r1
 800057e:	bf08      	it	eq
 8000580:	3320      	addeq	r3, #32
 8000582:	f1a3 030b 	sub.w	r3, r3, #11
 8000586:	f1b3 0220 	subs.w	r2, r3, #32
 800058a:	da0c      	bge.n	80005a6 <__adddf3+0x16e>
 800058c:	320c      	adds	r2, #12
 800058e:	dd08      	ble.n	80005a2 <__adddf3+0x16a>
 8000590:	f102 0c14 	add.w	ip, r2, #20
 8000594:	f1c2 020c 	rsb	r2, r2, #12
 8000598:	fa01 f00c 	lsl.w	r0, r1, ip
 800059c:	fa21 f102 	lsr.w	r1, r1, r2
 80005a0:	e00c      	b.n	80005bc <__adddf3+0x184>
 80005a2:	f102 0214 	add.w	r2, r2, #20
 80005a6:	bfd8      	it	le
 80005a8:	f1c2 0c20 	rsble	ip, r2, #32
 80005ac:	fa01 f102 	lsl.w	r1, r1, r2
 80005b0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005b4:	bfdc      	itt	le
 80005b6:	ea41 010c 	orrle.w	r1, r1, ip
 80005ba:	4090      	lslle	r0, r2
 80005bc:	1ae4      	subs	r4, r4, r3
 80005be:	bfa2      	ittt	ge
 80005c0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005c4:	4329      	orrge	r1, r5
 80005c6:	bd30      	popge	{r4, r5, pc}
 80005c8:	ea6f 0404 	mvn.w	r4, r4
 80005cc:	3c1f      	subs	r4, #31
 80005ce:	da1c      	bge.n	800060a <__adddf3+0x1d2>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc0e      	bgt.n	80005f2 <__adddf3+0x1ba>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0220 	rsb	r2, r4, #32
 80005dc:	fa20 f004 	lsr.w	r0, r0, r4
 80005e0:	fa01 f302 	lsl.w	r3, r1, r2
 80005e4:	ea40 0003 	orr.w	r0, r0, r3
 80005e8:	fa21 f304 	lsr.w	r3, r1, r4
 80005ec:	ea45 0103 	orr.w	r1, r5, r3
 80005f0:	bd30      	pop	{r4, r5, pc}
 80005f2:	f1c4 040c 	rsb	r4, r4, #12
 80005f6:	f1c4 0220 	rsb	r2, r4, #32
 80005fa:	fa20 f002 	lsr.w	r0, r0, r2
 80005fe:	fa01 f304 	lsl.w	r3, r1, r4
 8000602:	ea40 0003 	orr.w	r0, r0, r3
 8000606:	4629      	mov	r1, r5
 8000608:	bd30      	pop	{r4, r5, pc}
 800060a:	fa21 f004 	lsr.w	r0, r1, r4
 800060e:	4629      	mov	r1, r5
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	f094 0f00 	teq	r4, #0
 8000616:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800061a:	bf06      	itte	eq
 800061c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000620:	3401      	addeq	r4, #1
 8000622:	3d01      	subne	r5, #1
 8000624:	e74e      	b.n	80004c4 <__adddf3+0x8c>
 8000626:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800062a:	bf18      	it	ne
 800062c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000630:	d029      	beq.n	8000686 <__adddf3+0x24e>
 8000632:	ea94 0f05 	teq	r4, r5
 8000636:	bf08      	it	eq
 8000638:	ea90 0f02 	teqeq	r0, r2
 800063c:	d005      	beq.n	800064a <__adddf3+0x212>
 800063e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000642:	bf04      	itt	eq
 8000644:	4619      	moveq	r1, r3
 8000646:	4610      	moveq	r0, r2
 8000648:	bd30      	pop	{r4, r5, pc}
 800064a:	ea91 0f03 	teq	r1, r3
 800064e:	bf1e      	ittt	ne
 8000650:	2100      	movne	r1, #0
 8000652:	2000      	movne	r0, #0
 8000654:	bd30      	popne	{r4, r5, pc}
 8000656:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800065a:	d105      	bne.n	8000668 <__adddf3+0x230>
 800065c:	0040      	lsls	r0, r0, #1
 800065e:	4149      	adcs	r1, r1
 8000660:	bf28      	it	cs
 8000662:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000666:	bd30      	pop	{r4, r5, pc}
 8000668:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800066c:	bf3c      	itt	cc
 800066e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000672:	bd30      	popcc	{r4, r5, pc}
 8000674:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000678:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800067c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000680:	f04f 0000 	mov.w	r0, #0
 8000684:	bd30      	pop	{r4, r5, pc}
 8000686:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800068a:	bf1a      	itte	ne
 800068c:	4619      	movne	r1, r3
 800068e:	4610      	movne	r0, r2
 8000690:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000694:	bf1c      	itt	ne
 8000696:	460b      	movne	r3, r1
 8000698:	4602      	movne	r2, r0
 800069a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800069e:	bf06      	itte	eq
 80006a0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80006a4:	ea91 0f03 	teqeq	r1, r3
 80006a8:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80006ac:	bd30      	pop	{r4, r5, pc}
 80006ae:	bf00      	nop

080006b0 <__aeabi_ui2d>:
 80006b0:	f090 0f00 	teq	r0, #0
 80006b4:	bf04      	itt	eq
 80006b6:	2100      	moveq	r1, #0
 80006b8:	4770      	bxeq	lr
 80006ba:	b530      	push	{r4, r5, lr}
 80006bc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006c0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006c4:	f04f 0500 	mov.w	r5, #0
 80006c8:	f04f 0100 	mov.w	r1, #0
 80006cc:	e750      	b.n	8000570 <__adddf3+0x138>
 80006ce:	bf00      	nop

080006d0 <__aeabi_i2d>:
 80006d0:	f090 0f00 	teq	r0, #0
 80006d4:	bf04      	itt	eq
 80006d6:	2100      	moveq	r1, #0
 80006d8:	4770      	bxeq	lr
 80006da:	b530      	push	{r4, r5, lr}
 80006dc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006e0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006e4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006e8:	bf48      	it	mi
 80006ea:	4240      	negmi	r0, r0
 80006ec:	f04f 0100 	mov.w	r1, #0
 80006f0:	e73e      	b.n	8000570 <__adddf3+0x138>
 80006f2:	bf00      	nop

080006f4 <__aeabi_f2d>:
 80006f4:	0042      	lsls	r2, r0, #1
 80006f6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006fa:	ea4f 0131 	mov.w	r1, r1, rrx
 80006fe:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000702:	bf1f      	itttt	ne
 8000704:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8000708:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 800070c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000710:	4770      	bxne	lr
 8000712:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000716:	bf08      	it	eq
 8000718:	4770      	bxeq	lr
 800071a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800071e:	bf04      	itt	eq
 8000720:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000724:	4770      	bxeq	lr
 8000726:	b530      	push	{r4, r5, lr}
 8000728:	f44f 7460 	mov.w	r4, #896	; 0x380
 800072c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000734:	e71c      	b.n	8000570 <__adddf3+0x138>
 8000736:	bf00      	nop

08000738 <__aeabi_ul2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f04f 0500 	mov.w	r5, #0
 8000746:	e00a      	b.n	800075e <__aeabi_l2d+0x16>

08000748 <__aeabi_l2d>:
 8000748:	ea50 0201 	orrs.w	r2, r0, r1
 800074c:	bf08      	it	eq
 800074e:	4770      	bxeq	lr
 8000750:	b530      	push	{r4, r5, lr}
 8000752:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000756:	d502      	bpl.n	800075e <__aeabi_l2d+0x16>
 8000758:	4240      	negs	r0, r0
 800075a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800075e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000762:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000766:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800076a:	f43f aed8 	beq.w	800051e <__adddf3+0xe6>
 800076e:	f04f 0203 	mov.w	r2, #3
 8000772:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000776:	bf18      	it	ne
 8000778:	3203      	addne	r2, #3
 800077a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800077e:	bf18      	it	ne
 8000780:	3203      	addne	r2, #3
 8000782:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000786:	f1c2 0320 	rsb	r3, r2, #32
 800078a:	fa00 fc03 	lsl.w	ip, r0, r3
 800078e:	fa20 f002 	lsr.w	r0, r0, r2
 8000792:	fa01 fe03 	lsl.w	lr, r1, r3
 8000796:	ea40 000e 	orr.w	r0, r0, lr
 800079a:	fa21 f102 	lsr.w	r1, r1, r2
 800079e:	4414      	add	r4, r2
 80007a0:	e6bd      	b.n	800051e <__adddf3+0xe6>
 80007a2:	bf00      	nop

080007a4 <__aeabi_d2iz>:
 80007a4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007a8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80007ac:	d215      	bcs.n	80007da <__aeabi_d2iz+0x36>
 80007ae:	d511      	bpl.n	80007d4 <__aeabi_d2iz+0x30>
 80007b0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007b4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007b8:	d912      	bls.n	80007e0 <__aeabi_d2iz+0x3c>
 80007ba:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007be:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007c2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007c6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ca:	fa23 f002 	lsr.w	r0, r3, r2
 80007ce:	bf18      	it	ne
 80007d0:	4240      	negne	r0, r0
 80007d2:	4770      	bx	lr
 80007d4:	f04f 0000 	mov.w	r0, #0
 80007d8:	4770      	bx	lr
 80007da:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007de:	d105      	bne.n	80007ec <__aeabi_d2iz+0x48>
 80007e0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007e4:	bf08      	it	eq
 80007e6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007ea:	4770      	bx	lr
 80007ec:	f04f 0000 	mov.w	r0, #0
 80007f0:	4770      	bx	lr
 80007f2:	bf00      	nop

080007f4 <__aeabi_uldivmod>:
 80007f4:	b953      	cbnz	r3, 800080c <__aeabi_uldivmod+0x18>
 80007f6:	b94a      	cbnz	r2, 800080c <__aeabi_uldivmod+0x18>
 80007f8:	2900      	cmp	r1, #0
 80007fa:	bf08      	it	eq
 80007fc:	2800      	cmpeq	r0, #0
 80007fe:	bf1c      	itt	ne
 8000800:	f04f 31ff 	movne.w	r1, #4294967295
 8000804:	f04f 30ff 	movne.w	r0, #4294967295
 8000808:	f000 b974 	b.w	8000af4 <__aeabi_idiv0>
 800080c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000810:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000814:	f000 f806 	bl	8000824 <__udivmoddi4>
 8000818:	f8dd e004 	ldr.w	lr, [sp, #4]
 800081c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000820:	b004      	add	sp, #16
 8000822:	4770      	bx	lr

08000824 <__udivmoddi4>:
 8000824:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000828:	9d08      	ldr	r5, [sp, #32]
 800082a:	4604      	mov	r4, r0
 800082c:	468e      	mov	lr, r1
 800082e:	2b00      	cmp	r3, #0
 8000830:	d14d      	bne.n	80008ce <__udivmoddi4+0xaa>
 8000832:	428a      	cmp	r2, r1
 8000834:	4694      	mov	ip, r2
 8000836:	d969      	bls.n	800090c <__udivmoddi4+0xe8>
 8000838:	fab2 f282 	clz	r2, r2
 800083c:	b152      	cbz	r2, 8000854 <__udivmoddi4+0x30>
 800083e:	fa01 f302 	lsl.w	r3, r1, r2
 8000842:	f1c2 0120 	rsb	r1, r2, #32
 8000846:	fa20 f101 	lsr.w	r1, r0, r1
 800084a:	fa0c fc02 	lsl.w	ip, ip, r2
 800084e:	ea41 0e03 	orr.w	lr, r1, r3
 8000852:	4094      	lsls	r4, r2
 8000854:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000858:	0c21      	lsrs	r1, r4, #16
 800085a:	fbbe f6f8 	udiv	r6, lr, r8
 800085e:	fa1f f78c 	uxth.w	r7, ip
 8000862:	fb08 e316 	mls	r3, r8, r6, lr
 8000866:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800086a:	fb06 f107 	mul.w	r1, r6, r7
 800086e:	4299      	cmp	r1, r3
 8000870:	d90a      	bls.n	8000888 <__udivmoddi4+0x64>
 8000872:	eb1c 0303 	adds.w	r3, ip, r3
 8000876:	f106 30ff 	add.w	r0, r6, #4294967295
 800087a:	f080 811f 	bcs.w	8000abc <__udivmoddi4+0x298>
 800087e:	4299      	cmp	r1, r3
 8000880:	f240 811c 	bls.w	8000abc <__udivmoddi4+0x298>
 8000884:	3e02      	subs	r6, #2
 8000886:	4463      	add	r3, ip
 8000888:	1a5b      	subs	r3, r3, r1
 800088a:	b2a4      	uxth	r4, r4
 800088c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000890:	fb08 3310 	mls	r3, r8, r0, r3
 8000894:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000898:	fb00 f707 	mul.w	r7, r0, r7
 800089c:	42a7      	cmp	r7, r4
 800089e:	d90a      	bls.n	80008b6 <__udivmoddi4+0x92>
 80008a0:	eb1c 0404 	adds.w	r4, ip, r4
 80008a4:	f100 33ff 	add.w	r3, r0, #4294967295
 80008a8:	f080 810a 	bcs.w	8000ac0 <__udivmoddi4+0x29c>
 80008ac:	42a7      	cmp	r7, r4
 80008ae:	f240 8107 	bls.w	8000ac0 <__udivmoddi4+0x29c>
 80008b2:	4464      	add	r4, ip
 80008b4:	3802      	subs	r0, #2
 80008b6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80008ba:	1be4      	subs	r4, r4, r7
 80008bc:	2600      	movs	r6, #0
 80008be:	b11d      	cbz	r5, 80008c8 <__udivmoddi4+0xa4>
 80008c0:	40d4      	lsrs	r4, r2
 80008c2:	2300      	movs	r3, #0
 80008c4:	e9c5 4300 	strd	r4, r3, [r5]
 80008c8:	4631      	mov	r1, r6
 80008ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008ce:	428b      	cmp	r3, r1
 80008d0:	d909      	bls.n	80008e6 <__udivmoddi4+0xc2>
 80008d2:	2d00      	cmp	r5, #0
 80008d4:	f000 80ef 	beq.w	8000ab6 <__udivmoddi4+0x292>
 80008d8:	2600      	movs	r6, #0
 80008da:	e9c5 0100 	strd	r0, r1, [r5]
 80008de:	4630      	mov	r0, r6
 80008e0:	4631      	mov	r1, r6
 80008e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80008e6:	fab3 f683 	clz	r6, r3
 80008ea:	2e00      	cmp	r6, #0
 80008ec:	d14a      	bne.n	8000984 <__udivmoddi4+0x160>
 80008ee:	428b      	cmp	r3, r1
 80008f0:	d302      	bcc.n	80008f8 <__udivmoddi4+0xd4>
 80008f2:	4282      	cmp	r2, r0
 80008f4:	f200 80f9 	bhi.w	8000aea <__udivmoddi4+0x2c6>
 80008f8:	1a84      	subs	r4, r0, r2
 80008fa:	eb61 0303 	sbc.w	r3, r1, r3
 80008fe:	2001      	movs	r0, #1
 8000900:	469e      	mov	lr, r3
 8000902:	2d00      	cmp	r5, #0
 8000904:	d0e0      	beq.n	80008c8 <__udivmoddi4+0xa4>
 8000906:	e9c5 4e00 	strd	r4, lr, [r5]
 800090a:	e7dd      	b.n	80008c8 <__udivmoddi4+0xa4>
 800090c:	b902      	cbnz	r2, 8000910 <__udivmoddi4+0xec>
 800090e:	deff      	udf	#255	; 0xff
 8000910:	fab2 f282 	clz	r2, r2
 8000914:	2a00      	cmp	r2, #0
 8000916:	f040 8092 	bne.w	8000a3e <__udivmoddi4+0x21a>
 800091a:	eba1 010c 	sub.w	r1, r1, ip
 800091e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000922:	fa1f fe8c 	uxth.w	lr, ip
 8000926:	2601      	movs	r6, #1
 8000928:	0c20      	lsrs	r0, r4, #16
 800092a:	fbb1 f3f7 	udiv	r3, r1, r7
 800092e:	fb07 1113 	mls	r1, r7, r3, r1
 8000932:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000936:	fb0e f003 	mul.w	r0, lr, r3
 800093a:	4288      	cmp	r0, r1
 800093c:	d908      	bls.n	8000950 <__udivmoddi4+0x12c>
 800093e:	eb1c 0101 	adds.w	r1, ip, r1
 8000942:	f103 38ff 	add.w	r8, r3, #4294967295
 8000946:	d202      	bcs.n	800094e <__udivmoddi4+0x12a>
 8000948:	4288      	cmp	r0, r1
 800094a:	f200 80cb 	bhi.w	8000ae4 <__udivmoddi4+0x2c0>
 800094e:	4643      	mov	r3, r8
 8000950:	1a09      	subs	r1, r1, r0
 8000952:	b2a4      	uxth	r4, r4
 8000954:	fbb1 f0f7 	udiv	r0, r1, r7
 8000958:	fb07 1110 	mls	r1, r7, r0, r1
 800095c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000960:	fb0e fe00 	mul.w	lr, lr, r0
 8000964:	45a6      	cmp	lr, r4
 8000966:	d908      	bls.n	800097a <__udivmoddi4+0x156>
 8000968:	eb1c 0404 	adds.w	r4, ip, r4
 800096c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000970:	d202      	bcs.n	8000978 <__udivmoddi4+0x154>
 8000972:	45a6      	cmp	lr, r4
 8000974:	f200 80bb 	bhi.w	8000aee <__udivmoddi4+0x2ca>
 8000978:	4608      	mov	r0, r1
 800097a:	eba4 040e 	sub.w	r4, r4, lr
 800097e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000982:	e79c      	b.n	80008be <__udivmoddi4+0x9a>
 8000984:	f1c6 0720 	rsb	r7, r6, #32
 8000988:	40b3      	lsls	r3, r6
 800098a:	fa22 fc07 	lsr.w	ip, r2, r7
 800098e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000992:	fa20 f407 	lsr.w	r4, r0, r7
 8000996:	fa01 f306 	lsl.w	r3, r1, r6
 800099a:	431c      	orrs	r4, r3
 800099c:	40f9      	lsrs	r1, r7
 800099e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80009a2:	fa00 f306 	lsl.w	r3, r0, r6
 80009a6:	fbb1 f8f9 	udiv	r8, r1, r9
 80009aa:	0c20      	lsrs	r0, r4, #16
 80009ac:	fa1f fe8c 	uxth.w	lr, ip
 80009b0:	fb09 1118 	mls	r1, r9, r8, r1
 80009b4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80009b8:	fb08 f00e 	mul.w	r0, r8, lr
 80009bc:	4288      	cmp	r0, r1
 80009be:	fa02 f206 	lsl.w	r2, r2, r6
 80009c2:	d90b      	bls.n	80009dc <__udivmoddi4+0x1b8>
 80009c4:	eb1c 0101 	adds.w	r1, ip, r1
 80009c8:	f108 3aff 	add.w	sl, r8, #4294967295
 80009cc:	f080 8088 	bcs.w	8000ae0 <__udivmoddi4+0x2bc>
 80009d0:	4288      	cmp	r0, r1
 80009d2:	f240 8085 	bls.w	8000ae0 <__udivmoddi4+0x2bc>
 80009d6:	f1a8 0802 	sub.w	r8, r8, #2
 80009da:	4461      	add	r1, ip
 80009dc:	1a09      	subs	r1, r1, r0
 80009de:	b2a4      	uxth	r4, r4
 80009e0:	fbb1 f0f9 	udiv	r0, r1, r9
 80009e4:	fb09 1110 	mls	r1, r9, r0, r1
 80009e8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80009ec:	fb00 fe0e 	mul.w	lr, r0, lr
 80009f0:	458e      	cmp	lr, r1
 80009f2:	d908      	bls.n	8000a06 <__udivmoddi4+0x1e2>
 80009f4:	eb1c 0101 	adds.w	r1, ip, r1
 80009f8:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fc:	d26c      	bcs.n	8000ad8 <__udivmoddi4+0x2b4>
 80009fe:	458e      	cmp	lr, r1
 8000a00:	d96a      	bls.n	8000ad8 <__udivmoddi4+0x2b4>
 8000a02:	3802      	subs	r0, #2
 8000a04:	4461      	add	r1, ip
 8000a06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000a0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000a0e:	eba1 010e 	sub.w	r1, r1, lr
 8000a12:	42a1      	cmp	r1, r4
 8000a14:	46c8      	mov	r8, r9
 8000a16:	46a6      	mov	lr, r4
 8000a18:	d356      	bcc.n	8000ac8 <__udivmoddi4+0x2a4>
 8000a1a:	d053      	beq.n	8000ac4 <__udivmoddi4+0x2a0>
 8000a1c:	b15d      	cbz	r5, 8000a36 <__udivmoddi4+0x212>
 8000a1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000a22:	eb61 010e 	sbc.w	r1, r1, lr
 8000a26:	fa01 f707 	lsl.w	r7, r1, r7
 8000a2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000a2e:	40f1      	lsrs	r1, r6
 8000a30:	431f      	orrs	r7, r3
 8000a32:	e9c5 7100 	strd	r7, r1, [r5]
 8000a36:	2600      	movs	r6, #0
 8000a38:	4631      	mov	r1, r6
 8000a3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000a3e:	f1c2 0320 	rsb	r3, r2, #32
 8000a42:	40d8      	lsrs	r0, r3
 8000a44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000a48:	fa21 f303 	lsr.w	r3, r1, r3
 8000a4c:	4091      	lsls	r1, r2
 8000a4e:	4301      	orrs	r1, r0
 8000a50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000a54:	fa1f fe8c 	uxth.w	lr, ip
 8000a58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000a5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000a60:	0c0b      	lsrs	r3, r1, #16
 8000a62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000a66:	fb00 f60e 	mul.w	r6, r0, lr
 8000a6a:	429e      	cmp	r6, r3
 8000a6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000a70:	d908      	bls.n	8000a84 <__udivmoddi4+0x260>
 8000a72:	eb1c 0303 	adds.w	r3, ip, r3
 8000a76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000a7a:	d22f      	bcs.n	8000adc <__udivmoddi4+0x2b8>
 8000a7c:	429e      	cmp	r6, r3
 8000a7e:	d92d      	bls.n	8000adc <__udivmoddi4+0x2b8>
 8000a80:	3802      	subs	r0, #2
 8000a82:	4463      	add	r3, ip
 8000a84:	1b9b      	subs	r3, r3, r6
 8000a86:	b289      	uxth	r1, r1
 8000a88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000a8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000a90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000a94:	fb06 f30e 	mul.w	r3, r6, lr
 8000a98:	428b      	cmp	r3, r1
 8000a9a:	d908      	bls.n	8000aae <__udivmoddi4+0x28a>
 8000a9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000aa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000aa4:	d216      	bcs.n	8000ad4 <__udivmoddi4+0x2b0>
 8000aa6:	428b      	cmp	r3, r1
 8000aa8:	d914      	bls.n	8000ad4 <__udivmoddi4+0x2b0>
 8000aaa:	3e02      	subs	r6, #2
 8000aac:	4461      	add	r1, ip
 8000aae:	1ac9      	subs	r1, r1, r3
 8000ab0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000ab4:	e738      	b.n	8000928 <__udivmoddi4+0x104>
 8000ab6:	462e      	mov	r6, r5
 8000ab8:	4628      	mov	r0, r5
 8000aba:	e705      	b.n	80008c8 <__udivmoddi4+0xa4>
 8000abc:	4606      	mov	r6, r0
 8000abe:	e6e3      	b.n	8000888 <__udivmoddi4+0x64>
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	e6f8      	b.n	80008b6 <__udivmoddi4+0x92>
 8000ac4:	454b      	cmp	r3, r9
 8000ac6:	d2a9      	bcs.n	8000a1c <__udivmoddi4+0x1f8>
 8000ac8:	ebb9 0802 	subs.w	r8, r9, r2
 8000acc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000ad0:	3801      	subs	r0, #1
 8000ad2:	e7a3      	b.n	8000a1c <__udivmoddi4+0x1f8>
 8000ad4:	4646      	mov	r6, r8
 8000ad6:	e7ea      	b.n	8000aae <__udivmoddi4+0x28a>
 8000ad8:	4620      	mov	r0, r4
 8000ada:	e794      	b.n	8000a06 <__udivmoddi4+0x1e2>
 8000adc:	4640      	mov	r0, r8
 8000ade:	e7d1      	b.n	8000a84 <__udivmoddi4+0x260>
 8000ae0:	46d0      	mov	r8, sl
 8000ae2:	e77b      	b.n	80009dc <__udivmoddi4+0x1b8>
 8000ae4:	3b02      	subs	r3, #2
 8000ae6:	4461      	add	r1, ip
 8000ae8:	e732      	b.n	8000950 <__udivmoddi4+0x12c>
 8000aea:	4630      	mov	r0, r6
 8000aec:	e709      	b.n	8000902 <__udivmoddi4+0xde>
 8000aee:	4464      	add	r4, ip
 8000af0:	3802      	subs	r0, #2
 8000af2:	e742      	b.n	800097a <__udivmoddi4+0x156>

08000af4 <__aeabi_idiv0>:
 8000af4:	4770      	bx	lr
 8000af6:	bf00      	nop

08000af8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000af8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b30 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000afc:	480d      	ldr	r0, [pc, #52]	; (8000b34 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000afe:	490e      	ldr	r1, [pc, #56]	; (8000b38 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b00:	4a0e      	ldr	r2, [pc, #56]	; (8000b3c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b02:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b04:	e002      	b.n	8000b0c <LoopCopyDataInit>

08000b06 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b06:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b08:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b0a:	3304      	adds	r3, #4

08000b0c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b0c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b0e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b10:	d3f9      	bcc.n	8000b06 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b12:	4a0b      	ldr	r2, [pc, #44]	; (8000b40 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b14:	4c0b      	ldr	r4, [pc, #44]	; (8000b44 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b18:	e001      	b.n	8000b1e <LoopFillZerobss>

08000b1a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b1a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b1c:	3204      	adds	r2, #4

08000b1e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b1e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b20:	d3fb      	bcc.n	8000b1a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b22:	f003 fcc9 	bl	80044b8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b26:	f006 fffd 	bl	8007b24 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b2a:	f000 fbc9 	bl	80012c0 <main>
  bx  lr    
 8000b2e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b30:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000b34:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b38:	20000684 	.word	0x20000684
  ldr r2, =_sidata
 8000b3c:	08008028 	.word	0x08008028
  ldr r2, =_sbss
 8000b40:	20000688 	.word	0x20000688
  ldr r4, =_ebss
 8000b44:	20001bf8 	.word	0x20001bf8

08000b48 <BusFault_Handler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b48:	e7fe      	b.n	8000b48 <BusFault_Handler>
	...

08000b4c <ASPEP_start>:

  return (crc == 0U);
}

void ASPEP_start(ASPEP_Handle_t *pHandle)
{
 8000b4c:	b570      	push	{r4, r5, r6, lr}
 8000b4e:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->fASPEP_HWInit(pHandle->HWIp);
 8000b50:	6940      	ldr	r0, [r0, #20]
 8000b52:	6ce3      	ldr	r3, [r4, #76]	; 0x4c
 8000b54:	4798      	blx	r3
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000b56:	2300      	movs	r3, #0
    pHandle->ASPEP_TL_State = WAITING_PACKET;
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/

    /* Configure UART to receive first packet*/
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b58:	6d65      	ldr	r5, [r4, #84]	; 0x54
    pHandle->ASPEP_State = ASPEP_IDLE;
 8000b5a:	f8a4 3064 	strh.w	r3, [r4, #100]	; 0x64
    pHandle->syncPacketCount = 0; /* Sync packet counter is reset only at startup*/
 8000b5e:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b62:	6960      	ldr	r0, [r4, #20]
 8000b64:	f104 011c 	add.w	r1, r4, #28
 8000b68:	462b      	mov	r3, r5
 8000b6a:	2204      	movs	r2, #4
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000b6c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000b70:	4718      	bx	r3
 8000b72:	bf00      	nop

08000b74 <ASPEP_sendBeacon>:

void ASPEP_sendBeacon(ASPEP_Handle_t *pHandle, ASPEP_Capabilities_def *capabilities)
{
 8000b74:	b410      	push	{r4}
  {
#endif
    uint32_t *packet = (uint32_t *)pHandle->ctrlBuffer.buffer; //cstat !MISRAC2012-Rule-11.3
    *packet = (BEACON
               | (((uint32_t)capabilities->version) << 4U)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000b76:	780b      	ldrb	r3, [r1, #0]
               | (((uint32_t)capabilities->version) << 4U)
 8000b78:	790a      	ldrb	r2, [r1, #4]
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
               | (((uint32_t)capabilities->TXS_maxSize) << 14U)
 8000b7a:	f891 c002 	ldrb.w	ip, [r1, #2]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b7e:	4c1e      	ldr	r4, [pc, #120]	; (8000bf8 <ASPEP_sendBeacon+0x84>)
               | (((uint32_t)capabilities->DATA_CRC) << 7U)
 8000b80:	01db      	lsls	r3, r3, #7
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000b82:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
               | (((uint32_t)capabilities->RX_maxSize) << 8U)
 8000b86:	784a      	ldrb	r2, [r1, #1]
               | (((uint32_t)capabilities->TXA_maxSize) << 21U));
 8000b88:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8000b8c:	78ca      	ldrb	r2, [r1, #3]
 8000b8e:	ea43 338c 	orr.w	r3, r3, ip, lsl #14
 8000b92:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000b96:	b2da      	uxtb	r2, r3
 8000b98:	f042 0205 	orr.w	r2, r2, #5
  header &= 0x0fffffffU;
 8000b9c:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000ba0:	5ca2      	ldrb	r2, [r4, r2]
 8000ba2:	ea82 2211 	eor.w	r2, r2, r1, lsr #8
 8000ba6:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000ba8:	5ca2      	ldrb	r2, [r4, r2]
 8000baa:	ea82 4211 	eor.w	r2, r2, r1, lsr #16
 8000bae:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000bb0:	5ca2      	ldrb	r2, [r4, r2]
 8000bb2:	4c12      	ldr	r4, [pc, #72]	; (8000bfc <ASPEP_sendBeacon+0x88>)
 8000bb4:	ea82 6211 	eor.w	r2, r2, r1, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000bb8:	5ca2      	ldrb	r2, [r4, r2]
 8000bba:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000bbe:	f043 0305 	orr.w	r3, r3, #5
 8000bc2:	6203      	str	r3, [r0, #32]
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bc4:	b672      	cpsid	i
  {
#endif
    /* Insert CRC header in the packet to send */
    ASPEP_ComputeHeaderCRC((uint32_t *)txBuffer); //cstat !MISRAC2012-Rule-11.5
    __disable_irq(); /*TODO: Disable High frequency task is enough */
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000bc6:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000bc8:	b14b      	cbz	r3, 8000bde <ASPEP_sendBeacon+0x6a>
  __ASM volatile ("cpsie i" : : : "memory");
 8000bca:	b662      	cpsie	i
          pHandle->syncBuffer.length = bufferLength;
        }
      }
      else if(ASPEP_CTRL == dataType)
      {
        if (pHandle->ctrlBuffer.state != available)
 8000bcc:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000bd0:	b913      	cbnz	r3, 8000bd8 <ASPEP_sendBeacon+0x64>
        {
          result = ASPEP_BUFFER_ERROR;
        }
        else
        {
          pHandle->ctrlBuffer.state = pending;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000bd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000bdc:	4770      	bx	lr
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000bde:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000be2:	2303      	movs	r3, #3
 8000be4:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000be8:	6481      	str	r1, [r0, #72]	; 0x48
 8000bea:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000bec:	2204      	movs	r2, #4
 8000bee:	6d83      	ldr	r3, [r0, #88]	; 0x58
}
 8000bf0:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000bf4:	6940      	ldr	r0, [r0, #20]
 8000bf6:	4718      	bx	r3
 8000bf8:	08007bc0 	.word	0x08007bc0
 8000bfc:	08007bb0 	.word	0x08007bb0

08000c00 <ASPEP_sendPing>:
{
 8000c00:	b530      	push	{r4, r5, lr}
              | (uint32_t)((uint32_t)cBit << 5U)
 8000c02:	ea4f 1c41 	mov.w	ip, r1, lsl #5
    uint8_t Nbit = pHandle->syncPacketCount & 0x1U; /* Keep only LSB */
 8000c06:	f890 e060 	ldrb.w	lr, [r0, #96]	; 0x60
    uint8_t ipID = pHandle->liid & 0xFU;
 8000c0a:	f890 4063 	ldrb.w	r4, [r0, #99]	; 0x63
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c0e:	4d1e      	ldr	r5, [pc, #120]	; (8000c88 <ASPEP_sendPing+0x88>)
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c10:	ea4c 1c01 	orr.w	ip, ip, r1, lsl #4
              | (uint32_t)((uint32_t)Nbit << 6U)
 8000c14:	f00e 0e01 	and.w	lr, lr, #1
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c18:	ea4c 3c02 	orr.w	ip, ip, r2, lsl #12
 8000c1c:	ea4c 138e 	orr.w	r3, ip, lr, lsl #6
 8000c20:	ea43 13ce 	orr.w	r3, r3, lr, lsl #7
              | (uint32_t)((uint32_t)ipID << 8U)
 8000c24:	f004 040f 	and.w	r4, r4, #15
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c28:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	4c17      	ldr	r4, [pc, #92]	; (8000c8c <ASPEP_sendPing+0x8c>)
 8000c30:	f042 0206 	orr.w	r2, r2, #6
              | (uint32_t)(((uint32_t) packetNumber) << 12U);
 8000c34:	f043 0106 	orr.w	r1, r3, #6
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000c38:	5ca2      	ldrb	r2, [r4, r2]
 8000c3a:	ea82 2213 	eor.w	r2, r2, r3, lsr #8
 8000c3e:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000c40:	5ca2      	ldrb	r2, [r4, r2]
 8000c42:	ea82 4213 	eor.w	r2, r2, r3, lsr #16
 8000c46:	b2d2      	uxtb	r2, r2
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000c48:	5ca2      	ldrb	r2, [r4, r2]
 8000c4a:	ea82 6313 	eor.w	r3, r2, r3, lsr #24
  *headerPtr |= (uint32_t)crc << 28;
 8000c4e:	5ceb      	ldrb	r3, [r5, r3]
 8000c50:	ea41 7303 	orr.w	r3, r1, r3, lsl #28
 8000c54:	6203      	str	r3, [r0, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000c56:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000c58:	6c83      	ldr	r3, [r0, #72]	; 0x48
 8000c5a:	b13b      	cbz	r3, 8000c6c <ASPEP_sendPing+0x6c>
  __ASM volatile ("cpsie i" : : : "memory");
 8000c5c:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000c5e:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000c62:	b913      	cbnz	r3, 8000c6a <ASPEP_sendPing+0x6a>
          pHandle->ctrlBuffer.state = pending;
 8000c64:	2302      	movs	r3, #2
 8000c66:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
}
 8000c6a:	bd30      	pop	{r4, r5, pc}
    (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000c6c:	f100 0120 	add.w	r1, r0, #32
        pHandle->ctrlBuffer.state = readLock;
 8000c70:	2303      	movs	r3, #3
 8000c72:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000c76:	6481      	str	r1, [r0, #72]	; 0x48
 8000c78:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c7a:	2204      	movs	r2, #4
 8000c7c:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000c7e:	6940      	ldr	r0, [r0, #20]
}
 8000c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000c84:	4718      	bx	r3
 8000c86:	bf00      	nop
 8000c88:	08007bb0 	.word	0x08007bb0
 8000c8c:	08007bc0 	.word	0x08007bc0

08000c90 <ASPEP_getBuffer>:
    if (MCTL_SYNC == syncAsync)
 8000c90:	2a0a      	cmp	r2, #10
{
 8000c92:	b410      	push	{r4}
 8000c94:	4603      	mov	r3, r0
    if (MCTL_SYNC == syncAsync)
 8000c96:	d00b      	beq.n	8000cb0 <ASPEP_getBuffer+0x20>
      if ((pHandle->asyncBufferA.state > writeLock) && (pHandle->asyncBufferB.state > writeLock))
 8000c98:	f890 2036 	ldrb.w	r2, [r0, #54]	; 0x36
 8000c9c:	2a01      	cmp	r2, #1
 8000c9e:	d921      	bls.n	8000ce4 <ASPEP_getBuffer+0x54>
 8000ca0:	f890 203e 	ldrb.w	r2, [r0, #62]	; 0x3e
 8000ca4:	2a01      	cmp	r2, #1
 8000ca6:	d911      	bls.n	8000ccc <ASPEP_getBuffer+0x3c>
        result = false;
 8000ca8:	2000      	movs	r0, #0
}
 8000caa:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cae:	4770      	bx	lr
      if (pHandle->syncBuffer.state <= writeLock) /* Possible values are free or writeLock*/
 8000cb0:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000cb4:	2a01      	cmp	r2, #1
 8000cb6:	d8f7      	bhi.n	8000ca8 <ASPEP_getBuffer+0x18>
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000cb8:	6a82      	ldr	r2, [r0, #40]	; 0x28
        pHandle->syncBuffer.state = writeLock;
 8000cba:	2401      	movs	r4, #1
        *buffer = &pHandle->syncBuffer.buffer[ASPEP_HEADER_SIZE];
 8000cbc:	3204      	adds	r2, #4
 8000cbe:	600a      	str	r2, [r1, #0]
        pHandle->syncBuffer.state = writeLock;
 8000cc0:	f883 402e 	strb.w	r4, [r3, #46]	; 0x2e
  bool result = true;
 8000cc4:	4620      	mov	r0, r4
}
 8000cc6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000cca:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000ccc:	6b82      	ldr	r2, [r0, #56]	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000cce:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000cd0:	f103 0438 	add.w	r4, r3, #56	; 0x38
          pHandle->asyncBufferB.state = writeLock;
 8000cd4:	f883 003e 	strb.w	r0, [r3, #62]	; 0x3e
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000cd8:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferB;
 8000cda:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000cdc:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferB.buffer[ASPEP_HEADER_SIZE];
 8000ce0:	600a      	str	r2, [r1, #0]
}
 8000ce2:	4770      	bx	lr
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000ce4:	6b02      	ldr	r2, [r0, #48]	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000ce6:	2001      	movs	r0, #1
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000ce8:	f103 0430 	add.w	r4, r3, #48	; 0x30
          pHandle->asyncBufferA.state = writeLock;
 8000cec:	f883 0036 	strb.w	r0, [r3, #54]	; 0x36
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000cf0:	3204      	adds	r2, #4
          pHandle->lastRequestedAsyncBuff = &pHandle->asyncBufferA;
 8000cf2:	641c      	str	r4, [r3, #64]	; 0x40
}
 8000cf4:	f85d 4b04 	ldr.w	r4, [sp], #4
          *buffer = &pHandle->asyncBufferA.buffer[ASPEP_HEADER_SIZE];
 8000cf8:	600a      	str	r2, [r1, #0]
}
 8000cfa:	4770      	bx	lr

08000cfc <ASPEP_sendPacket>:
{
 8000cfc:	b570      	push	{r4, r5, r6, lr}
    if (ASPEP_CONNECTED == pHandle-> ASPEP_State)
 8000cfe:	f890 4064 	ldrb.w	r4, [r0, #100]	; 0x64
 8000d02:	2c02      	cmp	r4, #2
 8000d04:	d002      	beq.n	8000d0c <ASPEP_sendPacket+0x10>
      result = ASPEP_NOT_CONNECTED;
 8000d06:	2102      	movs	r1, #2
}
 8000d08:	4608      	mov	r0, r1
 8000d0a:	bd70      	pop	{r4, r5, r6, pc}
      tmpHeader = ((uint32_t)((uint32_t)txDataLengthTemp << (uint32_t)4) | (uint32_t)syncAsync);
 8000d0c:	ea43 1402 	orr.w	r4, r3, r2, lsl #4
      *header = tmpHeader;
 8000d10:	f841 4c04 	str.w	r4, [r1, #-4]
      if (1U == pHandle->Capabilities.DATA_CRC)
 8000d14:	f890 406c 	ldrb.w	r4, [r0, #108]	; 0x6c
 8000d18:	2c01      	cmp	r4, #1
 8000d1a:	d104      	bne.n	8000d26 <ASPEP_sendPacket+0x2a>
        packet[txDataLengthTemp] = (uint8_t)0xCA; /* Dummy CRC */
 8000d1c:	f64f 64ca 	movw	r4, #65226	; 0xfeca
 8000d20:	528c      	strh	r4, [r1, r2]
        txDataLengthTemp += (uint16_t)ASPEP_DATACRC_SIZE;
 8000d22:	3202      	adds	r2, #2
 8000d24:	b292      	uxth	r2, r2
      if (MCTL_SYNC == syncAsync)
 8000d26:	2b0a      	cmp	r3, #10
 8000d28:	d103      	bne.n	8000d32 <ASPEP_sendPacket+0x36>
        if (pSupHandle->MCP_PacketAvailable)
 8000d2a:	7c04      	ldrb	r4, [r0, #16]
 8000d2c:	b394      	cbz	r4, 8000d94 <ASPEP_sendPacket+0x98>
          pSupHandle->MCP_PacketAvailable = false; /* CMD from master is processed*/
 8000d2e:	2400      	movs	r4, #0
 8000d30:	7404      	strb	r4, [r0, #16]
  uint32_t header = *headerPtr;
 8000d32:	f851 4c04 	ldr.w	r4, [r1, #-4]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8000d36:	4d35      	ldr	r5, [pc, #212]	; (8000e0c <ASPEP_sendPacket+0x110>)
 8000d38:	b2e6      	uxtb	r6, r4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000d3a:	f3c4 2e07 	ubfx	lr, r4, #8, #8
 8000d3e:	5dae      	ldrb	r6, [r5, r6]
 8000d40:	ea8e 0e06 	eor.w	lr, lr, r6
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000d44:	3204      	adds	r2, #4
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000d46:	f815 600e 	ldrb.w	r6, [r5, lr]
 8000d4a:	f3c4 4e07 	ubfx	lr, r4, #16, #8
 8000d4e:	ea8e 0e06 	eor.w	lr, lr, r6
      header--; /* Header ues 4*8 bits on top of txBuffer*/
 8000d52:	f1a1 0c04 	sub.w	ip, r1, #4
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000d56:	f815 e00e 	ldrb.w	lr, [r5, lr]
 8000d5a:	f3c4 6503 	ubfx	r5, r4, #24, #4
 8000d5e:	ea8e 0e05 	eor.w	lr, lr, r5
 8000d62:	4d2b      	ldr	r5, [pc, #172]	; (8000e10 <ASPEP_sendPacket+0x114>)
  *headerPtr |= (uint32_t)crc << 28;
 8000d64:	f815 500e 	ldrb.w	r5, [r5, lr]
 8000d68:	ea44 7405 	orr.w	r4, r4, r5, lsl #28
        result = ASPEP_TXframeProcess(pHandle, syncAsync, header, txDataLengthTemp + (uint16_t)ASPEP_HEADER_SIZE);
 8000d6c:	b292      	uxth	r2, r2
  *headerPtr |= (uint32_t)crc << 28;
 8000d6e:	f841 4c04 	str.w	r4, [r1, #-4]
  __ASM volatile ("cpsid i" : : : "memory");
 8000d72:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000d74:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8000d76:	b1e1      	cbz	r1, 8000db2 <ASPEP_sendPacket+0xb6>
  __ASM volatile ("cpsie i" : : : "memory");
 8000d78:	b662      	cpsie	i
      if (MCTL_ASYNC == dataType)
 8000d7a:	2b09      	cmp	r3, #9
 8000d7c:	d00d      	beq.n	8000d9a <ASPEP_sendPacket+0x9e>
      else if (MCTL_SYNC == dataType)
 8000d7e:	2b0a      	cmp	r3, #10
 8000d80:	d02e      	beq.n	8000de0 <ASPEP_sendPacket+0xe4>
      else if(ASPEP_CTRL == dataType)
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d132      	bne.n	8000dec <ASPEP_sendPacket+0xf0>
        if (pHandle->ctrlBuffer.state != available)
 8000d86:	f890 1024 	ldrb.w	r1, [r0, #36]	; 0x24
 8000d8a:	bb69      	cbnz	r1, 8000de8 <ASPEP_sendPacket+0xec>
          pHandle->ctrlBuffer.state = pending;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
 8000d92:	e7b9      	b.n	8000d08 <ASPEP_sendPacket+0xc>
          result = MCTL_SYNC_NOT_EXPECTED;
 8000d94:	2101      	movs	r1, #1
}
 8000d96:	4608      	mov	r0, r1
 8000d98:	bd70      	pop	{r4, r5, r6, pc}
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000d9a:	6c03      	ldr	r3, [r0, #64]	; 0x40
        if (NULL == pHandle->asyncNextBuffer)
 8000d9c:	6c44      	ldr	r4, [r0, #68]	; 0x44
        if (txBuffer != (uint8_t *)pHandle->lastRequestedAsyncBuff->buffer)
 8000d9e:	6819      	ldr	r1, [r3, #0]
          result = ASPEP_BUFFER_ERROR;
 8000da0:	458c      	cmp	ip, r1
 8000da2:	bf14      	ite	ne
 8000da4:	2103      	movne	r1, #3
 8000da6:	2100      	moveq	r1, #0
        if (NULL == pHandle->asyncNextBuffer)
 8000da8:	b36c      	cbz	r4, 8000e06 <ASPEP_sendPacket+0x10a>
        pHandle->lastRequestedAsyncBuff->state = pending;
 8000daa:	2002      	movs	r0, #2
 8000dac:	7198      	strb	r0, [r3, #6]
        pHandle->lastRequestedAsyncBuff->length = bufferLength;
 8000dae:	809a      	strh	r2, [r3, #4]
 8000db0:	e7aa      	b.n	8000d08 <ASPEP_sendPacket+0xc>
      if (MCTL_ASYNC == dataType)
 8000db2:	2b09      	cmp	r3, #9
 8000db4:	d022      	beq.n	8000dfc <ASPEP_sendPacket+0x100>
      else if (MCTL_SYNC == dataType)
 8000db6:	2b0a      	cmp	r3, #10
        pHandle->syncBuffer.state = readLock;
 8000db8:	f04f 0103 	mov.w	r1, #3
        pHandle->lockBuffer = (void *) &pHandle->syncBuffer;
 8000dbc:	bf0b      	itete	eq
 8000dbe:	f100 0328 	addeq.w	r3, r0, #40	; 0x28
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000dc2:	f100 0320 	addne.w	r3, r0, #32
        pHandle->syncBuffer.state = readLock;
 8000dc6:	f880 102e 	strbeq.w	r1, [r0, #46]	; 0x2e
        pHandle->ctrlBuffer.state = readLock;
 8000dca:	f880 1024 	strbne.w	r1, [r0, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000dce:	6483      	str	r3, [r0, #72]	; 0x48
 8000dd0:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000dd2:	6d83      	ldr	r3, [r0, #88]	; 0x58
 8000dd4:	6940      	ldr	r0, [r0, #20]
 8000dd6:	4661      	mov	r1, ip
 8000dd8:	4798      	blx	r3
 8000dda:	2100      	movs	r1, #0
}
 8000ddc:	4608      	mov	r0, r1
 8000dde:	bd70      	pop	{r4, r5, r6, pc}
        if (pHandle -> syncBuffer.state != writeLock)
 8000de0:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
 8000de4:	2b01      	cmp	r3, #1
 8000de6:	d003      	beq.n	8000df0 <ASPEP_sendPacket+0xf4>
          result = ASPEP_BUFFER_ERROR;
 8000de8:	2103      	movs	r1, #3
 8000dea:	e78d      	b.n	8000d08 <ASPEP_sendPacket+0xc>
  uint8_t result = ASPEP_OK;
 8000dec:	2100      	movs	r1, #0
 8000dee:	e78b      	b.n	8000d08 <ASPEP_sendPacket+0xc>
          pHandle->syncBuffer.state = pending;
 8000df0:	2302      	movs	r3, #2
 8000df2:	f880 302e 	strb.w	r3, [r0, #46]	; 0x2e
          pHandle->syncBuffer.length = bufferLength;
 8000df6:	8582      	strh	r2, [r0, #44]	; 0x2c
  uint8_t result = ASPEP_OK;
 8000df8:	2100      	movs	r1, #0
 8000dfa:	e785      	b.n	8000d08 <ASPEP_sendPacket+0xc>
        pHandle->lastRequestedAsyncBuff->state = readLock;
 8000dfc:	6c03      	ldr	r3, [r0, #64]	; 0x40
 8000dfe:	2103      	movs	r1, #3
 8000e00:	7199      	strb	r1, [r3, #6]
        pHandle->lockBuffer = (void *)pHandle->lastRequestedAsyncBuff;
 8000e02:	6483      	str	r3, [r0, #72]	; 0x48
 8000e04:	e7e4      	b.n	8000dd0 <ASPEP_sendPacket+0xd4>
          pHandle->asyncNextBuffer = pHandle->lastRequestedAsyncBuff;
 8000e06:	6443      	str	r3, [r0, #68]	; 0x44
 8000e08:	e7cf      	b.n	8000daa <ASPEP_sendPacket+0xae>
 8000e0a:	bf00      	nop
 8000e0c:	08007bc0 	.word	0x08007bc0
 8000e10:	08007bb0 	.word	0x08007bb0

08000e14 <ASPEP_HWDataTransmittedIT>:
/* ASPEP_HWDataTransmittedIT is called as soon as previous packet transfer is completed */
/* pHandle->lockBuffer is set before packet transmission and is never read here after */
/* therefore, there is no need to protect this ISR against another higher priority ISR (HF Task)*/

void ASPEP_HWDataTransmittedIT(ASPEP_Handle_t *pHandle)
{
 8000e14:	b510      	push	{r4, lr}
  }
  else
  {
#endif
    /* First free previous readLock buffer */
    if (pHandle->ctrlBuffer.state == readLock)
 8000e16:	f890 3024 	ldrb.w	r3, [r0, #36]	; 0x24
 8000e1a:	2b03      	cmp	r3, #3
{
 8000e1c:	4604      	mov	r4, r0
    if (pHandle->ctrlBuffer.state == readLock)
 8000e1e:	d013      	beq.n	8000e48 <ASPEP_HWDataTransmittedIT+0x34>
      pHandle->ctrlBuffer.state = available;
    }
    else /* if previous buffer was not ASPEP_CTRL, then the buffer locked is a MCTL_Buff_t */
    {
      MCTL_Buff_t *tempBuff = (MCTL_Buff_t *)pHandle->lockBuffer; //cstat !MISRAC2012-Rule-11.5
      tempBuff->state = available;
 8000e20:	6c82      	ldr	r2, [r0, #72]	; 0x48
 8000e22:	2100      	movs	r1, #0
 8000e24:	7191      	strb	r1, [r2, #6]
    }
    if (pHandle->syncBuffer.state == pending)
 8000e26:	f890 202e 	ldrb.w	r2, [r0, #46]	; 0x2e
 8000e2a:	2a02      	cmp	r2, #2
 8000e2c:	d013      	beq.n	8000e56 <ASPEP_HWDataTransmittedIT+0x42>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
      pHandle->syncBuffer.state = readLock;
    }
    /* Second prepare transfer of pending buffer */
    else if (pHandle->ctrlBuffer.state == pending)
 8000e2e:	2b02      	cmp	r3, #2
 8000e30:	d11d      	bne.n	8000e6e <ASPEP_HWDataTransmittedIT+0x5a>
    {
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e32:	f100 0120 	add.w	r1, r0, #32
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000e36:	6d83      	ldr	r3, [r0, #88]	; 0x58
      pHandle->lockBuffer = (void *)(&pHandle ->ctrlBuffer);
 8000e38:	6481      	str	r1, [r0, #72]	; 0x48
      pHandle->fASPEP_send(pHandle ->HWIp, pHandle->ctrlBuffer.buffer, ASPEP_CTRL_SIZE);
 8000e3a:	2204      	movs	r2, #4
 8000e3c:	6940      	ldr	r0, [r0, #20]
 8000e3e:	4798      	blx	r3
      pHandle->ctrlBuffer.state = readLock;
 8000e40:	2303      	movs	r3, #3
 8000e42:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      __enable_irq();
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 8000e46:	bd10      	pop	{r4, pc}
    if (pHandle->syncBuffer.state == pending)
 8000e48:	f890 302e 	ldrb.w	r3, [r0, #46]	; 0x2e
      pHandle->ctrlBuffer.state = available;
 8000e4c:	2200      	movs	r2, #0
    if (pHandle->syncBuffer.state == pending)
 8000e4e:	2b02      	cmp	r3, #2
      pHandle->ctrlBuffer.state = available;
 8000e50:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
    if (pHandle->syncBuffer.state == pending)
 8000e54:	d10b      	bne.n	8000e6e <ASPEP_HWDataTransmittedIT+0x5a>
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000e56:	f104 0028 	add.w	r0, r4, #40	; 0x28
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000e5a:	6da3      	ldr	r3, [r4, #88]	; 0x58
      pHandle->lockBuffer = (void *)&pHandle->syncBuffer;
 8000e5c:	64a0      	str	r0, [r4, #72]	; 0x48
      pHandle->fASPEP_send(pHandle->HWIp, pHandle->syncBuffer.buffer, pHandle->syncBuffer.length);
 8000e5e:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
 8000e60:	6aa1      	ldr	r1, [r4, #40]	; 0x28
 8000e62:	6960      	ldr	r0, [r4, #20]
 8000e64:	4798      	blx	r3
      pHandle->syncBuffer.state = readLock;
 8000e66:	2303      	movs	r3, #3
 8000e68:	f884 302e 	strb.w	r3, [r4, #46]	; 0x2e
}
 8000e6c:	bd10      	pop	{r4, pc}
  __ASM volatile ("cpsid i" : : : "memory");
 8000e6e:	b672      	cpsid	i
      if (pHandle->asyncNextBuffer != NULL)
 8000e70:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8000e72:	b1cb      	cbz	r3, 8000ea8 <ASPEP_HWDataTransmittedIT+0x94>
        pHandle->asyncNextBuffer->state = readLock;
 8000e74:	2203      	movs	r2, #3
        pHandle->lockBuffer = (void *)pHandle->asyncNextBuffer;
 8000e76:	64a3      	str	r3, [r4, #72]	; 0x48
        pHandle->asyncNextBuffer->state = readLock;
 8000e78:	719a      	strb	r2, [r3, #6]
        pHandle->fASPEP_send(pHandle ->HWIp, pHandle->asyncNextBuffer->buffer, pHandle->asyncNextBuffer->length);
 8000e7a:	6819      	ldr	r1, [r3, #0]
 8000e7c:	889a      	ldrh	r2, [r3, #4]
 8000e7e:	6960      	ldr	r0, [r4, #20]
 8000e80:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000e82:	4798      	blx	r3
        if ((pHandle->asyncBufferA.state == pending) || (pHandle->asyncBufferB.state == pending))
 8000e84:	f894 3036 	ldrb.w	r3, [r4, #54]	; 0x36
 8000e88:	2b02      	cmp	r3, #2
 8000e8a:	d007      	beq.n	8000e9c <ASPEP_HWDataTransmittedIT+0x88>
 8000e8c:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8000e90:	2b02      	cmp	r3, #2
 8000e92:	d003      	beq.n	8000e9c <ASPEP_HWDataTransmittedIT+0x88>
          pHandle->asyncNextBuffer = NULL;
 8000e94:	2300      	movs	r3, #0
 8000e96:	6463      	str	r3, [r4, #68]	; 0x44
  __ASM volatile ("cpsie i" : : : "memory");
 8000e98:	b662      	cpsie	i
}
 8000e9a:	bd10      	pop	{r4, pc}
          uint32_t temp = (uint32_t)&pHandle->asyncBufferA + (uint32_t)&pHandle->asyncBufferB
 8000e9c:	6c62      	ldr	r2, [r4, #68]	; 0x44
 8000e9e:	0063      	lsls	r3, r4, #1
 8000ea0:	3368      	adds	r3, #104	; 0x68
 8000ea2:	1a9b      	subs	r3, r3, r2
          pHandle->asyncNextBuffer = (MCTL_Buff_t *) temp; //cstat !MISRAC2012-Rule-11.4
 8000ea4:	6463      	str	r3, [r4, #68]	; 0x44
        {
 8000ea6:	e7f7      	b.n	8000e98 <ASPEP_HWDataTransmittedIT+0x84>
        pHandle->lockBuffer = NULL;
 8000ea8:	64a3      	str	r3, [r4, #72]	; 0x48
 8000eaa:	e7f5      	b.n	8000e98 <ASPEP_HWDataTransmittedIT+0x84>

08000eac <ASPEP_RXframeProcess>:

uint8_t *ASPEP_RXframeProcess(MCTL_Handle_t *pSupHandle, uint16_t *packetLength)
{
 8000eac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
    uint16_t packetNumber;
    bool validCRCData = true;

    *packetLength = 0;
    if (pHandle->NewPacketAvailable)
 8000eb0:	f890 3061 	ldrb.w	r3, [r0, #97]	; 0x61
    uint32_t packetHeader = *((uint32_t *)pHandle->rxHeader); //cstat !MISRAC2012-Rule-11.3
 8000eb4:	69c2      	ldr	r2, [r0, #28]
    *packetLength = 0;
 8000eb6:	2500      	movs	r5, #0
{
 8000eb8:	4604      	mov	r4, r0
    *packetLength = 0;
 8000eba:	800d      	strh	r5, [r1, #0]
    if (pHandle->NewPacketAvailable)
 8000ebc:	b193      	cbz	r3, 8000ee4 <ASPEP_RXframeProcess+0x38>
    {
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
      switch (pHandle->ASPEP_State)
 8000ebe:	f890 6064 	ldrb.w	r6, [r0, #100]	; 0x64
      pHandle->NewPacketAvailable = false; /* Consumes new packet*/
 8000ec2:	f880 5061 	strb.w	r5, [r0, #97]	; 0x61
      switch (pHandle->ASPEP_State)
 8000ec6:	2e01      	cmp	r6, #1
 8000ec8:	d054      	beq.n	8000f74 <ASPEP_RXframeProcess+0xc8>
 8000eca:	2e02      	cmp	r6, #2
 8000ecc:	d03e      	beq.n	8000f4c <ASPEP_RXframeProcess+0xa0>
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d033      	beq.n	8000f3a <ASPEP_RXframeProcess+0x8e>

        default:
          break;
      }
      /* The valid received packet is now safely consumes, we are ready to receive a new packet */
      pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 8000ed2:	6d63      	ldr	r3, [r4, #84]	; 0x54
 8000ed4:	6960      	ldr	r0, [r4, #20]
 8000ed6:	2204      	movs	r2, #4
 8000ed8:	f104 011c 	add.w	r1, r4, #28
 8000edc:	4798      	blx	r3
    }
#ifdef NULL_PTR_ASP
  }
#endif
  return (result);
}
 8000ede:	4628      	mov	r0, r5
 8000ee0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    else if (pHandle->badPacketFlag > ASPEP_OK)
 8000ee4:	f890 5062 	ldrb.w	r5, [r0, #98]	; 0x62
 8000ee8:	2d00      	cmp	r5, #0
 8000eea:	d0f8      	beq.n	8000ede <ASPEP_RXframeProcess+0x32>
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000eec:	042b      	lsls	r3, r5, #16
 8000eee:	ea43 2505 	orr.w	r5, r3, r5, lsl #8
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000ef2:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8000ef6:	4995      	ldr	r1, [pc, #596]	; (800114c <ASPEP_RXframeProcess+0x2a0>)
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000ef8:	4895      	ldr	r0, [pc, #596]	; (8001150 <ASPEP_RXframeProcess+0x2a4>)
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8000efa:	f083 0309 	eor.w	r3, r3, #9
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000efe:	5cca      	ldrb	r2, [r1, r3]
  *packet = NACK | (uint32_t)(((uint32_t) errorInfo) << 8U) | (uint32_t)(((uint32_t) errorInfo) << 16U);
 8000f00:	f045 030f 	orr.w	r3, r5, #15
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 8000f04:	ea82 4515 	eor.w	r5, r2, r5, lsr #16
  crc = CRC4_Lookup4[crc ^ (uint8_t)((header >> 24U) & 0x0fU)];
 8000f08:	5d4a      	ldrb	r2, [r1, r5]
  *headerPtr |= (uint32_t)crc << 28;
 8000f0a:	5c82      	ldrb	r2, [r0, r2]
 8000f0c:	ea43 7302 	orr.w	r3, r3, r2, lsl #28
 8000f10:	6223      	str	r3, [r4, #32]
  __ASM volatile ("cpsid i" : : : "memory");
 8000f12:	b672      	cpsid	i
    if (NULL == pHandle->lockBuffer) /* Communication Ip free to send data*/
 8000f14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d03a      	beq.n	8000f90 <ASPEP_RXframeProcess+0xe4>
  __ASM volatile ("cpsie i" : : : "memory");
 8000f1a:	b662      	cpsie	i
        if (pHandle->ctrlBuffer.state != available)
 8000f1c:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8000f20:	b913      	cbnz	r3, 8000f28 <ASPEP_RXframeProcess+0x7c>
          pHandle->ctrlBuffer.state = pending;
 8000f22:	2302      	movs	r3, #2
 8000f24:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
      pHandle->badPacketFlag = ASPEP_OK;
 8000f28:	2500      	movs	r5, #0
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000f2a:	6960      	ldr	r0, [r4, #20]
 8000f2c:	6d23      	ldr	r3, [r4, #80]	; 0x50
      pHandle->badPacketFlag = ASPEP_OK;
 8000f2e:	f884 5062 	strb.w	r5, [r4, #98]	; 0x62
      pHandle->fASPEP_HWSync(pHandle->HWIp);
 8000f32:	4798      	blx	r3
}
 8000f34:	4628      	mov	r0, r5
 8000f36:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
          if (BEACON == pHandle->rxPacketType)
 8000f3a:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000f3c:	2b05      	cmp	r3, #5
 8000f3e:	f000 8095 	beq.w	800106c <ASPEP_RXframeProcess+0x1c0>
          else if (PING == pHandle->rxPacketType)
 8000f42:	2b06      	cmp	r3, #6
 8000f44:	f000 80d7 	beq.w	80010f6 <ASPEP_RXframeProcess+0x24a>
  uint8_t *result = NULL;
 8000f48:	4635      	mov	r5, r6
 8000f4a:	e7c2      	b.n	8000ed2 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000f4c:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000f4e:	2b05      	cmp	r3, #5
 8000f50:	d05f      	beq.n	8001012 <ASPEP_RXframeProcess+0x166>
          else if (PING == pHandle->rxPacketType)
 8000f52:	2b06      	cmp	r3, #6
 8000f54:	f000 80d6 	beq.w	8001104 <ASPEP_RXframeProcess+0x258>
          else if (DATA_PACKET == pHandle->rxPacketType)
 8000f58:	2b09      	cmp	r3, #9
 8000f5a:	d1ba      	bne.n	8000ed2 <ASPEP_RXframeProcess+0x26>
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000f5c:	f890 3060 	ldrb.w	r3, [r0, #96]	; 0x60
              *packetLength = pHandle->rxLength;
 8000f60:	f8b0 205c 	ldrh.w	r2, [r0, #92]	; 0x5c
              result = pHandle->rxBuffer;
 8000f64:	69a5      	ldr	r5, [r4, #24]
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000f66:	3301      	adds	r3, #1
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000f68:	2001      	movs	r0, #1
              pHandle->syncPacketCount++; /* this counter is incremented at each valid data packet received from master */
 8000f6a:	f884 3060 	strb.w	r3, [r4, #96]	; 0x60
              pSupHandle->MCP_PacketAvailable = true; /* Will be consumed in ASPEP_sendPacket */
 8000f6e:	7420      	strb	r0, [r4, #16]
              *packetLength = pHandle->rxLength;
 8000f70:	800a      	strh	r2, [r1, #0]
              result = pHandle->rxBuffer;
 8000f72:	e7ae      	b.n	8000ed2 <ASPEP_RXframeProcess+0x26>
          if (BEACON == pHandle->rxPacketType)
 8000f74:	6e83      	ldr	r3, [r0, #104]	; 0x68
 8000f76:	2b05      	cmp	r3, #5
 8000f78:	d016      	beq.n	8000fa8 <ASPEP_RXframeProcess+0xfc>
          else if (PING == pHandle->rxPacketType)
 8000f7a:	2b06      	cmp	r3, #6
 8000f7c:	d1a9      	bne.n	8000ed2 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8000f7e:	f3c2 320f 	ubfx	r2, r2, #12, #16
 8000f82:	4631      	mov	r1, r6
 8000f84:	f7ff fe3c 	bl	8000c00 <ASPEP_sendPing>
            pHandle->ASPEP_State = ASPEP_CONNECTED;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
 8000f8e:	e7a0      	b.n	8000ed2 <ASPEP_RXframeProcess+0x26>
  (void)ASPEP_TXframeProcess(pHandle, ASPEP_CTRL, &pHandle->ctrlBuffer, ASPEP_CTRL_SIZE);
 8000f90:	f104 0120 	add.w	r1, r4, #32
        pHandle->ctrlBuffer.state = readLock;
 8000f94:	2303      	movs	r3, #3
 8000f96:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
        pHandle->lockBuffer = (void *)&pHandle->ctrlBuffer;
 8000f9a:	64a1      	str	r1, [r4, #72]	; 0x48
 8000f9c:	b662      	cpsie	i
      pHandle->fASPEP_send(pHandle->HWIp, txBuffer, bufferLength);
 8000f9e:	2204      	movs	r2, #4
 8000fa0:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8000fa2:	6960      	ldr	r0, [r4, #20]
 8000fa4:	4798      	blx	r3
  return (result);
 8000fa6:	e7bf      	b.n	8000f28 <ASPEP_RXframeProcess+0x7c>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000fa8:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000faa:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000fac:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fb0:	f894 506c 	ldrb.w	r5, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000fb4:	f894 606e 	ldrb.w	r6, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000fb8:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8000fbc:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8000fc0:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000fc2:	4281      	cmp	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8000fc4:	f3c2 3c86 	ubfx	ip, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000fc8:	bf28      	it	cs
 8000fca:	4601      	movcs	r1, r0
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fcc:	42ab      	cmp	r3, r5
 8000fce:	4698      	mov	r8, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8000fd0:	f3c2 5e46 	ubfx	lr, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fd4:	bf28      	it	cs
 8000fd6:	46a8      	movcs	r8, r5
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000fd8:	45b4      	cmp	ip, r6
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8000fda:	f884 806c 	strb.w	r8, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000fde:	46e0      	mov	r8, ip
 8000fe0:	bf28      	it	cs
 8000fe2:	46b0      	movcs	r8, r6
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000fe4:	45be      	cmp	lr, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8000fe6:	f884 806e 	strb.w	r8, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000fea:	46f0      	mov	r8, lr
 8000fec:	bf28      	it	cs
 8000fee:	46b8      	movcs	r8, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ff0:	42ab      	cmp	r3, r5
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8000ff2:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8000ff6:	f884 806f 	strb.w	r8, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8000ffa:	f240 8088 	bls.w	800110e <ASPEP_RXframeProcess+0x262>
              pHandle->ASPEP_State = ASPEP_IDLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	f884 3064 	strb.w	r3, [r4, #100]	; 0x64
            ASPEP_sendBeacon(pHandle, &pHandle->Capabilities);
 8001004:	f104 016c 	add.w	r1, r4, #108	; 0x6c
 8001008:	4620      	mov	r0, r4
 800100a:	f7ff fdb3 	bl	8000b74 <ASPEP_sendBeacon>
  uint8_t *result = NULL;
 800100e:	2500      	movs	r5, #0
 8001010:	e75f      	b.n	8000ed2 <ASPEP_RXframeProcess+0x26>
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001012:	7f03      	ldrb	r3, [r0, #28]
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001014:	7f40      	ldrb	r0, [r0, #29]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001016:	f894 106d 	ldrb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800101a:	f894 606c 	ldrb.w	r6, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800101e:	f894 c06e 	ldrb.w	ip, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001022:	f894 706f 	ldrb.w	r7, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001026:	f000 003f 	and.w	r0, r0, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 800102a:	09db      	lsrs	r3, r3, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800102c:	4281      	cmp	r1, r0
 800102e:	bf28      	it	cs
 8001030:	4601      	movcs	r1, r0
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001032:	f3c2 3e86 	ubfx	lr, r2, #14, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001036:	42b3      	cmp	r3, r6
 8001038:	4699      	mov	r9, r3
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 800103a:	f3c2 5846 	ubfx	r8, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800103e:	bf28      	it	cs
 8001040:	46b1      	movcs	r9, r6
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001042:	45e6      	cmp	lr, ip
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001044:	f884 906c 	strb.w	r9, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001048:	46f1      	mov	r9, lr
 800104a:	bf28      	it	cs
 800104c:	46e1      	movcs	r9, ip
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800104e:	45b8      	cmp	r8, r7
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001050:	f884 906e 	strb.w	r9, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001054:	46c1      	mov	r9, r8
 8001056:	bf28      	it	cs
 8001058:	46b9      	movcs	r9, r7
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 800105a:	42b3      	cmp	r3, r6
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800105c:	f884 106d 	strb.w	r1, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 8001060:	f884 906f 	strb.w	r9, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 8001064:	d964      	bls.n	8001130 <ASPEP_RXframeProcess+0x284>
 8001066:	f884 5064 	strb.w	r5, [r4, #100]	; 0x64
 800106a:	e7cb      	b.n	8001004 <ASPEP_RXframeProcess+0x158>
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 800106c:	7f65      	ldrb	r5, [r4, #29]
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 800106e:	7f00      	ldrb	r0, [r0, #28]
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001070:	f894 306d 	ldrb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001074:	f894 c06c 	ldrb.w	ip, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 8001078:	f894 e06e 	ldrb.w	lr, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 800107c:	f894 806f 	ldrb.w	r8, [r4, #111]	; 0x6f
  MasterCapabilities.RX_maxSize =  pHandle->rxHeader[1] &0x3FU; /*Bits 8 to  13*/
 8001080:	f005 053f 	and.w	r5, r5, #63	; 0x3f
  MasterCapabilities.DATA_CRC = pHandle->rxHeader[0] >> 7U ;      /*Bit 7 */
 8001084:	09c0      	lsrs	r0, r0, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 8001086:	42ab      	cmp	r3, r5
  MasterCapabilities.TXS_maxSize = (uint8_t)((packetHeader&0x01FC000U)  >> 14); /*Bits 14 to 20 */
 8001088:	f3c2 3786 	ubfx	r7, r2, #14, #7
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 800108c:	bf28      	it	cs
 800108e:	462b      	movcs	r3, r5
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001090:	4560      	cmp	r0, ip
 8001092:	4601      	mov	r1, r0
  MasterCapabilities.TXA_maxSize = (uint8_t)((packetHeader&0xFE00000U) >> 21); /*Bits 21 to 27  */
 8001094:	f3c2 5946 	ubfx	r9, r2, #21, #7
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 8001098:	bf28      	it	cs
 800109a:	4661      	movcs	r1, ip
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 800109c:	4577      	cmp	r7, lr
  pHandle->Capabilities.DATA_CRC = MIN(pHandle->Capabilities.DATA_CRC ,MasterCapabilities.DATA_CRC);
 800109e:	f884 106c 	strb.w	r1, [r4, #108]	; 0x6c
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010a2:	4639      	mov	r1, r7
 80010a4:	bf28      	it	cs
 80010a6:	4671      	movcs	r1, lr
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010a8:	45c1      	cmp	r9, r8
 80010aa:	464e      	mov	r6, r9
 80010ac:	bf28      	it	cs
 80010ae:	4646      	movcs	r6, r8
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80010b0:	4560      	cmp	r0, ip
  pHandle->Capabilities.RX_maxSize = MIN(pHandle->Capabilities.RX_maxSize, MasterCapabilities.RX_maxSize);
 80010b2:	f884 306d 	strb.w	r3, [r4, #109]	; 0x6d
  pHandle->Capabilities.TXS_maxSize = MIN(pHandle->Capabilities.TXS_maxSize, MasterCapabilities.TXS_maxSize);
 80010b6:	f884 106e 	strb.w	r1, [r4, #110]	; 0x6e
  pHandle->Capabilities.TXA_maxSize = MIN(pHandle->Capabilities.TXA_maxSize, MasterCapabilities.TXA_maxSize);
 80010ba:	f884 606f 	strb.w	r6, [r4, #111]	; 0x6f
  if ((MasterCapabilities.DATA_CRC != pHandle->Capabilities.DATA_CRC)
 80010be:	d8a1      	bhi.n	8001004 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 80010c0:	429d      	cmp	r5, r3
 80010c2:	d89f      	bhi.n	8001004 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 80010c4:	4577      	cmp	r7, lr
 80010c6:	d89d      	bhi.n	8001004 <ASPEP_RXframeProcess+0x158>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 80010c8:	45c1      	cmp	r9, r8
 80010ca:	d89b      	bhi.n	8001004 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 80010cc:	f894 0070 	ldrb.w	r0, [r4, #112]	; 0x70
 80010d0:	f3c2 1202 	ubfx	r2, r2, #4, #3
 80010d4:	4290      	cmp	r0, r2
 80010d6:	d195      	bne.n	8001004 <ASPEP_RXframeProcess+0x158>
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80010d8:	1c4a      	adds	r2, r1, #1
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80010da:	3301      	adds	r3, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80010dc:	b2d2      	uxtb	r2, r2
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80010de:	b2db      	uxtb	r3, r3
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80010e0:	0152      	lsls	r2, r2, #5
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80010e2:	01b6      	lsls	r6, r6, #6
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80010e4:	015b      	lsls	r3, r3, #5
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80010e6:	2101      	movs	r1, #1
              pSupHandle->txSyncMaxPayload = (pHandle->Capabilities.TXS_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80010e8:	81a2      	strh	r2, [r4, #12]
              pSupHandle->txAsyncMaxPayload = (pHandle->Capabilities.TXA_maxSize) * (uint16_t)64U;
 80010ea:	81e6      	strh	r6, [r4, #14]
              pHandle->maxRXPayload = (pHandle->Capabilities.RX_maxSize + (uint16_t)1U) * (uint16_t)32U;
 80010ec:	f8a4 305e 	strh.w	r3, [r4, #94]	; 0x5e
              pHandle->ASPEP_State = ASPEP_CONFIGURED;
 80010f0:	f884 1064 	strb.w	r1, [r4, #100]	; 0x64
 80010f4:	e786      	b.n	8001004 <ASPEP_RXframeProcess+0x158>
            ASPEP_sendPing(pHandle, ASPEP_PING_RESET, packetNumber);
 80010f6:	f3c2 320f 	ubfx	r2, r2, #12, #16
 80010fa:	4631      	mov	r1, r6
 80010fc:	f7ff fd80 	bl	8000c00 <ASPEP_sendPing>
  uint8_t *result = NULL;
 8001100:	4635      	mov	r5, r6
 8001102:	e6e6      	b.n	8000ed2 <ASPEP_RXframeProcess+0x26>
            ASPEP_sendPing(pHandle, ASPEP_PING_CFG, packetNumber);
 8001104:	7f42      	ldrb	r2, [r0, #29]
 8001106:	2101      	movs	r1, #1
 8001108:	f7ff fd7a 	bl	8000c00 <ASPEP_sendPing>
 800110c:	e6e1      	b.n	8000ed2 <ASPEP_RXframeProcess+0x26>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 800110e:	4288      	cmp	r0, r1
 8001110:	f63f af75 	bhi.w	8000ffe <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001114:	45b4      	cmp	ip, r6
 8001116:	f63f af72 	bhi.w	8000ffe <ASPEP_RXframeProcess+0x152>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 800111a:	45be      	cmp	lr, r7
 800111c:	f63f af6f 	bhi.w	8000ffe <ASPEP_RXframeProcess+0x152>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 8001120:	f894 3070 	ldrb.w	r3, [r4, #112]	; 0x70
 8001124:	f3c2 1202 	ubfx	r2, r2, #4, #3
 8001128:	4293      	cmp	r3, r2
 800112a:	f47f af68 	bne.w	8000ffe <ASPEP_RXframeProcess+0x152>
 800112e:	e769      	b.n	8001004 <ASPEP_RXframeProcess+0x158>
   || (MasterCapabilities.RX_maxSize > pHandle->Capabilities.RX_maxSize)
 8001130:	4288      	cmp	r0, r1
 8001132:	d898      	bhi.n	8001066 <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXS_maxSize != MasterCapabilities.TXS_maxSize )
 8001134:	45e6      	cmp	lr, ip
 8001136:	d896      	bhi.n	8001066 <ASPEP_RXframeProcess+0x1ba>
   || (pHandle->Capabilities.TXA_maxSize != MasterCapabilities.TXA_maxSize )
 8001138:	45b8      	cmp	r8, r7
 800113a:	d894      	bhi.n	8001066 <ASPEP_RXframeProcess+0x1ba>
   || (MasterCapabilities.version != pHandle->Capabilities.version) )
 800113c:	f894 5070 	ldrb.w	r5, [r4, #112]	; 0x70
 8001140:	f3c2 1202 	ubfx	r2, r2, #4, #3
              pHandle->ASPEP_State = ASPEP_IDLE;
 8001144:	1aab      	subs	r3, r5, r2
 8001146:	425d      	negs	r5, r3
 8001148:	415d      	adcs	r5, r3
 800114a:	e78c      	b.n	8001066 <ASPEP_RXframeProcess+0x1ba>
 800114c:	08007bc0 	.word	0x08007bc0
 8001150:	08007bb0 	.word	0x08007bb0

08001154 <ASPEP_HWDataReceivedIT>:

/* This function is called once DMA has transfered the configure number of byte*/
void ASPEP_HWDataReceivedIT(ASPEP_Handle_t *pHandle)
{
 8001154:	b510      	push	{r4, lr}
    /* Upon reception of a Newpacket the DMA will be re-configured only once the answer has been sent.
      * This is mandatory to avoid a race condition in case of a new packet is received while executing ASPEP_
      * RXframeProcess
      * If the packet received contains an error in the header, the HW IP will be re-synchronised first, and DMA will be
      * configured after.*/
    switch (pHandle->ASPEP_TL_State)
 8001156:	f890 3065 	ldrb.w	r3, [r0, #101]	; 0x65
{
 800115a:	4604      	mov	r4, r0
    switch (pHandle->ASPEP_TL_State)
 800115c:	b13b      	cbz	r3, 800116e <ASPEP_HWDataReceivedIT+0x1a>
 800115e:	2b01      	cmp	r3, #1
 8001160:	d104      	bne.n	800116c <ASPEP_HWDataReceivedIT+0x18>
        break;
      }

      case WAITING_PAYLOAD:
      {
        pHandle->ASPEP_TL_State = WAITING_PACKET;
 8001162:	2200      	movs	r2, #0
 8001164:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
        /* Payload received, */
        pHandle->NewPacketAvailable = true;
 8001168:	f880 3061 	strb.w	r3, [r0, #97]	; 0x61
        break;
    }
#ifdef NULL_PTR_ASP
  }
#endif
}
 800116c:	bd10      	pop	{r4, pc}
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 800116e:	69c1      	ldr	r1, [r0, #28]
  crc = CRC4_Lookup8[crc ^ (uint8_t)(header         & 0xffU)];
 8001170:	4a1e      	ldr	r2, [pc, #120]	; (80011ec <ASPEP_HWDataReceivedIT+0x98>)
 8001172:	b2cb      	uxtb	r3, r1
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 8U) & 0xffU)];
 8001174:	5cd3      	ldrb	r3, [r2, r3]
 8001176:	ea83 2311 	eor.w	r3, r3, r1, lsr #8
 800117a:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 16U) & 0xffU)];
 800117c:	5cd3      	ldrb	r3, [r2, r3]
 800117e:	ea83 4311 	eor.w	r3, r3, r1, lsr #16
 8001182:	b2db      	uxtb	r3, r3
  crc = CRC4_Lookup8[crc ^ (uint8_t)((header >> 24U) & 0xffU)];
 8001184:	5cd3      	ldrb	r3, [r2, r3]
 8001186:	ea83 6111 	eor.w	r1, r3, r1, lsr #24
        if (ASPEP_CheckHeaderCRC(*(uint32_t *)pHandle->rxHeader) == true) //cstat !MISRAC2012-Rule-11.3
 800118a:	5c53      	ldrb	r3, [r2, r1]
 800118c:	b95b      	cbnz	r3, 80011a6 <ASPEP_HWDataReceivedIT+0x52>
          pHandle->rxPacketType = (ASPEP_packetType)(((uint32_t)pHandle->rxHeader[0]) & ID_MASK);
 800118e:	7f03      	ldrb	r3, [r0, #28]
 8001190:	f003 030f 	and.w	r3, r3, #15
 8001194:	2b06      	cmp	r3, #6
 8001196:	6683      	str	r3, [r0, #104]	; 0x68
          switch (pHandle->rxPacketType)
 8001198:	d809      	bhi.n	80011ae <ASPEP_HWDataReceivedIT+0x5a>
 800119a:	2b04      	cmp	r3, #4
 800119c:	d81e      	bhi.n	80011dc <ASPEP_HWDataReceivedIT+0x88>
              pHandle->badPacketFlag = ASPEP_BAD_PACKET_TYPE;
 800119e:	2301      	movs	r3, #1
 80011a0:	f884 3062 	strb.w	r3, [r4, #98]	; 0x62
}
 80011a4:	bd10      	pop	{r4, pc}
          pHandle->badPacketFlag = ASPEP_BAD_CRC_HEADER;
 80011a6:	2304      	movs	r3, #4
 80011a8:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 80011ac:	bd10      	pop	{r4, pc}
 80011ae:	2b09      	cmp	r3, #9
 80011b0:	d1f5      	bne.n	800119e <ASPEP_HWDataReceivedIT+0x4a>
              pHandle->rxLength = (uint16_t)((*((uint16_t *)pHandle->rxHeader) & 0x1FFF0U) >> (uint16_t)4);
 80011b2:	8b83      	ldrh	r3, [r0, #28]
 80011b4:	091b      	lsrs	r3, r3, #4
 80011b6:	f8a0 305c 	strh.w	r3, [r0, #92]	; 0x5c
              if (0U == pHandle->rxLength) /* data packet with length 0 is a valid packet */
 80011ba:	b17b      	cbz	r3, 80011dc <ASPEP_HWDataReceivedIT+0x88>
              else if (pHandle->rxLength <= pHandle->maxRXPayload)
 80011bc:	f8b0 205e 	ldrh.w	r2, [r0, #94]	; 0x5e
 80011c0:	429a      	cmp	r2, r3
 80011c2:	d30f      	bcc.n	80011e4 <ASPEP_HWDataReceivedIT+0x90>
                pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxBuffer,  /* need to read + 2 bytes CRC*/
 80011c4:	f890 206c 	ldrb.w	r2, [r0, #108]	; 0x6c
 80011c8:	6981      	ldr	r1, [r0, #24]
 80011ca:	6940      	ldr	r0, [r0, #20]
 80011cc:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 80011d0:	6d63      	ldr	r3, [r4, #84]	; 0x54
 80011d2:	4798      	blx	r3
                pHandle->ASPEP_TL_State = WAITING_PAYLOAD;
 80011d4:	2301      	movs	r3, #1
 80011d6:	f884 3065 	strb.w	r3, [r4, #101]	; 0x65
}
 80011da:	bd10      	pop	{r4, pc}
              pHandle->NewPacketAvailable = true;
 80011dc:	2301      	movs	r3, #1
 80011de:	f884 3061 	strb.w	r3, [r4, #97]	; 0x61
}
 80011e2:	bd10      	pop	{r4, pc}
                pHandle->badPacketFlag = ASPEP_BAD_PACKET_SIZE;
 80011e4:	2302      	movs	r3, #2
 80011e6:	f880 3062 	strb.w	r3, [r0, #98]	; 0x62
}
 80011ea:	bd10      	pop	{r4, pc}
 80011ec:	08007bc0 	.word	0x08007bc0

080011f0 <ASPEP_HWDMAReset>:

/* Called after debugger has stopped the MCU*/
void ASPEP_HWDMAReset(ASPEP_Handle_t *pHandle)
{
 80011f0:	4601      	mov	r1, r0
  {
#endif
    /* We must reset the RX state machine to be sure to not be in Waiting packet state */
    /* Otherwise the arrival of a new packet will trigger a NewPacketAvailable despite */
    /* the fact that bytes have been lost because of overrun (debugger paused for instance) */
    pHandle->ASPEP_TL_State = WAITING_PACKET;
 80011f2:	2200      	movs	r2, #0
 80011f4:	f880 2065 	strb.w	r2, [r0, #101]	; 0x65
    pHandle->fASPEP_receive(pHandle->HWIp, pHandle->rxHeader, ASPEP_HEADER_SIZE);
 80011f8:	6d43      	ldr	r3, [r0, #84]	; 0x54
 80011fa:	6940      	ldr	r0, [r0, #20]
 80011fc:	2204      	movs	r2, #4
 80011fe:	311c      	adds	r1, #28
 8001200:	4718      	bx	r3
 8001202:	bf00      	nop
 8001204:	0000      	movs	r0, r0
	...

08001208 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001208:	b510      	push	{r4, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120a:	2300      	movs	r3, #0
{
 800120c:	b094      	sub	sp, #80	; 0x50
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800120e:	e9cd 330a 	strd	r3, r3, [sp, #40]	; 0x28
 8001212:	e9cd 330c 	strd	r3, r3, [sp, #48]	; 0x30
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001216:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800121a:	e9cd 3304 	strd	r3, r3, [sp, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800121e:	4926      	ldr	r1, [pc, #152]	; (80012b8 <SystemClock_Config+0xb0>)
 8001220:	9300      	str	r3, [sp, #0]
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001222:	9306      	str	r3, [sp, #24]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001224:	6c08      	ldr	r0, [r1, #64]	; 0x40
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001226:	4a25      	ldr	r2, [pc, #148]	; (80012bc <SystemClock_Config+0xb4>)
  __HAL_RCC_PWR_CLK_ENABLE();
 8001228:	f040 5080 	orr.w	r0, r0, #268435456	; 0x10000000
 800122c:	6408      	str	r0, [r1, #64]	; 0x40
 800122e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8001230:	f001 5180 	and.w	r1, r1, #268435456	; 0x10000000
 8001234:	9100      	str	r1, [sp, #0]
 8001236:	9900      	ldr	r1, [sp, #0]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8001238:	9301      	str	r3, [sp, #4]
 800123a:	6813      	ldr	r3, [r2, #0]
 800123c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8001240:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001244:	6013      	str	r3, [r2, #0]
 8001246:	6813      	ldr	r3, [r2, #0]
 8001248:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800124c:	9301      	str	r3, [sp, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800124e:	2001      	movs	r0, #1
 8001250:	f44f 3180 	mov.w	r1, #65536	; 0x10000
 8001254:	e9cd 0108 	strd	r0, r1, [sp, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001258:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 4;
 800125a:	2204      	movs	r2, #4
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800125c:	9801      	ldr	r0, [sp, #4]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800125e:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
  RCC_OscInitStruct.PLL.PLLN = 84;
 8001262:	2354      	movs	r3, #84	; 0x54
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 4;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001264:	a808      	add	r0, sp, #32
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001266:	e9cd 410e 	strd	r4, r1, [sp, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLN = 84;
 800126a:	e9cd 2310 	strd	r2, r3, [sp, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800126e:	e9cd 4212 	strd	r4, r2, [sp, #72]	; 0x48
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001272:	f003 fdbb 	bl	8004dec <HAL_RCC_OscConfig>
 8001276:	b108      	cbz	r0, 800127c <SystemClock_Config+0x74>
  __ASM volatile ("cpsid i" : : : "memory");
 8001278:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800127a:	e7fe      	b.n	800127a <SystemClock_Config+0x72>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800127c:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80012a8 <SystemClock_Config+0xa0>
 8001280:	ed8d 7b02 	vstr	d7, [sp, #8]
 8001284:	ed9f 7b0a 	vldr	d7, [pc, #40]	; 80012b0 <SystemClock_Config+0xa8>
 8001288:	4603      	mov	r3, r0
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800128a:	4621      	mov	r1, r4
 800128c:	a802      	add	r0, sp, #8
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800128e:	ed8d 7b04 	vstr	d7, [sp, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001292:	9306      	str	r3, [sp, #24]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001294:	f003 ffc8 	bl	8005228 <HAL_RCC_ClockConfig>
 8001298:	b108      	cbz	r0, 800129e <SystemClock_Config+0x96>
 800129a:	b672      	cpsid	i
  while (1)
 800129c:	e7fe      	b.n	800129c <SystemClock_Config+0x94>
  HAL_RCC_EnableCSS();
 800129e:	f003 ff89 	bl	80051b4 <HAL_RCC_EnableCSS>
}
 80012a2:	b014      	add	sp, #80	; 0x50
 80012a4:	bd10      	pop	{r4, pc}
 80012a6:	bf00      	nop
 80012a8:	0000000f 	.word	0x0000000f
 80012ac:	00000002 	.word	0x00000002
 80012b0:	00000000 	.word	0x00000000
 80012b4:	00001000 	.word	0x00001000
 80012b8:	40023800 	.word	0x40023800
 80012bc:	40007000 	.word	0x40007000

080012c0 <main>:
{
 80012c0:	e92d 4880 	stmdb	sp!, {r7, fp, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	2400      	movs	r4, #0
{
 80012c6:	b09d      	sub	sp, #116	; 0x74
  HAL_Init();
 80012c8:	f003 f924 	bl	8004514 <HAL_Init>
  SystemClock_Config();
 80012cc:	f7ff ff9c 	bl	8001208 <SystemClock_Config>
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012d0:	e9cd 4414 	strd	r4, r4, [sp, #80]	; 0x50
 80012d4:	e9cd 4416 	strd	r4, r4, [sp, #88]	; 0x58
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012d8:	4eaa      	ldr	r6, [pc, #680]	; (8001584 <main+0x2c4>)
 80012da:	9401      	str	r4, [sp, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	9418      	str	r4, [sp, #96]	; 0x60
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012de:	6b33      	ldr	r3, [r6, #48]	; 0x30
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80012e0:	48a9      	ldr	r0, [pc, #676]	; (8001588 <main+0x2c8>)
  hadc1.Instance = ADC1;
 80012e2:	4daa      	ldr	r5, [pc, #680]	; (800158c <main+0x2cc>)
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012e4:	f043 0304 	orr.w	r3, r3, #4
 80012e8:	6333      	str	r3, [r6, #48]	; 0x30
 80012ea:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80012ec:	f003 0304 	and.w	r3, r3, #4
 80012f0:	9301      	str	r3, [sp, #4]
 80012f2:	9b01      	ldr	r3, [sp, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80012f4:	9402      	str	r4, [sp, #8]
 80012f6:	6b33      	ldr	r3, [r6, #48]	; 0x30
 80012f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80012fc:	6333      	str	r3, [r6, #48]	; 0x30
 80012fe:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001300:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001304:	9302      	str	r3, [sp, #8]
 8001306:	9b02      	ldr	r3, [sp, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001308:	9403      	str	r4, [sp, #12]
 800130a:	6b33      	ldr	r3, [r6, #48]	; 0x30
 800130c:	f043 0301 	orr.w	r3, r3, #1
 8001310:	6333      	str	r3, [r6, #48]	; 0x30
 8001312:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001314:	f003 0301 	and.w	r3, r3, #1
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001318:	2120      	movs	r1, #32
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131a:	9303      	str	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800131c:	4622      	mov	r2, r4
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800131e:	9b03      	ldr	r3, [sp, #12]
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001320:	f003 fd60 	bl	8004de4 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOC, M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin, GPIO_PIN_RESET);
 8001324:	489a      	ldr	r0, [pc, #616]	; (8001590 <main+0x2d0>)
 8001326:	4622      	mov	r2, r4
 8001328:	f44f 51e0 	mov.w	r1, #7168	; 0x1c00
 800132c:	f003 fd5a 	bl	8004de4 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 8001330:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001334:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001338:	4895      	ldr	r0, [pc, #596]	; (8001590 <main+0x2d0>)
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	9416      	str	r4, [sp, #88]	; 0x58
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 800133c:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = Start_Stop_Pin;
 800133e:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  GPIO_InitStruct.Pin = LD2_Pin;
 8001342:	f04f 0a00 	mov.w	sl, #0
  HAL_GPIO_Init(Start_Stop_GPIO_Port, &GPIO_InitStruct);
 8001346:	f003 fc5b 	bl	8004c00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = LD2_Pin;
 800134a:	f04f 0b00 	mov.w	fp, #0
 800134e:	2220      	movs	r2, #32
 8001350:	2301      	movs	r3, #1
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001352:	488d      	ldr	r0, [pc, #564]	; (8001588 <main+0x2c8>)
 8001354:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = LD2_Pin;
 8001356:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800135a:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800135e:	f003 fc4f 	bl	8004c00 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8001362:	f44f 52e0 	mov.w	r2, #7168	; 0x1c00
 8001366:	2301      	movs	r3, #1
 8001368:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800136c:	4888      	ldr	r0, [pc, #544]	; (8001590 <main+0x2d0>)
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 800136e:	2202      	movs	r2, #2
 8001370:	2302      	movs	r3, #2
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001372:	a914      	add	r1, sp, #80	; 0x50
  GPIO_InitStruct.Pin = M1_PWM_EN_U_Pin|M1_PWM_EN_V_Pin|M1_PWM_EN_W_Pin;
 8001374:	e9cd 2316 	strd	r2, r3, [sp, #88]	; 0x58
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001378:	f003 fc42 	bl	8004c00 <HAL_GPIO_Init>
  __HAL_RCC_DMA1_CLK_ENABLE();
 800137c:	9400      	str	r4, [sp, #0]
 800137e:	6b33      	ldr	r3, [r6, #48]	; 0x30
 8001380:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001384:	6333      	str	r3, [r6, #48]	; 0x30
 8001386:	6b33      	ldr	r3, [r6, #48]	; 0x30
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001388:	f04f 0820 	mov.w	r8, #32
  __HAL_RCC_DMA1_CLK_ENABLE();
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	9300      	str	r3, [sp, #0]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 8001392:	4642      	mov	r2, r8
 8001394:	4621      	mov	r1, r4
 8001396:	a814      	add	r0, sp, #80	; 0x50
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001398:	9b00      	ldr	r3, [sp, #0]
  ADC_InjectionConfTypeDef sConfigInjected = {0};
 800139a:	f006 fbf5 	bl	8007b88 <memset>
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800139e:	487d      	ldr	r0, [pc, #500]	; (8001594 <main+0x2d4>)
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013a0:	4a7d      	ldr	r2, [pc, #500]	; (8001598 <main+0x2d8>)
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80013a2:	60ac      	str	r4, [r5, #8]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80013a4:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80013a8:	e9c5 0300 	strd	r0, r3, [r5]
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 80013ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80013b0:	60eb      	str	r3, [r5, #12]
  hadc1.Init.NbrOfConversion = 2;
 80013b2:	2302      	movs	r3, #2
 80013b4:	61eb      	str	r3, [r5, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013b6:	2300      	movs	r3, #0
  hadc1.Init.ScanConvMode = ENABLE;
 80013b8:	2701      	movs	r7, #1
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80013ba:	e9c5 230a 	strd	r2, r3, [r5, #40]	; 0x28
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013be:	4628      	mov	r0, r5
  ADC_ChannelConfTypeDef sConfig = {0};
 80013c0:	e9cd 440c 	strd	r4, r4, [sp, #48]	; 0x30
 80013c4:	e9cd 440e 	strd	r4, r4, [sp, #56]	; 0x38
  hadc1.Init.ScanConvMode = ENABLE;
 80013c8:	612f      	str	r7, [r5, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80013ca:	762c      	strb	r4, [r5, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80013cc:	f885 4020 	strb.w	r4, [r5, #32]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80013d0:	f885 4030 	strb.w	r4, [r5, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80013d4:	616f      	str	r7, [r5, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80013d6:	f003 f8c9 	bl	800456c <HAL_ADC_Init>
 80013da:	b108      	cbz	r0, 80013e0 <main+0x120>
 80013dc:	b672      	cpsid	i
  while (1)
 80013de:	e7fe      	b.n	80013de <main+0x11e>
  sConfigInjected.InjectedNbrOfConversion = 3;
 80013e0:	2303      	movs	r3, #3
  sConfigInjected.InjectedRank = 1;
 80013e2:	e9cd 0714 	strd	r0, r7, [sp, #80]	; 0x50
  sConfigInjected.InjectedDiscontinuousConvMode = DISABLE;
 80013e6:	f8ad 0064 	strh.w	r0, [sp, #100]	; 0x64
  sConfigInjected.InjectedOffset = 0;
 80013ea:	9017      	str	r0, [sp, #92]	; 0x5c
  sConfigInjected.InjectedNbrOfConversion = 3;
 80013ec:	9318      	str	r3, [sp, #96]	; 0x60
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80013ee:	2200      	movs	r2, #0
 80013f0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80013f4:	a914      	add	r1, sp, #80	; 0x50
 80013f6:	4628      	mov	r0, r5
  sConfigInjected.ExternalTrigInjecConv = ADC_EXTERNALTRIGINJECCONV_T1_CC4;
 80013f8:	e9cd 231a 	strd	r2, r3, [sp, #104]	; 0x68
  sConfigInjected.InjectedSamplingTime = ADC_SAMPLETIME_15CYCLES;
 80013fc:	9716      	str	r7, [sp, #88]	; 0x58
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 80013fe:	f003 fa11 	bl	8004824 <HAL_ADCEx_InjectedConfigChannel>
 8001402:	b108      	cbz	r0, 8001408 <main+0x148>
 8001404:	b672      	cpsid	i
  while (1)
 8001406:	e7fe      	b.n	8001406 <main+0x146>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001408:	220b      	movs	r2, #11
 800140a:	2302      	movs	r3, #2
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800140c:	a914      	add	r1, sp, #80	; 0x50
 800140e:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_11;
 8001410:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001414:	f003 fa06 	bl	8004824 <HAL_ADCEx_InjectedConfigChannel>
 8001418:	b108      	cbz	r0, 800141e <main+0x15e>
 800141a:	b672      	cpsid	i
  while (1)
 800141c:	e7fe      	b.n	800141c <main+0x15c>
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 800141e:	220a      	movs	r2, #10
 8001420:	2303      	movs	r3, #3
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 8001422:	a914      	add	r1, sp, #80	; 0x50
 8001424:	4628      	mov	r0, r5
  sConfigInjected.InjectedChannel = ADC_CHANNEL_10;
 8001426:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
  if (HAL_ADCEx_InjectedConfigChannel(&hadc1, &sConfigInjected) != HAL_OK)
 800142a:	f003 f9fb 	bl	8004824 <HAL_ADCEx_InjectedConfigChannel>
 800142e:	b108      	cbz	r0, 8001434 <main+0x174>
 8001430:	b672      	cpsid	i
  while (1)
 8001432:	e7fe      	b.n	8001432 <main+0x172>
  sConfig.Channel = ADC_CHANNEL_1;
 8001434:	2201      	movs	r2, #1
 8001436:	2301      	movs	r3, #1
 8001438:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800143c:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_1;
 800143e:	2202      	movs	r2, #2
 8001440:	2300      	movs	r3, #0
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001442:	4628      	mov	r0, r5
  sConfig.Channel = ADC_CHANNEL_1;
 8001444:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001448:	f003 f93e 	bl	80046c8 <HAL_ADC_ConfigChannel>
 800144c:	b108      	cbz	r0, 8001452 <main+0x192>
 800144e:	b672      	cpsid	i
  while (1)
 8001450:	e7fe      	b.n	8001450 <main+0x190>
  sConfig.Channel = ADC_CHANNEL_12;
 8001452:	220c      	movs	r2, #12
 8001454:	2302      	movs	r3, #2
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001456:	4628      	mov	r0, r5
 8001458:	a90c      	add	r1, sp, #48	; 0x30
  sConfig.Channel = ADC_CHANNEL_12;
 800145a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800145e:	f003 f933 	bl	80046c8 <HAL_ADC_ConfigChannel>
 8001462:	4604      	mov	r4, r0
 8001464:	b108      	cbz	r0, 800146a <main+0x1aa>
 8001466:	b672      	cpsid	i
  while (1)
 8001468:	e7fe      	b.n	8001468 <main+0x1a8>
  htim1.Instance = TIM1;
 800146a:	4d4c      	ldr	r5, [pc, #304]	; (800159c <main+0x2dc>)
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800146c:	9006      	str	r0, [sp, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800146e:	4601      	mov	r1, r0
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001470:	e9cd 000c 	strd	r0, r0, [sp, #48]	; 0x30
 8001474:	e9cd 000e 	strd	r0, r0, [sp, #56]	; 0x38
 8001478:	e9cd 0010 	strd	r0, r0, [sp, #64]	; 0x40
  TIM_SlaveConfigTypeDef sSlaveConfig = {0};
 800147c:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8001480:	e9cd 0009 	strd	r0, r0, [sp, #36]	; 0x24
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001484:	9004      	str	r0, [sp, #16]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001486:	9012      	str	r0, [sp, #72]	; 0x48
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001488:	9005      	str	r0, [sp, #20]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800148a:	4642      	mov	r2, r8
 800148c:	a814      	add	r0, sp, #80	; 0x50
 800148e:	f006 fb7b 	bl	8007b88 <memset>
  htim1.Instance = TIM1;
 8001492:	4b43      	ldr	r3, [pc, #268]	; (80015a0 <main+0x2e0>)
 8001494:	602b      	str	r3, [r5, #0]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 8001496:	f241 0168 	movw	r1, #4200	; 0x1068
 800149a:	f44f 7380 	mov.w	r3, #256	; 0x100
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800149e:	4628      	mov	r0, r5
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV2;
 80014a0:	e9c5 1303 	strd	r1, r3, [r5, #12]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 80014a4:	f8c5 8008 	str.w	r8, [r5, #8]
  htim1.Init.RepetitionCounter = (REP_COUNTER);
 80014a8:	616f      	str	r7, [r5, #20]
  htim1.Init.Prescaler = ((TIM_CLOCK_DIVIDER) - 1);
 80014aa:	606c      	str	r4, [r5, #4]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014ac:	61ac      	str	r4, [r5, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80014ae:	f003 ff7f 	bl	80053b0 <HAL_TIM_Base_Init>
 80014b2:	b108      	cbz	r0, 80014b8 <main+0x1f8>
 80014b4:	b672      	cpsid	i
  while (1)
 80014b6:	e7fe      	b.n	80014b6 <main+0x1f6>
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80014b8:	4628      	mov	r0, r5
 80014ba:	f003 fff9 	bl	80054b0 <HAL_TIM_PWM_Init>
 80014be:	b108      	cbz	r0, 80014c4 <main+0x204>
 80014c0:	b672      	cpsid	i
  while (1)
 80014c2:	e7fe      	b.n	80014c2 <main+0x202>
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80014c4:	2206      	movs	r2, #6
 80014c6:	2310      	movs	r3, #16
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80014c8:	a906      	add	r1, sp, #24
 80014ca:	4628      	mov	r0, r5
  sSlaveConfig.SlaveMode = TIM_SLAVEMODE_TRIGGER;
 80014cc:	e9cd 2306 	strd	r2, r3, [sp, #24]
  if (HAL_TIM_SlaveConfigSynchro(&htim1, &sSlaveConfig) != HAL_OK)
 80014d0:	f004 f972 	bl	80057b8 <HAL_TIM_SlaveConfigSynchro>
 80014d4:	b108      	cbz	r0, 80014da <main+0x21a>
 80014d6:	b672      	cpsid	i
  while (1)
 80014d8:	e7fe      	b.n	80014d8 <main+0x218>
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014da:	a904      	add	r1, sp, #16
 80014dc:	4628      	mov	r0, r5
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	e9cd ab04 	strd	sl, fp, [sp, #16]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80014e2:	f004 f9f5 	bl	80058d0 <HAL_TIMEx_MasterConfigSynchronization>
 80014e6:	b108      	cbz	r0, 80014ec <main+0x22c>
 80014e8:	b672      	cpsid	i
  while (1)
 80014ea:	e7fe      	b.n	80014ea <main+0x22a>
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014ec:	2060      	movs	r0, #96	; 0x60
 80014ee:	f640 0134 	movw	r1, #2100	; 0x834
 80014f2:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 80014f6:	2000      	movs	r0, #0
 80014f8:	2100      	movs	r1, #0
 80014fa:	e9cd 010e 	strd	r0, r1, [sp, #56]	; 0x38
 80014fe:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001502:	2200      	movs	r2, #0
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <main+0x2dc>)
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001506:	9212      	str	r2, [sp, #72]	; 0x48
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001508:	a90c      	add	r1, sp, #48	; 0x30
 800150a:	f004 f84f 	bl	80055ac <HAL_TIM_PWM_ConfigChannel>
 800150e:	b108      	cbz	r0, 8001514 <main+0x254>
 8001510:	b672      	cpsid	i
  while (1)
 8001512:	e7fe      	b.n	8001512 <main+0x252>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001514:	4821      	ldr	r0, [pc, #132]	; (800159c <main+0x2dc>)
 8001516:	2204      	movs	r2, #4
 8001518:	a90c      	add	r1, sp, #48	; 0x30
 800151a:	f004 f847 	bl	80055ac <HAL_TIM_PWM_ConfigChannel>
 800151e:	b108      	cbz	r0, 8001524 <main+0x264>
 8001520:	b672      	cpsid	i
  while (1)
 8001522:	e7fe      	b.n	8001522 <main+0x262>
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001524:	481d      	ldr	r0, [pc, #116]	; (800159c <main+0x2dc>)
 8001526:	2208      	movs	r2, #8
 8001528:	a90c      	add	r1, sp, #48	; 0x30
 800152a:	f004 f83f 	bl	80055ac <HAL_TIM_PWM_ConfigChannel>
 800152e:	b108      	cbz	r0, 8001534 <main+0x274>
 8001530:	b672      	cpsid	i
  while (1)
 8001532:	e7fe      	b.n	8001532 <main+0x272>
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001534:	f241 0367 	movw	r3, #4199	; 0x1067
 8001538:	2270      	movs	r2, #112	; 0x70
 800153a:	e9cd 230c 	strd	r2, r3, [sp, #48]	; 0x30
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800153e:	4817      	ldr	r0, [pc, #92]	; (800159c <main+0x2dc>)
 8001540:	a90c      	add	r1, sp, #48	; 0x30
 8001542:	220c      	movs	r2, #12
 8001544:	f004 f832 	bl	80055ac <HAL_TIM_PWM_ConfigChannel>
 8001548:	4603      	mov	r3, r0
 800154a:	b108      	cbz	r0, 8001550 <main+0x290>
 800154c:	b672      	cpsid	i
  while (1)
 800154e:	e7fe      	b.n	800154e <main+0x28e>
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001550:	f44f 6400 	mov.w	r4, #2048	; 0x800
 8001554:	f44f 6580 	mov.w	r5, #1024	; 0x400
 8001558:	e9cd 4514 	strd	r4, r5, [sp, #80]	; 0x50
 800155c:	f44f 7480 	mov.w	r4, #256	; 0x100
 8001560:	2500      	movs	r5, #0
 8001562:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <main+0x2dc>)
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001568:	931b      	str	r3, [sp, #108]	; 0x6c
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 800156a:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800156e:	a914      	add	r1, sp, #80	; 0x50
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_ENABLE;
 8001570:	2500      	movs	r5, #0
 8001572:	e9cd 4518 	strd	r4, r5, [sp, #96]	; 0x60
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001576:	f004 f9e3 	bl	8005940 <HAL_TIMEx_ConfigBreakDeadTime>
 800157a:	4604      	mov	r4, r0
 800157c:	b190      	cbz	r0, 80015a4 <main+0x2e4>
 800157e:	b672      	cpsid	i
  while (1)
 8001580:	e7fe      	b.n	8001580 <main+0x2c0>
 8001582:	bf00      	nop
 8001584:	40023800 	.word	0x40023800
 8001588:	40020000 	.word	0x40020000
 800158c:	200006a8 	.word	0x200006a8
 8001590:	40020800 	.word	0x40020800
 8001594:	40012000 	.word	0x40012000
 8001598:	0f000001 	.word	0x0f000001
 800159c:	200007b0 	.word	0x200007b0
 80015a0:	40010000 	.word	0x40010000
  HAL_TIM_MspPostInit(&htim1);
 80015a4:	4824      	ldr	r0, [pc, #144]	; (8001638 <main+0x378>)
 80015a6:	f002 fd3b 	bl	8004020 <HAL_TIM_MspPostInit>
  huart2.Instance = USART2;
 80015aa:	4b24      	ldr	r3, [pc, #144]	; (800163c <main+0x37c>)
 80015ac:	4824      	ldr	r0, [pc, #144]	; (8001640 <main+0x380>)
  huart2.Init.BaudRate = 1843200;
 80015ae:	f44f 11e1 	mov.w	r1, #1843200	; 0x1c2000
 80015b2:	e9c3 0100 	strd	r0, r1, [r3]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b6:	220c      	movs	r2, #12
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015b8:	4618      	mov	r0, r3
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015ba:	e9c3 4402 	strd	r4, r4, [r3, #8]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015be:	e9c3 4204 	strd	r4, r2, [r3, #16]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015c2:	e9c3 4406 	strd	r4, r4, [r3, #24]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c6:	f004 f9e5 	bl	8005994 <HAL_UART_Init>
 80015ca:	4604      	mov	r4, r0
 80015cc:	b108      	cbz	r0, 80015d2 <main+0x312>
 80015ce:	b672      	cpsid	i
  while (1)
 80015d0:	e7fe      	b.n	80015d0 <main+0x310>
  MX_MotorControl_Init();
 80015d2:	f001 f90d 	bl	80027f0 <MX_MotorControl_Init>
  HAL_NVIC_SetPriority(USART2_IRQn, 3, 1);
 80015d6:	2103      	movs	r1, #3
 80015d8:	2201      	movs	r2, #1
 80015da:	2026      	movs	r0, #38	; 0x26
 80015dc:	f003 fa0c 	bl	80049f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015e0:	2026      	movs	r0, #38	; 0x26
 80015e2:	f003 fa47 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 3, 0);
 80015e6:	4622      	mov	r2, r4
 80015e8:	2103      	movs	r1, #3
 80015ea:	2010      	movs	r0, #16
 80015ec:	f003 fa04 	bl	80049f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015f0:	2010      	movs	r0, #16
 80015f2:	f003 fa3f 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(ADC_IRQn, 2, 0);
 80015f6:	4622      	mov	r2, r4
 80015f8:	2102      	movs	r1, #2
 80015fa:	2012      	movs	r0, #18
 80015fc:	f003 f9fc 	bl	80049f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(ADC_IRQn);
 8001600:	2012      	movs	r0, #18
 8001602:	f003 fa37 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, 0, 0);
 8001606:	4622      	mov	r2, r4
 8001608:	4621      	mov	r1, r4
 800160a:	2019      	movs	r0, #25
 800160c:	f003 f9f4 	bl	80049f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001610:	2019      	movs	r0, #25
 8001612:	f003 fa2f 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 4, 1);
 8001616:	2104      	movs	r1, #4
 8001618:	2201      	movs	r2, #1
 800161a:	2018      	movs	r0, #24
 800161c:	f003 f9ec 	bl	80049f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001620:	2018      	movs	r0, #24
 8001622:	f003 fa27 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 3, 0);
 8001626:	2028      	movs	r0, #40	; 0x28
 8001628:	4622      	mov	r2, r4
 800162a:	2103      	movs	r1, #3
 800162c:	f003 f9e4 	bl	80049f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001630:	2028      	movs	r0, #40	; 0x28
 8001632:	f003 fa1f 	bl	8004a74 <HAL_NVIC_EnableIRQ>
  while (1)
 8001636:	e7fe      	b.n	8001636 <main+0x376>
 8001638:	200007b0 	.word	0x200007b0
 800163c:	200007f8 	.word	0x200007f8
 8001640:	40004400 	.word	0x40004400

08001644 <Error_Handler>:
 8001644:	b672      	cpsid	i
  while (1)
 8001646:	e7fe      	b.n	8001646 <Error_Handler+0x2>

08001648 <MC_StartMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StartMotor1(void)
{
	return MCI_StartMotor( pMCI[M1] );
 8001648:	4b01      	ldr	r3, [pc, #4]	; (8001650 <MC_StartMotor1+0x8>)
 800164a:	6818      	ldr	r0, [r3, #0]
 800164c:	f000 b88e 	b.w	800176c <MCI_StartMotor>
 8001650:	20001bb4 	.word	0x20001bb4

08001654 <MC_StopMotor1>:
  *
  * @retval returns true if the command is successfully executed, false otherwise.
  */
__weak bool MC_StopMotor1(void)
{
	return MCI_StopMotor( pMCI[M1] );
 8001654:	4b01      	ldr	r3, [pc, #4]	; (800165c <MC_StopMotor1+0x8>)
 8001656:	6818      	ldr	r0, [r3, #0]
 8001658:	f000 b89e 	b.w	8001798 <MCI_StopMotor>
 800165c:	20001bb4 	.word	0x20001bb4

08001660 <MC_GetMecSpeedAverageMotor1>:
/**
 * @brief Returns the last computed average mechanical rotor speed for Motor 1, expressed in the unit defined by #SPEED_UNIT
 */
__weak int16_t MC_GetMecSpeedAverageMotor1(void)
{
	return MCI_GetAvrgMecSpeedUnit( pMCI[M1] );
 8001660:	4b01      	ldr	r3, [pc, #4]	; (8001668 <MC_GetMecSpeedAverageMotor1+0x8>)
 8001662:	6818      	ldr	r0, [r3, #0]
 8001664:	f000 b902 	b.w	800186c <MCI_GetAvrgMecSpeedUnit>
 8001668:	20001bb4 	.word	0x20001bb4

0800166c <MC_GetSTMStateMotor1>:
/**
 * @brief returns the current state of Motor 1 state machine
 */
__weak MCI_State_t  MC_GetSTMStateMotor1(void)
{
	return MCI_GetSTMState( pMCI[M1] );
 800166c:	4b01      	ldr	r3, [pc, #4]	; (8001674 <MC_GetSTMStateMotor1+0x8>)
 800166e:	6818      	ldr	r0, [r3, #0]
 8001670:	f000 b876 	b.w	8001760 <MCI_GetSTMState>
 8001674:	20001bb4 	.word	0x20001bb4

08001678 <MCI_Init>:
    pHandle->pSTC = pSTC;
    pHandle->pFOCVars = pFOCVars;
    pHandle->pPWM = pPWMHandle;

    /* Buffer related initialization */
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001678:	f04f 0c00 	mov.w	ip, #0
    pHandle->pFOCVars = pFOCVars;
 800167c:	e9c0 1200 	strd	r1, r2, [r0]
    pHandle->pPWM = pPWMHandle;
 8001680:	6083      	str	r3, [r0, #8]
    pHandle->lastCommand = MCI_NOCOMMANDSYET;
 8001682:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = 0;
 8001686:	f8c0 c00e 	str.w	ip, [r0, #14]
    pHandle->hFinalTorque = 0;
    pHandle->hDurationms = 0;
 800168a:	f8a0 c016 	strh.w	ip, [r0, #22]
    pHandle->CommandState = MCI_BUFFER_EMPTY;
 800168e:	f880 c01e 	strb.w	ip, [r0, #30]
    pHandle->DirectCommand = MCI_NO_COMMAND;
 8001692:	f8a0 c018 	strh.w	ip, [r0, #24]
    pHandle->State = IDLE;
    pHandle->CurrentFaults = MC_NO_FAULTS;
 8001696:	f8c0 c01a 	str.w	ip, [r0, #26]
    pHandle->PastFaults = MC_NO_FAULTS;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800169a:	4770      	bx	lr

0800169c <MCI_ExecSpeedRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 800169c:	f04f 0c01 	mov.w	ip, #1
    pHandle->hFinalSpeed = hFinalSpeed;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016a0:	f240 1301 	movw	r3, #257	; 0x101
    pHandle->lastCommand = MCI_CMD_EXECSPEEDRAMP;
 80016a4:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalSpeed = hFinalSpeed;
 80016a8:	81c1      	strh	r1, [r0, #14]
    pHandle->hDurationms = hDurationms;
 80016aa:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016ac:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = STC_SPEED_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016ae:	4770      	bx	lr

080016b0 <MCI_ExecTorqueRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80016b0:	f04f 0c02 	mov.w	ip, #2
    pHandle->hFinalTorque = hFinalTorque;
    pHandle->hDurationms = hDurationms;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016b4:	2301      	movs	r3, #1
    pHandle->lastCommand = MCI_CMD_EXECTORQUERAMP;
 80016b6:	f880 c00c 	strb.w	ip, [r0, #12]
    pHandle->hFinalTorque = hFinalTorque;
 80016ba:	8201      	strh	r1, [r0, #16]
    pHandle->hDurationms = hDurationms;
 80016bc:	82c2      	strh	r2, [r0, #22]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016be:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016c0:	4770      	bx	lr
 80016c2:	bf00      	nop

080016c4 <MCI_SetCurrentReferences>:
  * @param  Iqdref current references on qd reference frame in qd_t
  *         format.
  * @retval none.
  */
__weak void MCI_SetCurrentReferences(MCI_Handle_t *pHandle, qd_t Iqdref)
{
 80016c4:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80016c6:	2203      	movs	r2, #3
    pHandle->Iqdref.q = Iqdref.q;
    pHandle->Iqdref.d = Iqdref.d;
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016c8:	2301      	movs	r3, #1
    pHandle->lastCommand = MCI_CMD_SETCURRENTREFERENCES;
 80016ca:	7302      	strb	r2, [r0, #12]
    pHandle->Iqdref.q = Iqdref.q;
 80016cc:	f8c0 1012 	str.w	r1, [r0, #18]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 80016d0:	83c3      	strh	r3, [r0, #30]
    pHandle->LastModalitySetByUser = STC_TORQUE_MODE;
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 80016d2:	b002      	add	sp, #8
 80016d4:	4770      	bx	lr
 80016d6:	bf00      	nop

080016d8 <MCI_FaultProcessing>:
 * @retval State_t New state machine state after fault processing
 */
__weak void MCI_FaultProcessing(MCI_Handle_t *pHandle, uint16_t hSetErrors, uint16_t hResetErrors)
{
  /* Set current errors */
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80016d8:	8b43      	ldrh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 80016da:	f8b0 c01c 	ldrh.w	ip, [r0, #28]
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80016de:	430b      	orrs	r3, r1
 80016e0:	ea23 0302 	bic.w	r3, r3, r2
  pHandle->PastFaults |= hSetErrors;
 80016e4:	ea41 010c 	orr.w	r1, r1, ip
  pHandle->CurrentFaults = (pHandle->CurrentFaults | hSetErrors ) & (~hResetErrors);
 80016e8:	8343      	strh	r3, [r0, #26]
  pHandle->PastFaults |= hSetErrors;
 80016ea:	8381      	strh	r1, [r0, #28]

  return;
}
 80016ec:	4770      	bx	lr
 80016ee:	bf00      	nop

080016f0 <MCI_ExecBufferedCommands>:
    /* Nothing to do */
  }
  else
  {
#endif
    if ( pHandle->CommandState == MCI_COMMAND_NOT_ALREADY_EXECUTED )
 80016f0:	7f83      	ldrb	r3, [r0, #30]
 80016f2:	2b01      	cmp	r3, #1
 80016f4:	d000      	beq.n	80016f8 <MCI_ExecBufferedCommands+0x8>
 80016f6:	4770      	bx	lr
{
 80016f8:	b510      	push	{r4, lr}
    {
      bool commandHasBeenExecuted = false;
      switch (pHandle->lastCommand)
 80016fa:	7b01      	ldrb	r1, [r0, #12]
 80016fc:	2902      	cmp	r1, #2
 80016fe:	4604      	mov	r4, r0
 8001700:	d006      	beq.n	8001710 <MCI_ExecBufferedCommands+0x20>
 8001702:	2903      	cmp	r1, #3
 8001704:	d024      	beq.n	8001750 <MCI_ExecBufferedCommands+0x60>
 8001706:	2901      	cmp	r1, #1
 8001708:	d014      	beq.n	8001734 <MCI_ExecBufferedCommands+0x44>
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
      }
      else
      {
        pHandle->CommandState = MCI_COMMAND_EXECUTED_UNSUCCESFULLY;
 800170a:	2303      	movs	r3, #3
 800170c:	77a3      	strb	r3, [r4, #30]
      }
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 800170e:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001710:	6843      	ldr	r3, [r0, #4]
 8001712:	2100      	movs	r1, #0
 8001714:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, STC_TORQUE_MODE);
 8001718:	6800      	ldr	r0, [r0, #0]
 800171a:	f005 fd73 	bl	8007204 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalTorque, pHandle->hDurationms);
 800171e:	8ae2      	ldrh	r2, [r4, #22]
 8001720:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8001724:	6820      	ldr	r0, [r4, #0]
 8001726:	f005 fd71 	bl	800720c <STC_ExecRamp>
      if (commandHasBeenExecuted)
 800172a:	2800      	cmp	r0, #0
 800172c:	d0ed      	beq.n	800170a <MCI_ExecBufferedCommands+0x1a>
        pHandle->CommandState = MCI_COMMAND_EXECUTED_SUCCESFULLY;
 800172e:	2302      	movs	r3, #2
 8001730:	77a3      	strb	r3, [r4, #30]
}
 8001732:	bd10      	pop	{r4, pc}
          pHandle->pFOCVars->bDriveInput = INTERNAL;
 8001734:	6843      	ldr	r3, [r0, #4]
 8001736:	2200      	movs	r2, #0
 8001738:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
          STC_SetControlMode(pHandle->pSTC, STC_SPEED_MODE);
 800173c:	6800      	ldr	r0, [r0, #0]
 800173e:	f005 fd61 	bl	8007204 <STC_SetControlMode>
          commandHasBeenExecuted = STC_ExecRamp(pHandle->pSTC, pHandle->hFinalSpeed, pHandle->hDurationms);
 8001742:	8ae2      	ldrh	r2, [r4, #22]
 8001744:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8001748:	6820      	ldr	r0, [r4, #0]
 800174a:	f005 fd5f 	bl	800720c <STC_ExecRamp>
          break;
 800174e:	e7ec      	b.n	800172a <MCI_ExecBufferedCommands+0x3a>
          pHandle->pFOCVars->bDriveInput = EXTERNAL;
 8001750:	6842      	ldr	r2, [r0, #4]
 8001752:	f882 3024 	strb.w	r3, [r2, #36]	; 0x24
          pHandle->pFOCVars->Iqdref = pHandle->Iqdref;
 8001756:	f8d0 3012 	ldr.w	r3, [r0, #18]
 800175a:	6113      	str	r3, [r2, #16]
      if (commandHasBeenExecuted)
 800175c:	e7e7      	b.n	800172e <MCI_ExecBufferedCommands+0x3e>
 800175e:	bf00      	nop

08001760 <MCI_GetSTMState>:
  * @retval State_t It returns the current state of the related pSTM object.
  */
__weak MCI_State_t  MCI_GetSTMState(MCI_Handle_t *pHandle)
{
  return (pHandle->State);
}
 8001760:	7e40      	ldrb	r0, [r0, #25]
 8001762:	4770      	bx	lr

08001764 <MCI_GetOccurredFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetOccurredFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->PastFaults);
}
 8001764:	8b80      	ldrh	r0, [r0, #28]
 8001766:	4770      	bx	lr

08001768 <MCI_GetCurrentFaults>:
  * \n\link Fault_generation_error_codes Returned error codes are listed here \endlink
  */
__weak uint16_t MCI_GetCurrentFaults(MCI_Handle_t *pHandle)
{
  return ((uint16_t)pHandle->CurrentFaults);
}
 8001768:	8b40      	ldrh	r0, [r0, #26]
 800176a:	4770      	bx	lr

0800176c <MCI_StartMotor>:
{
 800176c:	b510      	push	{r4, lr}
 800176e:	4604      	mov	r4, r0
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001770:	f7ff fff6 	bl	8001760 <MCI_GetSTMState>
 8001774:	b108      	cbz	r0, 800177a <MCI_StartMotor+0xe>
    RetVal = false;
 8001776:	2000      	movs	r0, #0
}
 8001778:	bd10      	pop	{r4, pc}
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800177a:	4620      	mov	r0, r4
 800177c:	f7ff fff2 	bl	8001764 <MCI_GetOccurredFaults>
  if ((IDLE == MCI_GetSTMState(pHandle)) &&
 8001780:	2800      	cmp	r0, #0
 8001782:	d1f8      	bne.n	8001776 <MCI_StartMotor+0xa>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 8001784:	4620      	mov	r0, r4
 8001786:	f7ff ffef 	bl	8001768 <MCI_GetCurrentFaults>
      (MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 800178a:	2800      	cmp	r0, #0
 800178c:	d1f3      	bne.n	8001776 <MCI_StartMotor+0xa>
    pHandle->DirectCommand = MCI_START;
 800178e:	2001      	movs	r0, #1
 8001790:	7620      	strb	r0, [r4, #24]
    pHandle->CommandState = MCI_COMMAND_NOT_ALREADY_EXECUTED;
 8001792:	77a0      	strb	r0, [r4, #30]
}
 8001794:	bd10      	pop	{r4, pc}
 8001796:	bf00      	nop

08001798 <MCI_StopMotor>:
{
 8001798:	b538      	push	{r3, r4, r5, lr}
 800179a:	4605      	mov	r5, r0
  State = MCI_GetSTMState(pHandle);
 800179c:	f7ff ffe0 	bl	8001760 <MCI_GetSTMState>
  if (IDLE == State  || ICLWAIT == State)
 80017a0:	b150      	cbz	r0, 80017b8 <MCI_StopMotor+0x20>
 80017a2:	f1b0 040c 	subs.w	r4, r0, #12
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017a6:	4628      	mov	r0, r5
  if (IDLE == State  || ICLWAIT == State)
 80017a8:	bf18      	it	ne
 80017aa:	2401      	movne	r4, #1
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017ac:	f7ff ffda 	bl	8001764 <MCI_GetOccurredFaults>
 80017b0:	b140      	cbz	r0, 80017c4 <MCI_StopMotor+0x2c>
    RetVal = false;
 80017b2:	2400      	movs	r4, #0
}
 80017b4:	4620      	mov	r0, r4
 80017b6:	bd38      	pop	{r3, r4, r5, pc}
    status = false;
 80017b8:	4604      	mov	r4, r0
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017ba:	4628      	mov	r0, r5
 80017bc:	f7ff ffd2 	bl	8001764 <MCI_GetOccurredFaults>
 80017c0:	2800      	cmp	r0, #0
 80017c2:	d1f6      	bne.n	80017b2 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80017c4:	4628      	mov	r0, r5
 80017c6:	f7ff ffcf 	bl	8001768 <MCI_GetCurrentFaults>
  if ((MC_NO_FAULTS == MCI_GetOccurredFaults(pHandle)) &&
 80017ca:	2800      	cmp	r0, #0
 80017cc:	d1f1      	bne.n	80017b2 <MCI_StopMotor+0x1a>
      (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)) &&
 80017ce:	2c00      	cmp	r4, #0
 80017d0:	d0ef      	beq.n	80017b2 <MCI_StopMotor+0x1a>
    pHandle->DirectCommand = MCI_STOP;
 80017d2:	2305      	movs	r3, #5
 80017d4:	762b      	strb	r3, [r5, #24]
    RetVal = true;
 80017d6:	e7ed      	b.n	80017b4 <MCI_StopMotor+0x1c>

080017d8 <MCI_FaultAcknowledged>:
{
 80017d8:	b510      	push	{r4, lr}
 80017da:	4604      	mov	r4, r0
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80017dc:	f7ff ffc0 	bl	8001760 <MCI_GetSTMState>
 80017e0:	280b      	cmp	r0, #11
 80017e2:	d001      	beq.n	80017e8 <MCI_FaultAcknowledged+0x10>
    RetVal = false;
 80017e4:	2000      	movs	r0, #0
}
 80017e6:	bd10      	pop	{r4, pc}
  if ((FAULT_OVER == MCI_GetSTMState(pHandle)) && (MC_NO_FAULTS == MCI_GetCurrentFaults(pHandle)))
 80017e8:	4620      	mov	r0, r4
 80017ea:	f7ff ffbd 	bl	8001768 <MCI_GetCurrentFaults>
 80017ee:	2800      	cmp	r0, #0
 80017f0:	d1f8      	bne.n	80017e4 <MCI_FaultAcknowledged+0xc>
    pHandle->DirectCommand = MCI_ACK_FAULTS;
 80017f2:	2302      	movs	r3, #2
 80017f4:	7623      	strb	r3, [r4, #24]
    pHandle->PastFaults = MC_NO_FAULTS;
 80017f6:	83a0      	strh	r0, [r4, #28]
    RetVal = true;
 80017f8:	2001      	movs	r0, #1
}
 80017fa:	bd10      	pop	{r4, pc}

080017fc <MCI_GetFaultState>:
  */
__weak uint32_t MCI_GetFaultState(MCI_Handle_t *pHandle)
{
  uint32_t LocalFaultState;

  LocalFaultState = (uint32_t)(pHandle->PastFaults);
 80017fc:	8b83      	ldrh	r3, [r0, #28]
  LocalFaultState |= (uint32_t)(pHandle->CurrentFaults) << 16;
 80017fe:	8b40      	ldrh	r0, [r0, #26]

  return (LocalFaultState);
}
 8001800:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8001804:	4770      	bx	lr
 8001806:	bf00      	nop

08001808 <MCI_GetControlMode>:
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? STC_TORQUE_MODE : pHandle->LastModalitySetByUser);
#else
  return (pHandle->LastModalitySetByUser);
#endif
}
 8001808:	7fc0      	ldrb	r0, [r0, #31]
 800180a:	4770      	bx	lr

0800180c <MCI_GetImposedMotorDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    switch (pHandle->lastCommand)
 800180c:	7b03      	ldrb	r3, [r0, #12]
 800180e:	2b02      	cmp	r3, #2
 8001810:	d005      	beq.n	800181e <MCI_GetImposedMotorDirection+0x12>
 8001812:	2b03      	cmp	r3, #3
 8001814:	d013      	beq.n	800183e <MCI_GetImposedMotorDirection+0x32>
 8001816:	2b01      	cmp	r3, #1
 8001818:	d009      	beq.n	800182e <MCI_GetImposedMotorDirection+0x22>
 800181a:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (retVal);
}
 800181c:	4770      	bx	lr
        if (pHandle->hFinalTorque < 0)
 800181e:	f9b0 3010 	ldrsh.w	r3, [r0, #16]
          retVal = -1;
 8001822:	2b00      	cmp	r3, #0
 8001824:	bfac      	ite	ge
 8001826:	2001      	movge	r0, #1
 8001828:	f04f 30ff 	movlt.w	r0, #4294967295
 800182c:	4770      	bx	lr
        if (pHandle->hFinalSpeed < 0)
 800182e:	f9b0 300e 	ldrsh.w	r3, [r0, #14]
          retVal = -1;
 8001832:	2b00      	cmp	r3, #0
 8001834:	bfac      	ite	ge
 8001836:	2001      	movge	r0, #1
 8001838:	f04f 30ff 	movlt.w	r0, #4294967295
 800183c:	4770      	bx	lr
        if (pHandle->Iqdref.q < 0)
 800183e:	f9b0 3012 	ldrsh.w	r3, [r0, #18]
          retVal = -1;
 8001842:	2b00      	cmp	r3, #0
 8001844:	bfac      	ite	ge
 8001846:	2001      	movge	r0, #1
 8001848:	f04f 30ff 	movlt.w	r0, #4294967295
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop

08001850 <MCI_GetLastRampFinalSpeed>:
  }
  return (retVal);
#else
  return (pHandle->hFinalSpeed);
#endif
}
 8001850:	f9b0 000e 	ldrsh.w	r0, [r0, #14]
 8001854:	4770      	bx	lr
 8001856:	bf00      	nop

08001858 <MCI_GetLastRampFinalTorque>:
  }
  return (retVal);
#else
  return (pHandle->hFinalTorque);
#endif
}
 8001858:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800185c:	4770      	bx	lr
 800185e:	bf00      	nop

08001860 <MCI_GetLastRampFinalDuration>:
  }
  return (retVal);
#else
  return (pHandle->hDurationms);
#endif
}
 8001860:	8ac0      	ldrh	r0, [r0, #22]
 8001862:	4770      	bx	lr

08001864 <MCI_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    STC_StopRamp(pHandle->pSTC);
 8001864:	6800      	ldr	r0, [r0, #0]
 8001866:	f005 bd13 	b.w	8007290 <STC_StopRamp>
 800186a:	bf00      	nop

0800186c <MCI_GetAvrgMecSpeedUnit>:
  *         the unit defined by #SPEED_UNIT and related to the sensor actually
  *         used by FOC algorithm
  * @param  pHandle Pointer on the component instance to work on.
  */
__weak int16_t MCI_GetAvrgMecSpeedUnit(MCI_Handle_t *pHandle)
{
 800186c:	b508      	push	{r3, lr}
    temp_speed = 0;
  }
  else
  {
#endif
    SpeednPosFdbk_Handle_t * SpeedSensor = STC_GetSpeedSensor(pHandle->pSTC);
 800186e:	6800      	ldr	r0, [r0, #0]
 8001870:	f005 fcb6 	bl	80071e0 <STC_GetSpeedSensor>
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
#ifdef NULL_PTR_MC_INT
  }
#endif
  return (temp_speed);
}
 8001874:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    temp_speed = SPD_GetAvrgMecSpeedUnit(SpeedSensor);
 8001878:	f005 bc52 	b.w	8007120 <SPD_GetAvrgMecSpeedUnit>

0800187c <MCI_GetMecSpeedRefUnit>:
__weak int16_t MCI_GetMecSpeedRefUnit(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : STC_GetMecSpeedRefUnit(pHandle->pSTC));
#else
  return (STC_GetMecSpeedRefUnit(pHandle->pSTC));
 800187c:	6800      	ldr	r0, [r0, #0]
 800187e:	f005 bcb9 	b.w	80071f4 <STC_GetMecSpeedRefUnit>
 8001882:	bf00      	nop

08001884 <MCI_GetIab>:
  {
    tempVal = pHandle->pFOCVars->Iab;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iab);
 8001884:	6842      	ldr	r2, [r0, #4]
 8001886:	6810      	ldr	r0, [r2, #0]
 8001888:	2300      	movs	r3, #0
 800188a:	b282      	uxth	r2, r0
 800188c:	f362 030f 	bfi	r3, r2, #0, #16
 8001890:	0c00      	lsrs	r0, r0, #16
 8001892:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001896:	b082      	sub	sp, #8
#endif
}
 8001898:	4618      	mov	r0, r3
 800189a:	b002      	add	sp, #8
 800189c:	4770      	bx	lr
 800189e:	bf00      	nop

080018a0 <MCI_GetIalphabeta>:
  {
    tempVal = pHandle->pFOCVars->Ialphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Ialphabeta);
 80018a0:	6842      	ldr	r2, [r0, #4]
 80018a2:	6850      	ldr	r0, [r2, #4]
 80018a4:	2300      	movs	r3, #0
 80018a6:	b282      	uxth	r2, r0
 80018a8:	f362 030f 	bfi	r3, r2, #0, #16
 80018ac:	0c00      	lsrs	r0, r0, #16
 80018ae:	f360 431f 	bfi	r3, r0, #16, #16
{
 80018b2:	b082      	sub	sp, #8
#endif
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	b002      	add	sp, #8
 80018b8:	4770      	bx	lr
 80018ba:	bf00      	nop

080018bc <MCI_GetIqd>:
  {
    tempVal = pHandle->pFOCVars->Iqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqd);
 80018bc:	6842      	ldr	r2, [r0, #4]
 80018be:	68d0      	ldr	r0, [r2, #12]
 80018c0:	2300      	movs	r3, #0
 80018c2:	b282      	uxth	r2, r0
 80018c4:	f362 030f 	bfi	r3, r2, #0, #16
 80018c8:	0c00      	lsrs	r0, r0, #16
 80018ca:	f360 431f 	bfi	r3, r0, #16, #16
{
 80018ce:	b082      	sub	sp, #8
#endif
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	b002      	add	sp, #8
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop

080018d8 <MCI_GetIqdref>:
  {
    tempVal = pHandle->pFOCVars->Iqdref;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Iqdref);
 80018d8:	6842      	ldr	r2, [r0, #4]
 80018da:	6910      	ldr	r0, [r2, #16]
 80018dc:	2300      	movs	r3, #0
 80018de:	b282      	uxth	r2, r0
 80018e0:	f362 030f 	bfi	r3, r2, #0, #16
 80018e4:	0c00      	lsrs	r0, r0, #16
 80018e6:	f360 431f 	bfi	r3, r0, #16, #16
{
 80018ea:	b082      	sub	sp, #8
#endif
}
 80018ec:	4618      	mov	r0, r3
 80018ee:	b002      	add	sp, #8
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop

080018f4 <MCI_GetVqd>:
  {
    tempVal = pHandle->pFOCVars->Vqd;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Vqd);
 80018f4:	6842      	ldr	r2, [r0, #4]
 80018f6:	f8d2 0016 	ldr.w	r0, [r2, #22]
 80018fa:	2300      	movs	r3, #0
 80018fc:	b282      	uxth	r2, r0
 80018fe:	f362 030f 	bfi	r3, r2, #0, #16
 8001902:	0c00      	lsrs	r0, r0, #16
 8001904:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001908:	b082      	sub	sp, #8
#endif
}
 800190a:	4618      	mov	r0, r3
 800190c:	b002      	add	sp, #8
 800190e:	4770      	bx	lr

08001910 <MCI_GetValphabeta>:
  {
    tempVal = pHandle->pFOCVars->Valphabeta;
  }
  return (tempVal);
#else
  return (pHandle->pFOCVars->Valphabeta);
 8001910:	6842      	ldr	r2, [r0, #4]
 8001912:	f8d2 001a 	ldr.w	r0, [r2, #26]
 8001916:	2300      	movs	r3, #0
 8001918:	b282      	uxth	r2, r0
 800191a:	f362 030f 	bfi	r3, r2, #0, #16
 800191e:	0c00      	lsrs	r0, r0, #16
 8001920:	f360 431f 	bfi	r3, r0, #16, #16
{
 8001924:	b082      	sub	sp, #8
#endif
}
 8001926:	4618      	mov	r0, r3
 8001928:	b002      	add	sp, #8
 800192a:	4770      	bx	lr

0800192c <MCI_GetTeref>:
__weak int16_t MCI_GetTeref(MCI_Handle_t *pHandle)
{
#ifdef NULL_PTR_MC_INT
  return ((MC_NULL == pHandle) ? 0 : pHandle->pFOCVars->hTeref);
#else
  return (pHandle->pFOCVars->hTeref);
 800192c:	6843      	ldr	r3, [r0, #4]
#endif
}
 800192e:	f9b3 001e 	ldrsh.w	r0, [r3, #30]
 8001932:	4770      	bx	lr

08001934 <MCI_Clear_Iqdref>:
  * @brief  It re-initializes Iqdref variables with their default values.
  * @param  pHandle Pointer on the component instance to work on.
  * @retval none
  */
__weak void MCI_Clear_Iqdref(MCI_Handle_t *pHandle)
{
 8001934:	b510      	push	{r4, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFOCVars->Iqdref = STC_GetDefaultIqdref(pHandle->pSTC);
 8001936:	e9d0 0400 	ldrd	r0, r4, [r0]
 800193a:	f005 fcdb 	bl	80072f4 <STC_GetDefaultIqdref>
 800193e:	f3c0 430f 	ubfx	r3, r0, #16, #16
 8001942:	8220      	strh	r0, [r4, #16]
 8001944:	8263      	strh	r3, [r4, #18]
#ifdef NULL_PTR_MC_INT
  }
#endif
}
 8001946:	bd10      	pop	{r4, pc}

08001948 <MCM_Clarke>:
  /* qIalpha = qIas*/
  Output.alpha = Input.a;

  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);

  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001948:	f644 11e6 	movw	r1, #18918	; 0x49e6
 800194c:	b203      	sxth	r3, r0
  a_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.a);
 800194e:	fb13 f201 	smulbb	r2, r3, r1
{
 8001952:	f3c0 400f 	ubfx	r0, r0, #16, #16
  b_divSQRT3_tmp = divSQRT_3 * ((int32_t)Input.b);
 8001956:	fb10 f101 	smulbb	r1, r0, r1
#ifndef FULL_MISRA_C_COMPLIANCY_MC_MATH
  /* WARNING: the below instruction is not MISRA compliant, user should verify
    that Cortex-M3 assembly instruction ASR (arithmetic shift right) is used by
    the compiler to perform the shift (instead of LSR logical shift right) */
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) >> 15;
 800195a:	4250      	negs	r0, r2
 800195c:	eba0 0041 	sub.w	r0, r0, r1, lsl #1
#else
  wbeta_tmp = (-(a_divSQRT3_tmp) - (b_divSQRT3_tmp) - (b_divSQRT3_tmp)) / 32768;
#endif

  /* Check saturation of Ibeta */
  if (wbeta_tmp > INT16_MAX)
 8001960:	f1b0 4f80 	cmp.w	r0, #1073741824	; 0x40000000
{
 8001964:	b084      	sub	sp, #16
  if (wbeta_tmp > INT16_MAX)
 8001966:	da05      	bge.n	8001974 <MCM_Clarke+0x2c>
 8001968:	13c1      	asrs	r1, r0, #15
  {
    hbeta_tmp = INT16_MAX;
  }
  else if (wbeta_tmp < (-32768))
 800196a:	f511 4f00 	cmn.w	r1, #32768	; 0x8000
 800196e:	da0c      	bge.n	800198a <MCM_Clarke+0x42>
 8001970:	4a09      	ldr	r2, [pc, #36]	; (8001998 <MCM_Clarke+0x50>)
 8001972:	e001      	b.n	8001978 <MCM_Clarke+0x30>
 8001974:	f647 72ff 	movw	r2, #32767	; 0x7fff
  if (((int16_t )-32768) == Output.beta)
  {
    Output.beta = -32767;
  }

  return (Output);
 8001978:	b29b      	uxth	r3, r3
 800197a:	2000      	movs	r0, #0
 800197c:	f363 000f 	bfi	r0, r3, #0, #16
 8001980:	b293      	uxth	r3, r2
 8001982:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001986:	b004      	add	sp, #16
 8001988:	4770      	bx	lr
    hbeta_tmp = ((int16_t)wbeta_tmp);
 800198a:	4803      	ldr	r0, [pc, #12]	; (8001998 <MCM_Clarke+0x50>)
 800198c:	b20a      	sxth	r2, r1
 800198e:	4282      	cmp	r2, r0
 8001990:	bfb8      	it	lt
 8001992:	4602      	movlt	r2, r0
 8001994:	e7f0      	b.n	8001978 <MCM_Clarke+0x30>
 8001996:	bf00      	nop
 8001998:	ffff8001 	.word	0xffff8001

0800199c <MCM_Trig_Functions>:
  uint16_t uhindex;

  Trig_Components Local_Components;

  /* 10 bit index computation  */
  shindex = (((int32_t)32768) + ((int32_t)hAngle));
 800199c:	f500 4000 	add.w	r0, r0, #32768	; 0x8000
  uhindex = (uint16_t)shindex;
  uhindex /= ((uint16_t)64);
 80019a0:	f3c0 1089 	ubfx	r0, r0, #6, #10

  switch (((uint16_t)uhindex) & SIN_MASK)
 80019a4:	f400 7140 	and.w	r1, r0, #768	; 0x300
 80019a8:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
{
 80019ac:	b082      	sub	sp, #8
  switch (((uint16_t)uhindex) & SIN_MASK)
 80019ae:	d028      	beq.n	8001a02 <MCM_Trig_Functions+0x66>
 80019b0:	f04f 0300 	mov.w	r3, #0
 80019b4:	461a      	mov	r2, r3
 80019b6:	d816      	bhi.n	80019e6 <MCM_Trig_Functions+0x4a>
 80019b8:	b361      	cbz	r1, 8001a14 <MCM_Trig_Functions+0x78>
 80019ba:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
 80019be:	d109      	bne.n	80019d4 <MCM_Trig_Functions+0x38>
      break;
    }

    case U270_360:
    {
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019c0:	b2c0      	uxtb	r0, r0
 80019c2:	43c2      	mvns	r2, r0
 80019c4:	491a      	ldr	r1, [pc, #104]	; (8001a30 <MCM_Trig_Functions+0x94>)
 80019c6:	b2d2      	uxtb	r2, r2
      Local_Components.hCos =  hSin_Cos_Table[( uint8_t )( uhindex )];
 80019c8:	f931 3010 	ldrsh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin =  -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019cc:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
 80019d0:	4252      	negs	r2, r2
 80019d2:	b212      	sxth	r2, r2
    }

    default:
      break;
  }
  return (Local_Components);
 80019d4:	b29b      	uxth	r3, r3
 80019d6:	2000      	movs	r0, #0
 80019d8:	f363 000f 	bfi	r0, r3, #0, #16
 80019dc:	b292      	uxth	r2, r2
 80019de:	f362 401f 	bfi	r0, r2, #16, #16
}
 80019e2:	b002      	add	sp, #8
 80019e4:	4770      	bx	lr
  switch (((uint16_t)uhindex) & SIN_MASK)
 80019e6:	f5b1 7f40 	cmp.w	r1, #768	; 0x300
 80019ea:	d1f3      	bne.n	80019d4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019ec:	4910      	ldr	r1, [pc, #64]	; (8001a30 <MCM_Trig_Functions+0x94>)
 80019ee:	b2c0      	uxtb	r0, r0
 80019f0:	43c2      	mvns	r2, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019f2:	f831 3010 	ldrh.w	r3, [r1, r0, lsl #1]
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019f6:	b2d2      	uxtb	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019f8:	425b      	negs	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 80019fa:	f931 2012 	ldrsh.w	r2, [r1, r2, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( uhindex )];
 80019fe:	b21b      	sxth	r3, r3
      break;
 8001a00:	e7e8      	b.n	80019d4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a02:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a04:	43c3      	mvns	r3, r0
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a06:	490a      	ldr	r1, [pc, #40]	; (8001a30 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a08:	b2db      	uxtb	r3, r3
      Local_Components.hSin = hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a0a:	f931 2010 	ldrsh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a0e:	f931 3013 	ldrsh.w	r3, [r1, r3, lsl #1]
      break;
 8001a12:	e7df      	b.n	80019d4 <MCM_Trig_Functions+0x38>
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a14:	b2c0      	uxtb	r0, r0
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a16:	43c3      	mvns	r3, r0
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a18:	4905      	ldr	r1, [pc, #20]	; (8001a30 <MCM_Trig_Functions+0x94>)
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a1a:	b2db      	uxtb	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a1c:	f831 2010 	ldrh.w	r2, [r1, r0, lsl #1]
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a20:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a24:	4252      	negs	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a26:	425b      	negs	r3, r3
      Local_Components.hSin = -hSin_Cos_Table[( uint8_t )( uhindex )];
 8001a28:	b212      	sxth	r2, r2
      Local_Components.hCos = -hSin_Cos_Table[( uint8_t )( 0xFFu - ( uint8_t )( uhindex ) )];
 8001a2a:	b21b      	sxth	r3, r3
      break;
 8001a2c:	e7d2      	b.n	80019d4 <MCM_Trig_Functions+0x38>
 8001a2e:	bf00      	nop
 8001a30:	08007d64 	.word	0x08007d64

08001a34 <MCM_Park>:
{
 8001a34:	b530      	push	{r4, r5, lr}
 8001a36:	b085      	sub	sp, #20
 8001a38:	4603      	mov	r3, r0
 8001a3a:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001a3c:	4608      	mov	r0, r1
 8001a3e:	141c      	asrs	r4, r3, #16
{
 8001a40:	9301      	str	r3, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001a42:	f7ff ffab 	bl	800199c <MCM_Trig_Functions>
 8001a46:	b22d      	sxth	r5, r5
 8001a48:	fa0f fc80 	sxth.w	ip, r0
 8001a4c:	1403      	asrs	r3, r0, #16
  q_tmp_1 = Input.alpha * ((int32_t )Local_Vector_Components.hCos);
 8001a4e:	fb05 f10c 	mul.w	r1, r5, ip
  wqd_tmp = (q_tmp_1 - q_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001a52:	fb04 1113 	mls	r1, r4, r3, r1
  if (wqd_tmp > INT16_MAX)
 8001a56:	f1b1 4f80 	cmp.w	r1, #1073741824	; 0x40000000
 8001a5a:	da05      	bge.n	8001a68 <MCM_Park+0x34>
 8001a5c:	13ca      	asrs	r2, r1, #15
  else if (wqd_tmp < (-32768))
 8001a5e:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001a62:	da22      	bge.n	8001aaa <MCM_Park+0x76>
 8001a64:	4914      	ldr	r1, [pc, #80]	; (8001ab8 <MCM_Park+0x84>)
 8001a66:	e001      	b.n	8001a6c <MCM_Park+0x38>
 8001a68:	f647 71ff 	movw	r1, #32767	; 0x7fff
  d_tmp_2 = Input.beta * ((int32_t )Local_Vector_Components.hCos);
 8001a6c:	fb0c f404 	mul.w	r4, ip, r4
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001a70:	fb05 4403 	mla	r4, r5, r3, r4
  if (wqd_tmp > INT16_MAX)
 8001a74:	f1b4 4f80 	cmp.w	r4, #1073741824	; 0x40000000
  wqd_tmp = (d_tmp_1 + d_tmp_2) >> 15; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8001a78:	ea4f 32e4 	mov.w	r2, r4, asr #15
  if (wqd_tmp > INT16_MAX)
 8001a7c:	da04      	bge.n	8001a88 <MCM_Park+0x54>
  else if (wqd_tmp < (-32768))
 8001a7e:	f512 4f00 	cmn.w	r2, #32768	; 0x8000
 8001a82:	da0c      	bge.n	8001a9e <MCM_Park+0x6a>
 8001a84:	4b0c      	ldr	r3, [pc, #48]	; (8001ab8 <MCM_Park+0x84>)
 8001a86:	e001      	b.n	8001a8c <MCM_Park+0x58>
 8001a88:	f647 73ff 	movw	r3, #32767	; 0x7fff
  return (Output);
 8001a8c:	b28a      	uxth	r2, r1
 8001a8e:	2000      	movs	r0, #0
 8001a90:	f362 000f 	bfi	r0, r2, #0, #16
 8001a94:	b29b      	uxth	r3, r3
 8001a96:	f363 401f 	bfi	r0, r3, #16, #16
}
 8001a9a:	b005      	add	sp, #20
 8001a9c:	bd30      	pop	{r4, r5, pc}
    hqd_tmp = ((int16_t)wqd_tmp);
 8001a9e:	4806      	ldr	r0, [pc, #24]	; (8001ab8 <MCM_Park+0x84>)
 8001aa0:	b213      	sxth	r3, r2
 8001aa2:	4283      	cmp	r3, r0
 8001aa4:	bfb8      	it	lt
 8001aa6:	4603      	movlt	r3, r0
 8001aa8:	e7f0      	b.n	8001a8c <MCM_Park+0x58>
    hqd_tmp = ((int16_t)wqd_tmp);
 8001aaa:	4903      	ldr	r1, [pc, #12]	; (8001ab8 <MCM_Park+0x84>)
 8001aac:	b212      	sxth	r2, r2
 8001aae:	4291      	cmp	r1, r2
 8001ab0:	bfb8      	it	lt
 8001ab2:	4611      	movlt	r1, r2
 8001ab4:	e7da      	b.n	8001a6c <MCM_Park+0x38>
 8001ab6:	bf00      	nop
 8001ab8:	ffff8001 	.word	0xffff8001

08001abc <MCM_Rev_Park>:
{
 8001abc:	b530      	push	{r4, r5, lr}
 8001abe:	b085      	sub	sp, #20
 8001ac0:	4604      	mov	r4, r0
 8001ac2:	4605      	mov	r5, r0
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001ac4:	4608      	mov	r0, r1
{
 8001ac6:	9401      	str	r4, [sp, #4]
  Local_Vector_Components = MCM_Trig_Functions(Theta);
 8001ac8:	f7ff ff68 	bl	800199c <MCM_Trig_Functions>
 8001acc:	1424      	asrs	r4, r4, #16
 8001ace:	1402      	asrs	r2, r0, #16
 8001ad0:	b22d      	sxth	r5, r5
 8001ad2:	b200      	sxth	r0, r0
  alpha_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hSin);
 8001ad4:	fb04 f302 	mul.w	r3, r4, r2
  Output.alpha = (int16_t)(((alpha_tmp1) + (alpha_tmp2)) >> 15);
 8001ad8:	fb05 3300 	mla	r3, r5, r0, r3
  beta_tmp2 = Input.d * ((int32_t)Local_Vector_Components.hCos);
 8001adc:	fb00 f404 	mul.w	r4, r0, r4
  Output.beta = (int16_t)((beta_tmp2 - beta_tmp1) >> 15);
 8001ae0:	fb05 4412 	mls	r4, r5, r2, r4
  return (Output);
 8001ae4:	f3c3 33cf 	ubfx	r3, r3, #15, #16
 8001ae8:	2000      	movs	r0, #0
 8001aea:	f363 000f 	bfi	r0, r3, #0, #16
 8001aee:	f3c4 34cf 	ubfx	r4, r4, #15, #16
 8001af2:	f364 401f 	bfi	r0, r4, #16, #16
}
 8001af6:	b005      	add	sp, #20
 8001af8:	bd30      	pop	{r4, r5, pc}
 8001afa:	bf00      	nop

08001afc <MCM_Sqrt>:
  */
__weak int32_t MCM_Sqrt(int32_t wInput)
{
  int32_t wtemprootnew;

  if (wInput > 0)
 8001afc:	1e03      	subs	r3, r0, #0
 8001afe:	dd35      	ble.n	8001b6c <MCM_Sqrt+0x70>
  {
  uint8_t biter = 0u;
  int32_t wtemproot;

    if (wInput <= ((int32_t)2097152))
 8001b00:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8001b04:	dd2b      	ble.n	8001b5e <MCM_Sqrt+0x62>
      wtemproot = ((int32_t)8192);
    }

    do
    {
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b06:	135a      	asrs	r2, r3, #13
 8001b08:	f502 5200 	add.w	r2, r2, #8192	; 0x2000
 8001b0c:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b0e:	f5b2 5f00 	cmp.w	r2, #8192	; 0x2000
 8001b12:	d029      	beq.n	8001b68 <MCM_Sqrt+0x6c>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b14:	fb93 f1f2 	sdiv	r1, r3, r2
 8001b18:	4411      	add	r1, r2
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b1a:	ebb2 0f61 	cmp.w	r2, r1, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b1e:	ea4f 0061 	mov.w	r0, r1, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b22:	d024      	beq.n	8001b6e <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b24:	fb93 f2f0 	sdiv	r2, r3, r0
 8001b28:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b2a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b2e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b32:	d01c      	beq.n	8001b6e <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b34:	fb93 f2f1 	sdiv	r2, r3, r1
 8001b38:	440a      	add	r2, r1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b3a:	ebb1 0f62 	cmp.w	r1, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b3e:	ea4f 0062 	mov.w	r0, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b42:	d014      	beq.n	8001b6e <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b44:	fb93 f2f0 	sdiv	r2, r3, r0
 8001b48:	4402      	add	r2, r0
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b4a:	ebb0 0f62 	cmp.w	r0, r2, asr #1
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b4e:	ea4f 0162 	mov.w	r1, r2, asr #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b52:	d00c      	beq.n	8001b6e <MCM_Sqrt+0x72>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b54:	fb93 f0f1 	sdiv	r0, r3, r1
 8001b58:	4408      	add	r0, r1
 8001b5a:	1040      	asrs	r0, r0, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b5c:	4770      	bx	lr
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b5e:	11da      	asrs	r2, r3, #7
 8001b60:	3280      	adds	r2, #128	; 0x80
 8001b62:	1052      	asrs	r2, r2, #1
      if ((wtemprootnew == wtemproot) || ((int32_t)0 == wtemproot))
 8001b64:	2a80      	cmp	r2, #128	; 0x80
 8001b66:	d1d5      	bne.n	8001b14 <MCM_Sqrt+0x18>
      wtemprootnew = (wtemproot + (wInput / wtemproot)) / (int32_t)2;
 8001b68:	4610      	mov	r0, r2
 8001b6a:	4770      	bx	lr
    while (biter < 6U);

  }
  else
  {
    wtemprootnew = (int32_t)0;
 8001b6c:	2000      	movs	r0, #0
  }

  return (wtemprootnew);
}
 8001b6e:	4770      	bx	lr

08001b70 <initModelPredictiveControl>:
void parkTransform(short a, short b, short c, volatile qd_t *Xdq);
void computeSinCos(int16_t thetaElec);



void initModelPredictiveControl(){
 8001b70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	ab_t Vab;
	alphabeta_t Valphabeta;

	c1 = (int)(10027*(1 - (0.65/(10000*0.0007))));
 8001b74:	492c      	ldr	r1, [pc, #176]	; (8001c28 <initModelPredictiveControl+0xb8>)
	c2 = (int)(10027*(1/(10000*0.0007)));
 8001b76:	4a2d      	ldr	r2, [pc, #180]	; (8001c2c <initModelPredictiveControl+0xbc>)

	for(i=0;i<7;i++){
 8001b78:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 8001c40 <initModelPredictiveControl+0xd0>
 8001b7c:	f8df 90c4 	ldr.w	r9, [pc, #196]	; 8001c44 <initModelPredictiveControl+0xd4>
 8001b80:	f8df 80c4 	ldr.w	r8, [pc, #196]	; 8001c48 <initModelPredictiveControl+0xd8>
 8001b84:	4f2a      	ldr	r7, [pc, #168]	; (8001c30 <initModelPredictiveControl+0xc0>)
 8001b86:	4e2b      	ldr	r6, [pc, #172]	; (8001c34 <initModelPredictiveControl+0xc4>)
 8001b88:	4d2b      	ldr	r5, [pc, #172]	; (8001c38 <initModelPredictiveControl+0xc8>)
 8001b8a:	4c2c      	ldr	r4, [pc, #176]	; (8001c3c <initModelPredictiveControl+0xcc>)
	c1 = (int)(10027*(1 - (0.65/(10000*0.0007))));
 8001b8c:	f242 3087 	movw	r0, #9095	; 0x2387
	for(i=0;i<7;i++){
 8001b90:	2300      	movs	r3, #0
	c1 = (int)(10027*(1 - (0.65/(10000*0.0007))));
 8001b92:	6008      	str	r0, [r1, #0]
	c2 = (int)(10027*(1/(10000*0.0007)));
 8001b94:	f44f 61b3 	mov.w	r1, #1432	; 0x598
void initModelPredictiveControl(){
 8001b98:	b082      	sub	sp, #8
	c2 = (int)(10027*(1/(10000*0.0007)));
 8001b9a:	6011      	str	r1, [r2, #0]
	for(i=0;i<7;i++){
 8001b9c:	f8ca 3000 	str.w	r3, [sl]
		Sa = states[i] & 0x01;
 8001ba0:	f859 2023 	ldr.w	r2, [r9, r3, lsl #2]
		Sb = (states[i]>>1) & 0x01;
		Sc = (states[i]>>2) & 0x01;

		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vphase;
 8001ba4:	f9b5 0000 	ldrsh.w	r0, [r5]
		Sa = states[i] & 0x01;
 8001ba8:	f002 0c01 	and.w	ip, r2, #1
		Sb = (states[i]>>1) & 0x01;
 8001bac:	f3c2 0140 	ubfx	r1, r2, #1, #1
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vphase;
 8001bb0:	ebc1 0e4c 	rsb	lr, r1, ip, lsl #1
		Sc = (states[i]>>2) & 0x01;
 8001bb4:	f3c2 0280 	ubfx	r2, r2, #2, #1
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vphase;
 8001bb8:	ebcc 0341 	rsb	r3, ip, r1, lsl #1
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vphase;
 8001bbc:	ebae 0e02 	sub.w	lr, lr, r2
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vphase;
 8001bc0:	1a9b      	subs	r3, r3, r2
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vphase;
 8001bc2:	ebce 3ece 	rsb	lr, lr, lr, lsl #15
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vphase;
 8001bc6:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vphase;
 8001bca:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vphase;
 8001bce:	009b      	lsls	r3, r3, #2
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vphase;
 8001bd0:	fb9e fef0 	sdiv	lr, lr, r0
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vphase;
 8001bd4:	fb93 f3f0 	sdiv	r3, r3, r0
		Vab.a = 4*((2*Sa-Sb-Sc))*32767/Vphase;
 8001bd8:	f8ad e000 	strh.w	lr, [sp]
		Vab.b = 4*((2*Sb-Sa-Sc))*32767/Vphase;
 8001bdc:	f8ad 3002 	strh.w	r3, [sp, #2]

		Valphabeta = MCM_Clarke(Vab);
 8001be0:	9800      	ldr	r0, [sp, #0]
		Sc = (states[i]>>2) & 0x01;
 8001be2:	7032      	strb	r2, [r6, #0]
		Sa = states[i] & 0x01;
 8001be4:	f888 c000 	strb.w	ip, [r8]
		Sb = (states[i]>>1) & 0x01;
 8001be8:	7039      	strb	r1, [r7, #0]
		Valphabeta = MCM_Clarke(Vab);
 8001bea:	f7ff fead 	bl	8001948 <MCM_Clarke>

		Varray[i][0] = Valphabeta.alpha;
 8001bee:	b202      	sxth	r2, r0
		Varray[i][1] = Valphabeta.beta;
 8001bf0:	1400      	asrs	r0, r0, #16
		Varray[i][0] = Valphabeta.alpha;
 8001bf2:	f8da 3000 	ldr.w	r3, [sl]
 8001bf6:	ee07 2a10 	vmov	s14, r2
		Varray[i][1] = Valphabeta.beta;
 8001bfa:	ee07 0a90 	vmov	s15, r0
		Varray[i][0] = Valphabeta.alpha;
 8001bfe:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8001c02:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
	for(i=0;i<7;i++){
 8001c06:	3301      	adds	r3, #1
		Varray[i][1] = Valphabeta.beta;
 8001c08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		Varray[i][0] = Valphabeta.alpha;
 8001c0c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
	for(i=0;i<7;i++){
 8001c10:	2b06      	cmp	r3, #6
		Varray[i][0] = Valphabeta.alpha;
 8001c12:	ed82 7a00 	vstr	s14, [r2]
		Varray[i][1] = Valphabeta.beta;
 8001c16:	edc2 7a01 	vstr	s15, [r2, #4]
	for(i=0;i<7;i++){
 8001c1a:	f8ca 3000 	str.w	r3, [sl]
 8001c1e:	ddbf      	ble.n	8001ba0 <initModelPredictiveControl+0x30>
	}
}
 8001c20:	b002      	add	sp, #8
 8001c22:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001c26:	bf00      	nop
 8001c28:	200008fc 	.word	0x200008fc
 8001c2c:	20000900 	.word	0x20000900
 8001c30:	2000089f 	.word	0x2000089f
 8001c34:	200008a0 	.word	0x200008a0
 8001c38:	20000590 	.word	0x20000590
 8001c3c:	200008a4 	.word	0x200008a4
 8001c40:	20000910 	.word	0x20000910
 8001c44:	20000594 	.word	0x20000594
 8001c48:	2000089e 	.word	0x2000089e

08001c4c <FOC_Clear>:
  ab_t NULL_ab = {((int16_t)0), ((int16_t)0)};
  qd_t NULL_qd = {((int16_t)0), ((int16_t)0)};
  alphabeta_t NULL_alphabeta = {((int16_t)0), ((int16_t)0)};

  FOCVars[bMotor].Iab = NULL_ab;
  FOCVars[bMotor].Ialphabeta = NULL_alphabeta;
 8001c4c:	2226      	movs	r2, #38	; 0x26
{
 8001c4e:	b538      	push	{r3, r4, r5, lr}
 8001c50:	fb00 f202 	mul.w	r2, r0, r2
 8001c54:	4b15      	ldr	r3, [pc, #84]	; (8001cac <FOC_Clear+0x60>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001c56:	2400      	movs	r4, #0
 8001c58:	509c      	str	r4, [r3, r2]
{
 8001c5a:	4605      	mov	r5, r0
 8001c5c:	f102 0108 	add.w	r1, r2, #8
 8001c60:	1898      	adds	r0, r3, r2
 8001c62:	3210      	adds	r2, #16
 8001c64:	4419      	add	r1, r3
 8001c66:	4413      	add	r3, r2
  FOCVars[bMotor].hTeref = (int16_t)0;
  FOCVars[bMotor].Vqd = NULL_qd;
  FOCVars[bMotor].Valphabeta = NULL_alphabeta;
  FOCVars[bMotor].hElAngle = (int16_t)0;

  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001c68:	4a11      	ldr	r2, [pc, #68]	; (8001cb0 <FOC_Clear+0x64>)
  FOCVars[bMotor].Iab = NULL_ab;
 8001c6a:	6044      	str	r4, [r0, #4]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001c6c:	f852 0025 	ldr.w	r0, [r2, r5, lsl #2]
  FOCVars[bMotor].Iqd = NULL_qd;
 8001c70:	604c      	str	r4, [r1, #4]
 8001c72:	608c      	str	r4, [r1, #8]
  FOCVars[bMotor].Vqd = NULL_qd;
 8001c74:	f8c3 4006 	str.w	r4, [r3, #6]
 8001c78:	f8c3 400a 	str.w	r4, [r3, #10]
 8001c7c:	f8c3 400e 	str.w	r4, [r3, #14]
  PID_SetIntegralTerm(pPIDIq[bMotor], ((int32_t)0));
 8001c80:	4621      	mov	r1, r4
 8001c82:	f004 fa4d 	bl	8006120 <PID_SetIntegralTerm>
  PID_SetIntegralTerm(pPIDId[bMotor], ((int32_t)0));
 8001c86:	4b0b      	ldr	r3, [pc, #44]	; (8001cb4 <FOC_Clear+0x68>)
 8001c88:	4621      	mov	r1, r4
 8001c8a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001c8e:	f004 fa47 	bl	8006120 <PID_SetIntegralTerm>

  STC_Clear(pSTC[bMotor]);
 8001c92:	4b09      	ldr	r3, [pc, #36]	; (8001cb8 <FOC_Clear+0x6c>)
 8001c94:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8001c98:	f005 faa4 	bl	80071e4 <STC_Clear>

  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001c9c:	4b07      	ldr	r3, [pc, #28]	; (8001cbc <FOC_Clear+0x70>)
 8001c9e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]

  /* USER CODE BEGIN FOC_Clear 1 */

  /* USER CODE END FOC_Clear 1 */
}
 8001ca2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 8001ca6:	f000 bf0d 	b.w	8002ac4 <PWMC_SwitchOffPWM>
 8001caa:	bf00      	nop
 8001cac:	20000870 	.word	0x20000870
 8001cb0:	20000574 	.word	0x20000574
 8001cb4:	20000570 	.word	0x20000570
 8001cb8:	20000578 	.word	0x20000578
 8001cbc:	20000920 	.word	0x20000920

08001cc0 <MCboot>:
  if (MC_NULL == pMCIList)
 8001cc0:	2800      	cmp	r0, #0
 8001cc2:	d070      	beq.n	8001da6 <MCboot+0xe6>
{
 8001cc4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    pCLM[M1] = &CircleLimitationM1;
 8001cc8:	4b37      	ldr	r3, [pc, #220]	; (8001da8 <MCboot+0xe8>)
 8001cca:	4a38      	ldr	r2, [pc, #224]	; (8001dac <MCboot+0xec>)
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001ccc:	f8df b124 	ldr.w	fp, [pc, #292]	; 8001df4 <MCboot+0x134>
    bMCBootCompleted = (uint8_t )0;
 8001cd0:	f8df 9124 	ldr.w	r9, [pc, #292]	; 8001df8 <MCboot+0x138>
    pCLM[M1] = &CircleLimitationM1;
 8001cd4:	601a      	str	r2, [r3, #0]
{
 8001cd6:	b085      	sub	sp, #20
    bMCBootCompleted = (uint8_t )0;
 8001cd8:	f04f 0800 	mov.w	r8, #0
 8001cdc:	4604      	mov	r4, r0
    pwmcHandle[M1] = &PWM_Handle_M1._Super;
 8001cde:	4834      	ldr	r0, [pc, #208]	; (8001db0 <MCboot+0xf0>)
 8001ce0:	f8cb 0000 	str.w	r0, [fp]
    bMCBootCompleted = (uint8_t )0;
 8001ce4:	f889 8000 	strb.w	r8, [r9]
    R3_1_Init(&PWM_Handle_M1);
 8001ce8:	f004 fd7c 	bl	80067e4 <R3_1_Init>
    ASPEP_start(&aspepOverUartA);
 8001cec:	4831      	ldr	r0, [pc, #196]	; (8001db4 <MCboot+0xf4>)
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001cee:	4d32      	ldr	r5, [pc, #200]	; (8001db8 <MCboot+0xf8>)
    RVBS_Init(&BusVoltageSensor_M1);
 8001cf0:	4e32      	ldr	r6, [pc, #200]	; (8001dbc <MCboot+0xfc>)
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001cf2:	4f33      	ldr	r7, [pc, #204]	; (8001dc0 <MCboot+0x100>)
    ASPEP_start(&aspepOverUartA);
 8001cf4:	f7fe ff2a 	bl	8000b4c <ASPEP_start>
    startTimers();
 8001cf8:	f004 fac2 	bl	8006280 <startTimers>
    PID_HandleInit(&PIDSpeedHandle_M1);
 8001cfc:	4831      	ldr	r0, [pc, #196]	; (8001dc4 <MCboot+0x104>)
 8001cfe:	f004 f9fb 	bl	80060f8 <PID_HandleInit>
    STO_PLL_Init (&STO_PLL_M1);
 8001d02:	4831      	ldr	r0, [pc, #196]	; (8001dc8 <MCboot+0x108>)
 8001d04:	f005 fd06 	bl	8007714 <STO_PLL_Init>
    STC_Init(pSTC[M1],&PIDSpeedHandle_M1, &STO_PLL_M1._Super);
 8001d08:	4a2f      	ldr	r2, [pc, #188]	; (8001dc8 <MCboot+0x108>)
 8001d0a:	492e      	ldr	r1, [pc, #184]	; (8001dc4 <MCboot+0x104>)
 8001d0c:	6828      	ldr	r0, [r5, #0]
 8001d0e:	f005 fa4f 	bl	80071b0 <STC_Init>
    VSS_Init(&VirtualSpeedSensorM1);
 8001d12:	482e      	ldr	r0, [pc, #184]	; (8001dcc <MCboot+0x10c>)
 8001d14:	f005 fdfa 	bl	800790c <VSS_Init>
    RUC_Init(&RevUpControlM1, pSTC[M1], &VirtualSpeedSensorM1, &STO_M1, pwmcHandle[M1]);
 8001d18:	f8db 3000 	ldr.w	r3, [fp]
 8001d1c:	6829      	ldr	r1, [r5, #0]
 8001d1e:	4a2b      	ldr	r2, [pc, #172]	; (8001dcc <MCboot+0x10c>)
 8001d20:	9300      	str	r3, [sp, #0]
 8001d22:	482b      	ldr	r0, [pc, #172]	; (8001dd0 <MCboot+0x110>)
 8001d24:	4b2b      	ldr	r3, [pc, #172]	; (8001dd4 <MCboot+0x114>)
 8001d26:	f005 f919 	bl	8006f5c <RUC_Init>
    PID_HandleInit(&PIDIqHandle_M1);
 8001d2a:	482b      	ldr	r0, [pc, #172]	; (8001dd8 <MCboot+0x118>)
 8001d2c:	f004 f9e4 	bl	80060f8 <PID_HandleInit>
    PID_HandleInit(&PIDIdHandle_M1);
 8001d30:	482a      	ldr	r0, [pc, #168]	; (8001ddc <MCboot+0x11c>)
 8001d32:	f004 f9e1 	bl	80060f8 <PID_HandleInit>
    RVBS_Init(&BusVoltageSensor_M1);
 8001d36:	4630      	mov	r0, r6
 8001d38:	f005 f83a 	bl	8006db0 <RVBS_Init>
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001d3c:	4b28      	ldr	r3, [pc, #160]	; (8001de0 <MCboot+0x120>)
    NTC_Init(&TempSensor_M1);
 8001d3e:	4829      	ldr	r0, [pc, #164]	; (8001de4 <MCboot+0x124>)
    pMPM[M1]->pVBS = &(BusVoltageSensor_M1._Super);
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	f8c3 6110 	str.w	r6, [r3, #272]	; 0x110
    pMPM[M1]->pFOCVars = &FOCVars[M1];
 8001d46:	4e28      	ldr	r6, [pc, #160]	; (8001de8 <MCboot+0x128>)
 8001d48:	f8c3 610c 	str.w	r6, [r3, #268]	; 0x10c
    NTC_Init(&TempSensor_M1);
 8001d4c:	f004 f994 	bl	8006078 <NTC_Init>
    pREMNG[M1] = &RampExtMngrHFParamsM1;
 8001d50:	4b26      	ldr	r3, [pc, #152]	; (8001dec <MCboot+0x12c>)
 8001d52:	4827      	ldr	r0, [pc, #156]	; (8001df0 <MCboot+0x130>)
 8001d54:	6018      	str	r0, [r3, #0]
    REMNG_Init(pREMNG[M1]);
 8001d56:	f005 f877 	bl	8006e48 <REMNG_Init>
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001d5a:	f04f 0a01 	mov.w	sl, #1
    FOC_Clear(M1);
 8001d5e:	4640      	mov	r0, r8
 8001d60:	f7ff ff74 	bl	8001c4c <FOC_Clear>
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001d64:	6828      	ldr	r0, [r5, #0]
    FOCVars[M1].bDriveInput = EXTERNAL;
 8001d66:	f886 a024 	strb.w	sl, [r6, #36]	; 0x24
    FOCVars[M1].Iqdref = STC_GetDefaultIqdref(pSTC[M1]);
 8001d6a:	f005 fac3 	bl	80072f4 <STC_GetDefaultIqdref>
 8001d6e:	6130      	str	r0, [r6, #16]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001d70:	6828      	ldr	r0, [r5, #0]
 8001d72:	f005 fabf 	bl	80072f4 <STC_GetDefaultIqdref>
 8001d76:	f3c0 400f 	ubfx	r0, r0, #16, #16
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001d7a:	f8db 3000 	ldr.w	r3, [fp]
 8001d7e:	6829      	ldr	r1, [r5, #0]
    FOCVars[M1].UserIdref = STC_GetDefaultIqdref(pSTC[M1]).d;
 8001d80:	82b0      	strh	r0, [r6, #20]
    MCI_Init(&Mci[M1], pSTC[M1], &FOCVars[M1],pwmcHandle[M1] );
 8001d82:	4632      	mov	r2, r6
 8001d84:	4638      	mov	r0, r7
 8001d86:	f7ff fc77 	bl	8001678 <MCI_Init>
    MCI_ExecSpeedRamp(&Mci[M1],
 8001d8a:	6828      	ldr	r0, [r5, #0]
 8001d8c:	f005 faae 	bl	80072ec <STC_GetMecSpeedRefUnitDefault>
 8001d90:	4642      	mov	r2, r8
 8001d92:	4601      	mov	r1, r0
 8001d94:	4638      	mov	r0, r7
 8001d96:	f7ff fc81 	bl	800169c <MCI_ExecSpeedRamp>
    pMCIList[M1] = &Mci[M1];
 8001d9a:	6027      	str	r7, [r4, #0]
    bMCBootCompleted = 1U;
 8001d9c:	f889 a000 	strb.w	sl, [r9]
}
 8001da0:	b005      	add	sp, #20
 8001da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001da6:	4770      	bx	lr
 8001da8:	20000918 	.word	0x20000918
 8001dac:	20000028 	.word	0x20000028
 8001db0:	20000274 	.word	0x20000274
 8001db4:	20000600 	.word	0x20000600
 8001db8:	20000578 	.word	0x20000578
 8001dbc:	20000000 	.word	0x20000000
 8001dc0:	2000083c 	.word	0x2000083c
 8001dc4:	20000134 	.word	0x20000134
 8001dc8:	200003b0 	.word	0x200003b0
 8001dcc:	20000534 	.word	0x20000534
 8001dd0:	20000324 	.word	0x20000324
 8001dd4:	2000039c 	.word	0x2000039c
 8001dd8:	20000108 	.word	0x20000108
 8001ddc:	200000dc 	.word	0x200000dc
 8001de0:	2000056c 	.word	0x2000056c
 8001de4:	2000050c 	.word	0x2000050c
 8001de8:	20000870 	.word	0x20000870
 8001dec:	2000091c 	.word	0x2000091c
 8001df0:	2000030c 	.word	0x2000030c
 8001df4:	20000920 	.word	0x20000920
 8001df8:	200008f8 	.word	0x200008f8

08001dfc <FOC_InitAdditionalMethods>:
    {
  /* USER CODE BEGIN FOC_InitAdditionalMethods 0 */

  /* USER CODE END FOC_InitAdditionalMethods 0 */
    }
}
 8001dfc:	4770      	bx	lr
 8001dfe:	bf00      	nop

08001e00 <FOC_CalcCurrRef>:
  *         in oTSC parameters
  * @param  bMotor related motor it can be M1 or M2
  * @retval none
  */
__weak void FOC_CalcCurrRef(uint8_t bMotor)
{
 8001e00:	b510      	push	{r4, lr}

  /* USER CODE BEGIN FOC_CalcCurrRef 0 */

  /* USER CODE END FOC_CalcCurrRef 0 */
  if (INTERNAL == FOCVars[bMotor].bDriveInput)
 8001e02:	4c08      	ldr	r4, [pc, #32]	; (8001e24 <FOC_CalcCurrRef+0x24>)
 8001e04:	2326      	movs	r3, #38	; 0x26
 8001e06:	fb03 4400 	mla	r4, r3, r0, r4
 8001e0a:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8001e0e:	b103      	cbz	r3, 8001e12 <FOC_CalcCurrRef+0x12>
    /* Nothing to do */
  }
  /* USER CODE BEGIN FOC_CalcCurrRef 1 */

  /* USER CODE END FOC_CalcCurrRef 1 */
}
 8001e10:	bd10      	pop	{r4, pc}
    FOCVars[bMotor].hTeref = STC_CalcTorqueReference(pSTC[bMotor]);
 8001e12:	4b05      	ldr	r3, [pc, #20]	; (8001e28 <FOC_CalcCurrRef+0x28>)
 8001e14:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001e18:	f005 fa3e 	bl	8007298 <STC_CalcTorqueReference>
 8001e1c:	83e0      	strh	r0, [r4, #30]
    FOCVars[bMotor].Iqdref.q = FOCVars[bMotor].hTeref;
 8001e1e:	8220      	strh	r0, [r4, #16]
}
 8001e20:	bd10      	pop	{r4, pc}
 8001e22:	bf00      	nop
 8001e24:	20000870 	.word	0x20000870
 8001e28:	20000578 	.word	0x20000578

08001e2c <TSK_SetChargeBootCapDelayM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetChargeBootCapDelayM1(uint16_t hTickCount)
{
   hBootCapDelayCounterM1 = hTickCount;
 8001e2c:	4b01      	ldr	r3, [pc, #4]	; (8001e34 <TSK_SetChargeBootCapDelayM1+0x8>)
 8001e2e:	8018      	strh	r0, [r3, #0]
}
 8001e30:	4770      	bx	lr
 8001e32:	bf00      	nop
 8001e34:	20000904 	.word	0x20000904

08001e38 <TSK_ChargeBootCapDelayHasElapsedM1>:
  * @retval bool true if time has elapsed, false otherwise
  */
__weak bool TSK_ChargeBootCapDelayHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hBootCapDelayCounterM1)
 8001e38:	4b03      	ldr	r3, [pc, #12]	; (8001e48 <TSK_ChargeBootCapDelayHasElapsedM1+0x10>)
 8001e3a:	8818      	ldrh	r0, [r3, #0]
 8001e3c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001e3e:	fab0 f080 	clz	r0, r0
 8001e42:	0940      	lsrs	r0, r0, #5
 8001e44:	4770      	bx	lr
 8001e46:	bf00      	nop
 8001e48:	20000904 	.word	0x20000904

08001e4c <TSK_SetStopPermanencyTimeM1>:
  * @param  hTickCount number of ticks to be counted
  * @retval void
  */
__weak void TSK_SetStopPermanencyTimeM1(uint16_t hTickCount)
{
  hStopPermanencyCounterM1 = hTickCount;
 8001e4c:	4b01      	ldr	r3, [pc, #4]	; (8001e54 <TSK_SetStopPermanencyTimeM1+0x8>)
 8001e4e:	8018      	strh	r0, [r3, #0]
}
 8001e50:	4770      	bx	lr
 8001e52:	bf00      	nop
 8001e54:	20000908 	.word	0x20000908

08001e58 <TSK_StopPermanencyTimeHasElapsedM1>:
  * @retval bool true if time is elapsed, false otherwise
  */
__weak bool TSK_StopPermanencyTimeHasElapsedM1(void)
{
  bool retVal = false;
  if (((uint16_t)0) == hStopPermanencyCounterM1)
 8001e58:	4b03      	ldr	r3, [pc, #12]	; (8001e68 <TSK_StopPermanencyTimeHasElapsedM1+0x10>)
 8001e5a:	8818      	ldrh	r0, [r3, #0]
 8001e5c:	b280      	uxth	r0, r0
  {
    retVal = true;
  }
  return (retVal);
}
 8001e5e:	fab0 f080 	clz	r0, r0
 8001e62:	0940      	lsrs	r0, r0, #5
 8001e64:	4770      	bx	lr
 8001e66:	bf00      	nop
 8001e68:	20000908 	.word	0x20000908

08001e6c <TSK_MediumFrequencyTaskM1>:
{
 8001e6c:	b570      	push	{r4, r5, r6, lr}
 8001e6e:	b082      	sub	sp, #8
  int16_t wAux = 0;
 8001e70:	2300      	movs	r3, #0
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001e72:	4669      	mov	r1, sp
 8001e74:	48ba      	ldr	r0, [pc, #744]	; (8002160 <TSK_MediumFrequencyTaskM1+0x2f4>)
  int16_t wAux = 0;
 8001e76:	f8ad 3000 	strh.w	r3, [sp]
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001e7a:	f005 fb49 	bl	8007510 <STO_PLL_CalcAvrgMecSpeedUnit>
  PQD_CalcElMotorPower(pMPM[M1]);
 8001e7e:	4eb9      	ldr	r6, [pc, #740]	; (8002164 <TSK_MediumFrequencyTaskM1+0x2f8>)
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001e80:	4cb9      	ldr	r4, [pc, #740]	; (8002168 <TSK_MediumFrequencyTaskM1+0x2fc>)
  bool IsSpeedReliable = STO_PLL_CalcAvrgMecSpeedUnit(&STO_PLL_M1, &wAux);
 8001e82:	4605      	mov	r5, r0
  PQD_CalcElMotorPower(pMPM[M1]);
 8001e84:	6830      	ldr	r0, [r6, #0]
 8001e86:	f004 f9c5 	bl	8006214 <PQD_CalcElMotorPower>
  if (MCI_GetCurrentFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001e8a:	4620      	mov	r0, r4
 8001e8c:	f7ff fc6c 	bl	8001768 <MCI_GetCurrentFaults>
 8001e90:	b118      	cbz	r0, 8001e9a <TSK_MediumFrequencyTaskM1+0x2e>
    Mci[M1].State = FAULT_NOW;
 8001e92:	230a      	movs	r3, #10
 8001e94:	7663      	strb	r3, [r4, #25]
}
 8001e96:	b002      	add	sp, #8
 8001e98:	bd70      	pop	{r4, r5, r6, pc}
    if (MCI_GetOccurredFaults(&Mci[M1]) == MC_NO_FAULTS)
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	f7ff fc62 	bl	8001764 <MCI_GetOccurredFaults>
 8001ea0:	bb70      	cbnz	r0, 8001f00 <TSK_MediumFrequencyTaskM1+0x94>
      switch (Mci[M1].State)
 8001ea2:	7e63      	ldrb	r3, [r4, #25]
 8001ea4:	2b13      	cmp	r3, #19
 8001ea6:	d8f6      	bhi.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
 8001ea8:	a201      	add	r2, pc, #4	; (adr r2, 8001eb0 <TSK_MediumFrequencyTaskM1+0x44>)
 8001eaa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001eae:	bf00      	nop
 8001eb0:	08002073 	.word	0x08002073
 8001eb4:	08001e97 	.word	0x08001e97
 8001eb8:	08001e97 	.word	0x08001e97
 8001ebc:	08001e97 	.word	0x08001e97
 8001ec0:	08001fdf 	.word	0x08001fdf
 8001ec4:	08001e97 	.word	0x08001e97
 8001ec8:	08001fbb 	.word	0x08001fbb
 8001ecc:	08001e97 	.word	0x08001e97
 8001ed0:	08001f9b 	.word	0x08001f9b
 8001ed4:	08001e97 	.word	0x08001e97
 8001ed8:	08001f01 	.word	0x08001f01
 8001edc:	080020a3 	.word	0x080020a3
 8001ee0:	08001e97 	.word	0x08001e97
 8001ee4:	08001e97 	.word	0x08001e97
 8001ee8:	08001e97 	.word	0x08001e97
 8001eec:	08001e97 	.word	0x08001e97
 8001ef0:	08001f59 	.word	0x08001f59
 8001ef4:	08001f29 	.word	0x08001f29
 8001ef8:	08001e97 	.word	0x08001e97
 8001efc:	08001f09 	.word	0x08001f09
      Mci[M1].State = FAULT_OVER;
 8001f00:	230b      	movs	r3, #11
 8001f02:	7663      	strb	r3, [r4, #25]
}
 8001f04:	b002      	add	sp, #8
 8001f06:	bd70      	pop	{r4, r5, r6, pc}
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001f08:	7e23      	ldrb	r3, [r4, #24]
 8001f0a:	2b05      	cmp	r3, #5
 8001f0c:	f000 80d0 	beq.w	80020b0 <TSK_MediumFrequencyTaskM1+0x244>
            if(! RUC_Exec(&RevUpControlM1))
 8001f10:	4896      	ldr	r0, [pc, #600]	; (800216c <TSK_MediumFrequencyTaskM1+0x300>)
 8001f12:	f005 f89f 	bl	8007054 <RUC_Exec>
 8001f16:	4602      	mov	r2, r0
 8001f18:	2800      	cmp	r0, #0
 8001f1a:	f040 80e4 	bne.w	80020e6 <TSK_MediumFrequencyTaskM1+0x27a>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001f1e:	4892      	ldr	r0, [pc, #584]	; (8002168 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001f20:	2110      	movs	r1, #16
 8001f22:	f7ff fbd9 	bl	80016d8 <MCI_FaultProcessing>
 8001f26:	e7b6      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
            if (MCI_STOP == Mci[M1].DirectCommand)
 8001f28:	7e23      	ldrb	r3, [r4, #24]
 8001f2a:	2b05      	cmp	r3, #5
 8001f2c:	f000 80c0 	beq.w	80020b0 <TSK_MediumFrequencyTaskM1+0x244>
              if (PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC))
 8001f30:	4d8f      	ldr	r5, [pc, #572]	; (8002170 <TSK_MediumFrequencyTaskM1+0x304>)
 8001f32:	2101      	movs	r1, #1
 8001f34:	6828      	ldr	r0, [r5, #0]
 8001f36:	f000 fdc9 	bl	8002acc <PWMC_CurrentReadingCalibr>
 8001f3a:	2800      	cmp	r0, #0
 8001f3c:	d0ab      	beq.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
                if (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand)
 8001f3e:	7e23      	ldrb	r3, [r4, #24]
 8001f40:	2b03      	cmp	r3, #3
 8001f42:	f000 8103 	beq.w	800214c <TSK_MediumFrequencyTaskM1+0x2e0>
                  R3_1_TurnOnLowSides(pwmcHandle[M1]);
 8001f46:	6828      	ldr	r0, [r5, #0]
 8001f48:	f004 fafc 	bl	8006544 <R3_1_TurnOnLowSides>
                  TSK_SetChargeBootCapDelayM1(CHARGE_BOOT_CAP_TICKS);
 8001f4c:	2014      	movs	r0, #20
 8001f4e:	f7ff ff6d 	bl	8001e2c <TSK_SetChargeBootCapDelayM1>
                  Mci[M1].State = CHARGE_BOOT_CAP;
 8001f52:	2310      	movs	r3, #16
 8001f54:	7663      	strb	r3, [r4, #25]
 8001f56:	e79e      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001f58:	7e23      	ldrb	r3, [r4, #24]
 8001f5a:	2b05      	cmp	r3, #5
 8001f5c:	f000 80a8 	beq.w	80020b0 <TSK_MediumFrequencyTaskM1+0x244>
            if (TSK_ChargeBootCapDelayHasElapsedM1())
 8001f60:	f7ff ff6a 	bl	8001e38 <TSK_ChargeBootCapDelayHasElapsedM1>
 8001f64:	2800      	cmp	r0, #0
 8001f66:	d096      	beq.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
              R3_1_SwitchOffPWM(pwmcHandle[M1]);
 8001f68:	4d81      	ldr	r5, [pc, #516]	; (8002170 <TSK_MediumFrequencyTaskM1+0x304>)
 8001f6a:	6828      	ldr	r0, [r5, #0]
 8001f6c:	f004 fb5e 	bl	800662c <R3_1_SwitchOffPWM>
             STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001f70:	4a80      	ldr	r2, [pc, #512]	; (8002174 <TSK_MediumFrequencyTaskM1+0x308>)
             FOCVars[M1].bDriveInput = EXTERNAL;
 8001f72:	4b81      	ldr	r3, [pc, #516]	; (8002178 <TSK_MediumFrequencyTaskM1+0x30c>)
             STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001f74:	6810      	ldr	r0, [r2, #0]
 8001f76:	4981      	ldr	r1, [pc, #516]	; (800217c <TSK_MediumFrequencyTaskM1+0x310>)
             FOCVars[M1].bDriveInput = EXTERNAL;
 8001f78:	2201      	movs	r2, #1
 8001f7a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
             STC_SetSpeedSensor( pSTC[M1], &VirtualSpeedSensorM1._Super );
 8001f7e:	f005 f92d 	bl	80071dc <STC_SetSpeedSensor>
              STO_PLL_Clear(&STO_PLL_M1);
 8001f82:	4877      	ldr	r0, [pc, #476]	; (8002160 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8001f84:	f005 fba0 	bl	80076c8 <STO_PLL_Clear>
              FOC_Clear( M1 );
 8001f88:	2000      	movs	r0, #0
 8001f8a:	f7ff fe5f 	bl	8001c4c <FOC_Clear>
              Mci[M1].State = START;
 8001f8e:	2304      	movs	r3, #4
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001f90:	6828      	ldr	r0, [r5, #0]
              Mci[M1].State = START;
 8001f92:	7663      	strb	r3, [r4, #25]
              PWMC_SwitchOnPWM(pwmcHandle[M1]);
 8001f94:	f000 fd98 	bl	8002ac8 <PWMC_SwitchOnPWM>
 8001f98:	e77d      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
          if (TSK_StopPermanencyTimeHasElapsedM1())
 8001f9a:	f7ff ff5d 	bl	8001e58 <TSK_StopPermanencyTimeHasElapsedM1>
 8001f9e:	2800      	cmp	r0, #0
 8001fa0:	f43f af79 	beq.w	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
            STC_SetSpeedSensor(pSTC[M1], &VirtualSpeedSensorM1._Super);  	/*  sensor-less */
 8001fa4:	4b73      	ldr	r3, [pc, #460]	; (8002174 <TSK_MediumFrequencyTaskM1+0x308>)
 8001fa6:	4975      	ldr	r1, [pc, #468]	; (800217c <TSK_MediumFrequencyTaskM1+0x310>)
 8001fa8:	6818      	ldr	r0, [r3, #0]
 8001faa:	f005 f917 	bl	80071dc <STC_SetSpeedSensor>
            VSS_Clear(&VirtualSpeedSensorM1); /* Reset measured speed in IDLE */
 8001fae:	4873      	ldr	r0, [pc, #460]	; (800217c <TSK_MediumFrequencyTaskM1+0x310>)
 8001fb0:	f005 fc9e 	bl	80078f0 <VSS_Clear>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	8323      	strh	r3, [r4, #24]
 8001fb8:	e76d      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001fba:	7e23      	ldrb	r3, [r4, #24]
 8001fbc:	2b05      	cmp	r3, #5
 8001fbe:	d077      	beq.n	80020b0 <TSK_MediumFrequencyTaskM1+0x244>
            MCI_ExecBufferedCommands(&Mci[M1]);
 8001fc0:	4869      	ldr	r0, [pc, #420]	; (8002168 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001fc2:	f7ff fb95 	bl	80016f0 <MCI_ExecBufferedCommands>
            FOC_CalcCurrRef(M1);
 8001fc6:	2000      	movs	r0, #0
 8001fc8:	f7ff ff1a 	bl	8001e00 <FOC_CalcCurrRef>
            if(!IsSpeedReliable)
 8001fcc:	2d00      	cmp	r5, #0
 8001fce:	f47f af62 	bne.w	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
              MCI_FaultProcessing(&Mci[M1], MC_SPEED_FDBK, 0);
 8001fd2:	4865      	ldr	r0, [pc, #404]	; (8002168 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001fd4:	462a      	mov	r2, r5
 8001fd6:	2120      	movs	r1, #32
 8001fd8:	f7ff fb7e 	bl	80016d8 <MCI_FaultProcessing>
 8001fdc:	e75b      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_STOP == Mci[M1].DirectCommand)
 8001fde:	7e23      	ldrb	r3, [r4, #24]
 8001fe0:	2b05      	cmp	r3, #5
 8001fe2:	d065      	beq.n	80020b0 <TSK_MediumFrequencyTaskM1+0x244>
            if(! RUC_Exec(&RevUpControlM1))
 8001fe4:	4861      	ldr	r0, [pc, #388]	; (800216c <TSK_MediumFrequencyTaskM1+0x300>)
 8001fe6:	f005 f835 	bl	8007054 <RUC_Exec>
 8001fea:	4602      	mov	r2, r0
 8001fec:	2800      	cmp	r0, #0
 8001fee:	d170      	bne.n	80020d2 <TSK_MediumFrequencyTaskM1+0x266>
              MCI_FaultProcessing(&Mci[M1], MC_START_UP, 0);
 8001ff0:	485d      	ldr	r0, [pc, #372]	; (8002168 <TSK_MediumFrequencyTaskM1+0x2fc>)
 8001ff2:	2110      	movs	r1, #16
 8001ff4:	f7ff fb70 	bl	80016d8 <MCI_FaultProcessing>
           (void) VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 8001ff8:	4860      	ldr	r0, [pc, #384]	; (800217c <TSK_MediumFrequencyTaskM1+0x310>)
 8001ffa:	f10d 0102 	add.w	r1, sp, #2
 8001ffe:	f005 fcdd 	bl	80079bc <VSS_CalcAvrgMecSpeedUnit>
           if (true == RUC_FirstAccelerationStageReached(&RevUpControlM1))
 8002002:	485a      	ldr	r0, [pc, #360]	; (800216c <TSK_MediumFrequencyTaskM1+0x300>)
 8002004:	f005 f85c 	bl	80070c0 <RUC_FirstAccelerationStageReached>
 8002008:	2800      	cmp	r0, #0
 800200a:	f43f af44 	beq.w	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
             ObserverConverged = STO_PLL_IsObserverConverged(&STO_PLL_M1, &hForcedMecSpeedUnit);
 800200e:	f10d 0102 	add.w	r1, sp, #2
 8002012:	4853      	ldr	r0, [pc, #332]	; (8002160 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8002014:	f005 fbb8 	bl	8007788 <STO_PLL_IsObserverConverged>
 8002018:	4605      	mov	r5, r0
             STO_SetDirection(&STO_PLL_M1, (int8_t)MCI_GetImposedMotorDirection(&Mci[M1]));
 800201a:	4853      	ldr	r0, [pc, #332]	; (8002168 <TSK_MediumFrequencyTaskM1+0x2fc>)
 800201c:	f7ff fbf6 	bl	800180c <MCI_GetImposedMotorDirection>
 8002020:	b241      	sxtb	r1, r0
 8002022:	484f      	ldr	r0, [pc, #316]	; (8002160 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8002024:	f005 fc60 	bl	80078e8 <STO_SetDirection>
              (void)VSS_SetStartTransition(&VirtualSpeedSensorM1, ObserverConverged);
 8002028:	4854      	ldr	r0, [pc, #336]	; (800217c <TSK_MediumFrequencyTaskM1+0x310>)
 800202a:	4629      	mov	r1, r5
 800202c:	f005 fd68 	bl	8007b00 <VSS_SetStartTransition>
            if (ObserverConverged)
 8002030:	2d00      	cmp	r5, #0
 8002032:	f43f af30 	beq.w	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 8002036:	484a      	ldr	r0, [pc, #296]	; (8002160 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8002038:	4e4f      	ldr	r6, [pc, #316]	; (8002178 <TSK_MediumFrequencyTaskM1+0x30c>)
              REMNG_Init(pREMNG[M1]);
 800203a:	4d51      	ldr	r5, [pc, #324]	; (8002180 <TSK_MediumFrequencyTaskM1+0x314>)
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 800203c:	f005 f86c 	bl	8007118 <SPD_GetElAngle>
 8002040:	4601      	mov	r1, r0
 8002042:	6870      	ldr	r0, [r6, #4]
 8002044:	f7ff fcf6 	bl	8001a34 <MCM_Park>
 8002048:	4603      	mov	r3, r0
              REMNG_Init(pREMNG[M1]);
 800204a:	6828      	ldr	r0, [r5, #0]
              qd_t StatorCurrent = MCM_Park(FOCVars[M1].Ialphabeta, SPD_GetElAngle(&STO_PLL_M1._Super));
 800204c:	9301      	str	r3, [sp, #4]
              REMNG_Init(pREMNG[M1]);
 800204e:	f004 fefb 	bl	8006e48 <REMNG_Init>
              (void)REMNG_ExecRamp(pREMNG[M1], FOCVars[M1].Iqdref.q, 0);
 8002052:	f9b6 1010 	ldrsh.w	r1, [r6, #16]
 8002056:	6828      	ldr	r0, [r5, #0]
 8002058:	2200      	movs	r2, #0
 800205a:	f004 ff3b 	bl	8006ed4 <REMNG_ExecRamp>
              (void)REMNG_ExecRamp(pREMNG[M1], StatorCurrent.q, TRANSITION_DURATION);
 800205e:	f9bd 1004 	ldrsh.w	r1, [sp, #4]
 8002062:	6828      	ldr	r0, [r5, #0]
 8002064:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8002068:	f004 ff34 	bl	8006ed4 <REMNG_ExecRamp>
              Mci[M1].State = SWITCH_OVER;
 800206c:	2313      	movs	r3, #19
 800206e:	7663      	strb	r3, [r4, #25]
 8002070:	e711      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
          if ((MCI_START == Mci[M1].DirectCommand) || (MCI_MEASURE_OFFSETS == Mci[M1].DirectCommand))
 8002072:	7e25      	ldrb	r5, [r4, #24]
 8002074:	f005 05fd 	and.w	r5, r5, #253	; 0xfd
 8002078:	2d01      	cmp	r5, #1
 800207a:	f47f af0c 	bne.w	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
            RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 800207e:	483a      	ldr	r0, [pc, #232]	; (8002168 <TSK_MediumFrequencyTaskM1+0x2fc>)
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 8002080:	4e3b      	ldr	r6, [pc, #236]	; (8002170 <TSK_MediumFrequencyTaskM1+0x304>)
            RUC_Clear(&RevUpControlM1, MCI_GetImposedMotorDirection(&Mci[M1]));
 8002082:	f7ff fbc3 	bl	800180c <MCI_GetImposedMotorDirection>
 8002086:	4601      	mov	r1, r0
 8002088:	4838      	ldr	r0, [pc, #224]	; (800216c <TSK_MediumFrequencyTaskM1+0x300>)
 800208a:	f004 ff9f 	bl	8006fcc <RUC_Clear>
           if (pwmcHandle[M1]->offsetCalibStatus == false)
 800208e:	6830      	ldr	r0, [r6, #0]
 8002090:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
 8002094:	2900      	cmp	r1, #0
 8002096:	d14f      	bne.n	8002138 <TSK_MediumFrequencyTaskM1+0x2cc>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_START);
 8002098:	f000 fd18 	bl	8002acc <PWMC_CurrentReadingCalibr>
             Mci[M1].State = OFFSET_CALIB;
 800209c:	2311      	movs	r3, #17
 800209e:	7663      	strb	r3, [r4, #25]
 80020a0:	e6f9      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
          if (MCI_ACK_FAULTS == Mci[M1].DirectCommand)
 80020a2:	7e23      	ldrb	r3, [r4, #24]
 80020a4:	2b02      	cmp	r3, #2
 80020a6:	f47f aef6 	bne.w	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
            Mci[M1].DirectCommand = MCI_NO_COMMAND;
 80020aa:	2300      	movs	r3, #0
 80020ac:	8323      	strh	r3, [r4, #24]
 80020ae:	e6f2      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
  R3_1_SwitchOffPWM(pwmcHandle[motor]);
 80020b0:	4b2f      	ldr	r3, [pc, #188]	; (8002170 <TSK_MediumFrequencyTaskM1+0x304>)
 80020b2:	6818      	ldr	r0, [r3, #0]
 80020b4:	f004 faba 	bl	800662c <R3_1_SwitchOffPWM>
  FOC_Clear(motor);
 80020b8:	2000      	movs	r0, #0
 80020ba:	f7ff fdc7 	bl	8001c4c <FOC_Clear>
  MPM_Clear((MotorPowMeas_Handle_t*) pMPM[motor]);
 80020be:	6830      	ldr	r0, [r6, #0]
 80020c0:	f003 ff98 	bl	8005ff4 <MPM_Clear>
  TSK_SetStopPermanencyTimeM1(STOPPERMANENCY_TICKS);
 80020c4:	f44f 7048 	mov.w	r0, #800	; 0x320
 80020c8:	f7ff fec0 	bl	8001e4c <TSK_SetStopPermanencyTimeM1>
  Mci[motor].State = STOP;
 80020cc:	2308      	movs	r3, #8
 80020ce:	7663      	strb	r3, [r4, #25]
  return;
 80020d0:	e6e1      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
             IqdRef.q = STC_CalcTorqueReference( pSTC[M1] );
 80020d2:	4b28      	ldr	r3, [pc, #160]	; (8002174 <TSK_MediumFrequencyTaskM1+0x308>)
 80020d4:	6818      	ldr	r0, [r3, #0]
 80020d6:	f005 f8df 	bl	8007298 <STC_CalcTorqueReference>
             IqdRef.d = FOCVars[M1].UserIdref;
 80020da:	4b27      	ldr	r3, [pc, #156]	; (8002178 <TSK_MediumFrequencyTaskM1+0x30c>)
 80020dc:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
             FOCVars[M1].Iqdref = IqdRef;
 80020e0:	8218      	strh	r0, [r3, #16]
 80020e2:	825a      	strh	r2, [r3, #18]
 80020e4:	e788      	b.n	8001ff8 <TSK_MediumFrequencyTaskM1+0x18c>
              LoopClosed = VSS_CalcAvrgMecSpeedUnit(&VirtualSpeedSensorM1, &hForcedMecSpeedUnit);
 80020e6:	4825      	ldr	r0, [pc, #148]	; (800217c <TSK_MediumFrequencyTaskM1+0x310>)
 80020e8:	a901      	add	r1, sp, #4
 80020ea:	f005 fc67 	bl	80079bc <VSS_CalcAvrgMecSpeedUnit>
 80020ee:	4605      	mov	r5, r0
              tempBool = VSS_TransitionEnded(&VirtualSpeedSensorM1);
 80020f0:	4822      	ldr	r0, [pc, #136]	; (800217c <TSK_MediumFrequencyTaskM1+0x310>)
 80020f2:	f005 fd13 	bl	8007b1c <VSS_TransitionEnded>
              LoopClosed = LoopClosed || tempBool;
 80020f6:	b335      	cbz	r5, 8002146 <TSK_MediumFrequencyTaskM1+0x2da>
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 80020f8:	4b1f      	ldr	r3, [pc, #124]	; (8002178 <TSK_MediumFrequencyTaskM1+0x30c>)
 80020fa:	4822      	ldr	r0, [pc, #136]	; (8002184 <TSK_MediumFrequencyTaskM1+0x318>)
 80020fc:	f9b3 6010 	ldrsh.w	r6, [r3, #16]
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8002100:	4d1c      	ldr	r5, [pc, #112]	; (8002174 <TSK_MediumFrequencyTaskM1+0x308>)
                                    (((int32_t)FOCVars[M1].Iqdref.q * (int16_t)PID_GetKIDivisor(&PIDSpeedHandle_M1))
 8002102:	f004 f817 	bl	8006134 <PID_GetKIDivisor>
                PID_SetIntegralTerm(&PIDSpeedHandle_M1,
 8002106:	b201      	sxth	r1, r0
 8002108:	fb06 f101 	mul.w	r1, r6, r1
 800210c:	481d      	ldr	r0, [pc, #116]	; (8002184 <TSK_MediumFrequencyTaskM1+0x318>)
 800210e:	f004 f807 	bl	8006120 <PID_SetIntegralTerm>
                STC_SetSpeedSensor(pSTC[M1], &STO_PLL_M1._Super); /*Observer has converged*/
 8002112:	4913      	ldr	r1, [pc, #76]	; (8002160 <TSK_MediumFrequencyTaskM1+0x2f4>)
 8002114:	6828      	ldr	r0, [r5, #0]
 8002116:	f005 f861 	bl	80071dc <STC_SetSpeedSensor>
                FOC_InitAdditionalMethods(M1);
 800211a:	2000      	movs	r0, #0
 800211c:	f7ff fe6e 	bl	8001dfc <FOC_InitAdditionalMethods>
                FOC_CalcCurrRef( M1 );
 8002120:	2000      	movs	r0, #0
 8002122:	f7ff fe6d 	bl	8001e00 <FOC_CalcCurrRef>
                STC_ForceSpeedReferenceToCurrentSpeed(pSTC[M1]); /* Init the reference speed to current speed */
 8002126:	6828      	ldr	r0, [r5, #0]
 8002128:	f005 f8f2 	bl	8007310 <STC_ForceSpeedReferenceToCurrentSpeed>
                MCI_ExecBufferedCommands(&Mci[M1]); /* Exec the speed ramp after changing of the speed sensor */
 800212c:	480e      	ldr	r0, [pc, #56]	; (8002168 <TSK_MediumFrequencyTaskM1+0x2fc>)
 800212e:	f7ff fadf 	bl	80016f0 <MCI_ExecBufferedCommands>
                Mci[M1].State = RUN;
 8002132:	2306      	movs	r3, #6
 8002134:	7663      	strb	r3, [r4, #25]
 8002136:	e6ae      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 8002138:	4629      	mov	r1, r5
             pwmcHandle[M1]->OffCalibrWaitTimeCounter = 1u;
 800213a:	f8a0 5052 	strh.w	r5, [r0, #82]	; 0x52
             PWMC_CurrentReadingCalibr(pwmcHandle[M1], CRC_EXEC);
 800213e:	f000 fcc5 	bl	8002acc <PWMC_CurrentReadingCalibr>
             R3_1_TurnOnLowSides(pwmcHandle[M1]);
 8002142:	6830      	ldr	r0, [r6, #0]
 8002144:	e700      	b.n	8001f48 <TSK_MediumFrequencyTaskM1+0xdc>
              LoopClosed = LoopClosed || tempBool;
 8002146:	2800      	cmp	r0, #0
 8002148:	d1d6      	bne.n	80020f8 <TSK_MediumFrequencyTaskM1+0x28c>
 800214a:	e6a4      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
                  FOC_Clear(M1);
 800214c:	2000      	movs	r0, #0
 800214e:	f7ff fd7d 	bl	8001c4c <FOC_Clear>
                  MPM_Clear((MotorPowMeas_Handle_t*) pMPM[M1]);
 8002152:	6830      	ldr	r0, [r6, #0]
 8002154:	f003 ff4e 	bl	8005ff4 <MPM_Clear>
                  Mci[M1].DirectCommand = MCI_NO_COMMAND;
 8002158:	2300      	movs	r3, #0
 800215a:	8323      	strh	r3, [r4, #24]
 800215c:	e69b      	b.n	8001e96 <TSK_MediumFrequencyTaskM1+0x2a>
 800215e:	bf00      	nop
 8002160:	200003b0 	.word	0x200003b0
 8002164:	2000056c 	.word	0x2000056c
 8002168:	2000083c 	.word	0x2000083c
 800216c:	20000324 	.word	0x20000324
 8002170:	20000920 	.word	0x20000920
 8002174:	20000578 	.word	0x20000578
 8002178:	20000870 	.word	0x20000870
 800217c:	20000534 	.word	0x20000534
 8002180:	2000091c 	.word	0x2000091c
 8002184:	20000134 	.word	0x20000134

08002188 <MC_Scheduler>:
  if (((uint8_t)1) == bMCBootCompleted)
 8002188:	4b1c      	ldr	r3, [pc, #112]	; (80021fc <MC_Scheduler+0x74>)
 800218a:	781b      	ldrb	r3, [r3, #0]
 800218c:	2b01      	cmp	r3, #1
 800218e:	d000      	beq.n	8002192 <MC_Scheduler+0xa>
 8002190:	4770      	bx	lr
{
 8002192:	b570      	push	{r4, r5, r6, lr}
    if(hMFTaskCounterM1 > 0u)
 8002194:	4c1a      	ldr	r4, [pc, #104]	; (8002200 <MC_Scheduler+0x78>)
 8002196:	8823      	ldrh	r3, [r4, #0]
 8002198:	b193      	cbz	r3, 80021c0 <MC_Scheduler+0x38>
      hMFTaskCounterM1--;
 800219a:	3b01      	subs	r3, #1
 800219c:	8023      	strh	r3, [r4, #0]
    if(hBootCapDelayCounterM1 > 0U)
 800219e:	4a19      	ldr	r2, [pc, #100]	; (8002204 <MC_Scheduler+0x7c>)
 80021a0:	8813      	ldrh	r3, [r2, #0]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	b11b      	cbz	r3, 80021ae <MC_Scheduler+0x26>
      hBootCapDelayCounterM1--;
 80021a6:	8813      	ldrh	r3, [r2, #0]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	b29b      	uxth	r3, r3
 80021ac:	8013      	strh	r3, [r2, #0]
    if(hStopPermanencyCounterM1 > 0U)
 80021ae:	4a16      	ldr	r2, [pc, #88]	; (8002208 <MC_Scheduler+0x80>)
 80021b0:	8813      	ldrh	r3, [r2, #0]
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	b11b      	cbz	r3, 80021be <MC_Scheduler+0x36>
      hStopPermanencyCounterM1--;
 80021b6:	8813      	ldrh	r3, [r2, #0]
 80021b8:	3b01      	subs	r3, #1
 80021ba:	b29b      	uxth	r3, r3
 80021bc:	8013      	strh	r3, [r2, #0]
}
 80021be:	bd70      	pop	{r4, r5, r6, pc}
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80021c0:	4d12      	ldr	r5, [pc, #72]	; (800220c <MC_Scheduler+0x84>)
      TSK_MediumFrequencyTaskM1();
 80021c2:	f7ff fe53 	bl	8001e6c <TSK_MediumFrequencyTaskM1>
      MCP_Over_UartA.rxBuffer = MCP_Over_UartA.pTransportLayer->fRXPacketProcess(MCP_Over_UartA.pTransportLayer,
 80021c6:	4629      	mov	r1, r5
 80021c8:	f851 0b0c 	ldr.w	r0, [r1], #12
 80021cc:	6883      	ldr	r3, [r0, #8]
 80021ce:	4798      	blx	r3
 80021d0:	6068      	str	r0, [r5, #4]
      if ( 0U == MCP_Over_UartA.rxBuffer)
 80021d2:	b130      	cbz	r0, 80021e2 <MC_Scheduler+0x5a>
        if (0U == MCP_Over_UartA.pTransportLayer->fGetBuffer(MCP_Over_UartA.pTransportLayer,
 80021d4:	4629      	mov	r1, r5
 80021d6:	220a      	movs	r2, #10
 80021d8:	f851 0b08 	ldr.w	r0, [r1], #8
 80021dc:	6803      	ldr	r3, [r0, #0]
 80021de:	4798      	blx	r3
 80021e0:	b910      	cbnz	r0, 80021e8 <MC_Scheduler+0x60>
      hMFTaskCounterM1 = (uint16_t)MF_TASK_OCCURENCE_TICKS;
 80021e2:	2301      	movs	r3, #1
 80021e4:	8023      	strh	r3, [r4, #0]
 80021e6:	e7da      	b.n	800219e <MC_Scheduler+0x16>
          MCP_ReceivedPacket(&MCP_Over_UartA);
 80021e8:	4628      	mov	r0, r5
 80021ea:	f003 fca5 	bl	8005b38 <MCP_ReceivedPacket>
          MCP_Over_UartA.pTransportLayer->fSendPacket(MCP_Over_UartA.pTransportLayer, MCP_Over_UartA.txBuffer,
 80021ee:	6828      	ldr	r0, [r5, #0]
 80021f0:	89ea      	ldrh	r2, [r5, #14]
 80021f2:	6846      	ldr	r6, [r0, #4]
 80021f4:	68a9      	ldr	r1, [r5, #8]
 80021f6:	230a      	movs	r3, #10
 80021f8:	47b0      	blx	r6
 80021fa:	e7f2      	b.n	80021e2 <MC_Scheduler+0x5a>
 80021fc:	200008f8 	.word	0x200008f8
 8002200:	20000906 	.word	0x20000906
 8002204:	20000904 	.word	0x20000904
 8002208:	20000908 	.word	0x20000908
 800220c:	200005dc 	.word	0x200005dc

08002210 <TSK_HighFrequencyTask>:
  * subsystem (see the state machine(s)).
  *
  * @retval Number of the  motor instance which FOC loop was executed.
  */
__weak uint8_t TSK_HighFrequencyTask(void)
{
 8002210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002214:	ed2d 8b02 	vpush	{d8}
  uint8_t bMotorNbr = 0;

  Observer_Inputs_t STO_Inputs; /*  only if sensorless main*/

  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
  if (SWITCH_OVER == Mci[M1].State)
 8002218:	4bb3      	ldr	r3, [pc, #716]	; (80024e8 <TSK_HighFrequencyTask+0x2d8>)
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800221a:	4cb4      	ldr	r4, [pc, #720]	; (80024ec <TSK_HighFrequencyTask+0x2dc>)
  if (SWITCH_OVER == Mci[M1].State)
 800221c:	7e5b      	ldrb	r3, [r3, #25]
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 800221e:	f8d4 001a 	ldr.w	r0, [r4, #26]
{
 8002222:	b08f      	sub	sp, #60	; 0x3c
  if (SWITCH_OVER == Mci[M1].State)
 8002224:	2b13      	cmp	r3, #19
  STO_Inputs.Valfa_beta = FOCVars[M1].Valphabeta;  /* only if sensorless*/
 8002226:	900b      	str	r0, [sp, #44]	; 0x2c
  if (SWITCH_OVER == Mci[M1].State)
 8002228:	f000 81cd 	beq.w	80025c6 <TSK_HighFrequencyTask+0x3b6>

	int16_t hElAngle;
	uint16_t hCodeError;
	SpeednPosFdbk_Handle_t *speedHandle;

	speedHandle = STC_GetSpeedSensor(pSTC[M1]);
 800222c:	4bb0      	ldr	r3, [pc, #704]	; (80024f0 <TSK_HighFrequencyTask+0x2e0>)
 800222e:	6818      	ldr	r0, [r3, #0]
 8002230:	f004 ffd6 	bl	80071e0 <STC_GetSpeedSensor>
 8002234:	4605      	mov	r5, r0
 8002236:	ee08 0a10 	vmov	s16, r0
	hElAngle = SPD_GetElAngle(speedHandle);
 800223a:	f004 ff6d 	bl	8007118 <SPD_GetElAngle>
 800223e:	4680      	mov	r8, r0
	hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*PARK_ANGLE_COMPENSATION_FACTOR;
 8002240:	4628      	mov	r0, r5
 8002242:	f004 ff71 	bl	8007128 <SPD_GetInstElSpeedDpp>
	PWMC_GetPhaseCurrents(pwmcHandle[M1], &Iab);
 8002246:	4bab      	ldr	r3, [pc, #684]	; (80024f4 <TSK_HighFrequencyTask+0x2e4>)
 8002248:	a908      	add	r1, sp, #32
 800224a:	6818      	ldr	r0, [r3, #0]
 800224c:	f000 faee 	bl	800282c <PWMC_GetPhaseCurrents>
	Ialphabeta = MCM_Clarke(Iab);
 8002250:	9808      	ldr	r0, [sp, #32]
 8002252:	f7ff fb79 	bl	8001948 <MCM_Clarke>
	Iqd = MCM_Park(Ialphabeta, hElAngle);
 8002256:	4641      	mov	r1, r8
	Ialphabeta = MCM_Clarke(Iab);
 8002258:	9009      	str	r0, [sp, #36]	; 0x24
	Iqd = MCM_Park(Ialphabeta, hElAngle);
 800225a:	f7ff fbeb 	bl	8001a34 <MCM_Park>
 800225e:	9002      	str	r0, [sp, #8]


	int speedRPM = SPEED_UNIT_2_RPM(SPD_GetAvrgMecSpeedUnit(speedHandle));
 8002260:	4628      	mov	r0, r5
 8002262:	f004 ff5d 	bl	8007120 <SPD_GetAvrgMecSpeedUnit>
 8002266:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800226a:	0046      	lsls	r6, r0, #1
	int16_t wr = SPEED_UNIT_2_RPM(MC_GetMecSpeedAverageMotor1())/9.55;
 800226c:	f7ff f9f8 	bl	8001660 <MC_GetMecSpeedAverageMotor1>
 8002270:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8002274:	0040      	lsls	r0, r0, #1
 8002276:	b200      	sxth	r0, r0
 8002278:	f7fe fa2a 	bl	80006d0 <__aeabi_i2d>
 800227c:	a398      	add	r3, pc, #608	; (adr r3, 80024e0 <TSK_HighFrequencyTask+0x2d0>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fd ffa9 	bl	80001d8 <__aeabi_dmul>
 8002286:	f7fe fa8d 	bl	80007a4 <__aeabi_d2iz>

	/* Omkar code start */

	if(!hasMPCinit){
 800228a:	4b9b      	ldr	r3, [pc, #620]	; (80024f8 <TSK_HighFrequencyTask+0x2e8>)
 800228c:	681a      	ldr	r2, [r3, #0]
	int speedRPM = SPEED_UNIT_2_RPM(SPD_GetAvrgMecSpeedUnit(speedHandle));
 800228e:	b236      	sxth	r6, r6
	int16_t wr = SPEED_UNIT_2_RPM(MC_GetMecSpeedAverageMotor1())/9.55;
 8002290:	b205      	sxth	r5, r0
	if(!hasMPCinit){
 8002292:	2a00      	cmp	r2, #0
 8002294:	f000 8192 	beq.w	80025bc <TSK_HighFrequencyTask+0x3ac>
		hasMPCinit = 1;
		initModelPredictiveControl();
	}


	if(speedRPM > 1900 || runMPC){
 8002298:	f240 736c 	movw	r3, #1900	; 0x76c
 800229c:	429e      	cmp	r6, r3
 800229e:	4b97      	ldr	r3, [pc, #604]	; (80024fc <TSK_HighFrequencyTask+0x2ec>)
 80022a0:	dc03      	bgt.n	80022aa <TSK_HighFrequencyTask+0x9a>
 80022a2:	681a      	ldr	r2, [r3, #0]
 80022a4:	2a00      	cmp	r2, #0
 80022a6:	f000 8151 	beq.w	800254c <TSK_HighFrequencyTask+0x33c>
		runMPC = 1;
 80022aa:	2201      	movs	r2, #1
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80022ac:	4894      	ldr	r0, [pc, #592]	; (8002500 <TSK_HighFrequencyTask+0x2f0>)

		IqTemp = Iqd.q;
 80022ae:	f8df 9294 	ldr.w	r9, [pc, #660]	; 8002544 <TSK_HighFrequencyTask+0x334>
		runMPC = 1;
 80022b2:	601a      	str	r2, [r3, #0]
		HAL_GPIO_WritePin(GPIOA, GPIO_PIN_5, 1);
 80022b4:	2120      	movs	r1, #32
 80022b6:	f002 fd95 	bl	8004de4 <HAL_GPIO_WritePin>
		IqTemp = Iqd.q;
 80022ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80022be:	f8a9 3000 	strh.w	r3, [r9]
		IdTemp = Iqd.d;
 80022c2:	4f90      	ldr	r7, [pc, #576]	; (8002504 <TSK_HighFrequencyTask+0x2f4>)
 80022c4:	f8bd 300a 	ldrh.w	r3, [sp, #10]

		cost = 2147483628;

		for(i=0;i<6;i++){
 80022c8:	4e8f      	ldr	r6, [pc, #572]	; (8002508 <TSK_HighFrequencyTask+0x2f8>)
		IdTemp = Iqd.d;
 80022ca:	803b      	strh	r3, [r7, #0]
		cost = 2147483628;
 80022cc:	4a8f      	ldr	r2, [pc, #572]	; (800250c <TSK_HighFrequencyTask+0x2fc>)
			} else {
				VqdTemp.d = 0;
				VqdTemp.q = 0;
			}

			IdPred = ((C1*IdTemp/10027) + (wr*IqTemp/2) + (c2*(VqdTemp.d)*Vphase/32767));
 80022ce:	f8df a278 	ldr.w	sl, [pc, #632]	; 8002548 <TSK_HighFrequencyTask+0x338>
		cost = 2147483628;
 80022d2:	9207      	str	r2, [sp, #28]
		for(i=0;i<6;i++){
 80022d4:	2300      	movs	r3, #0
 80022d6:	6033      	str	r3, [r6, #0]

			costTemp1 = costTemp1*costTemp1;
			costTemp2 = costTemp2*costTemp2;

			if(costTemp1+costTemp2 < cost){
				optimalVector = i;
 80022d8:	9501      	str	r5, [sp, #4]
				Valphabeta.beta  = Varray[i][1];
 80022da:	4a8d      	ldr	r2, [pc, #564]	; (8002510 <TSK_HighFrequencyTask+0x300>)
 80022dc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80022e0:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80022e4:	ed93 7a01 	vldr	s14, [r3, #4]
				Valphabeta.alpha = Varray[i][0];
 80022e8:	edd3 7a00 	vldr	s15, [r3]
				Valphabeta.beta  = Varray[i][1];
 80022ec:	eebd 7ac7 	vcvt.s32.f32	s14, s14
				Valphabeta.alpha = Varray[i][0];
 80022f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
				VqdTemp = MCM_Park(Valphabeta, hElAngle);
 80022f4:	ee17 3a10 	vmov	r3, s14
 80022f8:	f8ad 302a 	strh.w	r3, [sp, #42]	; 0x2a
				Valphabeta.alpha = Varray[i][0];
 80022fc:	ee17 3a90 	vmov	r3, s15
 8002300:	f8ad 3028 	strh.w	r3, [sp, #40]	; 0x28
				VqdTemp = MCM_Park(Valphabeta, hElAngle);
 8002304:	4641      	mov	r1, r8
 8002306:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002308:	f7ff fb94 	bl	8001a34 <MCM_Park>
 800230c:	9004      	str	r0, [sp, #16]
			IdPred = ((C1*IdTemp/10027) + (wr*IqTemp/2) + (c2*(VqdTemp.d)*Vphase/32767));
 800230e:	f8b7 b000 	ldrh.w	fp, [r7]
 8002312:	f8b9 2000 	ldrh.w	r2, [r9]
 8002316:	9b01      	ldr	r3, [sp, #4]
 8002318:	497e      	ldr	r1, [pc, #504]	; (8002514 <TSK_HighFrequencyTask+0x304>)
 800231a:	b212      	sxth	r2, r2
 800231c:	fb03 f202 	mul.w	r2, r3, r2
 8002320:	4b7d      	ldr	r3, [pc, #500]	; (8002518 <TSK_HighFrequencyTask+0x308>)
 8002322:	eb02 70d2 	add.w	r0, r2, r2, lsr #31
 8002326:	f8d3 e000 	ldr.w	lr, [r3]
 800232a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
 800232e:	4b7b      	ldr	r3, [pc, #492]	; (800251c <TSK_HighFrequencyTask+0x30c>)
 8002330:	b212      	sxth	r2, r2
 8002332:	f9b3 c000 	ldrsh.w	ip, [r3]
 8002336:	fb0e f202 	mul.w	r2, lr, r2
 800233a:	fb0c f202 	mul.w	r2, ip, r2
 800233e:	f240 53c7 	movw	r3, #1479	; 0x5c7
 8002342:	fb81 5102 	smull	r5, r1, r1, r2
 8002346:	fb1b fb03 	smulbb	fp, fp, r3
 800234a:	4411      	add	r1, r2
 800234c:	17d2      	asrs	r2, r2, #31
 800234e:	ebc2 32a1 	rsb	r2, r2, r1, asr #14
 8002352:	fb8a 510b 	smull	r5, r1, sl, fp
 8002356:	ea4f 7beb 	mov.w	fp, fp, asr #31
 800235a:	ebcb 3b21 	rsb	fp, fp, r1, asr #12
 800235e:	445a      	add	r2, fp
 8002360:	eb02 0260 	add.w	r2, r2, r0, asr #1
 8002364:	486e      	ldr	r0, [pc, #440]	; (8002520 <TSK_HighFrequencyTask+0x310>)
			IqPred = ((C1*IqTemp/10027) - (wr*IdTemp/2) + (c2*(VqdTemp.q)*Vphase/32767));
 8002366:	496b      	ldr	r1, [pc, #428]	; (8002514 <TSK_HighFrequencyTask+0x304>)
			IdPred = ((C1*IdTemp/10027) + (wr*IqTemp/2) + (c2*(VqdTemp.d)*Vphase/32767));
 8002368:	b212      	sxth	r2, r2
 800236a:	8002      	strh	r2, [r0, #0]
 800236c:	4605      	mov	r5, r0
			IqPred = ((C1*IqTemp/10027) - (wr*IdTemp/2) + (c2*(VqdTemp.q)*Vphase/32767));
 800236e:	f8b9 0000 	ldrh.w	r0, [r9]
 8002372:	9a01      	ldr	r2, [sp, #4]
 8002374:	fb10 f003 	smulbb	r0, r0, r3
 8002378:	883b      	ldrh	r3, [r7, #0]
 800237a:	b21b      	sxth	r3, r3
 800237c:	fb02 f303 	mul.w	r3, r2, r3
 8002380:	eb03 72d3 	add.w	r2, r3, r3, lsr #31
 8002384:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8002388:	b21b      	sxth	r3, r3
 800238a:	fb0e f303 	mul.w	r3, lr, r3
 800238e:	fb0c f303 	mul.w	r3, ip, r3
 8002392:	fb81 1c03 	smull	r1, ip, r1, r3
 8002396:	449c      	add	ip, r3
 8002398:	17db      	asrs	r3, r3, #31
 800239a:	ebc3 33ac 	rsb	r3, r3, ip, asr #14
 800239e:	fb8a 1c00 	smull	r1, ip, sl, r0
 80023a2:	17c0      	asrs	r0, r0, #31
 80023a4:	ebc0 302c 	rsb	r0, r0, ip, asr #12
 80023a8:	4403      	add	r3, r0
 80023aa:	eba3 0362 	sub.w	r3, r3, r2, asr #1
 80023ae:	4a5d      	ldr	r2, [pc, #372]	; (8002524 <TSK_HighFrequencyTask+0x314>)
 80023b0:	b21b      	sxth	r3, r3
 80023b2:	8013      	strh	r3, [r2, #0]
			costTemp1 = (FOCVars[M1].Iqdref.q - IqPred);
 80023b4:	8813      	ldrh	r3, [r2, #0]
 80023b6:	b21a      	sxth	r2, r3
 80023b8:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80023bc:	1a9b      	subs	r3, r3, r2
 80023be:	9305      	str	r3, [sp, #20]
			costTemp2 = (FOCVars[M1].Iqdref.d - IdPred);
 80023c0:	882b      	ldrh	r3, [r5, #0]
 80023c2:	b21a      	sxth	r2, r3
 80023c4:	f9b4 3012 	ldrsh.w	r3, [r4, #18]
 80023c8:	1a9b      	subs	r3, r3, r2
 80023ca:	9306      	str	r3, [sp, #24]
			if(costTemp1<0){
 80023cc:	9b05      	ldr	r3, [sp, #20]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	da02      	bge.n	80023d8 <TSK_HighFrequencyTask+0x1c8>
				costTemp1 = -costTemp1;
 80023d2:	9b05      	ldr	r3, [sp, #20]
 80023d4:	425b      	negs	r3, r3
 80023d6:	9305      	str	r3, [sp, #20]
			if(costTemp2<0){
 80023d8:	9b06      	ldr	r3, [sp, #24]
 80023da:	2b00      	cmp	r3, #0
 80023dc:	da02      	bge.n	80023e4 <TSK_HighFrequencyTask+0x1d4>
				costTemp2 = -costTemp2;
 80023de:	9b06      	ldr	r3, [sp, #24]
 80023e0:	425b      	negs	r3, r3
 80023e2:	9306      	str	r3, [sp, #24]
			costTemp1 = costTemp1*costTemp1;
 80023e4:	9b05      	ldr	r3, [sp, #20]
 80023e6:	9a05      	ldr	r2, [sp, #20]
 80023e8:	fb02 f303 	mul.w	r3, r2, r3
 80023ec:	9305      	str	r3, [sp, #20]
			costTemp2 = costTemp2*costTemp2;
 80023ee:	9b06      	ldr	r3, [sp, #24]
 80023f0:	9a06      	ldr	r2, [sp, #24]
 80023f2:	fb02 f303 	mul.w	r3, r2, r3
 80023f6:	9306      	str	r3, [sp, #24]
			if(costTemp1+costTemp2 < cost){
 80023f8:	9b05      	ldr	r3, [sp, #20]
 80023fa:	9a06      	ldr	r2, [sp, #24]
 80023fc:	4413      	add	r3, r2
 80023fe:	9a07      	ldr	r2, [sp, #28]
 8002400:	4293      	cmp	r3, r2
 8002402:	db58      	blt.n	80024b6 <TSK_HighFrequencyTask+0x2a6>
		for(i=0;i<6;i++){
 8002404:	6833      	ldr	r3, [r6, #0]
 8002406:	3301      	adds	r3, #1
 8002408:	2b05      	cmp	r3, #5
 800240a:	6033      	str	r3, [r6, #0]
 800240c:	f77f af65 	ble.w	80022da <TSK_HighFrequencyTask+0xca>
		  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
		  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
	}
	/* Omkar code end */

	Vqd = Circle_Limitation(pCLM[M1], Vqd);
 8002410:	4b45      	ldr	r3, [pc, #276]	; (8002528 <TSK_HighFrequencyTask+0x318>)
 8002412:	9903      	ldr	r1, [sp, #12]
 8002414:	6818      	ldr	r0, [r3, #0]
 8002416:	f003 fb5f 	bl	8005ad8 <Circle_Limitation>
 800241a:	9003      	str	r0, [sp, #12]
	hElAngle += SPD_GetInstElSpeedDpp(speedHandle)*REV_PARK_ANGLE_COMPENSATION_FACTOR;
 800241c:	ee18 0a10 	vmov	r0, s16
 8002420:	f004 fe82 	bl	8007128 <SPD_GetInstElSpeedDpp>

	Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002424:	4641      	mov	r1, r8
 8002426:	9803      	ldr	r0, [sp, #12]
 8002428:	f7ff fb48 	bl	8001abc <MCM_Rev_Park>
	hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 800242c:	4b31      	ldr	r3, [pc, #196]	; (80024f4 <TSK_HighFrequencyTask+0x2e4>)
	Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 800242e:	4601      	mov	r1, r0
	hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002430:	6818      	ldr	r0, [r3, #0]
	Valphabeta = MCM_Rev_Park(Vqd, hElAngle);
 8002432:	910a      	str	r1, [sp, #40]	; 0x28
 8002434:	b20e      	sxth	r6, r1
 8002436:	140d      	asrs	r5, r1, #16
	hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002438:	f000 f9fa 	bl	8002830 <PWMC_SetPhaseVoltage>

	FOCVars[M1].Vqd = Vqd;
	FOCVars[M1].Iab = Iab;
 800243c:	9b08      	ldr	r3, [sp, #32]
	FOCVars[M1].Ialphabeta = Ialphabeta;
 800243e:	9a09      	ldr	r2, [sp, #36]	; 0x24
	FOCVars[M1].Iab = Iab;
 8002440:	6023      	str	r3, [r4, #0]
	hCodeError = PWMC_SetPhaseVoltage(pwmcHandle[M1], Valphabeta);
 8002442:	4601      	mov	r1, r0
  if(hFOCreturn == MC_FOC_DURATION)
 8002444:	2901      	cmp	r1, #1
	FOCVars[M1].Vqd = Vqd;
 8002446:	9803      	ldr	r0, [sp, #12]
	FOCVars[M1].Iqd = Iqd;
 8002448:	9b02      	ldr	r3, [sp, #8]
	FOCVars[M1].Valphabeta = Valphabeta;
 800244a:	8366      	strh	r6, [r4, #26]
 800244c:	83a5      	strh	r5, [r4, #28]
	FOCVars[M1].hElAngle = hElAngle;
 800244e:	f8a4 8020 	strh.w	r8, [r4, #32]
	FOCVars[M1].Vqd = Vqd;
 8002452:	f8c4 0016 	str.w	r0, [r4, #22]
	FOCVars[M1].Ialphabeta = Ialphabeta;
 8002456:	6062      	str	r2, [r4, #4]
	FOCVars[M1].Iqd = Iqd;
 8002458:	60e3      	str	r3, [r4, #12]
  if(hFOCreturn == MC_FOC_DURATION)
 800245a:	f000 80a2 	beq.w	80025a2 <TSK_HighFrequencyTask+0x392>
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800245e:	4833      	ldr	r0, [pc, #204]	; (800252c <TSK_HighFrequencyTask+0x31c>)
 8002460:	f004 fe2e 	bl	80070c0 <RUC_FirstAccelerationStageReached>
    STO_Inputs.Ialfa_beta = FOCVars[M1].Ialphabeta; /*  only if sensorless*/
 8002464:	6862      	ldr	r2, [r4, #4]
 8002466:	920c      	str	r2, [sp, #48]	; 0x30
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 8002468:	4603      	mov	r3, r0
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 800246a:	4831      	ldr	r0, [pc, #196]	; (8002530 <TSK_HighFrequencyTask+0x320>)
    bool IsAccelerationStageReached = RUC_FirstAccelerationStageReached(&RevUpControlM1);
 800246c:	461c      	mov	r4, r3
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 800246e:	f003 fb2b 	bl	8005ac8 <VBS_GetAvBusVoltage_d>
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002472:	a90b      	add	r1, sp, #44	; 0x2c
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002474:	4603      	mov	r3, r0
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 8002476:	482f      	ldr	r0, [pc, #188]	; (8002534 <TSK_HighFrequencyTask+0x324>)
    STO_Inputs.Vbus = VBS_GetAvBusVoltage_d(&(BusVoltageSensor_M1._Super)); /*  only for sensorless*/
 8002478:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
    (void)( void )STO_PLL_CalcElAngle(&STO_PLL_M1, &STO_Inputs);
 800247c:	f004 ff50 	bl	8007320 <STO_PLL_CalcElAngle>
    STO_PLL_CalcAvrgElSpeedDpp(&STO_PLL_M1); /*  Only in case of Sensor-less */
 8002480:	482c      	ldr	r0, [pc, #176]	; (8002534 <TSK_HighFrequencyTask+0x324>)
 8002482:	f005 f8ef 	bl	8007664 <STO_PLL_CalcAvrgElSpeedDpp>
	 if (false == IsAccelerationStageReached)
 8002486:	2c00      	cmp	r4, #0
 8002488:	d079      	beq.n	800257e <TSK_HighFrequencyTask+0x36e>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 800248a:	4b17      	ldr	r3, [pc, #92]	; (80024e8 <TSK_HighFrequencyTask+0x2d8>)
 800248c:	7e5b      	ldrb	r3, [r3, #25]
 800248e:	2b04      	cmp	r3, #4
 8002490:	d07c      	beq.n	800258c <TSK_HighFrequencyTask+0x37c>
 8002492:	2b13      	cmp	r3, #19
 8002494:	d07a      	beq.n	800258c <TSK_HighFrequencyTask+0x37c>
  GLOBAL_TIMESTAMP++;
 8002496:	4a28      	ldr	r2, [pc, #160]	; (8002538 <TSK_HighFrequencyTask+0x328>)
  if (0U == MCPA_UART_A.Mark)
 8002498:	4828      	ldr	r0, [pc, #160]	; (800253c <TSK_HighFrequencyTask+0x32c>)
  GLOBAL_TIMESTAMP++;
 800249a:	6813      	ldr	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 800249c:	f890 1029 	ldrb.w	r1, [r0, #41]	; 0x29
  GLOBAL_TIMESTAMP++;
 80024a0:	3301      	adds	r3, #1
 80024a2:	6013      	str	r3, [r2, #0]
  if (0U == MCPA_UART_A.Mark)
 80024a4:	2900      	cmp	r1, #0
 80024a6:	f040 8081 	bne.w	80025ac <TSK_HighFrequencyTask+0x39c>
}
 80024aa:	2000      	movs	r0, #0
 80024ac:	b00f      	add	sp, #60	; 0x3c
 80024ae:	ecbd 8b02 	vpop	{d8}
 80024b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				cost = costTemp1+costTemp2;
 80024b6:	9b05      	ldr	r3, [sp, #20]
 80024b8:	9a06      	ldr	r2, [sp, #24]
 80024ba:	4413      	add	r3, r2
 80024bc:	9307      	str	r3, [sp, #28]
				Vqd.d = VqdTemp.d;
 80024be:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80024c2:	f8ad 300e 	strh.w	r3, [sp, #14]
				optimalVector = i;
 80024c6:	4a1e      	ldr	r2, [pc, #120]	; (8002540 <TSK_HighFrequencyTask+0x330>)
 80024c8:	6833      	ldr	r3, [r6, #0]
 80024ca:	7013      	strb	r3, [r2, #0]
		for(i=0;i<6;i++){
 80024cc:	3301      	adds	r3, #1
				Vqd.q = VqdTemp.q;
 80024ce:	f8bd 2010 	ldrh.w	r2, [sp, #16]
		for(i=0;i<6;i++){
 80024d2:	6033      	str	r3, [r6, #0]
 80024d4:	2b05      	cmp	r3, #5
				Vqd.q = VqdTemp.q;
 80024d6:	f8ad 200c 	strh.w	r2, [sp, #12]
		for(i=0;i<6;i++){
 80024da:	f77f aefe 	ble.w	80022da <TSK_HighFrequencyTask+0xca>
 80024de:	e797      	b.n	8002410 <TSK_HighFrequencyTask+0x200>
 80024e0:	8b648607 	.word	0x8b648607
 80024e4:	3fbace68 	.word	0x3fbace68
 80024e8:	2000083c 	.word	0x2000083c
 80024ec:	20000870 	.word	0x20000870
 80024f0:	20000578 	.word	0x20000578
 80024f4:	20000920 	.word	0x20000920
 80024f8:	2000090c 	.word	0x2000090c
 80024fc:	20000924 	.word	0x20000924
 8002500:	40020000 	.word	0x40020000
 8002504:	20000898 	.word	0x20000898
 8002508:	20000910 	.word	0x20000910
 800250c:	7fffffec 	.word	0x7fffffec
 8002510:	200008a4 	.word	0x200008a4
 8002514:	80010003 	.word	0x80010003
 8002518:	20000900 	.word	0x20000900
 800251c:	20000590 	.word	0x20000590
 8002520:	20000896 	.word	0x20000896
 8002524:	2000089a 	.word	0x2000089a
 8002528:	20000918 	.word	0x20000918
 800252c:	20000324 	.word	0x20000324
 8002530:	20000000 	.word	0x20000000
 8002534:	200003b0 	.word	0x200003b0
 8002538:	20001bf4 	.word	0x20001bf4
 800253c:	200005b0 	.word	0x200005b0
 8002540:	20000914 	.word	0x20000914
 8002544:	2000089c 	.word	0x2000089c
 8002548:	68934361 	.word	0x68934361
		  Vqd.q = PI_Controller(pPIDIq[M1], (int32_t)(FOCVars[M1].Iqdref.q) - Iqd.q);
 800254c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8002550:	f9b4 1010 	ldrsh.w	r1, [r4, #16]
 8002554:	b21b      	sxth	r3, r3
 8002556:	1ac9      	subs	r1, r1, r3
 8002558:	4b21      	ldr	r3, [pc, #132]	; (80025e0 <TSK_HighFrequencyTask+0x3d0>)
 800255a:	6818      	ldr	r0, [r3, #0]
 800255c:	f003 fe14 	bl	8006188 <PI_Controller>
 8002560:	f8ad 000c 	strh.w	r0, [sp, #12]
		  Vqd.d = PI_Controller(pPIDId[M1], (int32_t)(FOCVars[M1].Iqdref.d) - Iqd.d);
 8002564:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8002568:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 800256c:	b21b      	sxth	r3, r3
 800256e:	1ac9      	subs	r1, r1, r3
 8002570:	4b1c      	ldr	r3, [pc, #112]	; (80025e4 <TSK_HighFrequencyTask+0x3d4>)
 8002572:	6818      	ldr	r0, [r3, #0]
 8002574:	f003 fe08 	bl	8006188 <PI_Controller>
 8002578:	f8ad 000e 	strh.w	r0, [sp, #14]
 800257c:	e748      	b.n	8002410 <TSK_HighFrequencyTask+0x200>
      STO_ResetPLL(&STO_PLL_M1);
 800257e:	481a      	ldr	r0, [pc, #104]	; (80025e8 <TSK_HighFrequencyTask+0x3d8>)
 8002580:	f005 f996 	bl	80078b0 <STO_ResetPLL>
    if(((uint16_t)START == Mci[M1].State) || ((uint16_t)SWITCH_OVER == Mci[M1].State))
 8002584:	4b19      	ldr	r3, [pc, #100]	; (80025ec <TSK_HighFrequencyTask+0x3dc>)
 8002586:	7e5b      	ldrb	r3, [r3, #25]
 8002588:	2b04      	cmp	r3, #4
 800258a:	d182      	bne.n	8002492 <TSK_HighFrequencyTask+0x282>
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 800258c:	4816      	ldr	r0, [pc, #88]	; (80025e8 <TSK_HighFrequencyTask+0x3d8>)
 800258e:	f004 fdc3 	bl	8007118 <SPD_GetElAngle>
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002592:	a909      	add	r1, sp, #36	; 0x24
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002594:	4603      	mov	r3, r0
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 8002596:	4816      	ldr	r0, [pc, #88]	; (80025f0 <TSK_HighFrequencyTask+0x3e0>)
      int16_t hObsAngle = SPD_GetElAngle(&STO_PLL_M1._Super);
 8002598:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
      (void)VSS_CalcElAngle(&VirtualSpeedSensorM1, &hObsAngle);
 800259c:	f005 f9ba 	bl	8007914 <VSS_CalcElAngle>
 80025a0:	e779      	b.n	8002496 <TSK_HighFrequencyTask+0x286>
    MCI_FaultProcessing(&Mci[M1], MC_FOC_DURATION, 0);
 80025a2:	4812      	ldr	r0, [pc, #72]	; (80025ec <TSK_HighFrequencyTask+0x3dc>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	f7ff f897 	bl	80016d8 <MCI_FaultProcessing>
 80025aa:	e774      	b.n	8002496 <TSK_HighFrequencyTask+0x286>
    MCPA_dataLog (&MCPA_UART_A);
 80025ac:	f003 fbba 	bl	8005d24 <MCPA_dataLog>
}
 80025b0:	2000      	movs	r0, #0
 80025b2:	b00f      	add	sp, #60	; 0x3c
 80025b4:	ecbd 8b02 	vpop	{d8}
 80025b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		hasMPCinit = 1;
 80025bc:	2201      	movs	r2, #1
 80025be:	601a      	str	r2, [r3, #0]
		initModelPredictiveControl();
 80025c0:	f7ff fad6 	bl	8001b70 <initModelPredictiveControl>
 80025c4:	e668      	b.n	8002298 <TSK_HighFrequencyTask+0x88>
    if (!REMNG_RampCompleted(pREMNG[M1]))
 80025c6:	4d0b      	ldr	r5, [pc, #44]	; (80025f4 <TSK_HighFrequencyTask+0x3e4>)
 80025c8:	6828      	ldr	r0, [r5, #0]
 80025ca:	f004 fc67 	bl	8006e9c <REMNG_RampCompleted>
 80025ce:	2800      	cmp	r0, #0
 80025d0:	f47f ae2c 	bne.w	800222c <TSK_HighFrequencyTask+0x1c>
      FOCVars[M1].Iqdref.q = (int16_t)REMNG_Calc(pREMNG[M1]);
 80025d4:	6828      	ldr	r0, [r5, #0]
 80025d6:	f004 fc3f 	bl	8006e58 <REMNG_Calc>
 80025da:	8220      	strh	r0, [r4, #16]
 80025dc:	e626      	b.n	800222c <TSK_HighFrequencyTask+0x1c>
 80025de:	bf00      	nop
 80025e0:	20000574 	.word	0x20000574
 80025e4:	20000570 	.word	0x20000570
 80025e8:	200003b0 	.word	0x200003b0
 80025ec:	2000083c 	.word	0x2000083c
 80025f0:	20000534 	.word	0x20000534
 80025f4:	2000091c 	.word	0x2000091c

080025f8 <TSK_SafetyTask_PWMOFF>:
  * @param  bMotor Motor reference number defined
  *         \link Motors_reference_number here \endlink
  * @retval None
  */
__weak void TSK_SafetyTask_PWMOFF(uint8_t bMotor)
{
 80025f8:	b570      	push	{r4, r5, r6, lr}

  /* USER CODE END TSK_SafetyTask_PWMOFF 0 */
  uint16_t CodeReturn = MC_NO_ERROR;
  uint16_t errMask[NBR_OF_MOTORS] = {VBUS_TEMP_ERR_MASK};

  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 80025fa:	4b1f      	ldr	r3, [pc, #124]	; (8002678 <TSK_SafetyTask_PWMOFF+0x80>)
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 80025fc:	4e1f      	ldr	r6, [pc, #124]	; (800267c <TSK_SafetyTask_PWMOFF+0x84>)
{
 80025fe:	b082      	sub	sp, #8
 8002600:	4604      	mov	r4, r0
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002602:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8002606:	f003 fd49 	bl	800609c <NTC_CalcAvTemp>
 800260a:	4605      	mov	r5, r0
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 800260c:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8002610:	f000 fa86 	bl	8002b20 <PWMC_CheckOverCurrent>
  CodeReturn |= errMask[bMotor] & NTC_CalcAvTemp(pTemperatureSensor[bMotor]); /* check for fault if FW protection is activated. It returns MC_OVER_TEMP or MC_NO_ERROR */
 8002614:	f005 050e 	and.w	r5, r5, #14
  CodeReturn |= PWMC_CheckOverCurrent(pwmcHandle[bMotor]);                    /* check for fault. It return MC_BREAK_IN or MC_NO_FAULTS
 8002618:	4328      	orrs	r0, r5
 800261a:	b285      	uxth	r5, r0
                                                                                 (for STM32F30x can return MC_OVER_VOLT in case of HW Overvoltage) */
  if(M1 == bMotor)
 800261c:	b174      	cbz	r4, 800263c <TSK_SafetyTask_PWMOFF+0x44>
  {
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
  }
  MCI_FaultProcessing(&Mci[bMotor], CodeReturn, ~CodeReturn); /* process faults */
 800261e:	4818      	ldr	r0, [pc, #96]	; (8002680 <TSK_SafetyTask_PWMOFF+0x88>)
 8002620:	43ea      	mvns	r2, r5
 8002622:	eb00 1044 	add.w	r0, r0, r4, lsl #5
 8002626:	b292      	uxth	r2, r2
 8002628:	4629      	mov	r1, r5
 800262a:	9001      	str	r0, [sp, #4]
 800262c:	f7ff f854 	bl	80016d8 <MCI_FaultProcessing>
  if (MCI_GetFaultState(&Mci[bMotor]) != (uint32_t)MC_NO_FAULTS)
 8002630:	9801      	ldr	r0, [sp, #4]
 8002632:	f7ff f8e3 	bl	80017fc <MCI_GetFaultState>
 8002636:	b940      	cbnz	r0, 800264a <TSK_SafetyTask_PWMOFF+0x52>
  }

  /* USER CODE BEGIN TSK_SafetyTask_PWMOFF 3 */

  /* USER CODE END TSK_SafetyTask_PWMOFF 3 */
}
 8002638:	b002      	add	sp, #8
 800263a:	bd70      	pop	{r4, r5, r6, pc}
    CodeReturn |= errMask[bMotor] & RVBS_CalcAvVbus(&BusVoltageSensor_M1);
 800263c:	4811      	ldr	r0, [pc, #68]	; (8002684 <TSK_SafetyTask_PWMOFF+0x8c>)
 800263e:	f004 fbcf 	bl	8006de0 <RVBS_CalcAvVbus>
 8002642:	f000 000e 	and.w	r0, r0, #14
 8002646:	4305      	orrs	r5, r0
 8002648:	e7e9      	b.n	800261e <TSK_SafetyTask_PWMOFF+0x26>
    PWMC_SwitchOffPWM(pwmcHandle[bMotor]);
 800264a:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 800264e:	f000 fa39 	bl	8002ac4 <PWMC_SwitchOffPWM>
    if (MCPA_UART_A.Mark != 0)
 8002652:	480d      	ldr	r0, [pc, #52]	; (8002688 <TSK_SafetyTask_PWMOFF+0x90>)
 8002654:	f890 3029 	ldrb.w	r3, [r0, #41]	; 0x29
 8002658:	b953      	cbnz	r3, 8002670 <TSK_SafetyTask_PWMOFF+0x78>
    FOC_Clear(bMotor);
 800265a:	4620      	mov	r0, r4
 800265c:	f7ff faf6 	bl	8001c4c <FOC_Clear>
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 8002660:	4b0a      	ldr	r3, [pc, #40]	; (800268c <TSK_SafetyTask_PWMOFF+0x94>)
 8002662:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
}
 8002666:	b002      	add	sp, #8
 8002668:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    MPM_Clear((MotorPowMeas_Handle_t*)pMPM[bMotor]); //cstat !MISRAC2012-Rule-11.3
 800266c:	f003 bcc2 	b.w	8005ff4 <MPM_Clear>
      MCPA_flushDataLog (&MCPA_UART_A);
 8002670:	f003 fc1c 	bl	8005eac <MCPA_flushDataLog>
 8002674:	e7f1      	b.n	800265a <TSK_SafetyTask_PWMOFF+0x62>
 8002676:	bf00      	nop
 8002678:	2000057c 	.word	0x2000057c
 800267c:	20000920 	.word	0x20000920
 8002680:	2000083c 	.word	0x2000083c
 8002684:	20000000 	.word	0x20000000
 8002688:	200005b0 	.word	0x200005b0
 800268c:	2000056c 	.word	0x2000056c

08002690 <TSK_SafetyTask>:
{
 8002690:	b508      	push	{r3, lr}
  if (1U == bMCBootCompleted)
 8002692:	4b06      	ldr	r3, [pc, #24]	; (80026ac <TSK_SafetyTask+0x1c>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b01      	cmp	r3, #1
 8002698:	d000      	beq.n	800269c <TSK_SafetyTask+0xc>
}
 800269a:	bd08      	pop	{r3, pc}
    TSK_SafetyTask_PWMOFF(M1);
 800269c:	2000      	movs	r0, #0
 800269e:	f7ff ffab 	bl	80025f8 <TSK_SafetyTask_PWMOFF>
}
 80026a2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    RCM_ExecUserConv();
 80026a6:	f001 bbf3 	b.w	8003e90 <RCM_ExecUserConv>
 80026aa:	bf00      	nop
 80026ac:	200008f8 	.word	0x200008f8

080026b0 <MC_RunMotorControlTasks>:
{
 80026b0:	b508      	push	{r3, lr}
  if (0U == bMCBootCompleted)
 80026b2:	4b04      	ldr	r3, [pc, #16]	; (80026c4 <MC_RunMotorControlTasks+0x14>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	b903      	cbnz	r3, 80026ba <MC_RunMotorControlTasks+0xa>
}
 80026b8:	bd08      	pop	{r3, pc}
    MC_Scheduler();
 80026ba:	f7ff fd65 	bl	8002188 <MC_Scheduler>
    TSK_SafetyTask();
 80026be:	f7ff ffe7 	bl	8002690 <TSK_SafetyTask>
}
 80026c2:	bd08      	pop	{r3, pc}
 80026c4:	200008f8 	.word	0x200008f8

080026c8 <TSK_HardwareFaultTask>:
  *
  *  This function is to be executed when a general hardware failure has been detected
  * by the microcontroller and is used to put the system in safety condition.
  */
__weak void TSK_HardwareFaultTask(void)
{
 80026c8:	b508      	push	{r3, lr}
  /* USER CODE BEGIN TSK_HardwareFaultTask 0 */

  /* USER CODE END TSK_HardwareFaultTask 0 */
  R3_1_SwitchOffPWM(pwmcHandle[M1]);
 80026ca:	4b05      	ldr	r3, [pc, #20]	; (80026e0 <TSK_HardwareFaultTask+0x18>)
 80026cc:	6818      	ldr	r0, [r3, #0]
 80026ce:	f003 ffad 	bl	800662c <R3_1_SwitchOffPWM>
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
  /* USER CODE BEGIN TSK_HardwareFaultTask 1 */

  /* USER CODE END TSK_HardwareFaultTask 1 */
}
 80026d2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MCI_FaultProcessing(&Mci[M1], MC_SW_ERROR, 0);
 80026d6:	4803      	ldr	r0, [pc, #12]	; (80026e4 <TSK_HardwareFaultTask+0x1c>)
 80026d8:	2200      	movs	r2, #0
 80026da:	2180      	movs	r1, #128	; 0x80
 80026dc:	f7fe bffc 	b.w	80016d8 <MCI_FaultProcessing>
 80026e0:	20000920 	.word	0x20000920
 80026e4:	2000083c 	.word	0x2000083c

080026e8 <UI_HandleStartStopButton_cb>:

__weak void UI_HandleStartStopButton_cb (void)
{
 80026e8:	b508      	push	{r3, lr}
/* USER CODE BEGIN START_STOP_BTN */
  if (IDLE == MC_GetSTMStateMotor1())
 80026ea:	f7fe ffbf 	bl	800166c <MC_GetSTMStateMotor1>
 80026ee:	b918      	cbnz	r0, 80026f8 <UI_HandleStartStopButton_cb+0x10>
  else
  {
    (void)MC_StopMotor1();
  }
/* USER CODE END START_STOP_BTN */
}
 80026f0:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StartMotor1();
 80026f4:	f7fe bfa8 	b.w	8001648 <MC_StartMotor1>
}
 80026f8:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    (void)MC_StopMotor1();
 80026fc:	f7fe bfaa 	b.w	8001654 <MC_StopMotor1>

08002700 <mc_lock_pins>:

 /**
  * @brief  Locks GPIO pins used for Motor Control to prevent accidental reconfiguration
  */
__weak void mc_lock_pins (void)
{
 8002700:	b430      	push	{r4, r5}
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_LockPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  __IO uint32_t temp;
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002702:	4a35      	ldr	r2, [pc, #212]	; (80027d8 <mc_lock_pins+0xd8>)
 8002704:	4b35      	ldr	r3, [pc, #212]	; (80027dc <mc_lock_pins+0xdc>)
 8002706:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002708:	f44f 7180 	mov.w	r1, #256	; 0x100
 800270c:	61d1      	str	r1, [r2, #28]
 800270e:	b08c      	sub	sp, #48	; 0x30
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002710:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002712:	69d3      	ldr	r3, [r2, #28]
 8002714:	930b      	str	r3, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002716:	f44f 7100 	mov.w	r1, #512	; 0x200
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800271a:	f44f 3381 	mov.w	r3, #66048	; 0x10200
  (void) temp;
 800271e:	980b      	ldr	r0, [sp, #44]	; 0x2c
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002720:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002722:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002724:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002726:	69d3      	ldr	r3, [r2, #28]
 8002728:	930a      	str	r3, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, PinMask);
 800272a:	2140      	movs	r1, #64	; 0x40
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800272c:	4b2c      	ldr	r3, [pc, #176]	; (80027e0 <mc_lock_pins+0xe0>)
  (void) temp;
 800272e:	980a      	ldr	r0, [sp, #40]	; 0x28
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002730:	61d3      	str	r3, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002732:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002734:	61d3      	str	r3, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002736:	69d3      	ldr	r3, [r2, #28]
 8002738:	9309      	str	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800273a:	f44f 3182 	mov.w	r1, #66560	; 0x10400
  WRITE_REG(GPIOx->LCKR, PinMask);
 800273e:	f44f 6080 	mov.w	r0, #1024	; 0x400
  (void) temp;
 8002742:	9b09      	ldr	r3, [sp, #36]	; 0x24
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002744:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002746:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002748:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 800274a:	69d4      	ldr	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800274c:	4b25      	ldr	r3, [pc, #148]	; (80027e4 <mc_lock_pins+0xe4>)
  temp = READ_REG(GPIOx->LCKR);
 800274e:	9408      	str	r4, [sp, #32]
  (void) temp;
 8002750:	9d08      	ldr	r5, [sp, #32]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002752:	f44f 3488 	mov.w	r4, #69632	; 0x11000
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002756:	f44f 5580 	mov.w	r5, #4096	; 0x1000
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800275a:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800275c:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800275e:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002760:	69dc      	ldr	r4, [r3, #28]
 8002762:	9407      	str	r4, [sp, #28]
  (void) temp;
 8002764:	9d07      	ldr	r5, [sp, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002766:	f44f 3484 	mov.w	r4, #67584	; 0x10800
  WRITE_REG(GPIOx->LCKR, PinMask);
 800276a:	f44f 6500 	mov.w	r5, #2048	; 0x800
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800276e:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002770:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002772:	61dc      	str	r4, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002774:	69dc      	ldr	r4, [r3, #28]
 8002776:	9406      	str	r4, [sp, #24]
  (void) temp;
 8002778:	9c06      	ldr	r4, [sp, #24]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800277a:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800277c:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800277e:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002780:	69d9      	ldr	r1, [r3, #28]
 8002782:	9105      	str	r1, [sp, #20]
  WRITE_REG(GPIOx->LCKR, PinMask);
 8002784:	2401      	movs	r4, #1
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002786:	f04f 1101 	mov.w	r1, #65537	; 0x10001
  (void) temp;
 800278a:	9805      	ldr	r0, [sp, #20]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 800278c:	61d1      	str	r1, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800278e:	61d4      	str	r4, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002790:	61d1      	str	r1, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 8002792:	69d0      	ldr	r0, [r2, #28]
 8002794:	9004      	str	r0, [sp, #16]
  (void) temp;
 8002796:	9d04      	ldr	r5, [sp, #16]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 8002798:	4813      	ldr	r0, [pc, #76]	; (80027e8 <mc_lock_pins+0xe8>)
 800279a:	61d0      	str	r0, [r2, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 800279c:	2502      	movs	r5, #2
 800279e:	61d5      	str	r5, [r2, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027a0:	61d0      	str	r0, [r2, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027a2:	69d2      	ldr	r2, [r2, #28]
 80027a4:	9203      	str	r2, [sp, #12]
  (void) temp;
 80027a6:	9a03      	ldr	r2, [sp, #12]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027a8:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027aa:	61dd      	str	r5, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027ac:	61d8      	str	r0, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027ae:	69da      	ldr	r2, [r3, #28]
 80027b0:	9202      	str	r2, [sp, #8]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027b2:	2004      	movs	r0, #4
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <mc_lock_pins+0xec>)
  (void) temp;
 80027b6:	9d02      	ldr	r5, [sp, #8]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027b8:	61da      	str	r2, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027ba:	61d8      	str	r0, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027bc:	61da      	str	r2, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027be:	69da      	ldr	r2, [r3, #28]
 80027c0:	9201      	str	r2, [sp, #4]
  (void) temp;
 80027c2:	9a01      	ldr	r2, [sp, #4]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027c4:	61d9      	str	r1, [r3, #28]
  WRITE_REG(GPIOx->LCKR, PinMask);
 80027c6:	61dc      	str	r4, [r3, #28]
  WRITE_REG(GPIOx->LCKR, GPIO_LCKR_LCKK | PinMask);
 80027c8:	61d9      	str	r1, [r3, #28]
  temp = READ_REG(GPIOx->LCKR);
 80027ca:	69db      	ldr	r3, [r3, #28]
 80027cc:	9300      	str	r3, [sp, #0]
  (void) temp;
 80027ce:	9b00      	ldr	r3, [sp, #0]
LL_GPIO_LockPin(M1_CURR_AMPL_U_GPIO_Port, M1_CURR_AMPL_U_Pin);
LL_GPIO_LockPin(M1_BUS_VOLTAGE_GPIO_Port, M1_BUS_VOLTAGE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_V_GPIO_Port, M1_CURR_AMPL_V_Pin);
LL_GPIO_LockPin(M1_TEMPERATURE_GPIO_Port, M1_TEMPERATURE_Pin);
LL_GPIO_LockPin(M1_CURR_AMPL_W_GPIO_Port, M1_CURR_AMPL_W_Pin);
}
 80027d0:	b00c      	add	sp, #48	; 0x30
 80027d2:	bc30      	pop	{r4, r5}
 80027d4:	4770      	bx	lr
 80027d6:	bf00      	nop
 80027d8:	40020000 	.word	0x40020000
 80027dc:	00010100 	.word	0x00010100
 80027e0:	00010040 	.word	0x00010040
 80027e4:	40020800 	.word	0x40020800
 80027e8:	00010002 	.word	0x00010002
 80027ec:	00010004 	.word	0x00010004

080027f0 <MX_MotorControl_Init>:
 *
 * CubeMX calls this function after all peripherals initializations and
 * before the NVIC is configured
 */
__weak void MX_MotorControl_Init(void)
{
 80027f0:	b508      	push	{r3, lr}
  /* Reconfigure the SysTick interrupt to fire every 500 us. */
  (void)HAL_SYSTICK_Config(HAL_RCC_GetHCLKFreq() / SYS_TICK_FREQUENCY);
 80027f2:	f002 fdb7 	bl	8005364 <HAL_RCC_GetHCLKFreq>
 80027f6:	4b0a      	ldr	r3, [pc, #40]	; (8002820 <MX_MotorControl_Init+0x30>)
 80027f8:	fba3 3000 	umull	r3, r0, r3, r0
 80027fc:	09c0      	lsrs	r0, r0, #7
 80027fe:	f002 f947 	bl	8004a90 <HAL_SYSTICK_Config>
  HAL_NVIC_SetPriority(SysTick_IRQn, uwTickPrio, 0U);
 8002802:	4b08      	ldr	r3, [pc, #32]	; (8002824 <MX_MotorControl_Init+0x34>)
 8002804:	2200      	movs	r2, #0
 8002806:	6819      	ldr	r1, [r3, #0]
 8002808:	f04f 30ff 	mov.w	r0, #4294967295
 800280c:	f002 f8f4 	bl	80049f8 <HAL_NVIC_SetPriority>
  /* Initialize the Motor Control Subsystem */
  MCboot(pMCI);
 8002810:	4805      	ldr	r0, [pc, #20]	; (8002828 <MX_MotorControl_Init+0x38>)
 8002812:	f7ff fa55 	bl	8001cc0 <MCboot>
  mc_lock_pins();

}
 8002816:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  mc_lock_pins();
 800281a:	f7ff bf71 	b.w	8002700 <mc_lock_pins>
 800281e:	bf00      	nop
 8002820:	10624dd3 	.word	0x10624dd3
 8002824:	20000680 	.word	0x20000680
 8002828:	20001bb4 	.word	0x20001bb4

0800282c <PWMC_GetPhaseCurrents>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctGetPhaseCurrents(pHandle, Iab);
 800282c:	6843      	ldr	r3, [r0, #4]
 800282e:	4718      	bx	r3

08002830 <PWMC_SetPhaseVoltage>:
  *
  * @retval Returns #MC_NO_ERROR if no error occurred or #MC_FOC_DURATION if the duty cycles were
  *         set too late for being taken into account in the next PWM cycle.
  */
__weak uint16_t PWMC_SetPhaseVoltage(PWMC_Handle_t *pHandle, alphabeta_t Valfa_beta)
{
 8002830:	b510      	push	{r4, lr}
    int32_t wTimePhA;
    int32_t wTimePhB;
    int32_t wTimePhC;

    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002832:	f8b0 4064 	ldrh.w	r4, [r0, #100]	; 0x64
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002836:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
{
 800283a:	b082      	sub	sp, #8
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 800283c:	ea4f 4c21 	mov.w	ip, r1, asr #16
{
 8002840:	9101      	str	r1, [sp, #4]
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002842:	fb04 fc0c 	mul.w	ip, r4, ip
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 8002846:	b209      	sxth	r1, r1
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002848:	ebcc 7ccc 	rsb	ip, ip, ip, lsl #31
    wUAlpha = Valfa_beta.alpha * (int32_t)pHandle->hT_Sqrt3;
 800284c:	fb03 f101 	mul.w	r1, r3, r1

    wX = wUBeta;
    wY = (wUBeta + wUAlpha) / 2;
 8002850:	eb01 034c 	add.w	r3, r1, ip, lsl #1
    wZ = (wUBeta - wUAlpha) / 2;
 8002854:	ebc1 014c 	rsb	r1, r1, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002858:	eb03 7ed3 	add.w	lr, r3, r3, lsr #31
    wZ = (wUBeta - wUAlpha) / 2;
 800285c:	eb01 72d1 	add.w	r2, r1, r1, lsr #31

    /* Sector calculation from wX, wY, wZ */
    if (wY < 0)
 8002860:	f1b3 3fff 	cmp.w	r3, #4294967295
    wUBeta = -(Valfa_beta.beta * ((int32_t)pHandle->PWMperiod)) * 2;
 8002864:	ea4f 0c4c 	mov.w	ip, ip, lsl #1
    wY = (wUBeta + wUAlpha) / 2;
 8002868:	ea4f 0e6e 	mov.w	lr, lr, asr #1
    wZ = (wUBeta - wUAlpha) / 2;
 800286c:	ea4f 0262 	mov.w	r2, r2, asr #1
    if (wY < 0)
 8002870:	f2c0 8088 	blt.w	8002984 <PWMC_SetPhaseVoltage+0x154>
          pHandle->highDuty = (uint16_t)wTimePhA;
        }
    }
    else /* wY > 0 */
    {
      if (wZ >= 0)
 8002874:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002878:	db59      	blt.n	800292e <PWMC_SetPhaseVoltage+0xfe>
      {
        pHandle->Sector = SECTOR_2;
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800287a:	ebbe 0e02 	subs.w	lr, lr, r2
 800287e:	bf44      	itt	mi
 8002880:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002884:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002888:	2900      	cmp	r1, #0
 800288a:	bfbc      	itt	lt
 800288c:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002890:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072);
 8002894:	2b00      	cmp	r3, #0
 8002896:	bfb8      	it	lt
 8002898:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 800289c:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80028a0:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80028a4:	bfb8      	it	lt
 80028a6:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_2;
 80028aa:	f04f 0c01 	mov.w	ip, #1
        wTimePhB = wTimePhA + (wZ / 131072);
 80028ae:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072);
 80028b2:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_2;
 80028b6:	f880 c070 	strb.w	ip, [r0, #112]	; 0x70

        pHandle->lowDuty = (uint16_t)wTimePhB;
 80028ba:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
        pHandle->midDuty = (uint16_t)wTimePhA;
 80028be:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
        pHandle->highDuty = (uint16_t)wTimePhC;
 80028c2:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e

    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));

    if (1U == pHandle->DTTest)
 80028c6:	f8b0 4062 	ldrh.w	r4, [r0, #98]	; 0x62
 80028ca:	ea22 72e2 	bic.w	r2, r2, r2, asr #31
 80028ce:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 80028d2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80028d6:	b292      	uxth	r2, r2
 80028d8:	b289      	uxth	r1, r1
 80028da:	b29b      	uxth	r3, r3
 80028dc:	2c01      	cmp	r4, #1
    pHandle->CntPhA = (uint16_t)(MAX(wTimePhA, 0));
 80028de:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
    pHandle->CntPhB = (uint16_t)(MAX(wTimePhB, 0));
 80028e2:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
    pHandle->CntPhC = (uint16_t)(MAX(wTimePhC, 0));
 80028e6:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    if (1U == pHandle->DTTest)
 80028ea:	d11b      	bne.n	8002924 <PWMC_SetPhaseVoltage+0xf4>
    {
      /* Dead time compensation */
      if (pHandle->Ia > 0)
 80028ec:	f9b0 4054 	ldrsh.w	r4, [r0, #84]	; 0x54
 80028f0:	2c00      	cmp	r4, #0
      {
        pHandle->CntPhA += pHandle->DTCompCnt;
 80028f2:	f8b0 4068 	ldrh.w	r4, [r0, #104]	; 0x68
 80028f6:	bfcc      	ite	gt
 80028f8:	1912      	addgt	r2, r2, r4
      }
      else
      {
        pHandle->CntPhA -= pHandle->DTCompCnt;
 80028fa:	1b12      	suble	r2, r2, r4
 80028fc:	b292      	uxth	r2, r2
 80028fe:	f8a0 2042 	strh.w	r2, [r0, #66]	; 0x42
      }

      if (pHandle->Ib > 0)
 8002902:	f9b0 2056 	ldrsh.w	r2, [r0, #86]	; 0x56
 8002906:	2a00      	cmp	r2, #0
      else
      {
        pHandle->CntPhB -= pHandle->DTCompCnt;
      }

      if (pHandle->Ic > 0)
 8002908:	f9b0 2058 	ldrsh.w	r2, [r0, #88]	; 0x58
        pHandle->CntPhB += pHandle->DTCompCnt;
 800290c:	bfcc      	ite	gt
 800290e:	1909      	addgt	r1, r1, r4
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002910:	1b09      	suble	r1, r1, r4
      if (pHandle->Ic > 0)
 8002912:	2a00      	cmp	r2, #0
        pHandle->CntPhB -= pHandle->DTCompCnt;
 8002914:	b289      	uxth	r1, r1
      {
        pHandle->CntPhC += pHandle->DTCompCnt;
 8002916:	bfcc      	ite	gt
 8002918:	191b      	addgt	r3, r3, r4
      }
      else
      {
        pHandle->CntPhC -= pHandle->DTCompCnt;
 800291a:	1b1b      	suble	r3, r3, r4
 800291c:	f8a0 1044 	strh.w	r1, [r0, #68]	; 0x44
 8002920:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
      }
    }
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 8002924:	6983      	ldr	r3, [r0, #24]
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (returnValue);
}
 8002926:	b002      	add	sp, #8
 8002928:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    returnValue = pHandle->pFctSetADCSampPointSectX(pHandle);
 800292c:	4718      	bx	r3
        if ( wX <= 0 )
 800292e:	f1bc 0f00 	cmp.w	ip, #0
 8002932:	dd4f      	ble.n	80029d4 <PWMC_SetPhaseVoltage+0x1a4>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002934:	ebbc 0e02 	subs.w	lr, ip, r2
 8002938:	bf44      	itt	mi
 800293a:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 800293e:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002942:	2900      	cmp	r1, #0
 8002944:	bfb8      	it	lt
 8002946:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_1;
 800294a:	f04f 0300 	mov.w	r3, #0
          wTimePhB = wTimePhA + (wZ / 131072);
 800294e:	bfb8      	it	lt
 8002950:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_1;
 8002954:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 8002958:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 800295a:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4)+ ((wX - wZ) / (int32_t)262144);
 800295e:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002962:	bfb8      	it	lt
 8002964:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002968:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 800296c:	bfb8      	it	lt
 800296e:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002972:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002976:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhB;
 800297a:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhC;
 800297e:	f8a0 304e 	strh.w	r3, [r0, #78]	; 0x4e
 8002982:	e7a0      	b.n	80028c6 <PWMC_SetPhaseVoltage+0x96>
      if (wZ < 0)
 8002984:	f1b1 3fff 	cmp.w	r1, #4294967295
 8002988:	db75      	blt.n	8002a76 <PWMC_SetPhaseVoltage+0x246>
        if (wX <= 0)
 800298a:	f1bc 0f00 	cmp.w	ip, #0
 800298e:	dd4a      	ble.n	8002a26 <PWMC_SetPhaseVoltage+0x1f6>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 8002990:	ebbe 0e0c 	subs.w	lr, lr, ip
 8002994:	bf48      	it	mi
 8002996:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 800299a:	f04f 0202 	mov.w	r2, #2
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 800299e:	bf48      	it	mi
 80029a0:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	bfb8      	it	lt
 80029a8:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_3;
 80029ac:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4)+ ((wY - wX) / (int32_t)262144);
 80029b0:	ea4f 0294 	mov.w	r2, r4, lsr #2
 80029b4:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhA - (wY / 131072);
 80029b8:	bfb8      	it	lt
 80029ba:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
 80029be:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 80029c2:	eb03 416c 	add.w	r1, r3, ip, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhB;
 80029c6:	f8a0 104a 	strh.w	r1, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhC;
 80029ca:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhA;
 80029ce:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
 80029d2:	e778      	b.n	80028c6 <PWMC_SetPhaseVoltage+0x96>
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80029d4:	ebbe 0e0c 	subs.w	lr, lr, ip
 80029d8:	bf44      	itt	mi
 80029da:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 80029de:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhC = wTimePhA - (wY / 131072);
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	bfb8      	it	lt
 80029e6:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_6;
 80029ea:	f04f 0205 	mov.w	r2, #5
          wTimePhC = wTimePhA - (wY / 131072);
 80029ee:	bfb8      	it	lt
 80029f0:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
          pHandle->Sector = SECTOR_6;
 80029f4:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
          wTimePhB = wTimePhC + (wX / 131072);
 80029f8:	f1bc 0100 	subs.w	r1, ip, #0
          wTimePhA = (((int32_t )pHandle->PWMperiod) / 4) + ((wY - wX) / (int32_t)262144);
 80029fc:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8002a00:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002a04:	bfb8      	it	lt
 8002a06:	f501 31ff 	addlt.w	r1, r1, #130560	; 0x1fe00
          wTimePhC = wTimePhA - (wY / 131072);
 8002a0a:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
          wTimePhB = wTimePhC + (wX / 131072);
 8002a0e:	bfb8      	it	lt
 8002a10:	f201 11ff 	addwlt	r1, r1, #511	; 0x1ff
 8002a14:	eb03 4161 	add.w	r1, r3, r1, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhA;
 8002a18:	f8a0 204a 	strh.w	r2, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhC;
 8002a1c:	f8a0 304c 	strh.w	r3, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhB;
 8002a20:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
 8002a24:	e74f      	b.n	80028c6 <PWMC_SetPhaseVoltage+0x96>
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002a26:	ebbc 0e02 	subs.w	lr, ip, r2
 8002a2a:	bf44      	itt	mi
 8002a2c:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002a30:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
          wTimePhB = wTimePhA + (wZ / 131072);
 8002a34:	2900      	cmp	r1, #0
 8002a36:	bfb8      	it	lt
 8002a38:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
          pHandle->Sector = SECTOR_4;
 8002a3c:	f04f 0303 	mov.w	r3, #3
          wTimePhB = wTimePhA + (wZ / 131072);
 8002a40:	bfb8      	it	lt
 8002a42:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
          pHandle->Sector = SECTOR_4;
 8002a46:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002a4a:	08a2      	lsrs	r2, r4, #2
          wTimePhC = wTimePhB - (wX / 131072);
 8002a4c:	f1bc 0300 	subs.w	r3, ip, #0
          wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wX - wZ) / (int32_t)262144);
 8002a50:	eb02 42ae 	add.w	r2, r2, lr, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002a54:	bfb8      	it	lt
 8002a56:	f503 33ff 	addlt.w	r3, r3, #130560	; 0x1fe00
          wTimePhB = wTimePhA + (wZ / 131072);
 8002a5a:	eb02 41a1 	add.w	r1, r2, r1, asr #18
          wTimePhC = wTimePhB - (wX / 131072);
 8002a5e:	bfb8      	it	lt
 8002a60:	f203 13ff 	addwlt	r3, r3, #511	; 0x1ff
 8002a64:	eba1 4363 	sub.w	r3, r1, r3, asr #17
          pHandle->lowDuty = (uint16_t)wTimePhC;
 8002a68:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
          pHandle->midDuty = (uint16_t)wTimePhB;
 8002a6c:	f8a0 104c 	strh.w	r1, [r0, #76]	; 0x4c
          pHandle->highDuty = (uint16_t)wTimePhA;
 8002a70:	f8a0 204e 	strh.w	r2, [r0, #78]	; 0x4e
 8002a74:	e727      	b.n	80028c6 <PWMC_SetPhaseVoltage+0x96>
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002a76:	ebbe 0e02 	subs.w	lr, lr, r2
 8002a7a:	bf44      	itt	mi
 8002a7c:	f50e 3e7f 	addmi.w	lr, lr, #261120	; 0x3fc00
 8002a80:	f20e 3eff 	addwmi	lr, lr, #1023	; 0x3ff
        wTimePhB = wTimePhA + (wZ / 131072);
 8002a84:	2900      	cmp	r1, #0
 8002a86:	bfbc      	itt	lt
 8002a88:	f501 317f 	addlt.w	r1, r1, #261120	; 0x3fc00
 8002a8c:	f201 31ff 	addwlt	r1, r1, #1023	; 0x3ff
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	bfb8      	it	lt
 8002a94:	f503 337f 	addlt.w	r3, r3, #261120	; 0x3fc00
        wTimePhA = (((int32_t)pHandle->PWMperiod) / 4) + ((wY - wZ) / (int32_t)262144);
 8002a98:	ea4f 0294 	mov.w	r2, r4, lsr #2
 8002a9c:	eb02 42ae 	add.w	r2, r2, lr, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002aa0:	bfb8      	it	lt
 8002aa2:	f203 33ff 	addwlt	r3, r3, #1023	; 0x3ff
        pHandle->Sector = SECTOR_5;
 8002aa6:	f04f 0c04 	mov.w	ip, #4
        wTimePhB = wTimePhA + (wZ / 131072);
 8002aaa:	eb02 41a1 	add.w	r1, r2, r1, asr #18
        wTimePhC = wTimePhA - (wY / 131072) ;
 8002aae:	eba2 43a3 	sub.w	r3, r2, r3, asr #18
        pHandle->Sector = SECTOR_5;
 8002ab2:	f880 c070 	strb.w	ip, [r0, #112]	; 0x70
        pHandle->lowDuty = (uint16_t)wTimePhC;
 8002ab6:	f8a0 304a 	strh.w	r3, [r0, #74]	; 0x4a
        pHandle->midDuty = (uint16_t)wTimePhA;
 8002aba:	f8a0 204c 	strh.w	r2, [r0, #76]	; 0x4c
        pHandle->highDuty = (uint16_t)wTimePhB;
 8002abe:	f8a0 104e 	strh.w	r1, [r0, #78]	; 0x4e
 8002ac2:	e700      	b.n	80028c6 <PWMC_SetPhaseVoltage+0x96>

08002ac4 <PWMC_SwitchOffPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOffPwm(pHandle);
 8002ac4:	6883      	ldr	r3, [r0, #8]
 8002ac6:	4718      	bx	r3

08002ac8 <PWMC_SwitchOnPWM>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->pFctSwitchOnPwm(pHandle);
 8002ac8:	68c3      	ldr	r3, [r0, #12]
 8002aca:	4718      	bx	r3

08002acc <PWMC_CurrentReadingCalibr>:
  *         #CRC_EXEC to execute the offset calibration.
  * @retval true if the current calibration has been completed, false if it is
  *         still ongoing.
  */
__weak bool PWMC_CurrentReadingCalibr(PWMC_Handle_t *pHandle, CRCAction_t action)
{
 8002acc:	b510      	push	{r4, lr}
 8002ace:	4604      	mov	r4, r0
 8002ad0:	b082      	sub	sp, #8
    /* Nothing to do */
  }
  else
  {
#endif
    if (CRC_START == action)
 8002ad2:	b199      	cbz	r1, 8002afc <PWMC_CurrentReadingCalibr+0x30>
      {
        pHandle->pFctCurrReadingCalib(pHandle);
        retVal = true;
      }
    }
    else if (CRC_EXEC == action)
 8002ad4:	2901      	cmp	r1, #1
 8002ad6:	d002      	beq.n	8002ade <PWMC_CurrentReadingCalibr+0x12>
  bool retVal = false;
 8002ad8:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_PWR_CUR_FDB
  }
#endif
  return (retVal);
}
 8002ada:	b002      	add	sp, #8
 8002adc:	bd10      	pop	{r4, pc}
      if (pHandle->OffCalibrWaitTimeCounter > 0u)
 8002ade:	f8b0 3052 	ldrh.w	r3, [r0, #82]	; 0x52
 8002ae2:	b1cb      	cbz	r3, 8002b18 <PWMC_CurrentReadingCalibr+0x4c>
        pHandle->OffCalibrWaitTimeCounter--;
 8002ae4:	3b01      	subs	r3, #1
 8002ae6:	b29b      	uxth	r3, r3
 8002ae8:	9101      	str	r1, [sp, #4]
 8002aea:	f8a0 3052 	strh.w	r3, [r0, #82]	; 0x52
        if (0U == pHandle->OffCalibrWaitTimeCounter)
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d1f2      	bne.n	8002ad8 <PWMC_CurrentReadingCalibr+0xc>
          pHandle->pFctCurrReadingCalib(pHandle);
 8002af2:	6903      	ldr	r3, [r0, #16]
 8002af4:	4798      	blx	r3
          retVal = true;
 8002af6:	9901      	ldr	r1, [sp, #4]
 8002af8:	4608      	mov	r0, r1
 8002afa:	e7ee      	b.n	8002ada <PWMC_CurrentReadingCalibr+0xe>
      PWMC_SwitchOffPWM(pHandle);
 8002afc:	f7ff ffe2 	bl	8002ac4 <PWMC_SwitchOffPWM>
      pHandle->OffCalibrWaitTimeCounter = pHandle->OffCalibrWaitTicks;
 8002b00:	f8b4 3066 	ldrh.w	r3, [r4, #102]	; 0x66
 8002b04:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
      if (0U == pHandle->OffCalibrWaitTicks)
 8002b08:	2b00      	cmp	r3, #0
 8002b0a:	d1e5      	bne.n	8002ad8 <PWMC_CurrentReadingCalibr+0xc>
        pHandle->pFctCurrReadingCalib(pHandle);
 8002b0c:	4620      	mov	r0, r4
 8002b0e:	6923      	ldr	r3, [r4, #16]
 8002b10:	4798      	blx	r3
        retVal = true;
 8002b12:	2001      	movs	r0, #1
}
 8002b14:	b002      	add	sp, #8
 8002b16:	bd10      	pop	{r4, pc}
        retVal = true;
 8002b18:	4608      	mov	r0, r1
}
 8002b1a:	b002      	add	sp, #8
 8002b1c:	bd10      	pop	{r4, pc}
 8002b1e:	bf00      	nop

08002b20 <PWMC_CheckOverCurrent>:
__weak uint16_t PWMC_CheckOverCurrent(PWMC_Handle_t *pHandle) //cstat !MISRAC2012-Rule-8.13
{
#ifdef NULL_PTR_PWR_CUR_FDB
  return ((MC_NULL == pHandle) ? MC_NO_FAULTS : (uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
#else
  return ((uint16_t)pHandle->pFctIsOverCurrentOccurred(pHandle));
 8002b20:	69c3      	ldr	r3, [r0, #28]
 8002b22:	4718      	bx	r3

08002b24 <RI_SetRegCommandParser>:
static uint8_t RI_SetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t dataAvailable);
static uint8_t RI_GetReg (uint16_t dataID, uint8_t * data, uint16_t *size, int16_t maxSize);
static uint8_t RI_MovString(const char_t * srcString, char_t * destString, uint16_t *size, int16_t maxSize);

__weak uint8_t RI_SetRegCommandParser (MCP_Handle_t * pHandle, uint16_t txSyncFreeSpace)
{
 8002b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  {
#endif
    uint16_t * dataElementID;
    uint8_t * rxData = pHandle->rxBuffer;
    uint8_t * txData = pHandle->txBuffer;
    int16_t rxLength = pHandle->rxLength;
 8002b28:	f9b0 200c 	ldrsh.w	r2, [r0, #12]
{
 8002b2c:	4607      	mov	r7, r0
    uint16_t size = 0U;
    uint8_t number_of_item =0;
    pHandle->txLength = 0;
 8002b2e:	2300      	movs	r3, #0
    uint8_t accessResult;
    while (rxLength > 0)
 8002b30:	429a      	cmp	r2, r3
    pHandle->txLength = 0;
 8002b32:	81c3      	strh	r3, [r0, #14]
    uint8_t * txData = pHandle->txBuffer;
 8002b34:	68bd      	ldr	r5, [r7, #8]
    uint8_t * rxData = pHandle->rxBuffer;
 8002b36:	6840      	ldr	r0, [r0, #4]
{
 8002b38:	b089      	sub	sp, #36	; 0x24
    while (rxLength > 0)
 8002b3a:	dd6e      	ble.n	8002c1a <RI_SetRegCommandParser+0xf6>
 8002b3c:	eb05 0b01 	add.w	fp, r5, r1
  uint8_t retVal = MCP_CMD_OK;
 8002b40:	9301      	str	r3, [sp, #4]
 8002b42:	f1c5 0901 	rsb	r9, r5, #1
    {
       number_of_item++;
      dataElementID = (uint16_t *) rxData;
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
      rxData = rxData+MCP_ID_SIZE; // Shift buffer to the next data
 8002b46:	4604      	mov	r4, r0
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002b48:	fa1f fa82 	uxth.w	sl, r2
      accessResult = RI_SetReg (*dataElementID,rxData,&size,rxLength);
 8002b4c:	f834 cb02 	ldrh.w	ip, [r4], #2

    typeID = (uint8_t)dataID & TYPE_MASK;
    motorID = 0U;
    MCI_Handle_t *pMCIN = &Mci[motorID];

    switch (typeID)
 8002b50:	f00c 0138 	and.w	r1, ip, #56	; 0x38
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002b54:	f1aa 0202 	sub.w	r2, sl, #2
    uint16_t regID = dataID & REG_MASK;
 8002b58:	f02c 0307 	bic.w	r3, ip, #7
    switch (typeID)
 8002b5c:	3908      	subs	r1, #8
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002b5e:	fa1f f882 	uxth.w	r8, r2
    uint16_t regID = dataID & REG_MASK;
 8002b62:	b29b      	uxth	r3, r3
      rxLength = rxLength-MCP_ID_SIZE; // We consume 2 byte in the DataID
 8002b64:	b212      	sxth	r2, r2
    switch (typeID)
 8002b66:	2920      	cmp	r1, #32
 8002b68:	d812      	bhi.n	8002b90 <RI_SetRegCommandParser+0x6c>
 8002b6a:	e8df f001 	tbb	[pc, r1]
 8002b6e:	11b8      	.short	0x11b8
 8002b70:	11111111 	.word	0x11111111
 8002b74:	11901111 	.word	0x11901111
 8002b78:	11111111 	.word	0x11111111
 8002b7c:	117b1111 	.word	0x117b1111
 8002b80:	11111111 	.word	0x11111111
 8002b84:	115c1111 	.word	0x115c1111
 8002b88:	11111111 	.word	0x11111111
 8002b8c:	1111      	.short	0x1111
 8002b8e:	27          	.byte	0x27
 8002b8f:	00          	.byte	0x00
 8002b90:	2607      	movs	r6, #7
        if ((1U == number_of_item) && (0 == rxLength))
 8002b92:	eb05 0309 	add.w	r3, r5, r9
 8002b96:	b2db      	uxtb	r3, r3
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	d03a      	beq.n	8002c12 <RI_SetRegCommandParser+0xee>
        if (txSyncFreeSpace !=0 )
 8002b9c:	455d      	cmp	r5, fp
 8002b9e:	f000 80ae 	beq.w	8002cfe <RI_SetRegCommandParser+0x1da>
          *txData = accessResult;
 8002ba2:	f805 6b01 	strb.w	r6, [r5], #1
          pHandle->txLength++;
 8002ba6:	89fb      	ldrh	r3, [r7, #14]
 8002ba8:	3301      	adds	r3, #1
 8002baa:	81fb      	strh	r3, [r7, #14]
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002bac:	2e00      	cmp	r6, #0
 8002bae:	f040 80ab 	bne.w	8002d08 <RI_SetRegCommandParser+0x1e4>
    while (rxLength > 0)
 8002bb2:	2a00      	cmp	r2, #0
 8002bb4:	f340 835a 	ble.w	800326c <RI_SetRegCommandParser+0x748>
 8002bb8:	4620      	mov	r0, r4
 8002bba:	e7c4      	b.n	8002b46 <RI_SetRegCommandParser+0x22>
        break;
      }

      case TYPE_DATA_RAW:
      {
        uint16_t rawSize = *(uint16_t *) data; //cstat !MISRAC2012-Rule-11.3
 8002bbc:	8846      	ldrh	r6, [r0, #2]
        /* The size consumed by the structure is the structure size + 2 bytes used to store the size*/
        *size = rawSize + 2U;
 8002bbe:	f106 0a02 	add.w	sl, r6, #2
 8002bc2:	fa1f fa8a 	uxth.w	sl, sl
        uint8_t *rawData = data; /* rawData points to the first data (after size extraction) */
        rawData++;
        rawData++;

        if (*size > dataAvailable )
 8002bc6:	4592      	cmp	sl, r2
 8002bc8:	f300 8260 	bgt.w	800308c <RI_SetRegCommandParser+0x568>
 8002bcc:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
        rawData++;
 8002bd0:	f100 0104 	add.w	r1, r0, #4
          *size = 0;
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
        }
        else
        {
          switch (regID)
 8002bd4:	f000 8290 	beq.w	80030f8 <RI_SetRegCommandParser+0x5d4>
 8002bd8:	f200 8232 	bhi.w	8003040 <RI_SetRegCommandParser+0x51c>
 8002bdc:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 8002be0:	f000 82bc 	beq.w	800315c <RI_SetRegCommandParser+0x638>
 8002be4:	f240 8221 	bls.w	800302a <RI_SetRegCommandParser+0x506>
 8002be8:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 8002bec:	f040 823c 	bne.w	8003068 <RI_SetRegCommandParser+0x544>
              uint32_t torque;
              uint16_t duration;

              torque = *(uint32_t *)rawData; //cstat !MISRAC2012-Rule-11.3
              duration = *(uint16_t *)&rawData[4]; //cstat !MISRAC2012-Rule-11.3
              MCI_ExecTorqueRamp(pMCIN, (int16_t)torque, duration);
 8002bf0:	8902      	ldrh	r2, [r0, #8]
 8002bf2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 8002bf6:	48ae      	ldr	r0, [pc, #696]	; (8002eb0 <RI_SetRegCommandParser+0x38c>)
 8002bf8:	f7fe fd5a 	bl	80016b0 <MCI_ExecTorqueRamp>
        if ((1U == number_of_item) && (0 == rxLength))
 8002bfc:	eb05 0309 	add.w	r3, r5, r9
 8002c00:	b2db      	uxtb	r3, r3
      rxLength = (int16_t) (rxLength - size);
 8002c02:	eba8 020a 	sub.w	r2, r8, sl
        if ((1U == number_of_item) && (0 == rxLength))
 8002c06:	2b01      	cmp	r3, #1
      rxData = rxData+size;
 8002c08:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 8002c0a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002c0c:	f04f 0600 	mov.w	r6, #0
        if ((1U == number_of_item) && (0 == rxLength))
 8002c10:	d1c4      	bne.n	8002b9c <RI_SetRegCommandParser+0x78>
 8002c12:	2a00      	cmp	r2, #0
 8002c14:	d1c2      	bne.n	8002b9c <RI_SetRegCommandParser+0x78>
      if (MCP_CMD_OK == retVal)
 8002c16:	2e00      	cmp	r6, #0
 8002c18:	d172      	bne.n	8002d00 <RI_SetRegCommandParser+0x1dc>
      pHandle->txLength = 0;
 8002c1a:	2600      	movs	r6, #0
}
 8002c1c:	4630      	mov	r0, r6
      pHandle->txLength = 0;
 8002c1e:	81fe      	strh	r6, [r7, #14]
}
 8002c20:	b009      	add	sp, #36	; 0x24
 8002c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

  const char_t *tempsrcString = srcString;
  char_t *tempdestString = destString;
  *size= 1U ; /* /0 is the min String size */

  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002c26:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	f000 82c2 	beq.w	80031b4 <RI_SetRegCommandParser+0x690>
 8002c30:	2a01      	cmp	r2, #1
 8002c32:	f340 82c2 	ble.w	80031ba <RI_SetRegCommandParser+0x696>
 8002c36:	4621      	mov	r1, r4
 8002c38:	f1c4 0c02 	rsb	ip, r4, #2
 8002c3c:	e002      	b.n	8002c44 <RI_SetRegCommandParser+0x120>
 8002c3e:	429a      	cmp	r2, r3
 8002c40:	f340 821e 	ble.w	8003080 <RI_SetRegCommandParser+0x55c>
  {
    *tempdestString = *tempsrcString;
    tempdestString++;
    tempsrcString++;
    *size = *size + 1U;
 8002c44:	eb0c 0301 	add.w	r3, ip, r1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8002c48:	f911 6f01 	ldrsb.w	r6, [r1, #1]!
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	2e00      	cmp	r6, #0
 8002c50:	d1f5      	bne.n	8002c3e <RI_SetRegCommandParser+0x11a>
      rxData = rxData+size;
 8002c52:	461a      	mov	r2, r3
      rxLength = (int16_t) (rxLength - size);
 8002c54:	eba8 0303 	sub.w	r3, r8, r3
      rxData = rxData+size;
 8002c58:	4414      	add	r4, r2
      rxLength = (int16_t) (rxLength - size);
 8002c5a:	b21a      	sxth	r2, r3
  { /* Last string char must be 0 */
    retVal = MCP_ERROR_STRING_FORMAT;
  }
  else
  {
    *destString = (int8_t)0;
 8002c5c:	2300      	movs	r3, #0
 8002c5e:	7083      	strb	r3, [r0, #2]
        retVal = MCP_ERROR_RO_REG;
 8002c60:	2604      	movs	r6, #4
 8002c62:	e796      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
        switch (regID)
 8002c64:	2b98      	cmp	r3, #152	; 0x98
 8002c66:	f000 821d 	beq.w	80030a4 <RI_SetRegCommandParser+0x580>
 8002c6a:	f240 81d7 	bls.w	800301c <RI_SetRegCommandParser+0x4f8>
 8002c6e:	f5b3 7fac 	cmp.w	r3, #344	; 0x158
 8002c72:	f000 81cd 	beq.w	8003010 <RI_SetRegCommandParser+0x4ec>
 8002c76:	f240 81c5 	bls.w	8003004 <RI_SetRegCommandParser+0x4e0>
 8002c7a:	f5b3 7fcc 	cmp.w	r3, #408	; 0x198
 8002c7e:	f000 81c7 	beq.w	8003010 <RI_SetRegCommandParser+0x4ec>
      rxLength = (int16_t) (rxLength - size);
 8002c82:	f1aa 0206 	sub.w	r2, sl, #6
 8002c86:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002c88:	1d84      	adds	r4, r0, #6
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002c8a:	2605      	movs	r6, #5
            break;
 8002c8c:	e781      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
        uint16_t regdata16 = *(uint16_t *)data; //cstat !MISRAC2012-Rule-11.3
 8002c8e:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8002c92:	8846      	ldrh	r6, [r0, #2]
        switch (regID)
 8002c94:	f000 82bd 	beq.w	8003212 <RI_SetRegCommandParser+0x6ee>
 8002c98:	d87b      	bhi.n	8002d92 <RI_SetRegCommandParser+0x26e>
 8002c9a:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8002c9e:	f000 82e1 	beq.w	8003264 <RI_SetRegCommandParser+0x740>
 8002ca2:	d946      	bls.n	8002d32 <RI_SetRegCommandParser+0x20e>
 8002ca4:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8002ca8:	f000 82d2 	beq.w	8003250 <RI_SetRegCommandParser+0x72c>
 8002cac:	d958      	bls.n	8002d60 <RI_SetRegCommandParser+0x23c>
 8002cae:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 8002cb2:	d00e      	beq.n	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002cb4:	d930      	bls.n	8002d18 <RI_SetRegCommandParser+0x1f4>
 8002cb6:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8002cba:	d00a      	beq.n	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002cbc:	f240 8197 	bls.w	8002fee <RI_SetRegCommandParser+0x4ca>
 8002cc0:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8002cc4:	d005      	beq.n	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002cc6:	f240 8189 	bls.w	8002fdc <RI_SetRegCommandParser+0x4b8>
 8002cca:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8002cce:	f040 8130 	bne.w	8002f32 <RI_SetRegCommandParser+0x40e>
      rxLength = (int16_t) (rxLength - size);
 8002cd2:	f1aa 0204 	sub.w	r2, sl, #4
 8002cd6:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002cd8:	1d04      	adds	r4, r0, #4
            retVal = MCP_ERROR_RO_REG;
 8002cda:	2604      	movs	r6, #4
            break;
 8002cdc:	e759      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
        switch (regID)
 8002cde:	2b88      	cmp	r3, #136	; 0x88
 8002ce0:	f000 81d6 	beq.w	8003090 <RI_SetRegCommandParser+0x56c>
 8002ce4:	f02c 0c87 	bic.w	ip, ip, #135	; 0x87
      rxLength = (int16_t) (rxLength - size);
 8002ce8:	f1aa 0203 	sub.w	r2, sl, #3
 8002cec:	f1bc 0f48 	cmp.w	ip, #72	; 0x48
 8002cf0:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002cf2:	f100 0403 	add.w	r4, r0, #3
 8002cf6:	f000 818f 	beq.w	8003018 <RI_SetRegCommandParser+0x4f4>
            retVal = MCP_ERROR_UNKNOWN_REG;
 8002cfa:	2605      	movs	r6, #5
            break;
 8002cfc:	e749      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 8002cfe:	2608      	movs	r6, #8
}
 8002d00:	4630      	mov	r0, r6
 8002d02:	b009      	add	sp, #36	; 0x24
 8002d04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8002d08:	2e07      	cmp	r6, #7
 8002d0a:	f040 81b3 	bne.w	8003074 <RI_SetRegCommandParser+0x550>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 8002d0e:	2601      	movs	r6, #1
}
 8002d10:	4630      	mov	r0, r6
 8002d12:	b009      	add	sp, #36	; 0x24
 8002d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002d18:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 8002d1c:	d167      	bne.n	8002dee <RI_SetRegCommandParser+0x2ca>
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002d1e:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002d20:	1d04      	adds	r4, r0, #4
            PID_SetKP (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8002d22:	4864      	ldr	r0, [pc, #400]	; (8002eb4 <RI_SetRegCommandParser+0x390>)
 8002d24:	f003 f9f0 	bl	8006108 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002d28:	f1aa 0204 	sub.w	r2, sl, #4
 8002d2c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002d2e:	2600      	movs	r6, #0
            break;
 8002d30:	e72f      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002d32:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 8002d36:	f000 8287 	beq.w	8003248 <RI_SetRegCommandParser+0x724>
 8002d3a:	d96c      	bls.n	8002e16 <RI_SetRegCommandParser+0x2f2>
 8002d3c:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8002d40:	f000 827e 	beq.w	8003240 <RI_SetRegCommandParser+0x71c>
 8002d44:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 8002d48:	d142      	bne.n	8002dd0 <RI_SetRegCommandParser+0x2ac>
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002d4a:	4b5b      	ldr	r3, [pc, #364]	; (8002eb8 <RI_SetRegCommandParser+0x394>)
 8002d4c:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002d4e:	1d04      	adds	r4, r0, #4
            PID_SetKP(pPIDId[motorID], (int16_t)regdata16);
 8002d50:	6818      	ldr	r0, [r3, #0]
 8002d52:	f003 f9d9 	bl	8006108 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002d56:	f1aa 0204 	sub.w	r2, sl, #4
 8002d5a:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002d5c:	2600      	movs	r6, #0
            break;
 8002d5e:	e718      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002d60:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 8002d64:	f000 8261 	beq.w	800322a <RI_SetRegCommandParser+0x706>
 8002d68:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8002d6c:	d144      	bne.n	8002df8 <RI_SetRegCommandParser+0x2d4>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002d6e:	aa05      	add	r2, sp, #20
 8002d70:	f10d 0112 	add.w	r1, sp, #18
      rxData = rxData+size;
 8002d74:	1d04      	adds	r4, r0, #4
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8002d76:	4851      	ldr	r0, [pc, #324]	; (8002ebc <RI_SetRegCommandParser+0x398>)
 8002d78:	f004 fd88 	bl	800788c <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], hC1, (int16_t)regdata16);
 8002d7c:	f9bd 1012 	ldrsh.w	r1, [sp, #18]
 8002d80:	b232      	sxth	r2, r6
 8002d82:	484e      	ldr	r0, [pc, #312]	; (8002ebc <RI_SetRegCommandParser+0x398>)
 8002d84:	f004 fd8a 	bl	800789c <STO_PLL_SetObserverGains>
      rxLength = (int16_t) (rxLength - size);
 8002d88:	f1aa 0204 	sub.w	r2, sl, #4
 8002d8c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002d8e:	2600      	movs	r6, #0
 8002d90:	e6ff      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002d92:	f241 5210 	movw	r2, #5392	; 0x1510
 8002d96:	4293      	cmp	r3, r2
 8002d98:	f000 8243 	beq.w	8003222 <RI_SetRegCommandParser+0x6fe>
 8002d9c:	d96f      	bls.n	8002e7e <RI_SetRegCommandParser+0x35a>
 8002d9e:	f241 6210 	movw	r2, #5648	; 0x1610
 8002da2:	4293      	cmp	r3, r2
 8002da4:	f000 8227 	beq.w	80031f6 <RI_SetRegCommandParser+0x6d2>
 8002da8:	d955      	bls.n	8002e56 <RI_SetRegCommandParser+0x332>
 8002daa:	f641 02d0 	movw	r2, #6352	; 0x18d0
 8002dae:	4293      	cmp	r3, r2
 8002db0:	f000 8217 	beq.w	80031e2 <RI_SetRegCommandParser+0x6be>
 8002db4:	f641 1210 	movw	r2, #6416	; 0x1910
 8002db8:	4293      	cmp	r3, r2
 8002dba:	d13d      	bne.n	8002e38 <RI_SetRegCommandParser+0x314>
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002dbc:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002dbe:	1d04      	adds	r4, r0, #4
            PID_SetKPDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 8002dc0:	483c      	ldr	r0, [pc, #240]	; (8002eb4 <RI_SetRegCommandParser+0x390>)
 8002dc2:	f003 f9b1 	bl	8006128 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002dc6:	f1aa 0204 	sub.w	r2, sl, #4
 8002dca:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002dcc:	2600      	movs	r6, #0
            break;
 8002dce:	e6e0      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002dd0:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8002dd4:	f040 80ad 	bne.w	8002f32 <RI_SetRegCommandParser+0x40e>
            PID_SetKI(pPIDIq[motorID], (int16_t)regdata16);
 8002dd8:	4b39      	ldr	r3, [pc, #228]	; (8002ec0 <RI_SetRegCommandParser+0x39c>)
 8002dda:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002ddc:	1d04      	adds	r4, r0, #4
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8002dde:	6818      	ldr	r0, [r3, #0]
 8002de0:	f003 f994 	bl	800610c <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 8002de4:	f1aa 0204 	sub.w	r2, sl, #4
 8002de8:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002dea:	2600      	movs	r6, #0
            break;
 8002dec:	e6d1      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002dee:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 8002df2:	f43f af6e 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002df6:	e09c      	b.n	8002f32 <RI_SetRegCommandParser+0x40e>
 8002df8:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8002dfc:	f040 8099 	bne.w	8002f32 <RI_SetRegCommandParser+0x40e>
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002e00:	4b2d      	ldr	r3, [pc, #180]	; (8002eb8 <RI_SetRegCommandParser+0x394>)
 8002e02:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002e04:	1d04      	adds	r4, r0, #4
            PID_SetKD(pPIDId[motorID], (int16_t)regdata16);
 8002e06:	6818      	ldr	r0, [r3, #0]
 8002e08:	f003 f9b0 	bl	800616c <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002e0c:	f1aa 0204 	sub.w	r2, sl, #4
 8002e10:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e12:	2600      	movs	r6, #0
            break;
 8002e14:	e6bd      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002e16:	2bd0      	cmp	r3, #208	; 0xd0
 8002e18:	f000 81d9 	beq.w	80031ce <RI_SetRegCommandParser+0x6aa>
 8002e1c:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8002e20:	f040 8096 	bne.w	8002f50 <RI_SetRegCommandParser+0x42c>
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002e24:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002e26:	1d04      	adds	r4, r0, #4
            PID_SetKD(pPIDSpeed[motorID], (int16_t)regdata16);
 8002e28:	4826      	ldr	r0, [pc, #152]	; (8002ec4 <RI_SetRegCommandParser+0x3a0>)
 8002e2a:	f003 f99f 	bl	800616c <PID_SetKD>
      rxLength = (int16_t) (rxLength - size);
 8002e2e:	f1aa 0204 	sub.w	r2, sl, #4
 8002e32:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e34:	2600      	movs	r6, #0
            break;
 8002e36:	e6ac      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002e38:	f241 6250 	movw	r2, #5712	; 0x1650
 8002e3c:	4293      	cmp	r3, r2
 8002e3e:	d178      	bne.n	8002f32 <RI_SetRegCommandParser+0x40e>
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002e40:	4b1f      	ldr	r3, [pc, #124]	; (8002ec0 <RI_SetRegCommandParser+0x39c>)
 8002e42:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002e44:	1d04      	adds	r4, r0, #4
            PID_SetKDDivisorPOW2(pPIDIq[motorID], regdata16);
 8002e46:	6818      	ldr	r0, [r3, #0]
 8002e48:	f003 f998 	bl	800617c <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002e4c:	f1aa 0204 	sub.w	r2, sl, #4
 8002e50:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e52:	2600      	movs	r6, #0
            break;
 8002e54:	e69d      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002e56:	f241 5290 	movw	r2, #5520	; 0x1590
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	f000 81b3 	beq.w	80031c6 <RI_SetRegCommandParser+0x6a2>
 8002e60:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d12f      	bne.n	8002ec8 <RI_SetRegCommandParser+0x3a4>
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002e68:	4b15      	ldr	r3, [pc, #84]	; (8002ec0 <RI_SetRegCommandParser+0x39c>)
 8002e6a:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002e6c:	1d04      	adds	r4, r0, #4
            PID_SetKPDivisorPOW2(pPIDIq[motorID], regdata16);
 8002e6e:	6818      	ldr	r0, [r3, #0]
 8002e70:	f003 f95a 	bl	8006128 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002e74:	f1aa 0204 	sub.w	r2, sl, #4
 8002e78:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002e7a:	2600      	movs	r6, #0
            break;
 8002e7c:	e689      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002e7e:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 8002e82:	d04f      	beq.n	8002f24 <RI_SetRegCommandParser+0x400>
 8002e84:	d93d      	bls.n	8002f02 <RI_SetRegCommandParser+0x3de>
 8002e86:	f241 4290 	movw	r2, #5264	; 0x1490
 8002e8a:	4293      	cmp	r3, r2
 8002e8c:	f000 81b7 	beq.w	80031fe <RI_SetRegCommandParser+0x6da>
 8002e90:	d929      	bls.n	8002ee6 <RI_SetRegCommandParser+0x3c2>
 8002e92:	f241 42d0 	movw	r2, #5328	; 0x14d0
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d14b      	bne.n	8002f32 <RI_SetRegCommandParser+0x40e>
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002e9a:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002e9c:	1d04      	adds	r4, r0, #4
            PID_SetKDDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002e9e:	4809      	ldr	r0, [pc, #36]	; (8002ec4 <RI_SetRegCommandParser+0x3a0>)
 8002ea0:	f003 f96c 	bl	800617c <PID_SetKDDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002ea4:	f1aa 0204 	sub.w	r2, sl, #4
 8002ea8:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002eaa:	2600      	movs	r6, #0
            break;
 8002eac:	e671      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002eae:	bf00      	nop
 8002eb0:	2000083c 	.word	0x2000083c
 8002eb4:	200003e4 	.word	0x200003e4
 8002eb8:	20000570 	.word	0x20000570
 8002ebc:	200003b0 	.word	0x200003b0
 8002ec0:	20000574 	.word	0x20000574
 8002ec4:	20000134 	.word	0x20000134
 8002ec8:	f241 5250 	movw	r2, #5456	; 0x1550
 8002ecc:	4293      	cmp	r3, r2
 8002ece:	d130      	bne.n	8002f32 <RI_SetRegCommandParser+0x40e>
            PID_SetKIDivisorPOW2(pPIDId[motorID], regdata16);
 8002ed0:	4bb2      	ldr	r3, [pc, #712]	; (800319c <RI_SetRegCommandParser+0x678>)
 8002ed2:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002ed4:	1d04      	adds	r4, r0, #4
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	f003 f934 	bl	8006144 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002edc:	f1aa 0204 	sub.w	r2, sl, #4
 8002ee0:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002ee2:	2600      	movs	r6, #0
            break;
 8002ee4:	e655      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002ee6:	f241 4250 	movw	r2, #5200	; 0x1450
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d120      	bne.n	8002f30 <RI_SetRegCommandParser+0x40c>
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002eee:	4631      	mov	r1, r6
      rxData = rxData+size;
 8002ef0:	1d04      	adds	r4, r0, #4
            PID_SetKPDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8002ef2:	48ab      	ldr	r0, [pc, #684]	; (80031a0 <RI_SetRegCommandParser+0x67c>)
 8002ef4:	f003 f918 	bl	8006128 <PID_SetKPDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8002ef8:	f1aa 0204 	sub.w	r2, sl, #4
 8002efc:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002efe:	2600      	movs	r6, #0
            break;
 8002f00:	e647      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002f02:	f5b3 6f31 	cmp.w	r3, #2832	; 0xb10
 8002f06:	f43f aee4 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002f0a:	d92d      	bls.n	8002f68 <RI_SetRegCommandParser+0x444>
 8002f0c:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8002f10:	f43f aedf 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002f14:	d912      	bls.n	8002f3c <RI_SetRegCommandParser+0x418>
 8002f16:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8002f1a:	f43f aeda 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002f1e:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 8002f22:	d106      	bne.n	8002f32 <RI_SetRegCommandParser+0x40e>
      rxLength = (int16_t) (rxLength - size);
 8002f24:	f1aa 0204 	sub.w	r2, sl, #4
 8002f28:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002f2a:	1d04      	adds	r4, r0, #4
  uint8_t retVal = MCP_CMD_OK;
 8002f2c:	2600      	movs	r6, #0
 8002f2e:	e630      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002f30:	d92d      	bls.n	8002f8e <RI_SetRegCommandParser+0x46a>
      rxLength = (int16_t) (rxLength - size);
 8002f32:	f1aa 0204 	sub.w	r2, sl, #4
 8002f36:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8002f38:	1d04      	adds	r4, r0, #4
 8002f3a:	e6de      	b.n	8002cfa <RI_SetRegCommandParser+0x1d6>
 8002f3c:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 8002f40:	f43f aec7 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002f44:	d938      	bls.n	8002fb8 <RI_SetRegCommandParser+0x494>
 8002f46:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 8002f4a:	f43f aec2 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002f4e:	e7f0      	b.n	8002f32 <RI_SetRegCommandParser+0x40e>
 8002f50:	2b90      	cmp	r3, #144	; 0x90
 8002f52:	d1ee      	bne.n	8002f32 <RI_SetRegCommandParser+0x40e>
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002f54:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8002f56:	1d04      	adds	r4, r0, #4
            PID_SetKP(pPIDSpeed[motorID], (int16_t)regdata16);
 8002f58:	4891      	ldr	r0, [pc, #580]	; (80031a0 <RI_SetRegCommandParser+0x67c>)
 8002f5a:	f003 f8d5 	bl	8006108 <PID_SetKP>
      rxLength = (int16_t) (rxLength - size);
 8002f5e:	f1aa 0204 	sub.w	r2, sl, #4
 8002f62:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002f64:	2600      	movs	r6, #0
            break;
 8002f66:	e614      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002f68:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8002f6c:	d118      	bne.n	8002fa0 <RI_SetRegCommandParser+0x47c>
      rxData = rxData+size;
 8002f6e:	1d04      	adds	r4, r0, #4
            currComp = MCI_GetIqdref(pMCIN);
 8002f70:	488c      	ldr	r0, [pc, #560]	; (80031a4 <RI_SetRegCommandParser+0x680>)
 8002f72:	f7fe fcb1 	bl	80018d8 <MCI_GetIqdref>
 8002f76:	9005      	str	r0, [sp, #20]
            currComp.d = (int16_t)regdata16;
 8002f78:	f8ad 6016 	strh.w	r6, [sp, #22]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8002f7c:	9905      	ldr	r1, [sp, #20]
 8002f7e:	4889      	ldr	r0, [pc, #548]	; (80031a4 <RI_SetRegCommandParser+0x680>)
 8002f80:	f7fe fba0 	bl	80016c4 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 8002f84:	f1aa 0204 	sub.w	r2, sl, #4
 8002f88:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8002f8a:	2600      	movs	r6, #0
 8002f8c:	e601      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8002f8e:	f5b3 6f6d 	cmp.w	r3, #3792	; 0xed0
 8002f92:	f43f ae9e 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002f96:	f5b3 6f71 	cmp.w	r3, #3856	; 0xf10
 8002f9a:	f43f ae9a 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002f9e:	e7c8      	b.n	8002f32 <RI_SetRegCommandParser+0x40e>
 8002fa0:	d3c7      	bcc.n	8002f32 <RI_SetRegCommandParser+0x40e>
 8002fa2:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8002fa6:	f43f ae94 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002faa:	d90e      	bls.n	8002fca <RI_SetRegCommandParser+0x4a6>
 8002fac:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8002fb0:	f5bc 6f29 	cmp.w	ip, #2704	; 0xa90
 8002fb4:	d1bd      	bne.n	8002f32 <RI_SetRegCommandParser+0x40e>
 8002fb6:	e68c      	b.n	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002fb8:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8002fbc:	f43f ae89 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002fc0:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8002fc4:	f43f ae85 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002fc8:	e7b3      	b.n	8002f32 <RI_SetRegCommandParser+0x40e>
 8002fca:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 8002fce:	f43f ae80 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002fd2:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8002fd6:	f43f ae7c 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002fda:	e7aa      	b.n	8002f32 <RI_SetRegCommandParser+0x40e>
 8002fdc:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8002fe0:	f43f ae77 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002fe4:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8002fe8:	f43f ae73 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002fec:	e7a1      	b.n	8002f32 <RI_SetRegCommandParser+0x40e>
 8002fee:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8002ff2:	f43f ae6e 	beq.w	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8002ff6:	d39c      	bcc.n	8002f32 <RI_SetRegCommandParser+0x40e>
 8002ff8:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8002ffc:	f5bc 6ff2 	cmp.w	ip, #1936	; 0x790
 8003000:	d197      	bne.n	8002f32 <RI_SetRegCommandParser+0x40e>
 8003002:	e666      	b.n	8002cd2 <RI_SetRegCommandParser+0x1ae>
 8003004:	2bd8      	cmp	r3, #216	; 0xd8
 8003006:	d003      	beq.n	8003010 <RI_SetRegCommandParser+0x4ec>
 8003008:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 800300c:	f47f ae39 	bne.w	8002c82 <RI_SetRegCommandParser+0x15e>
      rxLength = (int16_t) (rxLength - size);
 8003010:	f1aa 0206 	sub.w	r2, sl, #6
 8003014:	b212      	sxth	r2, r2
      rxData = rxData+size;
 8003016:	1d84      	adds	r4, r0, #6
            retVal = MCP_ERROR_RO_REG;
 8003018:	2604      	movs	r6, #4
 800301a:	e5ba      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 800301c:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8003020:	f1bc 0f18 	cmp.w	ip, #24
 8003024:	f47f ae2d 	bne.w	8002c82 <RI_SetRegCommandParser+0x15e>
 8003028:	e7f2      	b.n	8003010 <RI_SetRegCommandParser+0x4ec>
 800302a:	2ba8      	cmp	r3, #168	; 0xa8
 800302c:	d002      	beq.n	8003034 <RI_SetRegCommandParser+0x510>
 800302e:	d916      	bls.n	800305e <RI_SetRegCommandParser+0x53a>
 8003030:	2be8      	cmp	r3, #232	; 0xe8
 8003032:	d119      	bne.n	8003068 <RI_SetRegCommandParser+0x544>
      rxLength = (int16_t) (rxLength - size);
 8003034:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 8003038:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 800303a:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_RO_REG;
 800303c:	2604      	movs	r6, #4
 800303e:	e5a8      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 8003040:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 8003044:	d04d      	beq.n	80030e2 <RI_SetRegCommandParser+0x5be>
 8003046:	f5b3 6fa5 	cmp.w	r3, #1320	; 0x528
 800304a:	d10d      	bne.n	8003068 <RI_SetRegCommandParser+0x544>
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 800304c:	4856      	ldr	r0, [pc, #344]	; (80031a8 <RI_SetRegCommandParser+0x684>)
 800304e:	f002 ff5b 	bl	8005f08 <MCPA_cfgLog>
      rxLength = (int16_t) (rxLength - size);
 8003052:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 8003056:	4454      	add	r4, sl
              retVal =  MCPA_cfgLog (&MCPA_UART_A, rawData);
 8003058:	4606      	mov	r6, r0
      rxLength = (int16_t) (rxLength - size);
 800305a:	b212      	sxth	r2, r2
              break;
 800305c:	e599      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 800305e:	f02c 0c47 	bic.w	ip, ip, #71	; 0x47
 8003062:	f1bc 0f28 	cmp.w	ip, #40	; 0x28
 8003066:	d0e5      	beq.n	8003034 <RI_SetRegCommandParser+0x510>
      rxLength = (int16_t) (rxLength - size);
 8003068:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 800306c:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 800306e:	b212      	sxth	r2, r2
              retVal = MCP_ERROR_UNKNOWN_REG;
 8003070:	2605      	movs	r6, #5
              break;
 8003072:	e58e      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
          if ((accessResult == MCP_ERROR_BAD_DATA_TYPE) || (accessResult == MCP_ERROR_BAD_RAW_FORMAT))
 8003074:	2e0a      	cmp	r6, #10
 8003076:	f43f ae4a 	beq.w	8002d0e <RI_SetRegCommandParser+0x1ea>
          retVal = (accessResult != MCP_CMD_OK) ? MCP_CMD_NOK : retVal;
 800307a:	2301      	movs	r3, #1
 800307c:	9301      	str	r3, [sp, #4]
 800307e:	e598      	b.n	8002bb2 <RI_SetRegCommandParser+0x8e>
      rxLength = (int16_t) (rxLength - size);
 8003080:	eba8 0203 	sub.w	r2, r8, r3
      rxData = rxData+size;
 8003084:	441c      	add	r4, r3
      rxLength = (int16_t) (rxLength - size);
 8003086:	b212      	sxth	r2, r2
        retVal = MCP_ERROR_RO_REG;
 8003088:	2604      	movs	r6, #4
 800308a:	e582      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
          retVal = MCP_ERROR_BAD_RAW_FORMAT; /* this error stop the parsing of the CMD buffer */
 800308c:	260a      	movs	r6, #10
 800308e:	e580      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
            uint8_t regdata8 = *data;
 8003090:	7886      	ldrb	r6, [r0, #2]
            if ((uint8_t)STC_TORQUE_MODE == regdata8)
 8003092:	b1ce      	cbz	r6, 80030c8 <RI_SetRegCommandParser+0x5a4>
            if ((uint8_t)STC_SPEED_MODE == regdata8)
 8003094:	2e01      	cmp	r6, #1
 8003096:	d072      	beq.n	800317e <RI_SetRegCommandParser+0x65a>
      rxLength = (int16_t) (rxLength - size);
 8003098:	f1aa 0203 	sub.w	r2, sl, #3
 800309c:	b212      	sxth	r2, r2
      rxData = rxData+size;
 800309e:	1cc4      	adds	r4, r0, #3
  uint8_t retVal = MCP_CMD_OK;
 80030a0:	2600      	movs	r6, #0
 80030a2:	e576      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80030a4:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80030a8:	4a40      	ldr	r2, [pc, #256]	; (80031ac <RI_SetRegCommandParser+0x688>)
 80030aa:	fb82 2103 	smull	r2, r1, r2, r3
 80030ae:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 80030b2:	2200      	movs	r2, #0
      rxData = rxData+size;
 80030b4:	1d84      	adds	r4, r0, #6
            MCI_ExecSpeedRamp(pMCIN,((((int16_t)regdata32) * ((int16_t)SPEED_UNIT)) / (int16_t)U_RPM), 0);
 80030b6:	b209      	sxth	r1, r1
 80030b8:	483a      	ldr	r0, [pc, #232]	; (80031a4 <RI_SetRegCommandParser+0x680>)
 80030ba:	f7fe faef 	bl	800169c <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 80030be:	f1aa 0206 	sub.w	r2, sl, #6
 80030c2:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80030c4:	2600      	movs	r6, #0
            break;
 80030c6:	e564      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
      rxData = rxData+size;
 80030c8:	1cc4      	adds	r4, r0, #3
              MCI_ExecTorqueRamp(pMCIN, MCI_GetTeref(pMCIN), 0);
 80030ca:	4836      	ldr	r0, [pc, #216]	; (80031a4 <RI_SetRegCommandParser+0x680>)
 80030cc:	f7fe fc2e 	bl	800192c <MCI_GetTeref>
 80030d0:	4632      	mov	r2, r6
 80030d2:	4601      	mov	r1, r0
 80030d4:	4833      	ldr	r0, [pc, #204]	; (80031a4 <RI_SetRegCommandParser+0x680>)
 80030d6:	f7fe faeb 	bl	80016b0 <MCI_ExecTorqueRamp>
      rxLength = (int16_t) (rxLength - size);
 80030da:	f1aa 0203 	sub.w	r2, sl, #3
 80030de:	b212      	sxth	r2, r2
 80030e0:	e557      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 80030e2:	6841      	ldr	r1, [r0, #4]
              MCI_SetCurrentReferences(pMCIN, currComp);
 80030e4:	482f      	ldr	r0, [pc, #188]	; (80031a4 <RI_SetRegCommandParser+0x680>)
              currComp.q = *((int16_t *) rawData); //cstat !MISRAC2012-Rule-11.3
 80030e6:	9105      	str	r1, [sp, #20]
              MCI_SetCurrentReferences(pMCIN, currComp);
 80030e8:	f7fe faec 	bl	80016c4 <MCI_SetCurrentReferences>
      rxLength = (int16_t) (rxLength - size);
 80030ec:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 80030f0:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 80030f2:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80030f4:	2600      	movs	r6, #0
 80030f6:	e54c      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 80030f8:	f016 0307 	ands.w	r3, r6, #7
 80030fc:	d128      	bne.n	8003150 <RI_SetRegCommandParser+0x62c>
              uint8_t nbrOfPhase = (((uint8_t)rawSize) / 8U);
 80030fe:	b2f6      	uxtb	r6, r6
              if (((0U != ((rawSize) % 8U))) || ((nbrOfPhase > RUC_MAX_PHASE_NUMBER) != 0))
 8003100:	2e2f      	cmp	r6, #47	; 0x2f
 8003102:	d825      	bhi.n	8003150 <RI_SetRegCommandParser+0x62c>
                for (i = 0; i <nbrOfPhase; i++)
 8003104:	08f2      	lsrs	r2, r6, #3
 8003106:	d021      	beq.n	800314c <RI_SetRegCommandParser+0x628>
 8003108:	e9cd 8402 	strd	r8, r4, [sp, #8]
 800310c:	4606      	mov	r6, r0
 800310e:	4619      	mov	r1, r3
 8003110:	4690      	mov	r8, r2
 8003112:	461c      	mov	r4, r3
                  revUpPhase.hFinalMecSpeedUnit = (((int16_t)rpm) * ((int16_t)SPEED_UNIT)) / ((int16_t)U_RPM);
 8003114:	f9b6 c004 	ldrsh.w	ip, [r6, #4]
 8003118:	4b24      	ldr	r3, [pc, #144]	; (80031ac <RI_SetRegCommandParser+0x688>)
 800311a:	fb83 300c 	smull	r3, r0, r3, ip
 800311e:	eba0 70ec 	sub.w	r0, r0, ip, asr #31
 8003122:	f8ad 0016 	strh.w	r0, [sp, #22]
                revUpPhase.hFinalTorque = *((int16_t *) &rawData[4U + (i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 8003126:	f9b6 0008 	ldrsh.w	r0, [r6, #8]
 800312a:	f8ad 0018 	strh.w	r0, [sp, #24]
                revUpPhase.hDurationms  = *((uint16_t *) &rawData[6U +(i * 8U)]); //cstat !MISRAC2012-Rule-11.3
 800312e:	8970      	ldrh	r0, [r6, #10]
 8003130:	f8ad 0014 	strh.w	r0, [sp, #20]
                for (i = 0; i <nbrOfPhase; i++)
 8003134:	3401      	adds	r4, #1
                  (void)RUC_SetPhase( RevUpControl[motorID], i, &revUpPhase);
 8003136:	481e      	ldr	r0, [pc, #120]	; (80031b0 <RI_SetRegCommandParser+0x68c>)
 8003138:	aa05      	add	r2, sp, #20
 800313a:	f003 ffcb 	bl	80070d4 <RUC_SetPhase>
                for (i = 0; i <nbrOfPhase; i++)
 800313e:	b2e1      	uxtb	r1, r4
 8003140:	4541      	cmp	r1, r8
 8003142:	f106 0608 	add.w	r6, r6, #8
 8003146:	d3e5      	bcc.n	8003114 <RI_SetRegCommandParser+0x5f0>
 8003148:	e9dd 8402 	ldrd	r8, r4, [sp, #8]
  uint8_t retVal = MCP_CMD_OK;
 800314c:	2600      	movs	r6, #0
 800314e:	e000      	b.n	8003152 <RI_SetRegCommandParser+0x62e>
                retVal = MCP_ERROR_BAD_RAW_FORMAT;
 8003150:	260a      	movs	r6, #10
      rxLength = (int16_t) (rxLength - size);
 8003152:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 8003156:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 8003158:	b212      	sxth	r2, r2
 800315a:	e51a      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
              MCI_ExecSpeedRamp(pMCIN, (int16_t)((rpm * SPEED_UNIT) / U_RPM), duration);
 800315c:	6843      	ldr	r3, [r0, #4]
 800315e:	4913      	ldr	r1, [pc, #76]	; (80031ac <RI_SetRegCommandParser+0x688>)
 8003160:	8902      	ldrh	r2, [r0, #8]
 8003162:	fb81 0103 	smull	r0, r1, r1, r3
 8003166:	eba1 71e3 	sub.w	r1, r1, r3, asr #31
 800316a:	480e      	ldr	r0, [pc, #56]	; (80031a4 <RI_SetRegCommandParser+0x680>)
 800316c:	b209      	sxth	r1, r1
 800316e:	f7fe fa95 	bl	800169c <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8003172:	eba8 020a 	sub.w	r2, r8, sl
      rxData = rxData+size;
 8003176:	4454      	add	r4, sl
      rxLength = (int16_t) (rxLength - size);
 8003178:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 800317a:	2600      	movs	r6, #0
              break;
 800317c:	e509      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
      rxData = rxData+size;
 800317e:	1cc4      	adds	r4, r0, #3
              MCI_ExecSpeedRamp(pMCIN, MCI_GetMecSpeedRefUnit(pMCIN), 0);
 8003180:	4808      	ldr	r0, [pc, #32]	; (80031a4 <RI_SetRegCommandParser+0x680>)
 8003182:	f7fe fb7b 	bl	800187c <MCI_GetMecSpeedRefUnit>
 8003186:	2200      	movs	r2, #0
 8003188:	4601      	mov	r1, r0
 800318a:	4806      	ldr	r0, [pc, #24]	; (80031a4 <RI_SetRegCommandParser+0x680>)
 800318c:	f7fe fa86 	bl	800169c <MCI_ExecSpeedRamp>
      rxLength = (int16_t) (rxLength - size);
 8003190:	f1aa 0203 	sub.w	r2, sl, #3
 8003194:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003196:	2600      	movs	r6, #0
 8003198:	e4fb      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
 800319a:	bf00      	nop
 800319c:	20000570 	.word	0x20000570
 80031a0:	20000134 	.word	0x20000134
 80031a4:	2000083c 	.word	0x2000083c
 80031a8:	200005b0 	.word	0x200005b0
 80031ac:	2aaaaaab 	.word	0x2aaaaaab
 80031b0:	20000324 	.word	0x20000324
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80031b4:	2201      	movs	r2, #1
  *size= 1U ; /* /0 is the min String size */
 80031b6:	4613      	mov	r3, r2
 80031b8:	e54c      	b.n	8002c54 <RI_SetRegCommandParser+0x130>
      rxLength = (int16_t) (rxLength - size);
 80031ba:	f1aa 0203 	sub.w	r2, sl, #3
 80031be:	b212      	sxth	r2, r2
      rxData = rxData+size;
 80031c0:	1cc4      	adds	r4, r0, #3
        retVal = MCP_ERROR_RO_REG;
 80031c2:	2604      	movs	r6, #4
 80031c4:	e4e5      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
            PID_SetKDDivisorPOW2(pPIDId[motorID], regdata16);
 80031c6:	4b2a      	ldr	r3, [pc, #168]	; (8003270 <RI_SetRegCommandParser+0x74c>)
 80031c8:	4631      	mov	r1, r6
      rxData = rxData+size;
 80031ca:	1d04      	adds	r4, r0, #4
 80031cc:	e63b      	b.n	8002e46 <RI_SetRegCommandParser+0x322>
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 80031ce:	b231      	sxth	r1, r6
      rxData = rxData+size;
 80031d0:	1d04      	adds	r4, r0, #4
            PID_SetKI(pPIDSpeed[motorID], (int16_t)regdata16);
 80031d2:	4828      	ldr	r0, [pc, #160]	; (8003274 <RI_SetRegCommandParser+0x750>)
 80031d4:	f002 ff9a 	bl	800610c <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 80031d8:	f1aa 0204 	sub.w	r2, sl, #4
 80031dc:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80031de:	2600      	movs	r6, #0
            break;
 80031e0:	e4d7      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 80031e2:	4631      	mov	r1, r6
      rxData = rxData+size;
 80031e4:	1d04      	adds	r4, r0, #4
            PID_SetKIDivisorPOW2 (&stoPLLSensor[motorID]->PIRegulator,regdata16);
 80031e6:	4824      	ldr	r0, [pc, #144]	; (8003278 <RI_SetRegCommandParser+0x754>)
 80031e8:	f002 ffac 	bl	8006144 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 80031ec:	f1aa 0204 	sub.w	r2, sl, #4
 80031f0:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 80031f2:	2600      	movs	r6, #0
            break;
 80031f4:	e4cd      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
            PID_SetKIDivisorPOW2(pPIDIq[motorID], regdata16);
 80031f6:	4b21      	ldr	r3, [pc, #132]	; (800327c <RI_SetRegCommandParser+0x758>)
 80031f8:	4631      	mov	r1, r6
      rxData = rxData+size;
 80031fa:	1d04      	adds	r4, r0, #4
 80031fc:	e66b      	b.n	8002ed6 <RI_SetRegCommandParser+0x3b2>
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 80031fe:	4631      	mov	r1, r6
      rxData = rxData+size;
 8003200:	1d04      	adds	r4, r0, #4
            PID_SetKIDivisorPOW2(pPIDSpeed[motorID], regdata16);
 8003202:	481c      	ldr	r0, [pc, #112]	; (8003274 <RI_SetRegCommandParser+0x750>)
 8003204:	f002 ff9e 	bl	8006144 <PID_SetKIDivisorPOW2>
      rxLength = (int16_t) (rxLength - size);
 8003208:	f1aa 0204 	sub.w	r2, sl, #4
 800320c:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 800320e:	2600      	movs	r6, #0
            break;
 8003210:	e4bf      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
      rxData = rxData+size;
 8003212:	1d04      	adds	r4, r0, #4
            currComp = MCI_GetIqdref(pMCIN);
 8003214:	481a      	ldr	r0, [pc, #104]	; (8003280 <RI_SetRegCommandParser+0x75c>)
 8003216:	f7fe fb5f 	bl	80018d8 <MCI_GetIqdref>
 800321a:	9005      	str	r0, [sp, #20]
            currComp.q = (int16_t)regdata16;
 800321c:	f8ad 6014 	strh.w	r6, [sp, #20]
            MCI_SetCurrentReferences(pMCIN,currComp);
 8003220:	e6ac      	b.n	8002f7c <RI_SetRegCommandParser+0x458>
            PID_SetKPDivisorPOW2(pPIDId[motorID], regdata16);
 8003222:	4b13      	ldr	r3, [pc, #76]	; (8003270 <RI_SetRegCommandParser+0x74c>)
 8003224:	4631      	mov	r1, r6
      rxData = rxData+size;
 8003226:	1d04      	adds	r4, r0, #4
 8003228:	e621      	b.n	8002e6e <RI_SetRegCommandParser+0x34a>
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800322a:	aa05      	add	r2, sp, #20
 800322c:	f10d 0112 	add.w	r1, sp, #18
      rxData = rxData+size;
 8003230:	1d04      	adds	r4, r0, #4
            STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8003232:	4814      	ldr	r0, [pc, #80]	; (8003284 <RI_SetRegCommandParser+0x760>)
 8003234:	f004 fb2a 	bl	800788c <STO_PLL_GetObserverGains>
            STO_PLL_SetObserverGains(stoPLLSensor[motorID], (int16_t)regdata16, hC2);
 8003238:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 800323c:	b231      	sxth	r1, r6
 800323e:	e5a0      	b.n	8002d82 <RI_SetRegCommandParser+0x25e>
            PID_SetKD(pPIDIq[motorID], (int16_t)regdata16);
 8003240:	4b0e      	ldr	r3, [pc, #56]	; (800327c <RI_SetRegCommandParser+0x758>)
 8003242:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8003244:	1d04      	adds	r4, r0, #4
 8003246:	e5de      	b.n	8002e06 <RI_SetRegCommandParser+0x2e2>
            PID_SetKP(pPIDIq[motorID], (int16_t)regdata16);
 8003248:	4b0c      	ldr	r3, [pc, #48]	; (800327c <RI_SetRegCommandParser+0x758>)
 800324a:	b231      	sxth	r1, r6
      rxData = rxData+size;
 800324c:	1d04      	adds	r4, r0, #4
 800324e:	e57f      	b.n	8002d50 <RI_SetRegCommandParser+0x22c>
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8003250:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8003252:	1d04      	adds	r4, r0, #4
            PID_SetKI (&stoPLLSensor[motorID]->PIRegulator, (int16_t)regdata16);
 8003254:	4808      	ldr	r0, [pc, #32]	; (8003278 <RI_SetRegCommandParser+0x754>)
 8003256:	f002 ff59 	bl	800610c <PID_SetKI>
      rxLength = (int16_t) (rxLength - size);
 800325a:	f1aa 0204 	sub.w	r2, sl, #4
 800325e:	b212      	sxth	r2, r2
  uint8_t retVal = MCP_CMD_OK;
 8003260:	2600      	movs	r6, #0
            break;
 8003262:	e496      	b.n	8002b92 <RI_SetRegCommandParser+0x6e>
            PID_SetKI(pPIDId[motorID], (int16_t)regdata16);
 8003264:	4b02      	ldr	r3, [pc, #8]	; (8003270 <RI_SetRegCommandParser+0x74c>)
 8003266:	b231      	sxth	r1, r6
      rxData = rxData+size;
 8003268:	1d04      	adds	r4, r0, #4
 800326a:	e5b8      	b.n	8002dde <RI_SetRegCommandParser+0x2ba>
 800326c:	9e01      	ldr	r6, [sp, #4]
 800326e:	e4d2      	b.n	8002c16 <RI_SetRegCommandParser+0xf2>
 8003270:	20000570 	.word	0x20000570
 8003274:	20000134 	.word	0x20000134
 8003278:	200003e4 	.word	0x200003e4
 800327c:	20000574 	.word	0x20000574
 8003280:	2000083c 	.word	0x2000083c
 8003284:	200003b0 	.word	0x200003b0

08003288 <RI_GetRegCommandParser>:
{
 8003288:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    uint16_t rxLength = pHandle->rxLength;
 800328c:	f8b0 800c 	ldrh.w	r8, [r0, #12]
    uint8_t * rxData = pHandle->rxBuffer;
 8003290:	f8d0 9004 	ldr.w	r9, [r0, #4]
    uint8_t * txData = pHandle->txBuffer;
 8003294:	6886      	ldr	r6, [r0, #8]
    pHandle->txLength = 0;
 8003296:	2300      	movs	r3, #0
{
 8003298:	b099      	sub	sp, #100	; 0x64
    pHandle->txLength = 0;
 800329a:	81c3      	strh	r3, [r0, #14]
    while (rxLength > 0U)
 800329c:	f1b8 0f00 	cmp.w	r8, #0
 80032a0:	f000 8337 	beq.w	8003912 <RI_GetRegCommandParser+0x68a>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 80032a4:	f8df a364 	ldr.w	sl, [pc, #868]	; 800360c <RI_GetRegCommandParser+0x384>
 80032a8:	4607      	mov	r7, r0
 80032aa:	b20c      	sxth	r4, r1
    uint8_t * rxData = pHandle->rxBuffer;
 80032ac:	464d      	mov	r5, r9
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 80032ae:	f835 3b02 	ldrh.w	r3, [r5], #2
    switch (typeID)
 80032b2:	f003 0238 	and.w	r2, r3, #56	; 0x38
 80032b6:	3a08      	subs	r2, #8
    uint16_t regID = dataID & REG_MASK;
 80032b8:	f023 0307 	bic.w	r3, r3, #7
 80032bc:	b29b      	uxth	r3, r3
    switch (typeID)
 80032be:	2a20      	cmp	r2, #32
 80032c0:	d812      	bhi.n	80032e8 <RI_GetRegCommandParser+0x60>
 80032c2:	e8df f002 	tbb	[pc, r2]
 80032c6:	118f      	.short	0x118f
 80032c8:	11111111 	.word	0x11111111
 80032cc:	11651111 	.word	0x11651111
 80032d0:	11111111 	.word	0x11111111
 80032d4:	119c1111 	.word	0x119c1111
 80032d8:	11111111 	.word	0x11111111
 80032dc:	11301111 	.word	0x11301111
 80032e0:	11111111 	.word	0x11111111
 80032e4:	1111      	.short	0x1111
 80032e6:	15          	.byte	0x15
 80032e7:	00          	.byte	0x00
 80032e8:	2007      	movs	r0, #7
}
 80032ea:	b019      	add	sp, #100	; 0x64
 80032ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        rawData++;
 80032f0:	f5b3 7fd4 	cmp.w	r3, #424	; 0x1a8
 80032f4:	f106 0202 	add.w	r2, r6, #2
        switch (regID)
 80032f8:	f000 82c8 	beq.w	800388c <RI_GetRegCommandParser+0x604>
 80032fc:	f200 80ca 	bhi.w	8003494 <RI_GetRegCommandParser+0x20c>
 8003300:	2ba8      	cmp	r3, #168	; 0xa8
 8003302:	f000 8274 	beq.w	80037ee <RI_GetRegCommandParser+0x566>
 8003306:	f200 80bb 	bhi.w	8003480 <RI_GetRegCommandParser+0x1f8>
 800330a:	2b28      	cmp	r3, #40	; 0x28
 800330c:	f000 82ae 	beq.w	800386c <RI_GetRegCommandParser+0x5e4>
 8003310:	2b68      	cmp	r3, #104	; 0x68
 8003312:	d172      	bne.n	80033fa <RI_GetRegCommandParser+0x172>
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003314:	233c      	movs	r3, #60	; 0x3c
            if (((*rawSize) + 2U) > freeSpace)
 8003316:	2c3d      	cmp	r4, #61	; 0x3d
            *rawSize = (uint16_t)sizeof(MotorConfig_reg_t);
 8003318:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 800331a:	f200 82db 	bhi.w	80038d4 <RI_GetRegCommandParser+0x64c>
              retVal = MCP_ERROR_NO_TXSYNC_SPACE;
 800331e:	2008      	movs	r0, #8
}
 8003320:	b019      	add	sp, #100	; 0x64
 8003322:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        switch (regID)
 8003326:	2ba0      	cmp	r3, #160	; 0xa0
 8003328:	f000 8218 	beq.w	800375c <RI_GetRegCommandParser+0x4d4>
 800332c:	f200 808a 	bhi.w	8003444 <RI_GetRegCommandParser+0x1bc>
 8003330:	2b20      	cmp	r3, #32
 8003332:	f000 822b 	beq.w	800378c <RI_GetRegCommandParser+0x504>
 8003336:	2b60      	cmp	r3, #96	; 0x60
 8003338:	d15f      	bne.n	80033fa <RI_GetRegCommandParser+0x172>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800333a:	4baf      	ldr	r3, [pc, #700]	; (80035f8 <RI_GetRegCommandParser+0x370>)
 800333c:	f993 1000 	ldrsb.w	r1, [r3]
 8003340:	2900      	cmp	r1, #0
 8003342:	f000 8251 	beq.w	80037e8 <RI_GetRegCommandParser+0x560>
 8003346:	2c01      	cmp	r4, #1
 8003348:	f340 8206 	ble.w	8003758 <RI_GetRegCommandParser+0x4d0>
 800334c:	469c      	mov	ip, r3
 800334e:	4630      	mov	r0, r6
 8003350:	f1c6 0201 	rsb	r2, r6, #1
 8003354:	e002      	b.n	800335c <RI_GetRegCommandParser+0xd4>
 8003356:	429c      	cmp	r4, r3
 8003358:	f340 81fe 	ble.w	8003758 <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 800335c:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003360:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003364:	1883      	adds	r3, r0, r2
 8003366:	b29b      	uxth	r3, r3
 8003368:	2900      	cmp	r1, #0
 800336a:	d1f4      	bne.n	8003356 <RI_GetRegCommandParser+0xce>
        txData = txData+size;
 800336c:	4619      	mov	r1, r3
    *destString = (int8_t)0;
 800336e:	2200      	movs	r2, #0
        if (freeSpace >= 2U)
 8003370:	b2a4      	uxth	r4, r4
    *destString = (int8_t)0;
 8003372:	7032      	strb	r2, [r6, #0]
        pHandle->txLength += size;
 8003374:	89f8      	ldrh	r0, [r7, #14]
    while (rxLength > 0U)
 8003376:	eb09 0208 	add.w	r2, r9, r8
        pHandle->txLength += size;
 800337a:	4418      	add	r0, r3
        freeSpaceS16 = freeSpaceS16-size;
 800337c:	1ae4      	subs	r4, r4, r3
    while (rxLength > 0U)
 800337e:	b292      	uxth	r2, r2
 8003380:	b2ab      	uxth	r3, r5
 8003382:	4293      	cmp	r3, r2
        pHandle->txLength += size;
 8003384:	81f8      	strh	r0, [r7, #14]
        txData = txData+size;
 8003386:	440e      	add	r6, r1
        freeSpaceS16 = freeSpaceS16-size;
 8003388:	b224      	sxth	r4, r4
    while (rxLength > 0U)
 800338a:	d190      	bne.n	80032ae <RI_GetRegCommandParser+0x26>
      retVal = RI_GetReg (*dataElementID,txData, &size, freeSpaceS16);
 800338c:	2000      	movs	r0, #0
 800338e:	e7ac      	b.n	80032ea <RI_GetRegCommandParser+0x62>
        if (freeSpace >= 2U)
 8003390:	b2a4      	uxth	r4, r4
 8003392:	2c01      	cmp	r4, #1
 8003394:	d9c3      	bls.n	800331e <RI_GetRegCommandParser+0x96>
          switch (regID)
 8003396:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 800339a:	f000 82d3 	beq.w	8003944 <RI_GetRegCommandParser+0x6bc>
 800339e:	f200 80e8 	bhi.w	8003572 <RI_GetRegCommandParser+0x2ea>
 80033a2:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80033a6:	f000 8333 	beq.w	8003a10 <RI_GetRegCommandParser+0x788>
 80033aa:	f240 80c3 	bls.w	8003534 <RI_GetRegCommandParser+0x2ac>
 80033ae:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 80033b2:	f000 8323 	beq.w	80039fc <RI_GetRegCommandParser+0x774>
 80033b6:	f240 80a7 	bls.w	8003508 <RI_GetRegCommandParser+0x280>
 80033ba:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 80033be:	f000 8358 	beq.w	8003a72 <RI_GetRegCommandParser+0x7ea>
 80033c2:	f240 8090 	bls.w	80034e6 <RI_GetRegCommandParser+0x25e>
 80033c6:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 80033ca:	f000 8348 	beq.w	8003a5e <RI_GetRegCommandParser+0x7d6>
 80033ce:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 80033d2:	d112      	bne.n	80033fa <RI_GetRegCommandParser+0x172>
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 80033d4:	4650      	mov	r0, sl
 80033d6:	f7fe fa7f 	bl	80018d8 <MCI_GetIqdref>
              break;
 80033da:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 80033dc:	900e      	str	r0, [sp, #56]	; 0x38
          *size = 2;
 80033de:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIqdref(pMCIN).q;
 80033e0:	8030      	strh	r0, [r6, #0]
              break;
 80033e2:	e7c7      	b.n	8003374 <RI_GetRegCommandParser+0xec>
        if (freeSpace > 0U)
 80033e4:	2c00      	cmp	r4, #0
 80033e6:	d09a      	beq.n	800331e <RI_GetRegCommandParser+0x96>
          switch (regID)
 80033e8:	2b88      	cmp	r3, #136	; 0x88
 80033ea:	f000 81f5 	beq.w	80037d8 <RI_GetRegCommandParser+0x550>
 80033ee:	2bc8      	cmp	r3, #200	; 0xc8
 80033f0:	f000 81ea 	beq.w	80037c8 <RI_GetRegCommandParser+0x540>
 80033f4:	2b48      	cmp	r3, #72	; 0x48
 80033f6:	f000 81df 	beq.w	80037b8 <RI_GetRegCommandParser+0x530>
 80033fa:	2005      	movs	r0, #5
  return (retVal);
 80033fc:	e775      	b.n	80032ea <RI_GetRegCommandParser+0x62>
        if (freeSpace >= 4U)
 80033fe:	b2a4      	uxth	r4, r4
 8003400:	2c03      	cmp	r4, #3
 8003402:	d98c      	bls.n	800331e <RI_GetRegCommandParser+0x96>
          switch (regID)
 8003404:	2b98      	cmp	r3, #152	; 0x98
 8003406:	f000 8253 	beq.w	80038b0 <RI_GetRegCommandParser+0x628>
 800340a:	d90c      	bls.n	8003426 <RI_GetRegCommandParser+0x19e>
 800340c:	2bd8      	cmp	r3, #216	; 0xd8
 800340e:	f000 8253 	beq.w	80038b8 <RI_GetRegCommandParser+0x630>
 8003412:	f5b3 7f8c 	cmp.w	r3, #280	; 0x118
 8003416:	d1f0      	bne.n	80033fa <RI_GetRegCommandParser+0x172>
              *regdata32 = STO_PLL_GetObservedBemfLevel(stoPLLSensor[motorID]);
 8003418:	4878      	ldr	r0, [pc, #480]	; (80035fc <RI_GetRegCommandParser+0x374>)
 800341a:	f004 fa51 	bl	80078c0 <STO_PLL_GetObservedBemfLevel>
 800341e:	2104      	movs	r1, #4
 8003420:	6030      	str	r0, [r6, #0]
          *size = 4;
 8003422:	460b      	mov	r3, r1
 8003424:	e7a6      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 8003426:	2b18      	cmp	r3, #24
 8003428:	f000 824d 	beq.w	80038c6 <RI_GetRegCommandParser+0x63e>
 800342c:	2b58      	cmp	r3, #88	; 0x58
 800342e:	d1e4      	bne.n	80033fa <RI_GetRegCommandParser+0x172>
              *regdata32 = (((int32_t)MCI_GetAvrgMecSpeedUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003430:	4650      	mov	r0, sl
 8003432:	f7fe fa1b 	bl	800186c <MCI_GetAvrgMecSpeedUnit>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 8003436:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 800343a:	0040      	lsls	r0, r0, #1
 800343c:	2104      	movs	r1, #4
 800343e:	6030      	str	r0, [r6, #0]
          *size = 4;
 8003440:	460b      	mov	r3, r1
 8003442:	e797      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 8003444:	2be0      	cmp	r3, #224	; 0xe0
 8003446:	d1d8      	bne.n	80033fa <RI_GetRegCommandParser+0x172>
        retVal = RI_MovString (MotorConfig_reg[motorID]->name ,charData, size, freeSpace);
 8003448:	4b6d      	ldr	r3, [pc, #436]	; (8003600 <RI_GetRegCommandParser+0x378>)
 800344a:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800344c:	f993 1024 	ldrsb.w	r1, [r3, #36]	; 0x24
 8003450:	2900      	cmp	r1, #0
 8003452:	f000 81c9 	beq.w	80037e8 <RI_GetRegCommandParser+0x560>
 8003456:	2c01      	cmp	r4, #1
 8003458:	f340 817e 	ble.w	8003758 <RI_GetRegCommandParser+0x4d0>
 800345c:	f103 0c24 	add.w	ip, r3, #36	; 0x24
 8003460:	4630      	mov	r0, r6
 8003462:	f1c6 0201 	rsb	r2, r6, #1
 8003466:	e002      	b.n	800346e <RI_GetRegCommandParser+0x1e6>
 8003468:	42a3      	cmp	r3, r4
 800346a:	f280 8175 	bge.w	8003758 <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 800346e:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003472:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003476:	1883      	adds	r3, r0, r2
 8003478:	b29b      	uxth	r3, r3
 800347a:	2900      	cmp	r1, #0
 800347c:	d1f4      	bne.n	8003468 <RI_GetRegCommandParser+0x1e0>
 800347e:	e775      	b.n	800336c <RI_GetRegCommandParser+0xe4>
 8003480:	2be8      	cmp	r3, #232	; 0xe8
 8003482:	d1ba      	bne.n	80033fa <RI_GetRegCommandParser+0x172>
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003484:	230e      	movs	r3, #14
            if (((*rawSize) + 2U) > freeSpace)
 8003486:	2c0f      	cmp	r4, #15
            *rawSize = (uint16_t)sizeof(FOCFwConfig_reg_t);
 8003488:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 800348a:	f67f af48 	bls.w	800331e <RI_GetRegCommandParser+0x96>
              FOCFwConfig_reg_t const *pFOCConfig_reg = FOCConfig_reg[motorID];
 800348e:	4b5d      	ldr	r3, [pc, #372]	; (8003604 <RI_GetRegCommandParser+0x37c>)
        if (freeSpace >= 2U)
 8003490:	b2a4      	uxth	r4, r4
 8003492:	e1b3      	b.n	80037fc <RI_GetRegCommandParser+0x574>
 8003494:	f5b3 7f0a 	cmp.w	r3, #552	; 0x228
 8003498:	f000 81c0 	beq.w	800381c <RI_GetRegCommandParser+0x594>
 800349c:	f5b3 7f5a 	cmp.w	r3, #872	; 0x368
 80034a0:	d10e      	bne.n	80034c0 <RI_GetRegCommandParser+0x238>
            *rawSize = 4;
 80034a2:	2304      	movs	r3, #4
 80034a4:	8033      	strh	r3, [r6, #0]
            *iqref = (uint16_t)MCI_GetIqdref(pMCIN).q;
 80034a6:	4650      	mov	r0, sl
 80034a8:	f7fe fa16 	bl	80018d8 <MCI_GetIqdref>
 80034ac:	8070      	strh	r0, [r6, #2]
 80034ae:	9004      	str	r0, [sp, #16]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80034b0:	4650      	mov	r0, sl
 80034b2:	f7fe fa11 	bl	80018d8 <MCI_GetIqdref>
        if (freeSpace >= 2U)
 80034b6:	b2a4      	uxth	r4, r4
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80034b8:	9003      	str	r0, [sp, #12]
 80034ba:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80034be:	e00c      	b.n	80034da <RI_GetRegCommandParser+0x252>
 80034c0:	f5b3 7ff4 	cmp.w	r3, #488	; 0x1e8
 80034c4:	d199      	bne.n	80033fa <RI_GetRegCommandParser+0x172>
            *rawSize = 4;
 80034c6:	2304      	movs	r3, #4
 80034c8:	8033      	strh	r3, [r6, #0]
            *torque = MCI_GetLastRampFinalTorque(pMCIN);
 80034ca:	4650      	mov	r0, sl
 80034cc:	f7fe f9c4 	bl	8001858 <MCI_GetLastRampFinalTorque>
 80034d0:	8070      	strh	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80034d2:	4650      	mov	r0, sl
        if (freeSpace >= 2U)
 80034d4:	b2a4      	uxth	r4, r4
            *duration = MCI_GetLastRampFinalDuration(pMCIN) ;
 80034d6:	f7fe f9c3 	bl	8001860 <MCI_GetLastRampFinalDuration>
        *size = (*rawSize) + 2U;
 80034da:	8833      	ldrh	r3, [r6, #0]
            *idref = (uint16_t)MCI_GetIqdref(pMCIN).d;
 80034dc:	80b0      	strh	r0, [r6, #4]
        *size = (*rawSize) + 2U;
 80034de:	3302      	adds	r3, #2
 80034e0:	b29b      	uxth	r3, r3
        txData = txData+size;
 80034e2:	4619      	mov	r1, r3
 80034e4:	e746      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 80034e6:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 80034ea:	f000 82a0 	beq.w	8003a2e <RI_GetRegCommandParser+0x7a6>
 80034ee:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 80034f2:	d182      	bne.n	80033fa <RI_GetRegCommandParser+0x172>
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80034f4:	4650      	mov	r0, sl
 80034f6:	f7fe f9d3 	bl	80018a0 <MCI_GetIalphabeta>
              break;
 80034fa:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).beta;
 80034fc:	9011      	str	r0, [sp, #68]	; 0x44
 80034fe:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003502:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003504:	460b      	mov	r3, r1
              break;
 8003506:	e735      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 8003508:	f5b3 6fba 	cmp.w	r3, #1488	; 0x5d0
 800350c:	f000 8287 	beq.w	8003a1e <RI_GetRegCommandParser+0x796>
 8003510:	f240 80c6 	bls.w	80036a0 <RI_GetRegCommandParser+0x418>
 8003514:	f5b3 6fc2 	cmp.w	r3, #1552	; 0x610
 8003518:	f000 8299 	beq.w	8003a4e <RI_GetRegCommandParser+0x7c6>
 800351c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003520:	f47f af6b 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003524:	4650      	mov	r0, sl
 8003526:	f7fe f9ad 	bl	8001884 <MCI_GetIab>
              break;
 800352a:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIab(pMCIN).a;
 800352c:	9014      	str	r0, [sp, #80]	; 0x50
          *size = 2;
 800352e:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIab(pMCIN).a;
 8003530:	8030      	strh	r0, [r6, #0]
              break;
 8003532:	e71f      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 8003534:	f5b3 7f04 	cmp.w	r3, #528	; 0x210
 8003538:	f000 8281 	beq.w	8003a3e <RI_GetRegCommandParser+0x7b6>
 800353c:	f240 80de 	bls.w	80036fc <RI_GetRegCommandParser+0x474>
 8003540:	f5b3 7f44 	cmp.w	r3, #784	; 0x310
 8003544:	f000 82d0 	beq.w	8003ae8 <RI_GetRegCommandParser+0x860>
 8003548:	d976      	bls.n	8003638 <RI_GetRegCommandParser+0x3b0>
 800354a:	f5b3 7f54 	cmp.w	r3, #848	; 0x350
 800354e:	f000 82bf 	beq.w	8003ad0 <RI_GetRegCommandParser+0x848>
 8003552:	f5b3 7f64 	cmp.w	r3, #912	; 0x390
 8003556:	f47f af50 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 800355a:	f10d 010a 	add.w	r1, sp, #10
 800355e:	4827      	ldr	r0, [pc, #156]	; (80035fc <RI_GetRegCommandParser+0x374>)
 8003560:	aa15      	add	r2, sp, #84	; 0x54
 8003562:	f004 f993 	bl	800788c <STO_PLL_GetObserverGains>
              *regdata16 = hC2;
 8003566:	f9bd 3054 	ldrsh.w	r3, [sp, #84]	; 0x54
 800356a:	8033      	strh	r3, [r6, #0]
      if (retVal == MCP_CMD_OK )
 800356c:	2102      	movs	r1, #2
          *size = 2;
 800356e:	460b      	mov	r3, r1
 8003570:	e700      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 8003572:	f241 4250 	movw	r2, #5200	; 0x1450
 8003576:	4293      	cmp	r3, r2
 8003578:	f000 82a3 	beq.w	8003ac2 <RI_GetRegCommandParser+0x83a>
 800357c:	d917      	bls.n	80035ae <RI_GetRegCommandParser+0x326>
 800357e:	f241 52d0 	movw	r2, #5584	; 0x15d0
 8003582:	4293      	cmp	r3, r2
 8003584:	f000 829b 	beq.w	8003abe <RI_GetRegCommandParser+0x836>
 8003588:	d978      	bls.n	800367c <RI_GetRegCommandParser+0x3f4>
 800358a:	f641 02d0 	movw	r2, #6352	; 0x18d0
 800358e:	4293      	cmp	r3, r2
 8003590:	f000 828e 	beq.w	8003ab0 <RI_GetRegCommandParser+0x828>
 8003594:	d960      	bls.n	8003658 <RI_GetRegCommandParser+0x3d0>
 8003596:	f641 1210 	movw	r2, #6416	; 0x1910
 800359a:	4293      	cmp	r3, r2
 800359c:	f47f af2d 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdataU16 = PID_GetKPDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 80035a0:	4819      	ldr	r0, [pc, #100]	; (8003608 <RI_GetRegCommandParser+0x380>)
 80035a2:	f002 fdbf 	bl	8006124 <PID_GetKPDivisorPOW2>
 80035a6:	2102      	movs	r1, #2
 80035a8:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80035aa:	460b      	mov	r3, r1
 80035ac:	e6e2      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 80035ae:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 80035b2:	f000 8276 	beq.w	8003aa2 <RI_GetRegCommandParser+0x81a>
 80035b6:	d92b      	bls.n	8003610 <RI_GetRegCommandParser+0x388>
 80035b8:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 80035bc:	f000 8269 	beq.w	8003a92 <RI_GetRegCommandParser+0x80a>
 80035c0:	d908      	bls.n	80035d4 <RI_GetRegCommandParser+0x34c>
 80035c2:	f5b3 6f65 	cmp.w	r3, #3664	; 0xe50
 80035c6:	d002      	beq.n	80035ce <RI_GetRegCommandParser+0x346>
 80035c8:	f5b3 6f69 	cmp.w	r3, #3728	; 0xe90
 80035cc:	d177      	bne.n	80036be <RI_GetRegCommandParser+0x436>
 80035ce:	2102      	movs	r1, #2
 80035d0:	460b      	mov	r3, r1
 80035d2:	e6cf      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 80035d4:	f5b3 6f3d 	cmp.w	r3, #3024	; 0xbd0
 80035d8:	f000 8253 	beq.w	8003a82 <RI_GetRegCommandParser+0x7fa>
 80035dc:	f5b3 6f41 	cmp.w	r3, #3088	; 0xc10
 80035e0:	f47f af0b 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 80035e4:	4805      	ldr	r0, [pc, #20]	; (80035fc <RI_GetRegCommandParser+0x374>)
 80035e6:	f004 f93d 	bl	8007864 <STO_PLL_GetEstimatedCurrent>
              break;
 80035ea:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).beta;
 80035ec:	9007      	str	r0, [sp, #28]
 80035ee:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80035f2:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80035f4:	460b      	mov	r3, r1
              break;
 80035f6:	e6bd      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 80035f8:	08007cc0 	.word	0x08007cc0
 80035fc:	200003b0 	.word	0x200003b0
 8003600:	20000588 	.word	0x20000588
 8003604:	20000584 	.word	0x20000584
 8003608:	200003e4 	.word	0x200003e4
 800360c:	2000083c 	.word	0x2000083c
 8003610:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003614:	f000 81ea 	beq.w	80039ec <RI_GetRegCommandParser+0x764>
 8003618:	d97f      	bls.n	800371a <RI_GetRegCommandParser+0x492>
 800361a:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 800361e:	f000 81db 	beq.w	80039d8 <RI_GetRegCommandParser+0x750>
 8003622:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8003626:	f47f aee8 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 800362a:	48bb      	ldr	r0, [pc, #748]	; (8003918 <RI_GetRegCommandParser+0x690>)
 800362c:	f003 fd74 	bl	8007118 <SPD_GetElAngle>
              break;
 8003630:	2102      	movs	r1, #2
              *regdata16 = SPD_GetElAngle((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003632:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003634:	460b      	mov	r3, r1
              break;
 8003636:	e69d      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 8003638:	f5b3 7f24 	cmp.w	r3, #656	; 0x290
 800363c:	f000 81ca 	beq.w	80039d4 <RI_GetRegCommandParser+0x74c>
 8003640:	f5b3 7f34 	cmp.w	r3, #720	; 0x2d0
 8003644:	f47f aed9 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003648:	4bb4      	ldr	r3, [pc, #720]	; (800391c <RI_GetRegCommandParser+0x694>)
 800364a:	6818      	ldr	r0, [r3, #0]
 800364c:	f002 fd64 	bl	8006118 <PID_GetKI>
              break;
 8003650:	2102      	movs	r1, #2
              *regdata16 = PID_GetKI(pPIDId[motorID]);
 8003652:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003654:	460b      	mov	r3, r1
              break;
 8003656:	e68d      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 8003658:	f241 6210 	movw	r2, #5648	; 0x1610
 800365c:	4293      	cmp	r3, r2
 800365e:	f000 81b7 	beq.w	80039d0 <RI_GetRegCommandParser+0x748>
 8003662:	f241 6250 	movw	r2, #5712	; 0x1650
 8003666:	4293      	cmp	r3, r2
 8003668:	f47f aec7 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDIq[motorID]);
 800366c:	4bac      	ldr	r3, [pc, #688]	; (8003920 <RI_GetRegCommandParser+0x698>)
 800366e:	6818      	ldr	r0, [r3, #0]
 8003670:	f002 fd82 	bl	8006178 <PID_GetKDDivisorPOW2>
 8003674:	2102      	movs	r1, #2
 8003676:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003678:	460b      	mov	r3, r1
 800367a:	e67b      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 800367c:	f241 5210 	movw	r2, #5392	; 0x1510
 8003680:	4293      	cmp	r3, r2
 8003682:	f000 8180 	beq.w	8003986 <RI_GetRegCommandParser+0x6fe>
 8003686:	d928      	bls.n	80036da <RI_GetRegCommandParser+0x452>
 8003688:	f241 5250 	movw	r2, #5456	; 0x1550
 800368c:	4293      	cmp	r3, r2
 800368e:	f000 8172 	beq.w	8003976 <RI_GetRegCommandParser+0x6ee>
 8003692:	f241 5290 	movw	r2, #5520	; 0x1590
 8003696:	4293      	cmp	r3, r2
 8003698:	f47f aeaf 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDId[motorID]);
 800369c:	4b9f      	ldr	r3, [pc, #636]	; (800391c <RI_GetRegCommandParser+0x694>)
 800369e:	e7e6      	b.n	800366e <RI_GetRegCommandParser+0x3e6>
 80036a0:	f5b3 6f92 	cmp.w	r3, #1168	; 0x490
 80036a4:	f000 818d 	beq.w	80039c2 <RI_GetRegCommandParser+0x73a>
 80036a8:	f5b3 6fb2 	cmp.w	r3, #1424	; 0x590
 80036ac:	f47f aea5 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80036b0:	489c      	ldr	r0, [pc, #624]	; (8003924 <RI_GetRegCommandParser+0x69c>)
 80036b2:	f002 fa0b 	bl	8005acc <VBS_GetAvBusVoltage_V>
              break;
 80036b6:	2102      	movs	r1, #2
              *regdataU16 = VBS_GetAvBusVoltage_V(BusVoltageSensor[motorID]);
 80036b8:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80036ba:	460b      	mov	r3, r1
              break;
 80036bc:	e65a      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 80036be:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 80036c2:	f47f ae9a 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 80036c6:	4894      	ldr	r0, [pc, #592]	; (8003918 <RI_GetRegCommandParser+0x690>)
 80036c8:	f004 f8c0 	bl	800784c <STO_PLL_GetEstimatedBemf>
              break;
 80036cc:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).beta;
 80036ce:	9005      	str	r0, [sp, #20]
 80036d0:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80036d4:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80036d6:	460b      	mov	r3, r1
              break;
 80036d8:	e64c      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 80036da:	f241 4290 	movw	r2, #5264	; 0x1490
 80036de:	4293      	cmp	r3, r2
 80036e0:	f000 8168 	beq.w	80039b4 <RI_GetRegCommandParser+0x72c>
 80036e4:	f241 42d0 	movw	r2, #5328	; 0x14d0
 80036e8:	4293      	cmp	r3, r2
 80036ea:	f47f ae86 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdataU16 = PID_GetKDDivisorPOW2(pPIDSpeed[motorID]);
 80036ee:	488e      	ldr	r0, [pc, #568]	; (8003928 <RI_GetRegCommandParser+0x6a0>)
 80036f0:	f002 fd42 	bl	8006178 <PID_GetKDDivisorPOW2>
 80036f4:	2102      	movs	r1, #2
 80036f6:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80036f8:	460b      	mov	r3, r1
 80036fa:	e63b      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 80036fc:	f5b3 7f88 	cmp.w	r3, #272	; 0x110
 8003700:	f000 8151 	beq.w	80039a6 <RI_GetRegCommandParser+0x71e>
 8003704:	d91b      	bls.n	800373e <RI_GetRegCommandParser+0x4b6>
 8003706:	f5b3 7fc8 	cmp.w	r3, #400	; 0x190
 800370a:	f000 8144 	beq.w	8003996 <RI_GetRegCommandParser+0x70e>
 800370e:	f5b3 7fe8 	cmp.w	r3, #464	; 0x1d0
 8003712:	f47f ae72 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdata16 = PID_GetKI(pPIDIq[motorID]);
 8003716:	4b82      	ldr	r3, [pc, #520]	; (8003920 <RI_GetRegCommandParser+0x698>)
 8003718:	e797      	b.n	800364a <RI_GetRegCommandParser+0x3c2>
 800371a:	f5b3 6f1d 	cmp.w	r3, #2512	; 0x9d0
 800371e:	f000 8122 	beq.w	8003966 <RI_GetRegCommandParser+0x6de>
 8003722:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003726:	f47f ae68 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdata16 = MCI_GetVqd(pMCIN).d;
 800372a:	4650      	mov	r0, sl
 800372c:	f7fe f8e2 	bl	80018f4 <MCI_GetVqd>
              break;
 8003730:	2102      	movs	r1, #2
              *regdata16 = MCI_GetVqd(pMCIN).d;
 8003732:	900b      	str	r0, [sp, #44]	; 0x2c
 8003734:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003738:	8030      	strh	r0, [r6, #0]
          *size = 2;
 800373a:	460b      	mov	r3, r1
              break;
 800373c:	e61a      	b.n	8003374 <RI_GetRegCommandParser+0xec>
 800373e:	2b90      	cmp	r3, #144	; 0x90
 8003740:	f000 810a 	beq.w	8003958 <RI_GetRegCommandParser+0x6d0>
 8003744:	2bd0      	cmp	r3, #208	; 0xd0
 8003746:	f47f ae58 	bne.w	80033fa <RI_GetRegCommandParser+0x172>
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 800374a:	4877      	ldr	r0, [pc, #476]	; (8003928 <RI_GetRegCommandParser+0x6a0>)
 800374c:	f002 fce4 	bl	8006118 <PID_GetKI>
              break;
 8003750:	2102      	movs	r1, #2
              *regdata16 = PID_GetKI(pPIDSpeed[motorID]);
 8003752:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003754:	460b      	mov	r3, r1
              break;
 8003756:	e60d      	b.n	8003374 <RI_GetRegCommandParser+0xec>
    retVal = MCP_ERROR_STRING_FORMAT;
 8003758:	2006      	movs	r0, #6
 800375a:	e5c6      	b.n	80032ea <RI_GetRegCommandParser+0x62>
            retVal = RI_MovString (PWR_BOARD_NAME[motorID] ,charData, size, freeSpace);
 800375c:	4b73      	ldr	r3, [pc, #460]	; (800392c <RI_GetRegCommandParser+0x6a4>)
 800375e:	681b      	ldr	r3, [r3, #0]
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 8003760:	f993 1000 	ldrsb.w	r1, [r3]
 8003764:	2900      	cmp	r1, #0
 8003766:	d03f      	beq.n	80037e8 <RI_GetRegCommandParser+0x560>
 8003768:	2c01      	cmp	r4, #1
 800376a:	ddf5      	ble.n	8003758 <RI_GetRegCommandParser+0x4d0>
 800376c:	469c      	mov	ip, r3
 800376e:	4630      	mov	r0, r6
 8003770:	f1c6 0201 	rsb	r2, r6, #1
 8003774:	e001      	b.n	800377a <RI_GetRegCommandParser+0x4f2>
 8003776:	42a3      	cmp	r3, r4
 8003778:	daee      	bge.n	8003758 <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 800377a:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 800377e:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 8003782:	1883      	adds	r3, r0, r2
 8003784:	b29b      	uxth	r3, r3
 8003786:	2900      	cmp	r1, #0
 8003788:	d1f5      	bne.n	8003776 <RI_GetRegCommandParser+0x4ee>
 800378a:	e5ef      	b.n	800336c <RI_GetRegCommandParser+0xe4>
 800378c:	4b68      	ldr	r3, [pc, #416]	; (8003930 <RI_GetRegCommandParser+0x6a8>)
 800378e:	f993 1000 	ldrsb.w	r1, [r3]
 8003792:	b349      	cbz	r1, 80037e8 <RI_GetRegCommandParser+0x560>
 8003794:	2c01      	cmp	r4, #1
 8003796:	dddf      	ble.n	8003758 <RI_GetRegCommandParser+0x4d0>
 8003798:	469c      	mov	ip, r3
 800379a:	4630      	mov	r0, r6
 800379c:	f1c6 0201 	rsb	r2, r6, #1
 80037a0:	e001      	b.n	80037a6 <RI_GetRegCommandParser+0x51e>
 80037a2:	42a3      	cmp	r3, r4
 80037a4:	dad8      	bge.n	8003758 <RI_GetRegCommandParser+0x4d0>
    *tempdestString = *tempsrcString;
 80037a6:	f800 1b01 	strb.w	r1, [r0], #1
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80037aa:	f91c 1f01 	ldrsb.w	r1, [ip, #1]!
 80037ae:	1883      	adds	r3, r0, r2
 80037b0:	b29b      	uxth	r3, r3
 80037b2:	2900      	cmp	r1, #0
 80037b4:	d1f5      	bne.n	80037a2 <RI_GetRegCommandParser+0x51a>
 80037b6:	e5d9      	b.n	800336c <RI_GetRegCommandParser+0xe4>
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80037b8:	4650      	mov	r0, sl
 80037ba:	f7fd ffd1 	bl	8001760 <MCI_GetSTMState>
        if (freeSpace >= 2U)
 80037be:	2101      	movs	r1, #1
 80037c0:	b2a4      	uxth	r4, r4
              *data = (uint8_t)MCI_GetSTMState(pMCIN);
 80037c2:	7030      	strb	r0, [r6, #0]
          *size = 1;
 80037c4:	460b      	mov	r3, r1
 80037c6:	e5d5      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 80037c8:	485a      	ldr	r0, [pc, #360]	; (8003934 <RI_GetRegCommandParser+0x6ac>)
 80037ca:	f003 fc91 	bl	80070f0 <RUC_GetNumberOfPhases>
              break;
 80037ce:	2101      	movs	r1, #1
        if (freeSpace >= 2U)
 80037d0:	b2a4      	uxth	r4, r4
              *data = (RevUpControl[motorID] != MC_NULL) ? (uint8_t)RUC_GetNumberOfPhases(RevUpControl[motorID]) : 0U;
 80037d2:	7030      	strb	r0, [r6, #0]
          *size = 1;
 80037d4:	460b      	mov	r3, r1
              break;
 80037d6:	e5cd      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80037d8:	4650      	mov	r0, sl
 80037da:	f7fe f815 	bl	8001808 <MCI_GetControlMode>
              break;
 80037de:	2101      	movs	r1, #1
        if (freeSpace >= 2U)
 80037e0:	b2a4      	uxth	r4, r4
              *data = (uint8_t)MCI_GetControlMode(pMCIN);
 80037e2:	7030      	strb	r0, [r6, #0]
          *size = 1;
 80037e4:	460b      	mov	r3, r1
              break;
 80037e6:	e5c5      	b.n	8003374 <RI_GetRegCommandParser+0xec>
  while ((*tempsrcString != (char_t)0) && (*size < maxSize))
 80037e8:	2101      	movs	r1, #1
  *size= 1U ; /* /0 is the min String size */
 80037ea:	460b      	mov	r3, r1
 80037ec:	e5bf      	b.n	800336e <RI_GetRegCommandParser+0xe6>
        *rawSize = sizeof(ApplicationConfig_reg_t);
 80037ee:	230e      	movs	r3, #14
        if ((*rawSize) +2  > freeSpace)
 80037f0:	2c0f      	cmp	r4, #15
        *rawSize = sizeof(ApplicationConfig_reg_t);
 80037f2:	8033      	strh	r3, [r6, #0]
        if ((*rawSize) +2  > freeSpace)
 80037f4:	f77f ad93 	ble.w	800331e <RI_GetRegCommandParser+0x96>
          memcpy(rawData, ApplicationConfig_reg[motorID], sizeof(ApplicationConfig_reg_t));
 80037f8:	4b4f      	ldr	r3, [pc, #316]	; (8003938 <RI_GetRegCommandParser+0x6b0>)
        if (freeSpace >= 2U)
 80037fa:	b2a4      	uxth	r4, r4
              (void)memcpy(rawData, (uint8_t *)pFOCConfig_reg, sizeof(FOCFwConfig_reg_t));
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	f8d3 c000 	ldr.w	ip, [r3]
 8003802:	6858      	ldr	r0, [r3, #4]
 8003804:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8003808:	f8c2 e008 	str.w	lr, [r2, #8]
 800380c:	f8c2 c000 	str.w	ip, [r2]
 8003810:	6050      	str	r0, [r2, #4]
 8003812:	899b      	ldrh	r3, [r3, #12]
 8003814:	8193      	strh	r3, [r2, #12]
        if (freeSpace >= 2U)
 8003816:	2110      	movs	r1, #16
        *size = (*rawSize) + 2U;
 8003818:	460b      	mov	r3, r1
 800381a:	e5ab      	b.n	8003374 <RI_GetRegCommandParser+0xec>
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 800381c:	2328      	movs	r3, #40	; 0x28
            if (((*rawSize) + 2U) > freeSpace)
 800381e:	2c29      	cmp	r4, #41	; 0x29
            *rawSize = (uint16_t)RUC_MAX_PHASE_NUMBER*8U;
 8003820:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003822:	f67f ad7c 	bls.w	800331e <RI_GetRegCommandParser+0x96>
 8003826:	f04f 0b00 	mov.w	fp, #0
 800382a:	9401      	str	r4, [sp, #4]
 800382c:	465c      	mov	r4, fp
 800382e:	46b3      	mov	fp, r6
                (void)RUC_GetPhase( RevUpControl[motorID] ,i, &revUpPhase);
 8003830:	b2e1      	uxtb	r1, r4
 8003832:	aa15      	add	r2, sp, #84	; 0x54
 8003834:	483f      	ldr	r0, [pc, #252]	; (8003934 <RI_GetRegCommandParser+0x6ac>)
 8003836:	f003 fc5f 	bl	80070f8 <RUC_GetPhase>
                *rpm = (((int32_t)revUpPhase.hFinalMecSpeedUnit) * U_RPM) / SPEED_UNIT; //cstat !MISRAC2012-Rule-11.3
 800383a:	f9bd 2056 	ldrsh.w	r2, [sp, #86]	; 0x56
 800383e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8003842:	0052      	lsls	r2, r2, #1
 8003844:	f8cb 2002 	str.w	r2, [fp, #2]
                *finalTorque = (uint16_t)revUpPhase.hFinalTorque; //cstat !MISRAC2012-Rule-11.3
 8003848:	f8bd 2058 	ldrh.w	r2, [sp, #88]	; 0x58
 800384c:	f8ab 2006 	strh.w	r2, [fp, #6]
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 8003850:	3401      	adds	r4, #1
                *durationms  = revUpPhase.hDurationms;
 8003852:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8003856:	f82b 2f08 	strh.w	r2, [fp, #8]!
              for (i = 0; i <RUC_MAX_PHASE_NUMBER; i++)
 800385a:	2c05      	cmp	r4, #5
 800385c:	d1e8      	bne.n	8003830 <RI_GetRegCommandParser+0x5a8>
        *size = (*rawSize) + 2U;
 800385e:	8833      	ldrh	r3, [r6, #0]
        if (freeSpace >= 2U)
 8003860:	9c01      	ldr	r4, [sp, #4]
        *size = (*rawSize) + 2U;
 8003862:	3302      	adds	r3, #2
 8003864:	b29b      	uxth	r3, r3
        if (freeSpace >= 2U)
 8003866:	b2a4      	uxth	r4, r4
        txData = txData+size;
 8003868:	4619      	mov	r1, r3
        break;
 800386a:	e583      	b.n	8003374 <RI_GetRegCommandParser+0xec>
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 800386c:	230a      	movs	r3, #10
            if (((*rawSize) + 2U) > freeSpace)
 800386e:	2c0b      	cmp	r4, #11
            *rawSize = (uint16_t)sizeof(GlobalConfig_reg_t);
 8003870:	8033      	strh	r3, [r6, #0]
            if (((*rawSize) + 2U) > freeSpace)
 8003872:	f67f ad54 	bls.w	800331e <RI_GetRegCommandParser+0x96>
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003876:	4b31      	ldr	r3, [pc, #196]	; (800393c <RI_GetRegCommandParser+0x6b4>)
 8003878:	6818      	ldr	r0, [r3, #0]
 800387a:	6010      	str	r0, [r2, #0]
        if (freeSpace >= 2U)
 800387c:	210c      	movs	r1, #12
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 800387e:	6858      	ldr	r0, [r3, #4]
 8003880:	891b      	ldrh	r3, [r3, #8]
 8003882:	8113      	strh	r3, [r2, #8]
        if (freeSpace >= 2U)
 8003884:	b2a4      	uxth	r4, r4
              (void)memcpy(rawData, &globalConfig_reg, sizeof(GlobalConfig_reg_t));
 8003886:	6050      	str	r0, [r2, #4]
        *size = (*rawSize) + 2U;
 8003888:	460b      	mov	r3, r1
 800388a:	e573      	b.n	8003374 <RI_GetRegCommandParser+0xec>
            *rpm = (((int32_t)MCI_GetLastRampFinalSpeed(pMCIN) * U_RPM) / (int32_t)SPEED_UNIT);
 800388c:	4650      	mov	r0, sl
 800388e:	f7fd ffdf 	bl	8001850 <MCI_GetLastRampFinalSpeed>
 8003892:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8003896:	0040      	lsls	r0, r0, #1
 8003898:	f8c6 0002 	str.w	r0, [r6, #2]
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 800389c:	4650      	mov	r0, sl
 800389e:	f7fd ffdf 	bl	8001860 <MCI_GetLastRampFinalDuration>
            *rawSize = 6;
 80038a2:	2306      	movs	r3, #6
        if (freeSpace >= 2U)
 80038a4:	2108      	movs	r1, #8
            *rawSize = 6;
 80038a6:	8033      	strh	r3, [r6, #0]
        if (freeSpace >= 2U)
 80038a8:	b2a4      	uxth	r4, r4
            *duration = MCI_GetLastRampFinalDuration(pMCIN);
 80038aa:	80f0      	strh	r0, [r6, #6]
        *size = (*rawSize) + 2U;
 80038ac:	460b      	mov	r3, r1
 80038ae:	e561      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata32 = (((int32_t)MCI_GetMecSpeedRefUnit(pMCIN) * U_RPM) / SPEED_UNIT);
 80038b0:	4650      	mov	r0, sl
 80038b2:	f7fd ffe3 	bl	800187c <MCI_GetMecSpeedRefUnit>
 80038b6:	e5be      	b.n	8003436 <RI_GetRegCommandParser+0x1ae>
              *regdata32 = STO_PLL_GetEstimatedBemfLevel(stoPLLSensor[motorID]);
 80038b8:	4817      	ldr	r0, [pc, #92]	; (8003918 <RI_GetRegCommandParser+0x690>)
 80038ba:	f003 fffd 	bl	80078b8 <STO_PLL_GetEstimatedBemfLevel>
 80038be:	2104      	movs	r1, #4
 80038c0:	6030      	str	r0, [r6, #0]
          *size = 4;
 80038c2:	460b      	mov	r3, r1
 80038c4:	e556      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdataU32 = MCI_GetFaultState(pMCIN);
 80038c6:	4650      	mov	r0, sl
 80038c8:	f7fd ff98 	bl	80017fc <MCI_GetFaultState>
 80038cc:	2104      	movs	r1, #4
 80038ce:	6030      	str	r0, [r6, #0]
          *size = 4;
 80038d0:	460b      	mov	r3, r1
 80038d2:	e54f      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              MotorConfig_reg_t const *pMotorConfig_reg = MotorConfig_reg[motorID];
 80038d4:	4b1a      	ldr	r3, [pc, #104]	; (8003940 <RI_GetRegCommandParser+0x6b8>)
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f103 0b30 	add.w	fp, r3, #48	; 0x30
 80038dc:	f8d3 c000 	ldr.w	ip, [r3]
 80038e0:	6858      	ldr	r0, [r3, #4]
 80038e2:	6899      	ldr	r1, [r3, #8]
 80038e4:	f8d3 e00c 	ldr.w	lr, [r3, #12]
 80038e8:	f8c2 e00c 	str.w	lr, [r2, #12]
 80038ec:	3310      	adds	r3, #16
 80038ee:	455b      	cmp	r3, fp
 80038f0:	f8c2 c000 	str.w	ip, [r2]
 80038f4:	6050      	str	r0, [r2, #4]
 80038f6:	6091      	str	r1, [r2, #8]
 80038f8:	f102 0210 	add.w	r2, r2, #16
 80038fc:	d1ee      	bne.n	80038dc <RI_GetRegCommandParser+0x654>
 80038fe:	6859      	ldr	r1, [r3, #4]
 8003900:	6818      	ldr	r0, [r3, #0]
 8003902:	689b      	ldr	r3, [r3, #8]
 8003904:	6051      	str	r1, [r2, #4]
        if (freeSpace >= 2U)
 8003906:	213e      	movs	r1, #62	; 0x3e
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 8003908:	6093      	str	r3, [r2, #8]
        if (freeSpace >= 2U)
 800390a:	b2a4      	uxth	r4, r4
              (void)memcpy(rawData, (uint8_t *)pMotorConfig_reg, sizeof(MotorConfig_reg_t));
 800390c:	6010      	str	r0, [r2, #0]
        *size = (*rawSize) + 2U;
 800390e:	460b      	mov	r3, r1
 8003910:	e530      	b.n	8003374 <RI_GetRegCommandParser+0xec>
  uint8_t retVal = MCP_CMD_NOK;
 8003912:	2001      	movs	r0, #1
 8003914:	e4e9      	b.n	80032ea <RI_GetRegCommandParser+0x62>
 8003916:	bf00      	nop
 8003918:	200003b0 	.word	0x200003b0
 800391c:	20000570 	.word	0x20000570
 8003920:	20000574 	.word	0x20000574
 8003924:	20000000 	.word	0x20000000
 8003928:	20000134 	.word	0x20000134
 800392c:	2000058c 	.word	0x2000058c
 8003930:	08007cd0 	.word	0x08007cd0
 8003934:	20000324 	.word	0x20000324
 8003938:	20000580 	.word	0x20000580
 800393c:	08007d58 	.word	0x08007d58
 8003940:	20000588 	.word	0x20000588
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 8003944:	4650      	mov	r0, sl
 8003946:	f7fd ffc7 	bl	80018d8 <MCI_GetIqdref>
              break;
 800394a:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqdref(pMCIN).d;
 800394c:	900d      	str	r0, [sp, #52]	; 0x34
 800394e:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003952:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003954:	460b      	mov	r3, r1
              break;
 8003956:	e50d      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKP(pPIDSpeed[motorID]);
 8003958:	4864      	ldr	r0, [pc, #400]	; (8003aec <RI_GetRegCommandParser+0x864>)
 800395a:	f002 fbd9 	bl	8006110 <PID_GetKP>
 800395e:	2102      	movs	r1, #2
 8003960:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003962:	460b      	mov	r3, r1
 8003964:	e506      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003966:	4650      	mov	r0, sl
 8003968:	f7fd ffc4 	bl	80018f4 <MCI_GetVqd>
              break;
 800396c:	2102      	movs	r1, #2
              *regdata16 = MCI_GetVqd(pMCIN).q;
 800396e:	900c      	str	r0, [sp, #48]	; 0x30
          *size = 2;
 8003970:	460b      	mov	r3, r1
              *regdata16 = MCI_GetVqd(pMCIN).q;
 8003972:	8030      	strh	r0, [r6, #0]
              break;
 8003974:	e4fe      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDId[motorID]);
 8003976:	4b5e      	ldr	r3, [pc, #376]	; (8003af0 <RI_GetRegCommandParser+0x868>)
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 8003978:	6818      	ldr	r0, [r3, #0]
 800397a:	f002 fbdd 	bl	8006138 <PID_GetKIDivisorPOW2>
 800397e:	2102      	movs	r1, #2
 8003980:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003982:	460b      	mov	r3, r1
 8003984:	e4f6      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDId[motorID]);
 8003986:	4b5a      	ldr	r3, [pc, #360]	; (8003af0 <RI_GetRegCommandParser+0x868>)
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8003988:	6818      	ldr	r0, [r3, #0]
 800398a:	f002 fbcb 	bl	8006124 <PID_GetKPDivisorPOW2>
 800398e:	2102      	movs	r1, #2
 8003990:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003992:	460b      	mov	r3, r1
 8003994:	e4ee      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKP(pPIDIq[motorID]);
 8003996:	4b57      	ldr	r3, [pc, #348]	; (8003af4 <RI_GetRegCommandParser+0x86c>)
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 8003998:	6818      	ldr	r0, [r3, #0]
 800399a:	f002 fbb9 	bl	8006110 <PID_GetKP>
              break;
 800399e:	2102      	movs	r1, #2
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80039a0:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80039a2:	460b      	mov	r3, r1
              break;
 80039a4:	e4e6      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 80039a6:	4851      	ldr	r0, [pc, #324]	; (8003aec <RI_GetRegCommandParser+0x864>)
 80039a8:	f002 fbe2 	bl	8006170 <PID_GetKD>
              break;
 80039ac:	2102      	movs	r1, #2
              *regdata16 = PID_GetKD(pPIDSpeed[motorID]);
 80039ae:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80039b0:	460b      	mov	r3, r1
              break;
 80039b2:	e4df      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdataU16 = (uint16_t)PID_GetKIDivisorPOW2(pPIDSpeed[motorID]);
 80039b4:	484d      	ldr	r0, [pc, #308]	; (8003aec <RI_GetRegCommandParser+0x864>)
 80039b6:	f002 fbbf 	bl	8006138 <PID_GetKIDivisorPOW2>
 80039ba:	2102      	movs	r1, #2
 80039bc:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80039be:	460b      	mov	r3, r1
 80039c0:	e4d8      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKP (&stoPLLSensor[motorID]->PIRegulator);
 80039c2:	484d      	ldr	r0, [pc, #308]	; (8003af8 <RI_GetRegCommandParser+0x870>)
 80039c4:	f002 fba4 	bl	8006110 <PID_GetKP>
 80039c8:	2102      	movs	r1, #2
 80039ca:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80039cc:	460b      	mov	r3, r1
 80039ce:	e4d1      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdataU16 = PID_GetKIDivisorPOW2(pPIDIq[motorID]);
 80039d0:	4b48      	ldr	r3, [pc, #288]	; (8003af4 <RI_GetRegCommandParser+0x86c>)
 80039d2:	e7d1      	b.n	8003978 <RI_GetRegCommandParser+0x6f0>
              *regdata16 = PID_GetKP(pPIDId[motorID]);
 80039d4:	4b46      	ldr	r3, [pc, #280]	; (8003af0 <RI_GetRegCommandParser+0x868>)
 80039d6:	e7df      	b.n	8003998 <RI_GetRegCommandParser+0x710>
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80039d8:	4650      	mov	r0, sl
 80039da:	f7fd ff99 	bl	8001910 <MCI_GetValphabeta>
              break;
 80039de:	2102      	movs	r1, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).beta;
 80039e0:	9009      	str	r0, [sp, #36]	; 0x24
 80039e2:	f3c0 400f 	ubfx	r0, r0, #16, #16
 80039e6:	8030      	strh	r0, [r6, #0]
          *size = 2;
 80039e8:	460b      	mov	r3, r1
              break;
 80039ea:	e4c3      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80039ec:	4650      	mov	r0, sl
 80039ee:	f7fd ff8f 	bl	8001910 <MCI_GetValphabeta>
              break;
 80039f2:	2102      	movs	r1, #2
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80039f4:	900a      	str	r0, [sp, #40]	; 0x28
          *size = 2;
 80039f6:	460b      	mov	r3, r1
              *regdata16 = MCI_GetValphabeta(pMCIN).alpha;
 80039f8:	8030      	strh	r0, [r6, #0]
              break;
 80039fa:	e4bb      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetIab(pMCIN).b;
 80039fc:	4650      	mov	r0, sl
 80039fe:	f7fd ff41 	bl	8001884 <MCI_GetIab>
              break;
 8003a02:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIab(pMCIN).b;
 8003a04:	9013      	str	r0, [sp, #76]	; 0x4c
 8003a06:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003a0a:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003a0c:	460b      	mov	r3, r1
              break;
 8003a0e:	e4b1      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKI (&stoPLLSensor[motorID]->PIRegulator);
 8003a10:	4839      	ldr	r0, [pc, #228]	; (8003af8 <RI_GetRegCommandParser+0x870>)
 8003a12:	f002 fb81 	bl	8006118 <PID_GetKI>
 8003a16:	2102      	movs	r1, #2
 8003a18:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003a1a:	460b      	mov	r3, r1
 8003a1c:	e4aa      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8003a1e:	4b37      	ldr	r3, [pc, #220]	; (8003afc <RI_GetRegCommandParser+0x874>)
 8003a20:	6818      	ldr	r0, [r3, #0]
 8003a22:	f002 fb57 	bl	80060d4 <NTC_GetAvTemp_C>
              break;
 8003a26:	2102      	movs	r1, #2
              *regdata16 = NTC_GetAvTemp_C(pTemperatureSensor[motorID]);
 8003a28:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003a2a:	460b      	mov	r3, r1
              break;
 8003a2c:	e4a2      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003a2e:	4650      	mov	r0, sl
 8003a30:	f7fd ff36 	bl	80018a0 <MCI_GetIalphabeta>
              break;
 8003a34:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003a36:	9012      	str	r0, [sp, #72]	; 0x48
          *size = 2;
 8003a38:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIalphabeta(pMCIN).alpha;
 8003a3a:	8030      	strh	r0, [r6, #0]
              break;
 8003a3c:	e49a      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKD(pPIDIq[motorID]);
 8003a3e:	4b2d      	ldr	r3, [pc, #180]	; (8003af4 <RI_GetRegCommandParser+0x86c>)
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003a40:	6818      	ldr	r0, [r3, #0]
 8003a42:	f002 fb95 	bl	8006170 <PID_GetKD>
              break;
 8003a46:	2102      	movs	r1, #2
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003a48:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003a4a:	460b      	mov	r3, r1
              break;
 8003a4c:	e492      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]); //cstat !MISRAC2012-Rule-11.3
 8003a4e:	4b2c      	ldr	r3, [pc, #176]	; (8003b00 <RI_GetRegCommandParser+0x878>)
 8003a50:	6818      	ldr	r0, [r3, #0]
 8003a52:	f002 fafb 	bl	800604c <MPM_GetAvrgElMotorPowerW>
              break;
 8003a56:	2102      	movs	r1, #2
              *regdata16 = MPM_GetAvrgElMotorPowerW((MotorPowMeas_Handle_t *)pMPM[motorID]); //cstat !MISRAC2012-Rule-11.3
 8003a58:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003a5a:	460b      	mov	r3, r1
              break;
 8003a5c:	e48a      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8003a5e:	4650      	mov	r0, sl
 8003a60:	f7fd ff2c 	bl	80018bc <MCI_GetIqd>
              break;
 8003a64:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqd(pMCIN).d;
 8003a66:	900f      	str	r0, [sp, #60]	; 0x3c
 8003a68:	f3c0 400f 	ubfx	r0, r0, #16, #16
 8003a6c:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003a6e:	460b      	mov	r3, r1
              break;
 8003a70:	e480      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003a72:	4650      	mov	r0, sl
 8003a74:	f7fd ff22 	bl	80018bc <MCI_GetIqd>
              break;
 8003a78:	2102      	movs	r1, #2
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003a7a:	9010      	str	r0, [sp, #64]	; 0x40
          *size = 2;
 8003a7c:	460b      	mov	r3, r1
              *regdata16 = MCI_GetIqd(pMCIN).q;
 8003a7e:	8030      	strh	r0, [r6, #0]
              break;
 8003a80:	e478      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003a82:	4820      	ldr	r0, [pc, #128]	; (8003b04 <RI_GetRegCommandParser+0x87c>)
 8003a84:	f003 feee 	bl	8007864 <STO_PLL_GetEstimatedCurrent>
              break;
 8003a88:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003a8a:	9008      	str	r0, [sp, #32]
          *size = 2;
 8003a8c:	460b      	mov	r3, r1
              *regdata16 = STO_PLL_GetEstimatedCurrent(stoPLLSensor[motorID]).alpha;
 8003a8e:	8030      	strh	r0, [r6, #0]
              break;
 8003a90:	e470      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003a92:	481c      	ldr	r0, [pc, #112]	; (8003b04 <RI_GetRegCommandParser+0x87c>)
 8003a94:	f003 feda 	bl	800784c <STO_PLL_GetEstimatedBemf>
              break;
 8003a98:	2102      	movs	r1, #2
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003a9a:	9006      	str	r0, [sp, #24]
          *size = 2;
 8003a9c:	460b      	mov	r3, r1
              *regdata16 = STO_PLL_GetEstimatedBemf(stoPLLSensor[motorID]).alpha;
 8003a9e:	8030      	strh	r0, [r6, #0]
              break;
 8003aa0:	e468      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003aa2:	4818      	ldr	r0, [pc, #96]	; (8003b04 <RI_GetRegCommandParser+0x87c>)
 8003aa4:	f003 fb7a 	bl	800719c <SPD_GetS16Speed>
              break;
 8003aa8:	2102      	movs	r1, #2
              *regdata16 = SPD_GetS16Speed((SpeednPosFdbk_Handle_t *)stoPLLSensor[motorID]);
 8003aaa:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003aac:	460b      	mov	r3, r1
              break;
 8003aae:	e461      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdataU16 = PID_GetKIDivisorPOW2(&stoPLLSensor[motorID]->PIRegulator);
 8003ab0:	4811      	ldr	r0, [pc, #68]	; (8003af8 <RI_GetRegCommandParser+0x870>)
 8003ab2:	f002 fb41 	bl	8006138 <PID_GetKIDivisorPOW2>
 8003ab6:	2102      	movs	r1, #2
 8003ab8:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003aba:	460b      	mov	r3, r1
 8003abc:	e45a      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdataU16 = PID_GetKPDivisorPOW2(pPIDIq[motorID]);
 8003abe:	4b0d      	ldr	r3, [pc, #52]	; (8003af4 <RI_GetRegCommandParser+0x86c>)
 8003ac0:	e762      	b.n	8003988 <RI_GetRegCommandParser+0x700>
              *regdataU16 = (uint16_t)PID_GetKPDivisorPOW2(pPIDSpeed[motorID]);
 8003ac2:	480a      	ldr	r0, [pc, #40]	; (8003aec <RI_GetRegCommandParser+0x864>)
 8003ac4:	f002 fb2e 	bl	8006124 <PID_GetKPDivisorPOW2>
 8003ac8:	2102      	movs	r1, #2
 8003aca:	8030      	strh	r0, [r6, #0]
          *size = 2;
 8003acc:	460b      	mov	r3, r1
 8003ace:	e451      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              STO_PLL_GetObserverGains(stoPLLSensor[motorID], &hC1, &hC2);
 8003ad0:	f10d 010a 	add.w	r1, sp, #10
 8003ad4:	480b      	ldr	r0, [pc, #44]	; (8003b04 <RI_GetRegCommandParser+0x87c>)
 8003ad6:	aa15      	add	r2, sp, #84	; 0x54
 8003ad8:	f003 fed8 	bl	800788c <STO_PLL_GetObserverGains>
              *regdata16 = hC1;
 8003adc:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8003ae0:	8033      	strh	r3, [r6, #0]
              break;
 8003ae2:	2102      	movs	r1, #2
          *size = 2;
 8003ae4:	460b      	mov	r3, r1
 8003ae6:	e445      	b.n	8003374 <RI_GetRegCommandParser+0xec>
              *regdata16 = PID_GetKD(pPIDId[motorID]);
 8003ae8:	4b01      	ldr	r3, [pc, #4]	; (8003af0 <RI_GetRegCommandParser+0x868>)
 8003aea:	e7a9      	b.n	8003a40 <RI_GetRegCommandParser+0x7b8>
 8003aec:	20000134 	.word	0x20000134
 8003af0:	20000570 	.word	0x20000570
 8003af4:	20000574 	.word	0x20000574
 8003af8:	200003e4 	.word	0x200003e4
 8003afc:	2000057c 	.word	0x2000057c
 8003b00:	2000056c 	.word	0x2000056c
 8003b04:	200003b0 	.word	0x200003b0

08003b08 <RI_GetIDSize>:
  return (retVal);
}

uint8_t RI_GetIDSize(uint16_t dataID)
{
  uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;
 8003b08:	f000 0038 	and.w	r0, r0, #56	; 0x38
 8003b0c:	3808      	subs	r0, #8
 8003b0e:	b2c0      	uxtb	r0, r0
 8003b10:	2810      	cmp	r0, #16
 8003b12:	bf9a      	itte	ls
 8003b14:	4b01      	ldrls	r3, [pc, #4]	; (8003b1c <RI_GetIDSize+0x14>)
 8003b16:	5c18      	ldrbls	r0, [r3, r0]
 8003b18:	2000      	movhi	r0, #0
      break;
    }
  }

  return (result);
}
 8003b1a:	4770      	bx	lr
 8003b1c:	08007fdc 	.word	0x08007fdc

08003b20 <RI_GetPtrReg>:

    uint16_t regID = dataID & REG_MASK;
    MCI_Handle_t *pMCIN = &Mci[vmotorID];
    uint8_t typeID = ((uint8_t)dataID) & TYPE_MASK;

    switch (typeID)
 8003b20:	f000 0338 	and.w	r3, r0, #56	; 0x38
 8003b24:	2b10      	cmp	r3, #16
 8003b26:	d003      	beq.n	8003b30 <RI_GetPtrReg+0x10>
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_beta_est);
            break;
          }
          default:
          {
            *dataPtr = &nullData16;
 8003b28:	4b48      	ldr	r3, [pc, #288]	; (8003c4c <RI_GetPtrReg+0x12c>)
 8003b2a:	600b      	str	r3, [r1, #0]
            retVal = MCP_ERROR_UNKNOWN_REG;
 8003b2c:	2005      	movs	r0, #5
    }
#ifdef NULL_PTR_REG_INT
  }
#endif
  return (retVal);
}
 8003b2e:	4770      	bx	lr
    uint16_t regID = dataID & REG_MASK;
 8003b30:	f020 0007 	bic.w	r0, r0, #7
 8003b34:	f5b0 6f1d 	cmp.w	r0, #2512	; 0x9d0
 8003b38:	b283      	uxth	r3, r0
 8003b3a:	d05c      	beq.n	8003bf6 <RI_GetPtrReg+0xd6>
 8003b3c:	d810      	bhi.n	8003b60 <RI_GetPtrReg+0x40>
 8003b3e:	f5b3 6f0d 	cmp.w	r3, #2256	; 0x8d0
 8003b42:	d05e      	beq.n	8003c02 <RI_GetPtrReg+0xe2>
 8003b44:	d826      	bhi.n	8003b94 <RI_GetPtrReg+0x74>
 8003b46:	f5b3 6f05 	cmp.w	r3, #2128	; 0x850
 8003b4a:	d060      	beq.n	8003c0e <RI_GetPtrReg+0xee>
 8003b4c:	d916      	bls.n	8003b7c <RI_GetPtrReg+0x5c>
 8003b4e:	f5b3 6f09 	cmp.w	r3, #2192	; 0x890
 8003b52:	d1e9      	bne.n	8003b28 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003b54:	4b3e      	ldr	r3, [pc, #248]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003b56:	685b      	ldr	r3, [r3, #4]
 8003b58:	3306      	adds	r3, #6
  uint8_t retVal = MCP_CMD_OK;
 8003b5a:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.beta);
 8003b5c:	600b      	str	r3, [r1, #0]
            break;
 8003b5e:	4770      	bx	lr
 8003b60:	f5b3 6f35 	cmp.w	r3, #2896	; 0xb50
 8003b64:	d059      	beq.n	8003c1a <RI_GetPtrReg+0xfa>
 8003b66:	d928      	bls.n	8003bba <RI_GetPtrReg+0x9a>
 8003b68:	f5b3 6f45 	cmp.w	r3, #3152	; 0xc50
 8003b6c:	d059      	beq.n	8003c22 <RI_GetPtrReg+0x102>
 8003b6e:	f5b3 6f49 	cmp.w	r3, #3216	; 0xc90
 8003b72:	d11b      	bne.n	8003bac <RI_GetPtrReg+0x8c>
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_beta_est);
 8003b74:	4b37      	ldr	r3, [pc, #220]	; (8003c54 <RI_GetPtrReg+0x134>)
 8003b76:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003b78:	2000      	movs	r0, #0
            break;
 8003b7a:	4770      	bx	lr
 8003b7c:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 8003b80:	d05f      	beq.n	8003c42 <RI_GetPtrReg+0x122>
 8003b82:	f5b3 6f01 	cmp.w	r3, #2064	; 0x810
 8003b86:	d1cf      	bne.n	8003b28 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003b88:	4b31      	ldr	r3, [pc, #196]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003b8a:	685b      	ldr	r3, [r3, #4]
 8003b8c:	3302      	adds	r3, #2
  uint8_t retVal = MCP_CMD_OK;
 8003b8e:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iab.b);
 8003b90:	600b      	str	r3, [r1, #0]
            break;
 8003b92:	4770      	bx	lr
 8003b94:	f5b3 6f15 	cmp.w	r3, #2384	; 0x950
 8003b98:	d047      	beq.n	8003c2a <RI_GetPtrReg+0x10a>
 8003b9a:	f5b3 6f19 	cmp.w	r3, #2448	; 0x990
 8003b9e:	d118      	bne.n	8003bd2 <RI_GetPtrReg+0xb2>
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003ba0:	4b2b      	ldr	r3, [pc, #172]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	3312      	adds	r3, #18
  uint8_t retVal = MCP_CMD_OK;
 8003ba6:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.d);
 8003ba8:	600b      	str	r3, [r1, #0]
            break;
 8003baa:	4770      	bx	lr
 8003bac:	f5b3 6f39 	cmp.w	r3, #2960	; 0xb90
 8003bb0:	d1ba      	bne.n	8003b28 <RI_GetPtrReg+0x8>
            *dataPtr = &(stoPLLSensor[vmotorID]->_Super.hAvrMecSpeedUnit);
 8003bb2:	4b29      	ldr	r3, [pc, #164]	; (8003c58 <RI_GetPtrReg+0x138>)
 8003bb4:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003bb6:	2000      	movs	r0, #0
            break;
 8003bb8:	4770      	bx	lr
 8003bba:	f5b3 6f25 	cmp.w	r3, #2640	; 0xa50
 8003bbe:	d03a      	beq.n	8003c36 <RI_GetPtrReg+0x116>
 8003bc0:	f5b3 6f29 	cmp.w	r3, #2704	; 0xa90
 8003bc4:	d10e      	bne.n	8003be4 <RI_GetPtrReg+0xc4>
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003bc6:	4b22      	ldr	r3, [pc, #136]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003bc8:	685b      	ldr	r3, [r3, #4]
 8003bca:	331c      	adds	r3, #28
  uint8_t retVal = MCP_CMD_OK;
 8003bcc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.beta);
 8003bce:	600b      	str	r3, [r1, #0]
            break;
 8003bd0:	4770      	bx	lr
 8003bd2:	f5b3 6f11 	cmp.w	r3, #2320	; 0x910
 8003bd6:	d1a7      	bne.n	8003b28 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003bd8:	4b1d      	ldr	r3, [pc, #116]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003bda:	685b      	ldr	r3, [r3, #4]
 8003bdc:	330e      	adds	r3, #14
  uint8_t retVal = MCP_CMD_OK;
 8003bde:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.d);
 8003be0:	600b      	str	r3, [r1, #0]
            break;
 8003be2:	4770      	bx	lr
 8003be4:	f5b3 6f21 	cmp.w	r3, #2576	; 0xa10
 8003be8:	d19e      	bne.n	8003b28 <RI_GetPtrReg+0x8>
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003bea:	4b19      	ldr	r3, [pc, #100]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003bec:	685b      	ldr	r3, [r3, #4]
 8003bee:	3318      	adds	r3, #24
  uint8_t retVal = MCP_CMD_OK;
 8003bf0:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.d);
 8003bf2:	600b      	str	r3, [r1, #0]
            break;
 8003bf4:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003bf6:	4b16      	ldr	r3, [pc, #88]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	3316      	adds	r3, #22
  uint8_t retVal = MCP_CMD_OK;
 8003bfc:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Vqd.q);
 8003bfe:	600b      	str	r3, [r1, #0]
            break;
 8003c00:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003c02:	4b13      	ldr	r3, [pc, #76]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	330c      	adds	r3, #12
  uint8_t retVal = MCP_CMD_OK;
 8003c08:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqd.q);
 8003c0a:	600b      	str	r3, [r1, #0]
            break;
 8003c0c:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003c0e:	4b10      	ldr	r3, [pc, #64]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003c10:	685b      	ldr	r3, [r3, #4]
 8003c12:	3304      	adds	r3, #4
  uint8_t retVal = MCP_CMD_OK;
 8003c14:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Ialphabeta.alpha);
 8003c16:	600b      	str	r3, [r1, #0]
            break;
 8003c18:	4770      	bx	lr
            *dataPtr = &(stoPLLSensor[vmotorID]->_Super.hElAngle);
 8003c1a:	4b10      	ldr	r3, [pc, #64]	; (8003c5c <RI_GetPtrReg+0x13c>)
 8003c1c:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003c1e:	2000      	movs	r0, #0
            break;
 8003c20:	4770      	bx	lr
            *dataPtr = &(stoPLLSensor[vmotorID]->hBemf_alfa_est);
 8003c22:	4b0f      	ldr	r3, [pc, #60]	; (8003c60 <RI_GetPtrReg+0x140>)
 8003c24:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003c26:	2000      	movs	r0, #0
            break;
 8003c28:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003c2a:	4b09      	ldr	r3, [pc, #36]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003c2c:	685b      	ldr	r3, [r3, #4]
 8003c2e:	3310      	adds	r3, #16
  uint8_t retVal = MCP_CMD_OK;
 8003c30:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Iqdref.q);
 8003c32:	600b      	str	r3, [r1, #0]
            break;
 8003c34:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003c38:	685b      	ldr	r3, [r3, #4]
 8003c3a:	331a      	adds	r3, #26
  uint8_t retVal = MCP_CMD_OK;
 8003c3c:	2000      	movs	r0, #0
            *dataPtr = &(pMCIN->pFOCVars->Valphabeta.alpha);
 8003c3e:	600b      	str	r3, [r1, #0]
            break;
 8003c40:	4770      	bx	lr
            *dataPtr = &(pMCIN->pFOCVars->Iab.a);
 8003c42:	4b03      	ldr	r3, [pc, #12]	; (8003c50 <RI_GetPtrReg+0x130>)
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	600b      	str	r3, [r1, #0]
  uint8_t retVal = MCP_CMD_OK;
 8003c48:	2000      	movs	r0, #0
             break;
 8003c4a:	4770      	bx	lr
 8003c4c:	20001bb8 	.word	0x20001bb8
 8003c50:	2000083c 	.word	0x2000083c
 8003c54:	20000422 	.word	0x20000422
 8003c58:	200003bc 	.word	0x200003bc
 8003c5c:	200003b4 	.word	0x200003b4
 8003c60:	20000420 	.word	0x20000420

08003c64 <RCM_RegisterRegConv>:

    /* Parse the array to be sure that same
     * conversion does not already exist*/
    while (i < RCM_MAX_CONV)
    {
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c64:	4b6b      	ldr	r3, [pc, #428]	; (8003e14 <RCM_RegisterRegConv+0x1b0>)
 8003c66:	681a      	ldr	r2, [r3, #0]
{
 8003c68:	b570      	push	{r4, r5, r6, lr}
 8003c6a:	4601      	mov	r1, r0
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c6c:	2a00      	cmp	r2, #0
 8003c6e:	d02f      	beq.n	8003cd0 <RCM_RegisterRegConv+0x6c>
        /* Nothing to do */
      }
      /* Ticket 64042 : If RCM_handle_array [i] is null access to data member will cause Memory Fault. */
      if (RCM_handle_array [i] != 0)
      {
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c70:	f890 c004 	ldrb.w	ip, [r0, #4]
 8003c74:	7910      	ldrb	r0, [r2, #4]
 8003c76:	4584      	cmp	ip, r0
 8003c78:	d01d      	beq.n	8003cb6 <RCM_RegisterRegConv+0x52>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c7a:	685c      	ldr	r4, [r3, #4]
 8003c7c:	2c00      	cmp	r4, #0
 8003c7e:	f000 80ac 	beq.w	8003dda <RCM_RegisterRegConv+0x176>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c82:	7922      	ldrb	r2, [r4, #4]
 8003c84:	4562      	cmp	r2, ip
  uint8_t handle = 255U;
 8003c86:	f04f 00ff 	mov.w	r0, #255	; 0xff
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c8a:	d02b      	beq.n	8003ce4 <RCM_RegisterRegConv+0x80>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c8c:	689c      	ldr	r4, [r3, #8]
 8003c8e:	2c00      	cmp	r4, #0
 8003c90:	f000 808f 	beq.w	8003db2 <RCM_RegisterRegConv+0x14e>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003c94:	7922      	ldrb	r2, [r4, #4]
 8003c96:	4562      	cmp	r2, ip
 8003c98:	d02a      	beq.n	8003cf0 <RCM_RegisterRegConv+0x8c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003c9a:	68dc      	ldr	r4, [r3, #12]
 8003c9c:	2c00      	cmp	r4, #0
 8003c9e:	f000 8091 	beq.w	8003dc4 <RCM_RegisterRegConv+0x160>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003ca2:	7922      	ldrb	r2, [r4, #4]
 8003ca4:	4562      	cmp	r2, ip
 8003ca6:	f000 8092 	beq.w	8003dce <RCM_RegisterRegConv+0x16a>
      {
        /* Nothing to do */
      }
      i++;
    }
    if (handle < RCM_MAX_CONV)
 8003caa:	2803      	cmp	r0, #3
 8003cac:	bf88      	it	hi
 8003cae:	20ff      	movhi	r0, #255	; 0xff
 8003cb0:	f240 80a1 	bls.w	8003df6 <RCM_RegisterRegConv+0x192>
    }
#ifdef NULL_PTR_REG_CON_MNG
  }
#endif
  return (handle);
}
 8003cb4:	bd70      	pop	{r4, r5, r6, pc}
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003cb6:	6810      	ldr	r0, [r2, #0]
 8003cb8:	680a      	ldr	r2, [r1, #0]
 8003cba:	4290      	cmp	r0, r2
 8003cbc:	d01e      	beq.n	8003cfc <RCM_RegisterRegConv+0x98>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003cbe:	685c      	ldr	r4, [r3, #4]
 8003cc0:	2c00      	cmp	r4, #0
 8003cc2:	d1de      	bne.n	8003c82 <RCM_RegisterRegConv+0x1e>
 8003cc4:	689c      	ldr	r4, [r3, #8]
 8003cc6:	2c00      	cmp	r4, #0
 8003cc8:	f000 809a 	beq.w	8003e00 <RCM_RegisterRegConv+0x19c>
      i++;
 8003ccc:	2001      	movs	r0, #1
 8003cce:	e7e1      	b.n	8003c94 <RCM_RegisterRegConv+0x30>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003cd0:	685c      	ldr	r4, [r3, #4]
 8003cd2:	2c00      	cmp	r4, #0
 8003cd4:	f000 808d 	beq.w	8003df2 <RCM_RegisterRegConv+0x18e>
 8003cd8:	f890 c004 	ldrb.w	ip, [r0, #4]
    uint8_t i = 0;
 8003cdc:	4610      	mov	r0, r2
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003cde:	7922      	ldrb	r2, [r4, #4]
 8003ce0:	4562      	cmp	r2, ip
 8003ce2:	d1d3      	bne.n	8003c8c <RCM_RegisterRegConv+0x28>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003ce4:	6824      	ldr	r4, [r4, #0]
 8003ce6:	680a      	ldr	r2, [r1, #0]
 8003ce8:	4294      	cmp	r4, r2
 8003cea:	d1cf      	bne.n	8003c8c <RCM_RegisterRegConv+0x28>
      i++;
 8003cec:	2001      	movs	r0, #1
    if (handle < RCM_MAX_CONV)
 8003cee:	e006      	b.n	8003cfe <RCM_RegisterRegConv+0x9a>
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003cf0:	6824      	ldr	r4, [r4, #0]
 8003cf2:	680a      	ldr	r2, [r1, #0]
 8003cf4:	4294      	cmp	r4, r2
 8003cf6:	d1d0      	bne.n	8003c9a <RCM_RegisterRegConv+0x36>
      i++;
 8003cf8:	2002      	movs	r0, #2
 8003cfa:	e000      	b.n	8003cfe <RCM_RegisterRegConv+0x9a>
    uint8_t i = 0;
 8003cfc:	2000      	movs	r0, #0
      RCM_handle_array [handle] = regConv;
 8003cfe:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
  return (READ_BIT(ADCx->CR2, ADC_CR2_ADON) == (ADC_CR2_ADON));
 8003d02:	6893      	ldr	r3, [r2, #8]
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003d04:	4c44      	ldr	r4, [pc, #272]	; (8003e18 <RCM_RegisterRegConv+0x1b4>)
 8003d06:	2500      	movs	r5, #0
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003d08:	07db      	lsls	r3, r3, #31
      RCM_CB_array [handle].cb = NULL; /* if a previous callback was attached, it is cleared*/
 8003d0a:	f844 5030 	str.w	r5, [r4, r0, lsl #3]
      if (0U == LL_ADC_IsEnabled(regConv->regADC))
 8003d0e:	d411      	bmi.n	8003d34 <RCM_RegisterRegConv+0xd0>
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableIT_EOCS(ADC_TypeDef *ADCx)
{
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003d10:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003d12:	f06f 0402 	mvn.w	r4, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 8003d16:	f023 0320 	bic.w	r3, r3, #32
 8003d1a:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 8003d1c:	6014      	str	r4, [r2, #0]
{
  /* Note: on this STM32 series, there is no flag ADC group injected          */
  /*       end of unitary conversion.                                         */
  /*       Flag noted as "JEOC" is corresponding to flag "JEOS"               */
  /*       in other STM32 families).                                          */
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003d1e:	6853      	ldr	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003d20:	f06f 0404 	mvn.w	r4, #4
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 8003d24:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003d28:	6053      	str	r3, [r2, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8003d2a:	6014      	str	r4, [r2, #0]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8003d2c:	6893      	ldr	r3, [r2, #8]
 8003d2e:	f043 0301 	orr.w	r3, r3, #1
 8003d32:	6093      	str	r3, [r2, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8003d34:	6ad3      	ldr	r3, [r2, #44]	; 0x2c
 8003d36:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003d3a:	62d3      	str	r3, [r2, #44]	; 0x2c
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003d3c:	790b      	ldrb	r3, [r1, #4]
 8003d3e:	2b09      	cmp	r3, #9
 8003d40:	d82d      	bhi.n	8003d9e <RCM_RegisterRegConv+0x13a>
 8003d42:	eb03 0443 	add.w	r4, r3, r3, lsl #1
 8003d46:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
 8003d4a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003d4e:	f04f 7e00 	mov.w	lr, #33554432	; 0x2000000
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003d52:	f04f 7400 	mov.w	r4, #33554432	; 0x2000000
 8003d56:	fa94 f4a4 	rbit	r4, r4
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003d5a:	fab4 f484 	clz	r4, r4
 8003d5e:	fa2e fe04 	lsr.w	lr, lr, r4
 8003d62:	320c      	adds	r2, #12
  MODIFY_REG(*preg,
 8003d64:	f003 73f8 	and.w	r3, r3, #32505856	; 0x1f00000
 8003d68:	f852 402e 	ldr.w	r4, [r2, lr, lsl #2]
 8003d6c:	f04f 7cf8 	mov.w	ip, #32505856	; 0x1f00000
 8003d70:	fa9c f5ac 	rbit	r5, ip
 8003d74:	fab5 f585 	clz	r5, r5
 8003d78:	fa9c fcac 	rbit	ip, ip
 8003d7c:	688e      	ldr	r6, [r1, #8]
 8003d7e:	fabc fc8c 	clz	ip, ip
 8003d82:	fa23 f105 	lsr.w	r1, r3, r5
 8003d86:	fa23 f30c 	lsr.w	r3, r3, ip
 8003d8a:	fa06 f503 	lsl.w	r5, r6, r3
 8003d8e:	2307      	movs	r3, #7
 8003d90:	408b      	lsls	r3, r1
 8003d92:	ea24 0303 	bic.w	r3, r4, r3
 8003d96:	432b      	orrs	r3, r5
 8003d98:	f842 302e 	str.w	r3, [r2, lr, lsl #2]
}
 8003d9c:	bd70      	pop	{r4, r5, r6, pc}
      LL_ADC_SetChannelSamplingTime (regConv->regADC, __LL_ADC_DECIMAL_NB_TO_CHANNEL(regConv->channel),
 8003d9e:	2403      	movs	r4, #3
 8003da0:	f06f 051d 	mvn.w	r5, #29
 8003da4:	fb14 5403 	smlabb	r4, r4, r3, r5
 8003da8:	ea43 5304 	orr.w	r3, r3, r4, lsl #20
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, __ADC_MASK_SHIFT(Channel, ADC_CHANNEL_SMPRX_REGOFFSET_MASK));
 8003dac:	f003 7e00 	and.w	lr, r3, #33554432	; 0x2000000
 8003db0:	e7cf      	b.n	8003d52 <RCM_RegisterRegConv+0xee>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003db2:	2804      	cmp	r0, #4
 8003db4:	d917      	bls.n	8003de6 <RCM_RegisterRegConv+0x182>
 8003db6:	68dc      	ldr	r4, [r3, #12]
 8003db8:	b114      	cbz	r4, 8003dc0 <RCM_RegisterRegConv+0x15c>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003dba:	7922      	ldrb	r2, [r4, #4]
 8003dbc:	4594      	cmp	ip, r2
 8003dbe:	d01c      	beq.n	8003dfa <RCM_RegisterRegConv+0x196>
 8003dc0:	680a      	ldr	r2, [r1, #0]
 8003dc2:	e799      	b.n	8003cf8 <RCM_RegisterRegConv+0x94>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003dc4:	2804      	cmp	r0, #4
 8003dc6:	680a      	ldr	r2, [r1, #0]
 8003dc8:	d999      	bls.n	8003cfe <RCM_RegisterRegConv+0x9a>
      i++;
 8003dca:	2003      	movs	r0, #3
 8003dcc:	e797      	b.n	8003cfe <RCM_RegisterRegConv+0x9a>
 8003dce:	680a      	ldr	r2, [r1, #0]
         && (RCM_handle_array [i]->regADC == regConv->regADC))
 8003dd0:	6824      	ldr	r4, [r4, #0]
 8003dd2:	4294      	cmp	r4, r2
 8003dd4:	f47f af69 	bne.w	8003caa <RCM_RegisterRegConv+0x46>
 8003dd8:	e7f7      	b.n	8003dca <RCM_RegisterRegConv+0x166>
      i++;
 8003dda:	2001      	movs	r0, #1
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003ddc:	689c      	ldr	r4, [r3, #8]
 8003dde:	b11c      	cbz	r4, 8003de8 <RCM_RegisterRegConv+0x184>
 8003de0:	f891 c004 	ldrb.w	ip, [r1, #4]
 8003de4:	e756      	b.n	8003c94 <RCM_RegisterRegConv+0x30>
 8003de6:	4620      	mov	r0, r4
 8003de8:	68dc      	ldr	r4, [r3, #12]
 8003dea:	b124      	cbz	r4, 8003df6 <RCM_RegisterRegConv+0x192>
 8003dec:	f891 c004 	ldrb.w	ip, [r1, #4]
 8003df0:	e757      	b.n	8003ca2 <RCM_RegisterRegConv+0x3e>
    uint8_t i = 0;
 8003df2:	4620      	mov	r0, r4
 8003df4:	e7f2      	b.n	8003ddc <RCM_RegisterRegConv+0x178>
 8003df6:	680a      	ldr	r2, [r1, #0]
 8003df8:	e781      	b.n	8003cfe <RCM_RegisterRegConv+0x9a>
 8003dfa:	680a      	ldr	r2, [r1, #0]
      i++;
 8003dfc:	2002      	movs	r0, #2
 8003dfe:	e7e7      	b.n	8003dd0 <RCM_RegisterRegConv+0x16c>
      if ((0 == RCM_handle_array [i]) && (handle > RCM_MAX_CONV))
 8003e00:	68dc      	ldr	r4, [r3, #12]
 8003e02:	2c00      	cmp	r4, #0
 8003e04:	f43f af72 	beq.w	8003cec <RCM_RegisterRegConv+0x88>
        if ((RCM_handle_array [i]->channel == regConv->channel)
 8003e08:	7920      	ldrb	r0, [r4, #4]
 8003e0a:	4560      	cmp	r0, ip
 8003e0c:	f47f af6e 	bne.w	8003cec <RCM_RegisterRegConv+0x88>
      i++;
 8003e10:	2001      	movs	r0, #1
 8003e12:	e7dd      	b.n	8003dd0 <RCM_RegisterRegConv+0x16c>
 8003e14:	20001be0 	.word	0x20001be0
 8003e18:	20001bbc 	.word	0x20001bbc

08003e1c <RCM_ExecRegularConv>:
 */
uint16_t RCM_ExecRegularConv (uint8_t handle)
{
  uint16_t retVal;

  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003e1c:	4b1b      	ldr	r3, [pc, #108]	; (8003e8c <RCM_ExecRegularConv+0x70>)
 8003e1e:	f853 2020 	ldr.w	r2, [r3, r0, lsl #2]
                               LL_ADC_REG_RANK_1,
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003e22:	7913      	ldrb	r3, [r2, #4]
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003e24:	6812      	ldr	r2, [r2, #0]
 8003e26:	2b09      	cmp	r3, #9
 8003e28:	d827      	bhi.n	8003e7a <RCM_ExecRegularConv+0x5e>
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003e2a:	eb03 0143 	add.w	r1, r3, r3, lsl #1
 8003e2e:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003e32:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003e36:	f44f 7140 	mov.w	r1, #768	; 0x300
 8003e3a:	fa91 f1a1 	rbit	r1, r1
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, __ADC_MASK_SHIFT(Rank, ADC_REG_SQRX_REGOFFSET_MASK));
 8003e3e:	f44f 7c00 	mov.w	ip, #512	; 0x200
 8003e42:	fab1 f181 	clz	r1, r1
 8003e46:	f102 002c 	add.w	r0, r2, #44	; 0x2c
 8003e4a:	fa2c fc01 	lsr.w	ip, ip, r1
  MODIFY_REG(*preg,
 8003e4e:	f003 031f 	and.w	r3, r3, #31
 8003e52:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
 8003e56:	f021 011f 	bic.w	r1, r1, #31
 8003e5a:	430b      	orrs	r3, r1

  (void)LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);

  /* Bit banding access equivalent to LL_ADC_REG_StartConversionSWStart */
  BB_REG_BIT_SET(&RCM_handle_array[handle]->regADC->CR2, ADC_CR2_SWSTART_Pos);
 8003e5c:	0151      	lsls	r1, r2, #5
 8003e5e:	f840 302c 	str.w	r3, [r0, ip, lsl #2]
 8003e62:	f101 4184 	add.w	r1, r1, #1107296256	; 0x42000000
 8003e66:	2301      	movs	r3, #1
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003e68:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
 8003e6a:	f8c1 3178 	str.w	r3, [r1, #376]	; 0x178
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_EOCS) == (LL_ADC_FLAG_EOCS));
 8003e6e:	6813      	ldr	r3, [r2, #0]
  /* Wait until end of regular conversion */
  while (LL_ADC_IsActiveFlag_EOCS(RCM_handle_array[handle]->regADC) == 0u) {}
 8003e70:	079b      	lsls	r3, r3, #30
 8003e72:	d5fc      	bpl.n	8003e6e <RCM_ExecRegularConv+0x52>
  return (uint16_t)(READ_BIT(ADCx->DR, ADC_DR_DATA));
 8003e74:	6cd0      	ldr	r0, [r2, #76]	; 0x4c
  retVal = LL_ADC_REG_ReadConversionData12(RCM_handle_array[handle]->regADC);
  return retVal;
}
 8003e76:	b280      	uxth	r0, r0
 8003e78:	4770      	bx	lr
                               __LL_ADC_DECIMAL_NB_TO_CHANNEL(RCM_handle_array[handle]->channel));
 8003e7a:	2103      	movs	r1, #3
 8003e7c:	f06f 001d 	mvn.w	r0, #29
 8003e80:	fb11 0103 	smlabb	r1, r1, r3, r0
  LL_ADC_REG_SetSequencerRanks(RCM_handle_array[handle]->regADC,
 8003e84:	ea43 5301 	orr.w	r3, r3, r1, lsl #20
 8003e88:	e7d5      	b.n	8003e36 <RCM_ExecRegularConv+0x1a>
 8003e8a:	bf00      	nop
 8003e8c:	20001be0 	.word	0x20001be0

08003e90 <RCM_ExecUserConv>:
 *  latest call to RCM_RequestUserConv
 *
 * NOTE: This function is not part of the public API and users should not call it.
 */
void RCM_ExecUserConv()
{
 8003e90:	b570      	push	{r4, r5, r6, lr}
  if (RCM_USERCONV_REQUESTED == RCM_UserConvState)
 8003e92:	4c0f      	ldr	r4, [pc, #60]	; (8003ed0 <RCM_ExecUserConv+0x40>)
 8003e94:	7823      	ldrb	r3, [r4, #0]
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d000      	beq.n	8003e9c <RCM_ExecUserConv+0xc>
    else
    {
      /* Nothing to do */
    }
  }
}
 8003e9a:	bd70      	pop	{r4, r5, r6, pc}
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003e9c:	4b0d      	ldr	r3, [pc, #52]	; (8003ed4 <RCM_ExecUserConv+0x44>)
 8003e9e:	781d      	ldrb	r5, [r3, #0]
 8003ea0:	4628      	mov	r0, r5
 8003ea2:	f7ff ffbb 	bl	8003e1c <RCM_ExecRegularConv>
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003ea6:	4b0c      	ldr	r3, [pc, #48]	; (8003ed8 <RCM_ExecUserConv+0x48>)
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003ea8:	4a0c      	ldr	r2, [pc, #48]	; (8003edc <RCM_ExecUserConv+0x4c>)
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003eaa:	f853 6035 	ldr.w	r6, [r3, r5, lsl #3]
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003eae:	8010      	strh	r0, [r2, #0]
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003eb0:	2202      	movs	r2, #2
    RCM_UserConvValue = RCM_ExecRegularConv(RCM_UserConvHandle);
 8003eb2:	4601      	mov	r1, r0
    RCM_UserConvState = RCM_USERCONV_EOC;
 8003eb4:	7022      	strb	r2, [r4, #0]
    if (RCM_CB_array[RCM_UserConvHandle].cb != NULL)
 8003eb6:	2e00      	cmp	r6, #0
 8003eb8:	d0ef      	beq.n	8003e9a <RCM_ExecUserConv+0xa>
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003eba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8003ebe:	4628      	mov	r0, r5
 8003ec0:	685a      	ldr	r2, [r3, #4]
      RCM_UserConvState = RCM_USERCONV_IDLE;
 8003ec2:	2300      	movs	r3, #0
 8003ec4:	7023      	strb	r3, [r4, #0]
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003ec6:	4633      	mov	r3, r6
}
 8003ec8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      RCM_CB_array[RCM_UserConvHandle].cb(RCM_UserConvHandle, RCM_UserConvValue,
 8003ecc:	4718      	bx	r3
 8003ece:	bf00      	nop
 8003ed0:	20001bdd 	.word	0x20001bdd
 8003ed4:	20001bdc 	.word	0x20001bdc
 8003ed8:	20001bbc 	.word	0x20001bbc
 8003edc:	20001bde 	.word	0x20001bde

08003ee0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003ee0:	b082      	sub	sp, #8
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ee2:	4b0d      	ldr	r3, [pc, #52]	; (8003f18 <HAL_MspInit+0x38>)
 8003ee4:	2100      	movs	r1, #0
 8003ee6:	9100      	str	r1, [sp, #0]
 8003ee8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003eea:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003eee:	645a      	str	r2, [r3, #68]	; 0x44
 8003ef0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003ef2:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003ef6:	9200      	str	r2, [sp, #0]
 8003ef8:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003efa:	9101      	str	r1, [sp, #4]
 8003efc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003efe:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003f02:	641a      	str	r2, [r3, #64]	; 0x40
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f0a:	9301      	str	r3, [sp, #4]
 8003f0c:	9b01      	ldr	r3, [sp, #4]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003f0e:	2004      	movs	r0, #4
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003f10:	b002      	add	sp, #8
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_3);
 8003f12:	f000 bd5f 	b.w	80049d4 <HAL_NVIC_SetPriorityGrouping>
 8003f16:	bf00      	nop
 8003f18:	40023800 	.word	0x40023800

08003f1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8003f1c:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(hadc->Instance==ADC1)
 8003f1e:	4b20      	ldr	r3, [pc, #128]	; (8003fa0 <HAL_ADC_MspInit+0x84>)
 8003f20:	6802      	ldr	r2, [r0, #0]
{
 8003f22:	b08a      	sub	sp, #40	; 0x28
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f24:	2400      	movs	r4, #0
  if(hadc->Instance==ADC1)
 8003f26:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f28:	e9cd 4404 	strd	r4, r4, [sp, #16]
 8003f2c:	e9cd 4406 	strd	r4, r4, [sp, #24]
 8003f30:	9408      	str	r4, [sp, #32]
  if(hadc->Instance==ADC1)
 8003f32:	d001      	beq.n	8003f38 <HAL_ADC_MspInit+0x1c>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8003f34:	b00a      	add	sp, #40	; 0x28
 8003f36:	bd10      	pop	{r4, pc}
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f38:	f503 338c 	add.w	r3, r3, #71680	; 0x11800
 8003f3c:	9401      	str	r4, [sp, #4]
 8003f3e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f40:	4818      	ldr	r0, [pc, #96]	; (8003fa4 <HAL_ADC_MspInit+0x88>)
    __HAL_RCC_ADC1_CLK_ENABLE();
 8003f42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003f46:	645a      	str	r2, [r3, #68]	; 0x44
 8003f48:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f4a:	f402 7280 	and.w	r2, r2, #256	; 0x100
 8003f4e:	9201      	str	r2, [sp, #4]
 8003f50:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003f52:	9402      	str	r4, [sp, #8]
 8003f54:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f56:	f042 0204 	orr.w	r2, r2, #4
 8003f5a:	631a      	str	r2, [r3, #48]	; 0x30
 8003f5c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f5e:	f002 0204 	and.w	r2, r2, #4
 8003f62:	9202      	str	r2, [sp, #8]
 8003f64:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f66:	9403      	str	r4, [sp, #12]
 8003f68:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003f6a:	f042 0201 	orr.w	r2, r2, #1
 8003f6e:	631a      	str	r2, [r3, #48]	; 0x30
 8003f70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f72:	f003 0301 	and.w	r3, r3, #1
 8003f76:	9303      	str	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f78:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_W_Pin|M1_CURR_AMPL_V_Pin|M1_TEMPERATURE_Pin;
 8003f7a:	2207      	movs	r2, #7
 8003f7c:	2303      	movs	r3, #3
 8003f7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f82:	9b03      	ldr	r3, [sp, #12]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003f84:	f000 fe3c 	bl	8004c00 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003f88:	2203      	movs	r2, #3
 8003f8a:	2303      	movs	r3, #3
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f8c:	4806      	ldr	r0, [pc, #24]	; (8003fa8 <HAL_ADC_MspInit+0x8c>)
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f8e:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f90:	a904      	add	r1, sp, #16
    GPIO_InitStruct.Pin = M1_CURR_AMPL_U_Pin|M1_BUS_VOLTAGE_Pin;
 8003f92:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f96:	f000 fe33 	bl	8004c00 <HAL_GPIO_Init>
}
 8003f9a:	b00a      	add	sp, #40	; 0x28
 8003f9c:	bd10      	pop	{r4, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40012000 	.word	0x40012000
 8003fa4:	40020800 	.word	0x40020800
 8003fa8:	40020000 	.word	0x40020000
 8003fac:	00000000 	.word	0x00000000

08003fb0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003fb0:	b510      	push	{r4, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim_base->Instance==TIM1)
 8003fb2:	4a19      	ldr	r2, [pc, #100]	; (8004018 <HAL_TIM_Base_MspInit+0x68>)
 8003fb4:	6801      	ldr	r1, [r0, #0]
{
 8003fb6:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fb8:	2300      	movs	r3, #0
  if(htim_base->Instance==TIM1)
 8003fba:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fbc:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8003fc0:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8003fc4:	9306      	str	r3, [sp, #24]
  if(htim_base->Instance==TIM1)
 8003fc6:	d001      	beq.n	8003fcc <HAL_TIM_Base_MspInit+0x1c>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003fc8:	b008      	add	sp, #32
 8003fca:	bd10      	pop	{r4, pc}
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003fcc:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8003fd0:	9300      	str	r3, [sp, #0]
 8003fd2:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003fd4:	f040 0001 	orr.w	r0, r0, #1
 8003fd8:	6450      	str	r0, [r2, #68]	; 0x44
 8003fda:	6c50      	ldr	r0, [r2, #68]	; 0x44
 8003fdc:	f000 0001 	and.w	r0, r0, #1
 8003fe0:	9000      	str	r0, [sp, #0]
 8003fe2:	9800      	ldr	r0, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003fe8:	480c      	ldr	r0, [pc, #48]	; (800401c <HAL_TIM_Base_MspInit+0x6c>)
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003fea:	2401      	movs	r4, #1
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003fec:	4323      	orrs	r3, r4
 8003fee:	6313      	str	r3, [r2, #48]	; 0x30
 8003ff0:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003ff2:	9404      	str	r4, [sp, #16]
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003ff4:	ed9f 7b06 	vldr	d7, [pc, #24]	; 8004010 <HAL_TIM_Base_MspInit+0x60>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ff8:	4023      	ands	r3, r4
 8003ffa:	9301      	str	r3, [sp, #4]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8003ffc:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Pin = M1_OCP_Pin;
 8003ffe:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004002:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004004:	9406      	str	r4, [sp, #24]
    HAL_GPIO_Init(M1_OCP_GPIO_Port, &GPIO_InitStruct);
 8004006:	f000 fdfb 	bl	8004c00 <HAL_GPIO_Init>
}
 800400a:	b008      	add	sp, #32
 800400c:	bd10      	pop	{r4, pc}
 800400e:	bf00      	nop
 8004010:	00000040 	.word	0x00000040
 8004014:	00000002 	.word	0x00000002
 8004018:	40010000 	.word	0x40010000
 800401c:	40020000 	.word	0x40020000

08004020 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8004020:	b500      	push	{lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(htim->Instance==TIM1)
 8004022:	4a17      	ldr	r2, [pc, #92]	; (8004080 <HAL_TIM_MspPostInit+0x60>)
 8004024:	6801      	ldr	r1, [r0, #0]
{
 8004026:	b089      	sub	sp, #36	; 0x24
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004028:	2300      	movs	r3, #0
  if(htim->Instance==TIM1)
 800402a:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800402c:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8004030:	e9cd 3304 	strd	r3, r3, [sp, #16]
 8004034:	9306      	str	r3, [sp, #24]
  if(htim->Instance==TIM1)
 8004036:	d002      	beq.n	800403e <HAL_TIM_MspPostInit+0x1e>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8004038:	b009      	add	sp, #36	; 0x24
 800403a:	f85d fb04 	ldr.w	pc, [sp], #4
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800403e:	f502 329c 	add.w	r2, r2, #79872	; 0x13800
 8004042:	9301      	str	r3, [sp, #4]
 8004044:	6b13      	ldr	r3, [r2, #48]	; 0x30
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004046:	480f      	ldr	r0, [pc, #60]	; (8004084 <HAL_TIM_MspPostInit+0x64>)
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	6313      	str	r3, [r2, #48]	; 0x30
 800404e:	6b13      	ldr	r3, [r2, #48]	; 0x30
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004050:	ed9f 7b09 	vldr	d7, [pc, #36]	; 8004078 <HAL_TIM_MspPostInit+0x58>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004054:	f003 0301 	and.w	r3, r3, #1
 8004058:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 800405a:	2202      	movs	r2, #2
 800405c:	2302      	movs	r3, #2
 800405e:	e9cd 2304 	strd	r2, r3, [sp, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004062:	a902      	add	r1, sp, #8
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8004064:	2301      	movs	r3, #1
    GPIO_InitStruct.Pin = M1_PWM_UH_Pin|M1_PWM_VH_Pin|M1_PWM_WH_Pin;
 8004066:	ed8d 7b02 	vstr	d7, [sp, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800406a:	9a01      	ldr	r2, [sp, #4]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800406c:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800406e:	f000 fdc7 	bl	8004c00 <HAL_GPIO_Init>
}
 8004072:	b009      	add	sp, #36	; 0x24
 8004074:	f85d fb04 	ldr.w	pc, [sp], #4
 8004078:	00000700 	.word	0x00000700
 800407c:	00000002 	.word	0x00000002
 8004080:	40010000 	.word	0x40010000
 8004084:	40020000 	.word	0x40020000

08004088 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8004088:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART2)
 800408a:	4b32      	ldr	r3, [pc, #200]	; (8004154 <HAL_UART_MspInit+0xcc>)
 800408c:	6802      	ldr	r2, [r0, #0]
{
 800408e:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004090:	2400      	movs	r4, #0
  if(huart->Instance==USART2)
 8004092:	429a      	cmp	r2, r3
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004094:	e9cd 4402 	strd	r4, r4, [sp, #8]
 8004098:	e9cd 4404 	strd	r4, r4, [sp, #16]
 800409c:	9406      	str	r4, [sp, #24]
  if(huart->Instance==USART2)
 800409e:	d001      	beq.n	80040a4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80040a0:	b008      	add	sp, #32
 80040a2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART2_CLK_ENABLE();
 80040a4:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 80040a8:	9400      	str	r4, [sp, #0]
 80040aa:	6c1a      	ldr	r2, [r3, #64]	; 0x40
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80040ac:	4e2a      	ldr	r6, [pc, #168]	; (8004158 <HAL_UART_MspInit+0xd0>)
    __HAL_RCC_USART2_CLK_ENABLE();
 80040ae:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
 80040b2:	641a      	str	r2, [r3, #64]	; 0x40
 80040b4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040b6:	f402 3200 	and.w	r2, r2, #131072	; 0x20000
 80040ba:	9200      	str	r2, [sp, #0]
 80040bc:	9a00      	ldr	r2, [sp, #0]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040be:	9401      	str	r4, [sp, #4]
 80040c0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80040c2:	f042 0201 	orr.w	r2, r2, #1
 80040c6:	631a      	str	r2, [r3, #48]	; 0x30
 80040c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ca:	f003 0301 	and.w	r3, r3, #1
 80040ce:	9301      	str	r3, [sp, #4]
    GPIO_InitStruct.Pin = UART_TX_Pin|UART_RX_Pin;
 80040d0:	220c      	movs	r2, #12
 80040d2:	2302      	movs	r3, #2
 80040d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80040d8:	4605      	mov	r5, r0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040da:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040dc:	481f      	ldr	r0, [pc, #124]	; (800415c <HAL_UART_MspInit+0xd4>)
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80040de:	9306      	str	r3, [sp, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e0:	a902      	add	r1, sp, #8
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80040e2:	9b01      	ldr	r3, [sp, #4]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80040e4:	f000 fd8c 	bl	8004c00 <HAL_GPIO_Init>
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80040e8:	4a1d      	ldr	r2, [pc, #116]	; (8004160 <HAL_UART_MspInit+0xd8>)
 80040ea:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80040ee:	e9c6 2300 	strd	r2, r3, [r6]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80040f2:	4630      	mov	r0, r6
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80040f4:	f44f 6380 	mov.w	r3, #1024	; 0x400
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80040f8:	e9c6 4402 	strd	r4, r4, [r6, #8]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80040fc:	e9c6 3404 	strd	r3, r4, [r6, #16]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8004100:	e9c6 4406 	strd	r4, r4, [r6, #24]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004104:	e9c6 4408 	strd	r4, r4, [r6, #32]
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8004108:	f000 fce2 	bl	8004ad0 <HAL_DMA_Init>
 800410c:	b9d8      	cbnz	r0, 8004146 <HAL_UART_MspInit+0xbe>
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800410e:	4c15      	ldr	r4, [pc, #84]	; (8004164 <HAL_UART_MspInit+0xdc>)
 8004110:	4915      	ldr	r1, [pc, #84]	; (8004168 <HAL_UART_MspInit+0xe0>)
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004112:	63ae      	str	r6, [r5, #56]	; 0x38
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8004114:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004118:	2300      	movs	r3, #0
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 800411a:	e9c4 1200 	strd	r1, r2, [r4]
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800411e:	4620      	mov	r0, r4
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8004120:	2140      	movs	r1, #64	; 0x40
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004122:	f44f 6280 	mov.w	r2, #1024	; 0x400
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8004126:	e9c4 1302 	strd	r1, r3, [r4, #8]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800412a:	e9c4 3305 	strd	r3, r3, [r4, #20]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 800412e:	e9c4 3307 	strd	r3, r3, [r4, #28]
    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8004132:	63b5      	str	r5, [r6, #56]	; 0x38
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8004134:	6122      	str	r2, [r4, #16]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8004136:	6263      	str	r3, [r4, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8004138:	f000 fcca 	bl	8004ad0 <HAL_DMA_Init>
 800413c:	b930      	cbnz	r0, 800414c <HAL_UART_MspInit+0xc4>
    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800413e:	636c      	str	r4, [r5, #52]	; 0x34
 8004140:	63a5      	str	r5, [r4, #56]	; 0x38
}
 8004142:	b008      	add	sp, #32
 8004144:	bd70      	pop	{r4, r5, r6, pc}
      Error_Handler();
 8004146:	f7fd fa7d 	bl	8001644 <Error_Handler>
 800414a:	e7e0      	b.n	800410e <HAL_UART_MspInit+0x86>
      Error_Handler();
 800414c:	f7fd fa7a 	bl	8001644 <Error_Handler>
 8004150:	e7f5      	b.n	800413e <HAL_UART_MspInit+0xb6>
 8004152:	bf00      	nop
 8004154:	40004400 	.word	0x40004400
 8004158:	200006f0 	.word	0x200006f0
 800415c:	40020000 	.word	0x40020000
 8004160:	40026088 	.word	0x40026088
 8004164:	20000750 	.word	0x20000750
 8004168:	400260a0 	.word	0x400260a0

0800416c <ADC_IRQHandler>:
  return (READ_BIT(ADCx->SR, LL_ADC_FLAG_JEOS) == (LL_ADC_FLAG_JEOS));
 800416c:	4b05      	ldr	r3, [pc, #20]	; (8004184 <ADC_IRQHandler+0x18>)
 800416e:	681a      	ldr	r2, [r3, #0]
void ADC_IRQHandler(void)
{
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  if(LL_ADC_IsActiveFlag_JEOS(ADC1))
 8004170:	0752      	lsls	r2, r2, #29
 8004172:	d400      	bmi.n	8004176 <ADC_IRQHandler+0xa>
  }
#endif
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8004174:	4770      	bx	lr
    ADC1->SR &= ~(uint32_t)(LL_ADC_FLAG_JEOS | LL_ADC_FLAG_JSTRT);
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	f022 020c 	bic.w	r2, r2, #12
 800417c:	601a      	str	r2, [r3, #0]
    TSK_HighFrequencyTask();          /*GUI, this section is present only if DAC is disabled*/
 800417e:	f7fe b847 	b.w	8002210 <TSK_HighFrequencyTask>
 8004182:	bf00      	nop
 8004184:	40012000 	.word	0x40012000

08004188 <TIM1_UP_TIM10_IRQHandler>:
{
  /* USER CODE BEGIN TIMx_UP_M1_IRQn 0 */

  /* USER CODE END TIMx_UP_M1_IRQn 0 */

  LL_TIM_ClearFlag_UPDATE(PWM_Handle_M1.pParams_str->TIMx);
 8004188:	4804      	ldr	r0, [pc, #16]	; (800419c <TIM1_UP_TIM10_IRQHandler+0x14>)
 800418a:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 800418e:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_ClearFlag_UPDATE(TIM_TypeDef *TIMx)
{
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8004190:	f06f 0201 	mvn.w	r2, #1
 8004194:	611a      	str	r2, [r3, #16]
  R3_1_TIMx_UP_IRQHandler(&PWM_Handle_M1);
 8004196:	f002 bc7d 	b.w	8006a94 <R3_1_TIMx_UP_IRQHandler>
 800419a:	bf00      	nop
 800419c:	20000274 	.word	0x20000274

080041a0 <TIM1_BRK_TIM9_IRQHandler>:
void TIMx_BRK_M1_IRQHandler(void)
{
  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 0 */

  /* USER CODE END TIMx_BRK_M1_IRQn 0 */
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80041a0:	4808      	ldr	r0, [pc, #32]	; (80041c4 <TIM1_BRK_TIM9_IRQHandler+0x24>)
{
 80041a2:	b508      	push	{r3, lr}
  if (LL_TIM_IsActiveFlag_BRK(PWM_Handle_M1.pParams_str->TIMx))
 80041a4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 80041a8:	685b      	ldr	r3, [r3, #4]
  * @param  TIMx Timer instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_TIM_IsActiveFlag_BRK(TIM_TypeDef *TIMx)
{
  return ((READ_BIT(TIMx->SR, TIM_SR_BIF) == (TIM_SR_BIF)) ? 1UL : 0UL);
 80041aa:	691a      	ldr	r2, [r3, #16]
 80041ac:	0612      	lsls	r2, r2, #24
 80041ae:	d504      	bpl.n	80041ba <TIM1_BRK_TIM9_IRQHandler+0x1a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 80041b0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80041b4:	611a      	str	r2, [r3, #16]
  {
    LL_TIM_ClearFlag_BRK(PWM_Handle_M1.pParams_str->TIMx);
    R3_1_BRK_IRQHandler(&PWM_Handle_M1);
 80041b6:	f002 fc8f 	bl	8006ad8 <R3_1_BRK_IRQHandler>
  MC_Scheduler();

  /* USER CODE BEGIN TIMx_BRK_M1_IRQn 1 */

  /* USER CODE END TIMx_BRK_M1_IRQn 1 */
}
 80041ba:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  MC_Scheduler();
 80041be:	f7fd bfe3 	b.w	8002188 <MC_Scheduler>
 80041c2:	bf00      	nop
 80041c4:	20000274 	.word	0x20000274

080041c8 <DMA1_Stream5_IRQHandler>:
  {
    retVal = 0;
  }
  else
  {
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LISR,(Stream<=3)?0:1);
 80041c8:	4b05      	ldr	r3, [pc, #20]	; (80041e0 <DMA1_Stream5_IRQHandler+0x18>)
    retVal = ((READ_BIT(*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) ) == (1 << __LL_DMA_IT_TC_BIT(Stream))) ? 1UL : 0UL);
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	051b      	lsls	r3, r3, #20
 80041ce:	d400      	bmi.n	80041d2 <DMA1_Stream5_IRQHandler+0xa>
  }
  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

  /* USER CODE BEGIN MCP_RX_IRQHandler_A 1 */

}
 80041d0:	4770      	bx	lr
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 80041d2:	4b04      	ldr	r3, [pc, #16]	; (80041e4 <DMA1_Stream5_IRQHandler+0x1c>)
    ASPEP_HWDataReceivedIT (&aspepOverUartA);
 80041d4:	4804      	ldr	r0, [pc, #16]	; (80041e8 <DMA1_Stream5_IRQHandler+0x20>)
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 80041d6:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80041da:	605a      	str	r2, [r3, #4]
 80041dc:	f7fc bfba 	b.w	8001154 <ASPEP_HWDataReceivedIT>
 80041e0:	40026000 	.word	0x40026000
 80041e4:	40026008 	.word	0x40026008
 80041e8:	20000600 	.word	0x20000600

080041ec <USART2_IRQHandler>:
  * @brief  This function handles USART interrupt request.
  * @param  None
  * @retval None
  */
void USARTA_IRQHandler(void)
{
 80041ec:	b510      	push	{r4, lr}
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsActiveFlag_TC(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->SR, USART_SR_TC) == (USART_SR_TC));
 80041ee:	4b40      	ldr	r3, [pc, #256]	; (80042f0 <USART2_IRQHandler+0x104>)
 80041f0:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN USARTA_IRQn 0 */

  /* USER CODE END USARTA_IRQn 0 */

  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 80041f2:	0651      	lsls	r1, r2, #25
{
 80041f4:	b084      	sub	sp, #16
  if ( LL_USART_IsActiveFlag_TC (USARTA) )
 80041f6:	d46d      	bmi.n	80042d4 <USART2_IRQHandler+0xe8>
  return (READ_BIT(USARTx->SR, USART_SR_ORE) == (USART_SR_ORE));
 80041f8:	4b3d      	ldr	r3, [pc, #244]	; (80042f0 <USART2_IRQHandler+0x104>)
 80041fa:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_TC (USARTA);
    /* Data Sent by UART*/
    /* Need to free the buffer, and to check pending transfer*/
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
  }
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 80041fc:	0712      	lsls	r2, r2, #28
 80041fe:	d402      	bmi.n	8004206 <USART2_IRQHandler+0x1a>
  return (READ_BIT(USARTx->SR, USART_SR_FE) == (USART_SR_FE));
 8004200:	681a      	ldr	r2, [r3, #0]
 8004202:	0794      	lsls	r4, r2, #30
 8004204:	d55e      	bpl.n	80042c4 <USART2_IRQHandler+0xd8>
  * @param  USARTx USART Instance
  * @retval State of bit (1 or 0).
  */
__STATIC_INLINE uint32_t LL_USART_IsEnabledIT_ERROR(USART_TypeDef *USARTx)
{
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 8004206:	4b3a      	ldr	r3, [pc, #232]	; (80042f0 <USART2_IRQHandler+0x104>)
 8004208:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 800420a:	07d2      	lsls	r2, r2, #31
 800420c:	d523      	bpl.n	8004256 <USART2_IRQHandler+0x6a>
  tmpreg = USARTx->SR;
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8004212:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->DR;
 8004214:	685a      	ldr	r2, [r3, #4]
 8004216:	9203      	str	r2, [sp, #12]
  (void) tmpreg;
 8004218:	9a03      	ldr	r2, [sp, #12]
  tmpreg = USARTx->SR;
 800421a:	681a      	ldr	r2, [r3, #0]
 800421c:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 800421e:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->DR;
 8004220:	685a      	ldr	r2, [r3, #4]
 8004222:	9202      	str	r2, [sp, #8]
  (void) tmpreg;
 8004224:	9a02      	ldr	r2, [sp, #8]
  tmpreg = USARTx->SR;
 8004226:	681a      	ldr	r2, [r3, #0]
 8004228:	9201      	str	r2, [sp, #4]
  (void) tmpreg;
 800422a:	9a01      	ldr	r2, [sp, #4]
  tmpreg = USARTx->DR;
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004230:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004232:	4a30      	ldr	r2, [pc, #192]	; (80042f4 <USART2_IRQHandler+0x108>)
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004234:	e852 3f00 	ldrex	r3, [r2]
 8004238:	f023 0301 	bic.w	r3, r3, #1
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800423c:	e842 3100 	strex	r1, r3, [r2]
 8004240:	2900      	cmp	r1, #0
 8004242:	d1f7      	bne.n	8004234 <USART2_IRQHandler+0x48>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004244:	4a2c      	ldr	r2, [pc, #176]	; (80042f8 <USART2_IRQHandler+0x10c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004246:	e852 3f00 	ldrex	r3, [r2]
 800424a:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800424e:	e842 3100 	strex	r1, r3, [r2]
 8004252:	2900      	cmp	r1, #0
 8004254:	d1f7      	bne.n	8004246 <USART2_IRQHandler+0x5a>
  return (READ_BIT(USARTx->SR, USART_SR_IDLE) == (USART_SR_IDLE));
 8004256:	4b26      	ldr	r3, [pc, #152]	; (80042f0 <USART2_IRQHandler+0x104>)
 8004258:	681a      	ldr	r2, [r3, #0]
    LL_USART_ClearFlag_NE(USARTA);
    /* We disable ERROR interrupt to avoid to trig one Overrun IT per additional byte recevied*/
    LL_USART_DisableIT_ERROR (USARTA);
    LL_USART_EnableIT_IDLE (USARTA);
  }
  if ( LL_USART_IsActiveFlag_IDLE (USARTA) && LL_USART_IsEnabledIT_IDLE (USARTA) )
 800425a:	06d1      	lsls	r1, r2, #27
 800425c:	d530      	bpl.n	80042c0 <USART2_IRQHandler+0xd4>
  return (READ_BIT(USARTx->CR1, USART_CR1_IDLEIE) == (USART_CR1_IDLEIE));
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	06db      	lsls	r3, r3, #27
 8004262:	d52d      	bpl.n	80042c0 <USART2_IRQHandler+0xd4>
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 8004264:	4a24      	ldr	r2, [pc, #144]	; (80042f8 <USART2_IRQHandler+0x10c>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004266:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_CLEAR_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 800426a:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800426e:	e842 3100 	strex	r1, r3, [r2]
 8004272:	2900      	cmp	r1, #0
 8004274:	d1f7      	bne.n	8004266 <USART2_IRQHandler+0x7a>
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_EIE);
 8004276:	4b1f      	ldr	r3, [pc, #124]	; (80042f4 <USART2_IRQHandler+0x108>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004278:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 800427c:	f042 0201 	orr.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004280:	e843 2100 	strex	r1, r2, [r3]
 8004284:	2900      	cmp	r1, #0
 8004286:	d1f7      	bne.n	8004278 <USART2_IRQHandler+0x8c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004288:	e853 2f00 	ldrex	r2, [r3]
  * @param  USARTx USART Instance
  * @retval None
  */
__STATIC_INLINE void LL_USART_DisableDMAReq_RX(USART_TypeDef *USARTx)
{
  ATOMIC_CLEAR_BIT(USARTx->CR3, USART_CR3_DMAR);
 800428c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004290:	e843 2100 	strex	r1, r2, [r3]
 8004294:	2900      	cmp	r1, #0
 8004296:	d1f7      	bne.n	8004288 <USART2_IRQHandler+0x9c>
  * @param  USARTx USART Instance
  * @retval Value between Min_Data=0x00 and Max_Data=0xFF
  */
__STATIC_INLINE uint8_t LL_USART_ReceiveData8(USART_TypeDef *USARTx)
{
  return (uint8_t)(READ_BIT(USARTx->DR, USART_DR_DR));
 8004298:	4a15      	ldr	r2, [pc, #84]	; (80042f0 <USART2_IRQHandler+0x104>)
 800429a:	6852      	ldr	r2, [r2, #4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800429c:	e853 2f00 	ldrex	r2, [r3]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80042a0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042a4:	e843 2100 	strex	r1, r2, [r3]
 80042a8:	2900      	cmp	r1, #0
 80042aa:	d1f7      	bne.n	800429c <USART2_IRQHandler+0xb0>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 80042ac:	4b13      	ldr	r3, [pc, #76]	; (80042fc <USART2_IRQHandler+0x110>)
    /* We disable the DMA request, Read the dummy data, endable back the DMA request */
    LL_USART_DisableDMAReq_RX (USARTA);
    LL_USART_ReceiveData8(USARTA);
    LL_USART_EnableDMAReq_RX (USARTA);
    LL_DMA_ClearFlag_TE (DMA_RX_A, DMACH_RX_A );
    ASPEP_HWDMAReset (&aspepOverUartA);
 80042ae:	4814      	ldr	r0, [pc, #80]	; (8004300 <USART2_IRQHandler+0x114>)
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TE_BIT(Stream) );
 80042b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80042b4:	605a      	str	r2, [r3, #4]
  }

  /* USER CODE BEGIN USARTA_IRQn 1 */

  /* USER CODE END USARTA_IRQn 1 */
}
 80042b6:	b004      	add	sp, #16
 80042b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    ASPEP_HWDMAReset (&aspepOverUartA);
 80042bc:	f7fc bf98 	b.w	80011f0 <ASPEP_HWDMAReset>
}
 80042c0:	b004      	add	sp, #16
 80042c2:	bd10      	pop	{r4, pc}
  return (READ_BIT(USARTx->SR, USART_SR_NE) == (USART_SR_NE));
 80042c4:	681b      	ldr	r3, [r3, #0]
  if ( (LL_USART_IsActiveFlag_ORE (USARTA) || LL_USART_IsActiveFlag_FE (USARTA) || LL_USART_IsActiveFlag_NE (USARTA))
 80042c6:	0758      	lsls	r0, r3, #29
 80042c8:	d5c5      	bpl.n	8004256 <USART2_IRQHandler+0x6a>
  return (READ_BIT(USARTx->CR3, USART_CR3_EIE) == (USART_CR3_EIE));
 80042ca:	4b09      	ldr	r3, [pc, #36]	; (80042f0 <USART2_IRQHandler+0x104>)
 80042cc:	695a      	ldr	r2, [r3, #20]
        && LL_USART_IsEnabledIT_ERROR (USARTA) )
 80042ce:	07d2      	lsls	r2, r2, #31
 80042d0:	d5c1      	bpl.n	8004256 <USART2_IRQHandler+0x6a>
 80042d2:	e79c      	b.n	800420e <USART2_IRQHandler+0x22>
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_DisableStream(DMA_TypeDef *DMAx, uint32_t Stream)
{
  CLEAR_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 80042d4:	490b      	ldr	r1, [pc, #44]	; (8004304 <USART2_IRQHandler+0x118>)
    ASPEP_HWDataTransmittedIT (&aspepOverUartA);
 80042d6:	480a      	ldr	r0, [pc, #40]	; (8004300 <USART2_IRQHandler+0x114>)
 80042d8:	f8d1 20a0 	ldr.w	r2, [r1, #160]	; 0xa0
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80042dc:	f06f 0440 	mvn.w	r4, #64	; 0x40
 80042e0:	f022 0201 	bic.w	r2, r2, #1
 80042e4:	f8c1 20a0 	str.w	r2, [r1, #160]	; 0xa0
 80042e8:	601c      	str	r4, [r3, #0]
 80042ea:	f7fc fd93 	bl	8000e14 <ASPEP_HWDataTransmittedIT>
 80042ee:	e783      	b.n	80041f8 <USART2_IRQHandler+0xc>
 80042f0:	40004400 	.word	0x40004400
 80042f4:	40004414 	.word	0x40004414
 80042f8:	4000440c 	.word	0x4000440c
 80042fc:	40026008 	.word	0x40026008
 8004300:	20000600 	.word	0x20000600
 8004304:	40026000 	.word	0x40026000

08004308 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 8004308:	b508      	push	{r3, lr}
 /* USER CODE BEGIN HardFault_IRQn 0 */

 /* USER CODE END HardFault_IRQn 0 */
  TSK_HardwareFaultTask();
 800430a:	f7fe f9dd 	bl	80026c8 <TSK_HardwareFaultTask>

  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800430e:	e7fe      	b.n	800430e <HardFault_Handler+0x6>

08004310 <SysTick_Handler>:
 /* USER CODE END HardFault_IRQn 1 */

}

void SysTick_Handler(void)
{
 8004310:	b510      	push	{r4, lr}
#ifdef MC_HAL_IS_USED
static uint8_t SystickDividerCounter = SYSTICK_DIVIDER;
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  if (SystickDividerCounter == SYSTICK_DIVIDER)
 8004312:	4c0a      	ldr	r4, [pc, #40]	; (800433c <SysTick_Handler+0x2c>)
 8004314:	7823      	ldrb	r3, [r4, #0]
 8004316:	2b02      	cmp	r3, #2
 8004318:	d006      	beq.n	8004328 <SysTick_Handler+0x18>
  {
    HAL_IncTick();
    HAL_SYSTICK_IRQHandler();
    SystickDividerCounter = 0;
  }
  SystickDividerCounter ++;
 800431a:	3301      	adds	r3, #1
 800431c:	b2db      	uxtb	r3, r3
 800431e:	7023      	strb	r3, [r4, #0]
  /* USER CODE END SysTick_IRQn 1 */
    MC_RunMotorControlTasks();

  /* USER CODE BEGIN SysTick_IRQn 2 */
  /* USER CODE END SysTick_IRQn 2 */
}
 8004320:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004324:	f7fe b9c4 	b.w	80026b0 <MC_RunMotorControlTasks>
    HAL_IncTick();
 8004328:	f000 f90e 	bl	8004548 <HAL_IncTick>
    HAL_SYSTICK_IRQHandler();
 800432c:	f000 fbcc 	bl	8004ac8 <HAL_SYSTICK_IRQHandler>
 8004330:	2301      	movs	r3, #1
  SystickDividerCounter ++;
 8004332:	7023      	strb	r3, [r4, #0]
}
 8004334:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    MC_RunMotorControlTasks();
 8004338:	f7fe b9ba 	b.w	80026b0 <MC_RunMotorControlTasks>
 800433c:	20000674 	.word	0x20000674

08004340 <EXTI15_10_IRQHandler>:
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval @note This bit is set when the selected edge event arrives on the interrupt
  */
__STATIC_INLINE uint32_t LL_EXTI_ReadFlag_0_31(uint32_t ExtiLine)
{
  return (uint32_t)(READ_BIT(EXTI->PR, ExtiLine));
 8004340:	4b04      	ldr	r3, [pc, #16]	; (8004354 <EXTI15_10_IRQHandler+0x14>)
 8004342:	695a      	ldr	r2, [r3, #20]
  * @brief  This function handles Button IRQ on PIN PC13.
  */
void EXTI15_10_IRQHandler (void)
{
	/* USER CODE BEGIN START_STOP_BTN */
  if ( LL_EXTI_ReadFlag_0_31(LL_EXTI_LINE_13) )
 8004344:	0492      	lsls	r2, r2, #18
 8004346:	d400      	bmi.n	800434a <EXTI15_10_IRQHandler+0xa>
  {
    LL_EXTI_ClearFlag_0_31 (LL_EXTI_LINE_13);
    UI_HandleStartStopButton_cb ();
  }

}
 8004348:	4770      	bx	lr
  * @note   Please check each device line mapping for EXTI Line availability
  * @retval None
  */
__STATIC_INLINE void LL_EXTI_ClearFlag_0_31(uint32_t ExtiLine)
{
  WRITE_REG(EXTI->PR, ExtiLine);
 800434a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800434e:	615a      	str	r2, [r3, #20]
    UI_HandleStartStopButton_cb ();
 8004350:	f7fe b9ca 	b.w	80026e8 <UI_HandleStartStopButton_cb>
 8004354:	40013c00 	.word	0x40013c00

08004358 <UASPEP_INIT>:
  }
  else
  {
#endif
    /* Enable DMA UART */
    LL_USART_ClearFlag_TC(pHandle->USARTx);
 8004358:	6802      	ldr	r2, [r0, #0]
 800435a:	4611      	mov	r1, r2
 800435c:	f06f 0340 	mvn.w	r3, #64	; 0x40
{
 8004360:	b470      	push	{r4, r5, r6}
 8004362:	f841 3b0c 	str.w	r3, [r1], #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004366:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_TCIE);
 800436a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800436e:	e841 3400 	strex	r4, r3, [r1]
 8004372:	2c00      	cmp	r4, #0
 8004374:	d1f7      	bne.n	8004366 <UASPEP_INIT+0xe>
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAT);
 8004376:	f102 0114 	add.w	r1, r2, #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800437a:	e851 3f00 	ldrex	r3, [r1]
 800437e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004382:	e841 3400 	strex	r4, r3, [r1]
 8004386:	2c00      	cmp	r4, #0
 8004388:	d1f7      	bne.n	800437a <UASPEP_INIT+0x22>
  * @param  PeriphAddress Between 0 to 0xFFFFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_DMA_SetPeriphAddress(DMA_TypeDef* DMAx, uint32_t Stream, uint32_t PeriphAddress)
{
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 800438a:	6901      	ldr	r1, [r0, #16]
 800438c:	4e16      	ldr	r6, [pc, #88]	; (80043e8 <UASPEP_INIT+0x90>)
 800438e:	6883      	ldr	r3, [r0, #8]
 8004390:	5c74      	ldrb	r4, [r6, r1]
  *         @arg @ref LL_DMA_STREAM_7
  * @retval None
  */
__STATIC_INLINE void LL_DMA_EnableIT_TC(DMA_TypeDef *DMAx, uint32_t Stream)
{
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 8004392:	6845      	ldr	r5, [r0, #4]
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 8004394:	4423      	add	r3, r4
    LL_USART_EnableDMAReq_TX(pHandle->USARTx);

    /* Write the USART_TDR register address in the DMA control register to configure it as
     * the destination of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)&pHandle->USARTx->DR);
 8004396:	1d11      	adds	r1, r2, #4
 8004398:	6099      	str	r1, [r3, #8]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_TCIE);
 800439a:	68c3      	ldr	r3, [r0, #12]
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 800439c:	4611      	mov	r1, r2
 800439e:	f06f 0440 	mvn.w	r4, #64	; 0x40
 80043a2:	f841 4b14 	str.w	r4, [r1], #20
 80043a6:	5cf4      	ldrb	r4, [r6, r3]
 80043a8:	592b      	ldr	r3, [r5, r4]
 80043aa:	f043 0310 	orr.w	r3, r3, #16
 80043ae:	512b      	str	r3, [r5, r4]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043b0:	e851 3f00 	ldrex	r3, [r1]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_EIE);
 80043b4:	f043 0301 	orr.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043b8:	e841 3400 	strex	r4, r3, [r1]
 80043bc:	2c00      	cmp	r4, #0
 80043be:	d1f7      	bne.n	80043b0 <UASPEP_INIT+0x58>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->PAR, PeriphAddress);
 80043c0:	68c3      	ldr	r3, [r0, #12]
 80043c2:	5cf3      	ldrb	r3, [r6, r3]
 80043c4:	441d      	add	r5, r3
    LL_USART_EnableIT_ERROR(pHandle->USARTx);

    /* Write the USART_RDR register address in the DMA control register to configure it as
     * the source of the transfer. */
    //cstat !MISRAC2012-Rule-11.4
    LL_DMA_SetPeriphAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)&pHandle->USARTx->DR);
 80043c6:	1d11      	adds	r1, r2, #4
  WRITE_REG(USARTx->SR, ~(USART_SR_TC));
 80043c8:	f06f 0340 	mvn.w	r3, #64	; 0x40
 80043cc:	60a9      	str	r1, [r5, #8]
 80043ce:	f842 3b14 	str.w	r3, [r2], #20
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043d2:	e852 3f00 	ldrex	r3, [r2]
  ATOMIC_SET_BIT(USARTx->CR3, USART_CR3_DMAR);
 80043d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043da:	e842 3100 	strex	r1, r3, [r2]
 80043de:	2900      	cmp	r1, #0
 80043e0:	d1f7      	bne.n	80043d2 <UASPEP_INIT+0x7a>
}
 80043e2:	bc70      	pop	{r4, r5, r6}
 80043e4:	4770      	bx	lr
 80043e6:	bf00      	nop
 80043e8:	08007ff0 	.word	0x08007ff0

080043ec <UASPEP_SEND_PACKET>:
  }
#endif
}

bool UASPEP_SEND_PACKET(void *pHWHandle, void *data, uint16_t length)
{
 80043ec:	b4f0      	push	{r4, r5, r6, r7}
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  bool result;
  if (0U == LL_DMA_IsEnabledStream(pHandle->txDMA, pHandle->txChannel))
 80043ee:	6906      	ldr	r6, [r0, #16]
  return (READ_BIT(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN) == (DMA_SxCR_EN));
 80043f0:	4f1a      	ldr	r7, [pc, #104]	; (800445c <UASPEP_SEND_PACKET+0x70>)
 80043f2:	6884      	ldr	r4, [r0, #8]
 80043f4:	5dbb      	ldrb	r3, [r7, r6]
 80043f6:	58e5      	ldr	r5, [r4, r3]
 80043f8:	07ed      	lsls	r5, r5, #31
 80043fa:	4423      	add	r3, r4
 80043fc:	d421      	bmi.n	8004442 <UASPEP_SEND_PACKET+0x56>
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 80043fe:	60d9      	str	r1, [r3, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8004400:	6859      	ldr	r1, [r3, #4]
 8004402:	0c09      	lsrs	r1, r1, #16
 8004404:	0409      	lsls	r1, r1, #16
 8004406:	4311      	orrs	r1, r2
 8004408:	6059      	str	r1, [r3, #4]
  if (NULL == DMAx)
 800440a:	b1a4      	cbz	r4, 8004436 <UASPEP_SEND_PACKET+0x4a>
    register __IO uint32_t *preg = __DMA_PTR_REG_OFFSET(DMAx->LIFCR,(Stream<=3)?0:1);
 800440c:	2e03      	cmp	r6, #3
 800440e:	f104 0308 	add.w	r3, r4, #8
 8004412:	bf88      	it	hi
 8004414:	f104 030c 	addhi.w	r3, r4, #12
    WRITE_REG (*preg, 1 << __LL_DMA_IT_TC_BIT(Stream) );
 8004418:	f016 0603 	ands.w	r6, r6, #3
 800441c:	d014      	beq.n	8004448 <UASPEP_SEND_PACKET+0x5c>
 800441e:	2e01      	cmp	r6, #1
 8004420:	d018      	beq.n	8004454 <UASPEP_SEND_PACKET+0x68>
 8004422:	2e02      	cmp	r6, #2
 8004424:	bf0c      	ite	eq
 8004426:	f44f 1200 	moveq.w	r2, #2097152	; 0x200000
 800442a:	f04f 6200 	movne.w	r2, #134217728	; 0x8000000
 800442e:	601a      	str	r2, [r3, #0]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8004430:	6903      	ldr	r3, [r0, #16]
 8004432:	5cfb      	ldrb	r3, [r7, r3]
 8004434:	4423      	add	r3, r4
 8004436:	681a      	ldr	r2, [r3, #0]
    //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
    LL_DMA_SetMemoryAddress(pHandle->txDMA, pHandle->txChannel, (uint32_t)data);
    LL_DMA_SetDataLength(pHandle->txDMA, pHandle->txChannel, length);
    LL_DMA_ClearFlag_TC(pHandle->txDMA, pHandle->txChannel);
    LL_DMA_EnableStream(pHandle->txDMA, pHandle->txChannel);
    result = true;
 8004438:	2001      	movs	r0, #1
 800443a:	4302      	orrs	r2, r0
  else
  {
    result = false;
  }
  return result;
}
 800443c:	bcf0      	pop	{r4, r5, r6, r7}
 800443e:	601a      	str	r2, [r3, #0]
 8004440:	4770      	bx	lr
    result = false;
 8004442:	2000      	movs	r0, #0
}
 8004444:	bcf0      	pop	{r4, r5, r6, r7}
 8004446:	4770      	bx	lr
 8004448:	2220      	movs	r2, #32
 800444a:	601a      	str	r2, [r3, #0]
 800444c:	6903      	ldr	r3, [r0, #16]
 800444e:	5cfb      	ldrb	r3, [r7, r3]
 8004450:	4423      	add	r3, r4
 8004452:	e7f0      	b.n	8004436 <UASPEP_SEND_PACKET+0x4a>
 8004454:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004458:	e7f7      	b.n	800444a <UASPEP_SEND_PACKET+0x5e>
 800445a:	bf00      	nop
 800445c:	08007ff0 	.word	0x08007ff0

08004460 <UASPEP_RECEIVE_BUFFER>:

void UASPEP_RECEIVE_BUFFER(void *pHWHandle, void* buffer, uint16_t length)
{
 8004460:	b430      	push	{r4, r5}
  WRITE_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->M0AR, MemoryAddress);
 8004462:	68c3      	ldr	r3, [r0, #12]
 8004464:	4d09      	ldr	r5, [pc, #36]	; (800448c <UASPEP_RECEIVE_BUFFER+0x2c>)
 8004466:	6844      	ldr	r4, [r0, #4]
 8004468:	5ce8      	ldrb	r0, [r5, r3]
 800446a:	eb04 0c00 	add.w	ip, r4, r0
 800446e:	f8cc 100c 	str.w	r1, [ip, #12]
  MODIFY_REG(((DMA_Stream_TypeDef*)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->NDTR, DMA_SxNDT, NbData);
 8004472:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8004476:	0c1b      	lsrs	r3, r3, #16
 8004478:	041b      	lsls	r3, r3, #16
 800447a:	431a      	orrs	r2, r3
 800447c:	f8cc 2004 	str.w	r2, [ip, #4]
  SET_BIT(((DMA_Stream_TypeDef *)((uint32_t)((uint32_t)DMAx + STREAM_OFFSET_TAB[Stream])))->CR, DMA_SxCR_EN);
 8004480:	5823      	ldr	r3, [r4, r0]
 8004482:	f043 0301 	orr.w	r3, r3, #1
 8004486:	5023      	str	r3, [r4, r0]
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  //cstat !MISRAC2012-Rule-11.4 !MISRAC2012-Rule-11.6
  LL_DMA_SetMemoryAddress(pHandle->rxDMA, pHandle->rxChannel, (uint32_t)buffer);
  LL_DMA_SetDataLength(pHandle->rxDMA, pHandle->rxChannel, length);
  LL_DMA_EnableStream(pHandle->rxDMA, pHandle->rxChannel);
}
 8004488:	bc30      	pop	{r4, r5}
 800448a:	4770      	bx	lr
 800448c:	08007ff0 	.word	0x08007ff0

08004490 <UASPEP_IDLE_ENABLE>:

void UASPEP_IDLE_ENABLE(void *pHWHandle)
{
  UASPEP_Handle_t *pHandle = (UASPEP_Handle_t *)pHWHandle; //cstat !MISRAC2012-Rule-11.5
  LL_USART_ClearFlag_IDLE(pHandle->USARTx);
 8004490:	6802      	ldr	r2, [r0, #0]
{
 8004492:	b082      	sub	sp, #8
  tmpreg = USARTx->SR;
 8004494:	6813      	ldr	r3, [r2, #0]
 8004496:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 8004498:	9b01      	ldr	r3, [sp, #4]
  tmpreg = USARTx->DR;
 800449a:	6853      	ldr	r3, [r2, #4]
 800449c:	9301      	str	r3, [sp, #4]
  (void) tmpreg;
 800449e:	9b01      	ldr	r3, [sp, #4]
  ATOMIC_SET_BIT(USARTx->CR1, USART_CR1_IDLEIE);
 80044a0:	320c      	adds	r2, #12
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044a2:	e852 3f00 	ldrex	r3, [r2]
 80044a6:	f043 0310 	orr.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044aa:	e842 3100 	strex	r1, r3, [r2]
 80044ae:	2900      	cmp	r1, #0
 80044b0:	d1f7      	bne.n	80044a2 <UASPEP_IDLE_ENABLE+0x12>
  LL_USART_EnableIT_IDLE(pHandle->USARTx);
}
 80044b2:	b002      	add	sp, #8
 80044b4:	4770      	bx	lr
 80044b6:	bf00      	nop

080044b8 <SystemInit>:
  */
void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80044b8:	4a03      	ldr	r2, [pc, #12]	; (80044c8 <SystemInit+0x10>)
 80044ba:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80044be:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80044c2:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80044c6:	4770      	bx	lr
 80044c8:	e000ed00 	.word	0xe000ed00

080044cc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80044cc:	b538      	push	{r3, r4, r5, lr}
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044ce:	4a0e      	ldr	r2, [pc, #56]	; (8004508 <HAL_InitTick+0x3c>)
 80044d0:	4b0e      	ldr	r3, [pc, #56]	; (800450c <HAL_InitTick+0x40>)
 80044d2:	7812      	ldrb	r2, [r2, #0]
 80044d4:	681b      	ldr	r3, [r3, #0]
{
 80044d6:	4605      	mov	r5, r0
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80044d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80044dc:	fbb0 f0f2 	udiv	r0, r0, r2
 80044e0:	fbb3 f0f0 	udiv	r0, r3, r0
 80044e4:	f000 fad4 	bl	8004a90 <HAL_SYSTICK_Config>
 80044e8:	b908      	cbnz	r0, 80044ee <HAL_InitTick+0x22>
  {
    return HAL_ERROR;
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80044ea:	2d0f      	cmp	r5, #15
 80044ec:	d901      	bls.n	80044f2 <HAL_InitTick+0x26>
    return HAL_ERROR;
 80044ee:	2001      	movs	r0, #1
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
}
 80044f0:	bd38      	pop	{r3, r4, r5, pc}
 80044f2:	4604      	mov	r4, r0
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80044f4:	4602      	mov	r2, r0
 80044f6:	4629      	mov	r1, r5
 80044f8:	f04f 30ff 	mov.w	r0, #4294967295
 80044fc:	f000 fa7c 	bl	80049f8 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004500:	4b03      	ldr	r3, [pc, #12]	; (8004510 <HAL_InitTick+0x44>)
 8004502:	4620      	mov	r0, r4
 8004504:	601d      	str	r5, [r3, #0]
}
 8004506:	bd38      	pop	{r3, r4, r5, pc}
 8004508:	2000067c 	.word	0x2000067c
 800450c:	20000678 	.word	0x20000678
 8004510:	20000680 	.word	0x20000680

08004514 <HAL_Init>:
{
 8004514:	b508      	push	{r3, lr}
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004516:	4b0b      	ldr	r3, [pc, #44]	; (8004544 <HAL_Init+0x30>)
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800451e:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004520:	681a      	ldr	r2, [r3, #0]
 8004522:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004526:	601a      	str	r2, [r3, #0]
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452e:	601a      	str	r2, [r3, #0]
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004530:	2003      	movs	r0, #3
 8004532:	f000 fa4f 	bl	80049d4 <HAL_NVIC_SetPriorityGrouping>
  HAL_InitTick(TICK_INT_PRIORITY);
 8004536:	2004      	movs	r0, #4
 8004538:	f7ff ffc8 	bl	80044cc <HAL_InitTick>
  HAL_MspInit();
 800453c:	f7ff fcd0 	bl	8003ee0 <HAL_MspInit>
}
 8004540:	2000      	movs	r0, #0
 8004542:	bd08      	pop	{r3, pc}
 8004544:	40023c00 	.word	0x40023c00

08004548 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8004548:	4a03      	ldr	r2, [pc, #12]	; (8004558 <HAL_IncTick+0x10>)
 800454a:	4b04      	ldr	r3, [pc, #16]	; (800455c <HAL_IncTick+0x14>)
 800454c:	6811      	ldr	r1, [r2, #0]
 800454e:	781b      	ldrb	r3, [r3, #0]
 8004550:	440b      	add	r3, r1
 8004552:	6013      	str	r3, [r2, #0]
}
 8004554:	4770      	bx	lr
 8004556:	bf00      	nop
 8004558:	20001bf0 	.word	0x20001bf0
 800455c:	2000067c 	.word	0x2000067c

08004560 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8004560:	4b01      	ldr	r3, [pc, #4]	; (8004568 <HAL_GetTick+0x8>)
 8004562:	6818      	ldr	r0, [r3, #0]
}
 8004564:	4770      	bx	lr
 8004566:	bf00      	nop
 8004568:	20001bf0 	.word	0x20001bf0

0800456c <HAL_ADC_Init>:
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
  
  /* Check ADC handle */
  if(hadc == NULL)
 800456c:	2800      	cmp	r0, #0
 800456e:	f000 809f 	beq.w	80046b0 <HAL_ADC_Init+0x144>
{
 8004572:	b538      	push	{r3, r4, r5, lr}
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8004574:	6c05      	ldr	r5, [r0, #64]	; 0x40
 8004576:	4604      	mov	r4, r0
 8004578:	b13d      	cbz	r5, 800458a <HAL_ADC_Init+0x1e>
    hadc->Lock = HAL_UNLOCKED;
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800457a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800457c:	06db      	lsls	r3, r3, #27
 800457e:	d50c      	bpl.n	800459a <HAL_ADC_Init+0x2e>
  {
    tmp_hal_status = HAL_ERROR;
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8004580:	2300      	movs	r3, #0
 8004582:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
    tmp_hal_status = HAL_ERROR;
 8004586:	2001      	movs	r0, #1

  /* Return function status */
  return tmp_hal_status;
}
 8004588:	bd38      	pop	{r3, r4, r5, pc}
    HAL_ADC_MspInit(hadc);
 800458a:	f7ff fcc7 	bl	8003f1c <HAL_ADC_MspInit>
    ADC_CLEAR_ERRORCODE(hadc);
 800458e:	6465      	str	r5, [r4, #68]	; 0x44
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004590:	6c23      	ldr	r3, [r4, #64]	; 0x40
    hadc->Lock = HAL_UNLOCKED;
 8004592:	f884 503c 	strb.w	r5, [r4, #60]	; 0x3c
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8004596:	06db      	lsls	r3, r3, #27
 8004598:	d4f2      	bmi.n	8004580 <HAL_ADC_Init+0x14>
    ADC_STATE_CLR_SET(hadc->State,
 800459a:	6c23      	ldr	r3, [r4, #64]	; 0x40
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 800459c:	4a48      	ldr	r2, [pc, #288]	; (80046c0 <HAL_ADC_Init+0x154>)
    ADC_STATE_CLR_SET(hadc->State,
 800459e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80045a2:	f023 0302 	bic.w	r3, r3, #2
 80045a6:	f043 0302 	orr.w	r3, r3, #2
 80045aa:	6423      	str	r3, [r4, #64]	; 0x40
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045ac:	6851      	ldr	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045ae:	6823      	ldr	r3, [r4, #0]
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80045b0:	f421 3140 	bic.w	r1, r1, #196608	; 0x30000
 80045b4:	6051      	str	r1, [r2, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80045b6:	6851      	ldr	r1, [r2, #4]
 80045b8:	6860      	ldr	r0, [r4, #4]
 80045ba:	4301      	orrs	r1, r0
 80045bc:	6051      	str	r1, [r2, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045be:	685a      	ldr	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045c0:	6925      	ldr	r5, [r4, #16]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045c2:	68a0      	ldr	r0, [r4, #8]
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80045c4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045c8:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80045ca:	6859      	ldr	r1, [r3, #4]
 80045cc:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80045d0:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80045d2:	6859      	ldr	r1, [r3, #4]
 80045d4:	f021 7140 	bic.w	r1, r1, #50331648	; 0x3000000
 80045d8:	6059      	str	r1, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80045da:	685a      	ldr	r2, [r3, #4]
 80045dc:	4302      	orrs	r2, r0
 80045de:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045e0:	6899      	ldr	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045e2:	68e0      	ldr	r0, [r4, #12]
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80045e4:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
 80045e8:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045ea:	689a      	ldr	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045ec:	6aa1      	ldr	r1, [r4, #40]	; 0x28
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80045ee:	4302      	orrs	r2, r0
 80045f0:	609a      	str	r2, [r3, #8]
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80045f2:	4a34      	ldr	r2, [pc, #208]	; (80046c4 <HAL_ADC_Init+0x158>)
 80045f4:	4291      	cmp	r1, r2
 80045f6:	d052      	beq.n	800469e <HAL_ADC_Init+0x132>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045f8:	6898      	ldr	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80045fa:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80045fc:	f020 6070 	bic.w	r0, r0, #251658240	; 0xf000000
 8004600:	6098      	str	r0, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8004602:	689a      	ldr	r2, [r3, #8]
 8004604:	4311      	orrs	r1, r2
 8004606:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004608:	6899      	ldr	r1, [r3, #8]
 800460a:	f021 5140 	bic.w	r1, r1, #805306368	; 0x30000000
 800460e:	6099      	str	r1, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8004610:	689a      	ldr	r2, [r3, #8]
 8004612:	432a      	orrs	r2, r5
 8004614:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	f022 0202 	bic.w	r2, r2, #2
 800461c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800461e:	689a      	ldr	r2, [r3, #8]
 8004620:	7e21      	ldrb	r1, [r4, #24]
 8004622:	ea42 0241 	orr.w	r2, r2, r1, lsl #1
 8004626:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004628:	f894 2020 	ldrb.w	r2, [r4, #32]
 800462c:	2a00      	cmp	r2, #0
 800462e:	d041      	beq.n	80046b4 <HAL_ADC_Init+0x148>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004630:	6859      	ldr	r1, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004632:	6a62      	ldr	r2, [r4, #36]	; 0x24
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004634:	f441 6100 	orr.w	r1, r1, #2048	; 0x800
 8004638:	6059      	str	r1, [r3, #4]
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800463a:	6858      	ldr	r0, [r3, #4]
 800463c:	f420 4060 	bic.w	r0, r0, #57344	; 0xe000
 8004640:	6058      	str	r0, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004642:	1e51      	subs	r1, r2, #1
 8004644:	685a      	ldr	r2, [r3, #4]
 8004646:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 800464a:	605a      	str	r2, [r3, #4]
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800464c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800464e:	69e1      	ldr	r1, [r4, #28]
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004650:	6965      	ldr	r5, [r4, #20]
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8004652:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8004656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8004658:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800465a:	3901      	subs	r1, #1
 800465c:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8004660:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8004662:	6899      	ldr	r1, [r3, #8]
 8004664:	f421 7100 	bic.w	r1, r1, #512	; 0x200
 8004668:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800466a:	6899      	ldr	r1, [r3, #8]
 800466c:	f894 2030 	ldrb.w	r2, [r4, #48]	; 0x30
 8004670:	ea41 2142 	orr.w	r1, r1, r2, lsl #9
 8004674:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8004676:	6899      	ldr	r1, [r3, #8]
 8004678:	f421 6180 	bic.w	r1, r1, #1024	; 0x400
 800467c:	6099      	str	r1, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800467e:	689a      	ldr	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004680:	2000      	movs	r0, #0
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004682:	ea42 2285 	orr.w	r2, r2, r5, lsl #10
 8004686:	609a      	str	r2, [r3, #8]
    ADC_CLEAR_ERRORCODE(hadc);
 8004688:	6460      	str	r0, [r4, #68]	; 0x44
    ADC_STATE_CLR_SET(hadc->State,
 800468a:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800468c:	f023 0303 	bic.w	r3, r3, #3
 8004690:	f043 0301 	orr.w	r3, r3, #1
 8004694:	6423      	str	r3, [r4, #64]	; 0x40
  __HAL_UNLOCK(hadc);
 8004696:	2300      	movs	r3, #0
 8004698:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
}
 800469c:	bd38      	pop	{r3, r4, r5, pc}
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800469e:	689a      	ldr	r2, [r3, #8]
 80046a0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80046a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80046a6:	689a      	ldr	r2, [r3, #8]
 80046a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80046ac:	609a      	str	r2, [r3, #8]
 80046ae:	e7b2      	b.n	8004616 <HAL_ADC_Init+0xaa>
    return HAL_ERROR;
 80046b0:	2001      	movs	r0, #1
}
 80046b2:	4770      	bx	lr
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80046b4:	685a      	ldr	r2, [r3, #4]
 80046b6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80046ba:	605a      	str	r2, [r3, #4]
 80046bc:	e7c6      	b.n	800464c <HAL_ADC_Init+0xe0>
 80046be:	bf00      	nop
 80046c0:	40012300 	.word	0x40012300
 80046c4:	0f000001 	.word	0x0f000001

080046c8 <HAL_ADC_ConfigChannel>:
{
 80046c8:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hadc);
 80046ca:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
{
 80046ce:	b083      	sub	sp, #12
  __IO uint32_t counter = 0U;
 80046d0:	2200      	movs	r2, #0
  __HAL_LOCK(hadc);
 80046d2:	2b01      	cmp	r3, #1
  __IO uint32_t counter = 0U;
 80046d4:	9201      	str	r2, [sp, #4]
  __HAL_LOCK(hadc);
 80046d6:	f000 809c 	beq.w	8004812 <HAL_ADC_ConfigChannel+0x14a>
 80046da:	2301      	movs	r3, #1
 80046dc:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046e0:	680c      	ldr	r4, [r1, #0]
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80046e2:	6803      	ldr	r3, [r0, #0]
  if (sConfig->Channel > ADC_CHANNEL_9)
 80046e4:	2c09      	cmp	r4, #9
 80046e6:	d82d      	bhi.n	8004744 <HAL_ADC_ConfigChannel+0x7c>
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046e8:	691d      	ldr	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046ea:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80046ec:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80046f0:	f04f 0c07 	mov.w	ip, #7
 80046f4:	fa0c fc0e 	lsl.w	ip, ip, lr
 80046f8:	ea25 050c 	bic.w	r5, r5, ip
 80046fc:	611d      	str	r5, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80046fe:	691d      	ldr	r5, [r3, #16]
 8004700:	fa02 f20e 	lsl.w	r2, r2, lr
 8004704:	432a      	orrs	r2, r5
 8004706:	611a      	str	r2, [r3, #16]
  if (sConfig->Rank < 7U)
 8004708:	684a      	ldr	r2, [r1, #4]
 800470a:	2a06      	cmp	r2, #6
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800470c:	46a4      	mov	ip, r4
  if (sConfig->Rank < 7U)
 800470e:	d82f      	bhi.n	8004770 <HAL_ADC_ConfigChannel+0xa8>
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004710:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004714:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8004716:	3a05      	subs	r2, #5
 8004718:	f04f 0e1f 	mov.w	lr, #31
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800471c:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8004720:	fa0e f202 	lsl.w	r2, lr, r2
 8004724:	ea21 0202 	bic.w	r2, r1, r2
 8004728:	635a      	str	r2, [r3, #52]	; 0x34
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800472a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800472c:	ea4c 0202 	orr.w	r2, ip, r2
 8004730:	635a      	str	r2, [r3, #52]	; 0x34
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004732:	4a39      	ldr	r2, [pc, #228]	; (8004818 <HAL_ADC_ConfigChannel+0x150>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d030      	beq.n	800479a <HAL_ADC_ConfigChannel+0xd2>
  __HAL_UNLOCK(hadc);
 8004738:	2300      	movs	r3, #0
 800473a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  return HAL_OK;
 800473e:	4618      	mov	r0, r3
}
 8004740:	b003      	add	sp, #12
 8004742:	bd30      	pop	{r4, r5, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8004744:	fa1f fc84 	uxth.w	ip, r4
 8004748:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 800474c:	68dd      	ldr	r5, [r3, #12]
 800474e:	f1a2 0e1e 	sub.w	lr, r2, #30
 8004752:	2207      	movs	r2, #7
 8004754:	fa02 f20e 	lsl.w	r2, r2, lr
 8004758:	ea25 0202 	bic.w	r2, r5, r2
 800475c:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800475e:	688a      	ldr	r2, [r1, #8]
 8004760:	68dd      	ldr	r5, [r3, #12]
 8004762:	fa02 f20e 	lsl.w	r2, r2, lr
 8004766:	432a      	orrs	r2, r5
 8004768:	60da      	str	r2, [r3, #12]
  if (sConfig->Rank < 7U)
 800476a:	684a      	ldr	r2, [r1, #4]
 800476c:	2a06      	cmp	r2, #6
 800476e:	d9cf      	bls.n	8004710 <HAL_ADC_ConfigChannel+0x48>
  else if (sConfig->Rank < 13U)
 8004770:	2a0c      	cmp	r2, #12
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004772:	eb02 0282 	add.w	r2, r2, r2, lsl #2
  else if (sConfig->Rank < 13U)
 8004776:	d836      	bhi.n	80047e6 <HAL_ADC_ConfigChannel+0x11e>
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004778:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800477a:	3a23      	subs	r2, #35	; 0x23
 800477c:	251f      	movs	r5, #31
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800477e:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004782:	fa05 f202 	lsl.w	r2, r5, r2
 8004786:	ea21 0202 	bic.w	r2, r1, r2
 800478a:	631a      	str	r2, [r3, #48]	; 0x30
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800478c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800478e:	ea4c 0202 	orr.w	r2, ip, r2
 8004792:	631a      	str	r2, [r3, #48]	; 0x30
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8004794:	4a20      	ldr	r2, [pc, #128]	; (8004818 <HAL_ADC_ConfigChannel+0x150>)
 8004796:	4293      	cmp	r3, r2
 8004798:	d1ce      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x70>
 800479a:	2c12      	cmp	r4, #18
 800479c:	d032      	beq.n	8004804 <HAL_ADC_ConfigChannel+0x13c>
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800479e:	f1a4 0310 	sub.w	r3, r4, #16
 80047a2:	2b01      	cmp	r3, #1
 80047a4:	d8c8      	bhi.n	8004738 <HAL_ADC_ConfigChannel+0x70>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047a6:	4a1d      	ldr	r2, [pc, #116]	; (800481c <HAL_ADC_ConfigChannel+0x154>)
 80047a8:	6853      	ldr	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047aa:	2c10      	cmp	r4, #16
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80047ac:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80047b0:	6053      	str	r3, [r2, #4]
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80047b2:	d1c1      	bne.n	8004738 <HAL_ADC_ConfigChannel+0x70>
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80047b4:	4b1a      	ldr	r3, [pc, #104]	; (8004820 <HAL_ADC_ConfigChannel+0x158>)
 80047b6:	f102 7246 	add.w	r2, r2, #51904512	; 0x3180000
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f502 322e 	add.w	r2, r2, #178176	; 0x2b800
 80047c0:	f202 3283 	addw	r2, r2, #899	; 0x383
 80047c4:	fba2 2303 	umull	r2, r3, r2, r3
 80047c8:	0c9b      	lsrs	r3, r3, #18
 80047ca:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80047ce:	005b      	lsls	r3, r3, #1
 80047d0:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80047d2:	9b01      	ldr	r3, [sp, #4]
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0af      	beq.n	8004738 <HAL_ADC_ConfigChannel+0x70>
        counter--;
 80047d8:	9b01      	ldr	r3, [sp, #4]
 80047da:	3b01      	subs	r3, #1
 80047dc:	9301      	str	r3, [sp, #4]
      while(counter != 0U)
 80047de:	9b01      	ldr	r3, [sp, #4]
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d1f9      	bne.n	80047d8 <HAL_ADC_ConfigChannel+0x110>
 80047e4:	e7a8      	b.n	8004738 <HAL_ADC_ConfigChannel+0x70>
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047e6:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80047e8:	3a41      	subs	r2, #65	; 0x41
 80047ea:	251f      	movs	r5, #31
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047ec:	fa0c fc02 	lsl.w	ip, ip, r2
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80047f0:	fa05 f202 	lsl.w	r2, r5, r2
 80047f4:	ea21 0202 	bic.w	r2, r1, r2
 80047f8:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80047fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80047fc:	ea4c 0202 	orr.w	r2, ip, r2
 8004800:	62da      	str	r2, [r3, #44]	; 0x2c
 8004802:	e796      	b.n	8004732 <HAL_ADC_ConfigChannel+0x6a>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8004804:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 8004808:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800480c:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8004810:	e792      	b.n	8004738 <HAL_ADC_ConfigChannel+0x70>
  __HAL_LOCK(hadc);
 8004812:	2002      	movs	r0, #2
}
 8004814:	b003      	add	sp, #12
 8004816:	bd30      	pop	{r4, r5, pc}
 8004818:	40012000 	.word	0x40012000
 800481c:	40012300 	.word	0x40012300
 8004820:	20000678 	.word	0x20000678

08004824 <HAL_ADCEx_InjectedConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfigInjected ADC configuration structure for injected channel. 
  * @retval None
  */
HAL_StatusTypeDef HAL_ADCEx_InjectedConfigChannel(ADC_HandleTypeDef* hadc, ADC_InjectionConfTypeDef* sConfigInjected)
{
 8004824:	b5f0      	push	{r4, r5, r6, r7, lr}
  {
    assert_param(IS_ADC_EXT_INJEC_TRIG_EDGE(sConfigInjected->ExternalTrigInjecConvEdge));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8004826:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 800482a:	698e      	ldr	r6, [r1, #24]
  __HAL_LOCK(hadc);
 800482c:	2b01      	cmp	r3, #1
 800482e:	f000 80c8 	beq.w	80049c2 <HAL_ADCEx_InjectedConfigChannel+0x19e>
 8004832:	2301      	movs	r3, #1
 8004834:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 8004838:	680d      	ldr	r5, [r1, #0]
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 800483a:	6803      	ldr	r3, [r0, #0]
  if (sConfigInjected->InjectedChannel > ADC_CHANNEL_9)
 800483c:	2d09      	cmp	r5, #9
 800483e:	d868      	bhi.n	8004912 <HAL_ADCEx_InjectedConfigChannel+0xee>
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004840:	691c      	ldr	r4, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004842:	688a      	ldr	r2, [r1, #8]
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfigInjected->InjectedChannel);
 8004844:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8004848:	2707      	movs	r7, #7
 800484a:	fa07 f70c 	lsl.w	r7, r7, ip
 800484e:	ea24 0407 	bic.w	r4, r4, r7
 8004852:	611c      	str	r4, [r3, #16]
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 8004854:	691c      	ldr	r4, [r3, #16]
 8004856:	fa02 f20c 	lsl.w	r2, r2, ip
 800485a:	4322      	orrs	r2, r4
 800485c:	611a      	str	r2, [r3, #16]
 800485e:	46ac      	mov	ip, r5
  }
  
  /*---------------------------- ADCx JSQR Configuration -----------------*/
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004860:	6b9a      	ldr	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 8004862:	f8d1 e010 	ldr.w	lr, [r1, #16]
  
  /* Rank configuration */
  
  /* Clear the old SQx bits for the selected rank */
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004866:	684c      	ldr	r4, [r1, #4]
  hadc->Instance->JSQR &= ~(ADC_JSQR_JL);
 8004868:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 800486c:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800486e:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8004870:	f10e 32ff 	add.w	r2, lr, #4294967295
 8004874:	ea47 5702 	orr.w	r7, r7, r2, lsl #20
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004878:	1ce2      	adds	r2, r4, #3
 800487a:	eba2 020e 	sub.w	r2, r2, lr
  hadc->Instance->JSQR |=  ADC_SQR1(sConfigInjected->InjectedNbrOfConversion);
 800487e:	639f      	str	r7, [r3, #56]	; 0x38
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004880:	b2d2      	uxtb	r2, r2
 8004882:	6b9f      	ldr	r7, [r3, #56]	; 0x38
 8004884:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8004888:	f04f 0e1f 	mov.w	lr, #31
   
  /* Set the SQx bits for the selected rank */
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800488c:	fa0c fc02 	lsl.w	ip, ip, r2
  hadc->Instance->JSQR &= ~ADC_JSQR(ADC_JSQR_JSQ1, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 8004890:	fa0e f202 	lsl.w	r2, lr, r2
 8004894:	ea27 0202 	bic.w	r2, r7, r2
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
  hadc->Instance->JSQR |= ADC_JSQR(sConfigInjected->InjectedChannel, sConfigInjected->InjectedRank,sConfigInjected->InjectedNbrOfConversion);
 800489a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800489c:	ea4c 0202 	orr.w	r2, ip, r2
 80048a0:	639a      	str	r2, [r3, #56]	; 0x38
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */ 
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80048a2:	4a49      	ldr	r2, [pc, #292]	; (80049c8 <HAL_ADCEx_InjectedConfigChannel+0x1a4>)
 80048a4:	4296      	cmp	r6, r2
  {  
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
 80048a6:	689a      	ldr	r2, [r3, #8]
 80048a8:	f422 2270 	bic.w	r2, r2, #983040	; 0xf0000
 80048ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80048ae:	689a      	ldr	r2, [r3, #8]
  if(sConfigInjected->ExternalTrigInjecConv != ADC_INJECTED_SOFTWARE_START)
 80048b0:	d066      	beq.n	8004980 <HAL_ADCEx_InjectedConfigChannel+0x15c>
    hadc->Instance->CR2 |=  sConfigInjected->ExternalTrigInjecConv;
 80048b2:	4316      	orrs	r6, r2
 80048b4:	609e      	str	r6, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80048b6:	689a      	ldr	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80048b8:	69ce      	ldr	r6, [r1, #28]
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);
 80048ba:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80048be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= sConfigInjected->ExternalTrigInjecConvEdge;
 80048c0:	689a      	ldr	r2, [r3, #8]
 80048c2:	4332      	orrs	r2, r6
 80048c4:	609a      	str	r2, [r3, #8]
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTSEL);
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
  }
  
  if (sConfigInjected->AutoInjectedConv != DISABLE)
 80048c6:	7d4a      	ldrb	r2, [r1, #21]
 80048c8:	2a00      	cmp	r2, #0
 80048ca:	d034      	beq.n	8004936 <HAL_ADCEx_InjectedConfigChannel+0x112>
  {
    /* Enable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 |= ADC_CR1_JAUTO;
 80048cc:	685a      	ldr	r2, [r3, #4]
 80048ce:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80048d2:	605a      	str	r2, [r3, #4]
  {
    /* Disable the selected ADC automatic injected group conversion */
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
  }
  
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 80048d4:	7d0a      	ldrb	r2, [r1, #20]
 80048d6:	2a00      	cmp	r2, #0
 80048d8:	d034      	beq.n	8004944 <HAL_ADCEx_InjectedConfigChannel+0x120>
  {
    /* Enable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80048da:	685a      	ldr	r2, [r3, #4]
  {
    /* Disable the selected ADC injected discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
  }
  
  switch(sConfigInjected->InjectedRank)
 80048dc:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 |= ADC_CR1_JDISCEN;
 80048de:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80048e2:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 80048e4:	d034      	beq.n	8004950 <HAL_ADCEx_InjectedConfigChannel+0x12c>
 80048e6:	2c03      	cmp	r4, #3
 80048e8:	d059      	beq.n	800499e <HAL_ADCEx_InjectedConfigChannel+0x17a>
 80048ea:	2c01      	cmp	r4, #1
 80048ec:	d04c      	beq.n	8004988 <HAL_ADCEx_InjectedConfigChannel+0x164>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
      break;
    default:
      /* Set injected channel 4 offset */
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80048ee:	6a1a      	ldr	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80048f0:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR4 &= ~(ADC_JOFR4_JOFFSET4);
 80048f2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80048f6:	f022 020f 	bic.w	r2, r2, #15
 80048fa:	621a      	str	r2, [r3, #32]
      hadc->Instance->JOFR4 |= sConfigInjected->InjectedOffset;
 80048fc:	6a1a      	ldr	r2, [r3, #32]
 80048fe:	430a      	orrs	r2, r1
 8004900:	621a      	str	r2, [r3, #32]
  /* (Depending on STM32F4 product, there may be up to 3 ADC and 1 common */
  /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004902:	4a32      	ldr	r2, [pc, #200]	; (80049cc <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8004904:	4293      	cmp	r3, r2
 8004906:	d030      	beq.n	800496a <HAL_ADCEx_InjectedConfigChannel+0x146>
    /* Enable the TSVREFE channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8004908:	2300      	movs	r3, #0
 800490a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800490e:	4618      	mov	r0, r3
}
 8004910:	bdf0      	pop	{r4, r5, r6, r7, pc}
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfigInjected->InjectedChannel);
 8004912:	fa1f fc85 	uxth.w	ip, r5
 8004916:	eb0c 024c 	add.w	r2, ip, ip, lsl #1
 800491a:	f1a2 041e 	sub.w	r4, r2, #30
 800491e:	2707      	movs	r7, #7
 8004920:	68da      	ldr	r2, [r3, #12]
 8004922:	40a7      	lsls	r7, r4
 8004924:	ea22 0207 	bic.w	r2, r2, r7
 8004928:	60da      	str	r2, [r3, #12]
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfigInjected->InjectedSamplingTime, sConfigInjected->InjectedChannel);
 800492a:	688a      	ldr	r2, [r1, #8]
 800492c:	40a2      	lsls	r2, r4
 800492e:	68dc      	ldr	r4, [r3, #12]
 8004930:	4322      	orrs	r2, r4
 8004932:	60da      	str	r2, [r3, #12]
 8004934:	e794      	b.n	8004860 <HAL_ADCEx_InjectedConfigChannel+0x3c>
    hadc->Instance->CR1 &= ~(ADC_CR1_JAUTO);
 8004936:	685a      	ldr	r2, [r3, #4]
 8004938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800493c:	605a      	str	r2, [r3, #4]
  if (sConfigInjected->InjectedDiscontinuousConvMode != DISABLE)
 800493e:	7d0a      	ldrb	r2, [r1, #20]
 8004940:	2a00      	cmp	r2, #0
 8004942:	d1ca      	bne.n	80048da <HAL_ADCEx_InjectedConfigChannel+0xb6>
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004944:	685a      	ldr	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 8004946:	2c02      	cmp	r4, #2
    hadc->Instance->CR1 &= ~(ADC_CR1_JDISCEN);
 8004948:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800494c:	605a      	str	r2, [r3, #4]
  switch(sConfigInjected->InjectedRank)
 800494e:	d1ca      	bne.n	80048e6 <HAL_ADCEx_InjectedConfigChannel+0xc2>
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004950:	699a      	ldr	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 8004952:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR2 &= ~(ADC_JOFR2_JOFFSET2);
 8004954:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004958:	f022 020f 	bic.w	r2, r2, #15
 800495c:	619a      	str	r2, [r3, #24]
      hadc->Instance->JOFR2 |= sConfigInjected->InjectedOffset;
 800495e:	699a      	ldr	r2, [r3, #24]
 8004960:	430a      	orrs	r2, r1
 8004962:	619a      	str	r2, [r3, #24]
  if ((hadc->Instance == ADC1) && (sConfigInjected->InjectedChannel == ADC_CHANNEL_VBAT))
 8004964:	4a19      	ldr	r2, [pc, #100]	; (80049cc <HAL_ADCEx_InjectedConfigChannel+0x1a8>)
 8004966:	4293      	cmp	r3, r2
 8004968:	d1ce      	bne.n	8004908 <HAL_ADCEx_InjectedConfigChannel+0xe4>
 800496a:	2d12      	cmp	r5, #18
 800496c:	d022      	beq.n	80049b4 <HAL_ADCEx_InjectedConfigChannel+0x190>
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 800496e:	3d10      	subs	r5, #16
 8004970:	2d01      	cmp	r5, #1
 8004972:	d8c9      	bhi.n	8004908 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8004974:	4a16      	ldr	r2, [pc, #88]	; (80049d0 <HAL_ADCEx_InjectedConfigChannel+0x1ac>)
 8004976:	6853      	ldr	r3, [r2, #4]
 8004978:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800497c:	6053      	str	r3, [r2, #4]
 800497e:	e7c3      	b.n	8004908 <HAL_ADCEx_InjectedConfigChannel+0xe4>
    hadc->Instance->CR2 &= ~(ADC_CR2_JEXTEN);  
 8004980:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8004984:	609a      	str	r2, [r3, #8]
 8004986:	e79e      	b.n	80048c6 <HAL_ADCEx_InjectedConfigChannel+0xa2>
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 8004988:	695a      	ldr	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 800498a:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR1 &= ~(ADC_JOFR1_JOFFSET1);
 800498c:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 8004990:	f022 020f 	bic.w	r2, r2, #15
 8004994:	615a      	str	r2, [r3, #20]
      hadc->Instance->JOFR1 |= sConfigInjected->InjectedOffset;
 8004996:	695a      	ldr	r2, [r3, #20]
 8004998:	430a      	orrs	r2, r1
 800499a:	615a      	str	r2, [r3, #20]
      break;
 800499c:	e7b1      	b.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0xde>
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 800499e:	69da      	ldr	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80049a0:	68c9      	ldr	r1, [r1, #12]
      hadc->Instance->JOFR3 &= ~(ADC_JOFR3_JOFFSET3);
 80049a2:	f422 627f 	bic.w	r2, r2, #4080	; 0xff0
 80049a6:	f022 020f 	bic.w	r2, r2, #15
 80049aa:	61da      	str	r2, [r3, #28]
      hadc->Instance->JOFR3 |= sConfigInjected->InjectedOffset;
 80049ac:	69da      	ldr	r2, [r3, #28]
 80049ae:	430a      	orrs	r2, r1
 80049b0:	61da      	str	r2, [r3, #28]
      break;
 80049b2:	e7a6      	b.n	8004902 <HAL_ADCEx_InjectedConfigChannel+0xde>
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80049b4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
 80049b8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80049bc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
  if ((hadc->Instance == ADC1) && ((sConfigInjected->InjectedChannel == ADC_CHANNEL_TEMPSENSOR) || (sConfigInjected->InjectedChannel == ADC_CHANNEL_VREFINT)))
 80049c0:	e7a2      	b.n	8004908 <HAL_ADCEx_InjectedConfigChannel+0xe4>
  __HAL_LOCK(hadc);
 80049c2:	2002      	movs	r0, #2
}
 80049c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049c6:	bf00      	nop
 80049c8:	000f0001 	.word	0x000f0001
 80049cc:	40012000 	.word	0x40012000
 80049d0:	40012300 	.word	0x40012300

080049d4 <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80049d4:	4907      	ldr	r1, [pc, #28]	; (80049f4 <HAL_NVIC_SetPriorityGrouping+0x20>)
 80049d6:	68ca      	ldr	r2, [r1, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049d8:	0203      	lsls	r3, r0, #8
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049da:	f64f 00ff 	movw	r0, #63743	; 0xf8ff
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80049de:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80049e2:	4002      	ands	r2, r0
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80049e4:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80049e6:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80049ea:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  SCB->AIRCR =  reg_value;
 80049ee:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80049f0:	4770      	bx	lr
 80049f2:	bf00      	nop
 80049f4:	e000ed00 	.word	0xe000ed00

080049f8 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80049f8:	4b1c      	ldr	r3, [pc, #112]	; (8004a6c <HAL_NVIC_SetPriority+0x74>)
 80049fa:	68db      	ldr	r3, [r3, #12]
 80049fc:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004a00:	b500      	push	{lr}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a02:	f1c3 0e07 	rsb	lr, r3, #7
 8004a06:	f1be 0f04 	cmp.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a0a:	f103 0c04 	add.w	ip, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004a0e:	bf28      	it	cs
 8004a10:	f04f 0e04 	movcs.w	lr, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a14:	f1bc 0f06 	cmp.w	ip, #6
 8004a18:	d91b      	bls.n	8004a52 <HAL_NVIC_SetPriority+0x5a>
 8004a1a:	3b03      	subs	r3, #3

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8004a20:	fa0c fc03 	lsl.w	ip, ip, r3
 8004a24:	ea22 020c 	bic.w	r2, r2, ip
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a28:	f04f 3cff 	mov.w	ip, #4294967295
 8004a2c:	fa0c fc0e 	lsl.w	ip, ip, lr
 8004a30:	ea21 010c 	bic.w	r1, r1, ip
 8004a34:	4099      	lsls	r1, r3
  if ((int32_t)(IRQn) >= 0)
 8004a36:	2800      	cmp	r0, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004a38:	ea41 0102 	orr.w	r1, r1, r2
  if ((int32_t)(IRQn) >= 0)
 8004a3c:	db0c      	blt.n	8004a58 <HAL_NVIC_SetPriority+0x60>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a3e:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8004a42:	0109      	lsls	r1, r1, #4
 8004a44:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8004a48:	b2c9      	uxtb	r1, r1
 8004a4a:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8004a4e:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a52:	2200      	movs	r2, #0
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004a54:	4613      	mov	r3, r2
 8004a56:	e7e7      	b.n	8004a28 <HAL_NVIC_SetPriority+0x30>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a58:	4b05      	ldr	r3, [pc, #20]	; (8004a70 <HAL_NVIC_SetPriority+0x78>)
 8004a5a:	f000 000f 	and.w	r0, r0, #15
 8004a5e:	0109      	lsls	r1, r1, #4
 8004a60:	4403      	add	r3, r0
 8004a62:	b2c9      	uxtb	r1, r1
 8004a64:	7619      	strb	r1, [r3, #24]
 8004a66:	f85d fb04 	ldr.w	pc, [sp], #4
 8004a6a:	bf00      	nop
 8004a6c:	e000ed00 	.word	0xe000ed00
 8004a70:	e000ecfc 	.word	0xe000ecfc

08004a74 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8004a74:	2800      	cmp	r0, #0
 8004a76:	db08      	blt.n	8004a8a <HAL_NVIC_EnableIRQ+0x16>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004a78:	0941      	lsrs	r1, r0, #5
 8004a7a:	4a04      	ldr	r2, [pc, #16]	; (8004a8c <HAL_NVIC_EnableIRQ+0x18>)
 8004a7c:	f000 001f 	and.w	r0, r0, #31
 8004a80:	2301      	movs	r3, #1
 8004a82:	fa03 f000 	lsl.w	r0, r3, r0
 8004a86:	f842 0021 	str.w	r0, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8004a8a:	4770      	bx	lr
 8004a8c:	e000e100 	.word	0xe000e100

08004a90 <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004a90:	3801      	subs	r0, #1
 8004a92:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8004a96:	d210      	bcs.n	8004aba <HAL_SYSTICK_Config+0x2a>
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004a98:	b410      	push	{r4}
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004a9a:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004a9e:	4c08      	ldr	r4, [pc, #32]	; (8004ac0 <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004aa0:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004aa2:	f04f 0cf0 	mov.w	ip, #240	; 0xf0
 8004aa6:	f884 c023 	strb.w	ip, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004aaa:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004aac:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004aae:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004ab0:	619a      	str	r2, [r3, #24]
   return SysTick_Config(TicksNumb);
}
 8004ab2:	f85d 4b04 	ldr.w	r4, [sp], #4
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004ab6:	6119      	str	r1, [r3, #16]
 8004ab8:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 8004aba:	2001      	movs	r0, #1
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	e000ed00 	.word	0xe000ed00

08004ac4 <HAL_SYSTICK_Callback>:
__weak void HAL_SYSTICK_Callback(void)
{
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_SYSTICK_Callback could be implemented in the user file
   */
}
 8004ac4:	4770      	bx	lr
 8004ac6:	bf00      	nop

08004ac8 <HAL_SYSTICK_IRQHandler>:
{
 8004ac8:	b508      	push	{r3, lr}
  HAL_SYSTICK_Callback();
 8004aca:	f7ff fffb 	bl	8004ac4 <HAL_SYSTICK_Callback>
}
 8004ace:	bd08      	pop	{r3, pc}

08004ad0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004ad0:	b538      	push	{r3, r4, r5, lr}
 8004ad2:	4604      	mov	r4, r0
  uint32_t tmp = 0U;
  uint32_t tickstart = HAL_GetTick();
 8004ad4:	f7ff fd44 	bl	8004560 <HAL_GetTick>
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004ad8:	2c00      	cmp	r4, #0
 8004ada:	d052      	beq.n	8004b82 <HAL_DMA_Init+0xb2>

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004adc:	6823      	ldr	r3, [r4, #0]
  __HAL_UNLOCK(hdma);
 8004ade:	2200      	movs	r2, #0
  hdma->State = HAL_DMA_STATE_BUSY;
 8004ae0:	2102      	movs	r1, #2
 8004ae2:	f884 1035 	strb.w	r1, [r4, #53]	; 0x35
  __HAL_UNLOCK(hdma);
 8004ae6:	f884 2034 	strb.w	r2, [r4, #52]	; 0x34
  __HAL_DMA_DISABLE(hdma);
 8004aea:	681a      	ldr	r2, [r3, #0]
 8004aec:	f022 0201 	bic.w	r2, r2, #1
 8004af0:	4605      	mov	r5, r0
 8004af2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004af4:	e005      	b.n	8004b02 <HAL_DMA_Init+0x32>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004af6:	f7ff fd33 	bl	8004560 <HAL_GetTick>
 8004afa:	1b43      	subs	r3, r0, r5
 8004afc:	2b05      	cmp	r3, #5
 8004afe:	d839      	bhi.n	8004b74 <HAL_DMA_Init+0xa4>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004b00:	6823      	ldr	r3, [r4, #0]
 8004b02:	681a      	ldr	r2, [r3, #0]
 8004b04:	07d1      	lsls	r1, r2, #31
 8004b06:	d4f6      	bmi.n	8004af6 <HAL_DMA_Init+0x26>
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b08:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8004b0c:	68e1      	ldr	r1, [r4, #12]
 8004b0e:	4302      	orrs	r2, r0
 8004b10:	430a      	orrs	r2, r1
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b12:	e9d4 5104 	ldrd	r5, r1, [r4, #16]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b16:	69a0      	ldr	r0, [r4, #24]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004b18:	432a      	orrs	r2, r5
 8004b1a:	430a      	orrs	r2, r1
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b1c:	69e1      	ldr	r1, [r4, #28]
  tmp = hdma->Instance->CR;
 8004b1e:	681d      	ldr	r5, [r3, #0]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004b20:	4302      	orrs	r2, r0
 8004b22:	430a      	orrs	r2, r1
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004b24:	4933      	ldr	r1, [pc, #204]	; (8004bf4 <HAL_DMA_Init+0x124>)
 8004b26:	4029      	ands	r1, r5
          hdma->Init.Mode                | hdma->Init.Priority;
 8004b28:	6a25      	ldr	r5, [r4, #32]
 8004b2a:	432a      	orrs	r2, r5
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004b2c:	430a      	orrs	r2, r1

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004b2e:	6a61      	ldr	r1, [r4, #36]	; 0x24
 8004b30:	2904      	cmp	r1, #4
 8004b32:	d028      	beq.n	8004b86 <HAL_DMA_Init+0xb6>
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004b34:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8004b36:	695a      	ldr	r2, [r3, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b38:	f022 0207 	bic.w	r2, r2, #7

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8004b3c:	4311      	orrs	r1, r2
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b3e:	b2d8      	uxtb	r0, r3
 8004b40:	4a2d      	ldr	r2, [pc, #180]	; (8004bf8 <HAL_DMA_Init+0x128>)
  hdma->Instance->FCR = tmp;
 8004b42:	6159      	str	r1, [r3, #20]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004b44:	3810      	subs	r0, #16
 8004b46:	fba2 5200 	umull	r5, r2, r2, r0
 8004b4a:	0912      	lsrs	r2, r2, #4
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b4c:	492b      	ldr	r1, [pc, #172]	; (8004bfc <HAL_DMA_Init+0x12c>)
  
  if (stream_number > 3U)
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b4e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004b52:	5c89      	ldrb	r1, [r1, r2]
 8004b54:	65e1      	str	r1, [r4, #92]	; 0x5c
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b56:	f023 0303 	bic.w	r3, r3, #3
  if (stream_number > 3U)
 8004b5a:	285f      	cmp	r0, #95	; 0x5f
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004b5c:	bf88      	it	hi
 8004b5e:	3304      	addhi	r3, #4
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b60:	223f      	movs	r2, #63	; 0x3f
 8004b62:	408a      	lsls	r2, r1
 8004b64:	65a3      	str	r3, [r4, #88]	; 0x58
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b66:	2000      	movs	r0, #0
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b68:	609a      	str	r2, [r3, #8]
  hdma->State = HAL_DMA_STATE_READY;
 8004b6a:	2301      	movs	r3, #1
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004b6c:	6560      	str	r0, [r4, #84]	; 0x54
  hdma->State = HAL_DMA_STATE_READY;
 8004b6e:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
}
 8004b72:	bd38      	pop	{r3, r4, r5, pc}
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b74:	2303      	movs	r3, #3
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004b76:	2220      	movs	r2, #32
 8004b78:	6562      	str	r2, [r4, #84]	; 0x54
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004b7a:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
      return HAL_TIMEOUT;
 8004b7e:	4618      	mov	r0, r3
}
 8004b80:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8004b82:	2001      	movs	r0, #1
}
 8004b84:	bd38      	pop	{r3, r4, r5, pc}
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8004b86:	e9d4 510b 	ldrd	r5, r1, [r4, #44]	; 0x2c
 8004b8a:	4329      	orrs	r1, r5
 8004b8c:	430a      	orrs	r2, r1
  hdma->Instance->CR = tmp;  
 8004b8e:	601a      	str	r2, [r3, #0]
  tmp = hdma->Instance->FCR;
 8004b90:	6959      	ldr	r1, [r3, #20]
    tmp |= hdma->Init.FIFOThreshold;
 8004b92:	6aa2      	ldr	r2, [r4, #40]	; 0x28
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004b94:	f021 0107 	bic.w	r1, r1, #7
 8004b98:	4311      	orrs	r1, r2
    tmp |= hdma->Init.FIFOThreshold;
 8004b9a:	f041 0104 	orr.w	r1, r1, #4
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004b9e:	2d00      	cmp	r5, #0
 8004ba0:	d0cd      	beq.n	8004b3e <HAL_DMA_Init+0x6e>
{
  HAL_StatusTypeDef status = HAL_OK;
  uint32_t tmp = hdma->Init.FIFOThreshold;
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004ba2:	b178      	cbz	r0, 8004bc4 <HAL_DMA_Init+0xf4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004ba4:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8004ba8:	d016      	beq.n	8004bd8 <HAL_DMA_Init+0x108>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004baa:	2a02      	cmp	r2, #2
 8004bac:	d903      	bls.n	8004bb6 <HAL_DMA_Init+0xe6>
 8004bae:	2a03      	cmp	r2, #3
 8004bb0:	d1c5      	bne.n	8004b3e <HAL_DMA_Init+0x6e>
    case DMA_FIFO_THRESHOLD_HALFFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
      break;
    case DMA_FIFO_THRESHOLD_FULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004bb2:	01ea      	lsls	r2, r5, #7
 8004bb4:	d5c3      	bpl.n	8004b3e <HAL_DMA_Init+0x6e>
        hdma->State = HAL_DMA_STATE_READY;
 8004bb6:	2301      	movs	r3, #1
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004bb8:	2240      	movs	r2, #64	; 0x40
 8004bba:	6562      	str	r2, [r4, #84]	; 0x54
        hdma->State = HAL_DMA_STATE_READY;
 8004bbc:	f884 3035 	strb.w	r3, [r4, #53]	; 0x35
        return HAL_ERROR; 
 8004bc0:	4618      	mov	r0, r3
}
 8004bc2:	bd38      	pop	{r3, r4, r5, pc}
    switch (tmp)
 8004bc4:	2a01      	cmp	r2, #1
 8004bc6:	d003      	beq.n	8004bd0 <HAL_DMA_Init+0x100>
 8004bc8:	f032 0202 	bics.w	r2, r2, #2
 8004bcc:	d1b7      	bne.n	8004b3e <HAL_DMA_Init+0x6e>
 8004bce:	e7f0      	b.n	8004bb2 <HAL_DMA_Init+0xe2>
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004bd0:	f1b5 7fc0 	cmp.w	r5, #25165824	; 0x1800000
 8004bd4:	d1b3      	bne.n	8004b3e <HAL_DMA_Init+0x6e>
 8004bd6:	e7ee      	b.n	8004bb6 <HAL_DMA_Init+0xe6>
    switch (tmp)
 8004bd8:	2a03      	cmp	r2, #3
 8004bda:	d8b0      	bhi.n	8004b3e <HAL_DMA_Init+0x6e>
 8004bdc:	a001      	add	r0, pc, #4	; (adr r0, 8004be4 <HAL_DMA_Init+0x114>)
 8004bde:	f850 f022 	ldr.w	pc, [r0, r2, lsl #2]
 8004be2:	bf00      	nop
 8004be4:	08004bb7 	.word	0x08004bb7
 8004be8:	08004bb3 	.word	0x08004bb3
 8004bec:	08004bb7 	.word	0x08004bb7
 8004bf0:	08004bd1 	.word	0x08004bd1
 8004bf4:	f010803f 	.word	0xf010803f
 8004bf8:	aaaaaaab 	.word	0xaaaaaaab
 8004bfc:	08008010 	.word	0x08008010

08004c00 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  for(position = 0U; position < GPIO_NUMBER; position++)
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c04:	2200      	movs	r2, #0
 8004c06:	680c      	ldr	r4, [r1, #0]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004c08:	4e70      	ldr	r6, [pc, #448]	; (8004dcc <HAL_GPIO_Init+0x1cc>)
{
 8004c0a:	b085      	sub	sp, #20
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c0c:	4613      	mov	r3, r2
    ioposition = 0x01U << position;
 8004c0e:	f04f 0a01 	mov.w	sl, #1
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c12:	4689      	mov	r9, r1
 8004c14:	e004      	b.n	8004c20 <HAL_GPIO_Init+0x20>
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004c16:	3301      	adds	r3, #1
 8004c18:	2b10      	cmp	r3, #16
 8004c1a:	f102 0202 	add.w	r2, r2, #2
 8004c1e:	d078      	beq.n	8004d12 <HAL_GPIO_Init+0x112>
    ioposition = 0x01U << position;
 8004c20:	fa0a f103 	lsl.w	r1, sl, r3
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004c24:	ea01 0b04 	and.w	fp, r1, r4
    if(iocurrent == ioposition)
 8004c28:	43a1      	bics	r1, r4
 8004c2a:	d1f4      	bne.n	8004c16 <HAL_GPIO_Init+0x16>
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004c2c:	f8d9 c004 	ldr.w	ip, [r9, #4]
 8004c30:	f00c 0103 	and.w	r1, ip, #3
 8004c34:	1e4d      	subs	r5, r1, #1
 8004c36:	2d01      	cmp	r5, #1
 8004c38:	d96e      	bls.n	8004d18 <HAL_GPIO_Init+0x118>
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004c3a:	2903      	cmp	r1, #3
 8004c3c:	f040 80ae 	bne.w	8004d9c <HAL_GPIO_Init+0x19c>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004c40:	4091      	lsls	r1, r2
 8004c42:	43cd      	mvns	r5, r1
      temp = GPIOx->MODER;
 8004c44:	6807      	ldr	r7, [r0, #0]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c46:	403d      	ands	r5, r7
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c48:	4329      	orrs	r1, r5
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c4a:	f41c 3f40 	tst.w	ip, #196608	; 0x30000
      GPIOx->MODER = temp;
 8004c4e:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c50:	d0e1      	beq.n	8004c16 <HAL_GPIO_Init+0x16>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c52:	4d5f      	ldr	r5, [pc, #380]	; (8004dd0 <HAL_GPIO_Init+0x1d0>)
 8004c54:	2100      	movs	r1, #0
 8004c56:	9103      	str	r1, [sp, #12]
 8004c58:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8004c5a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
 8004c5e:	6469      	str	r1, [r5, #68]	; 0x44
 8004c60:	6c69      	ldr	r1, [r5, #68]	; 0x44
 8004c62:	f401 4180 	and.w	r1, r1, #16384	; 0x4000
 8004c66:	9103      	str	r1, [sp, #12]
 8004c68:	9903      	ldr	r1, [sp, #12]
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c6a:	f023 0103 	bic.w	r1, r3, #3
 8004c6e:	f101 4180 	add.w	r1, r1, #1073741824	; 0x40000000
 8004c72:	f501 319c 	add.w	r1, r1, #79872	; 0x13800
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c76:	f003 0703 	and.w	r7, r3, #3
        temp = SYSCFG->EXTICR[position >> 2U];
 8004c7a:	f8d1 e008 	ldr.w	lr, [r1, #8]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c7e:	00bf      	lsls	r7, r7, #2
 8004c80:	250f      	movs	r5, #15
 8004c82:	40bd      	lsls	r5, r7
 8004c84:	ea2e 0805 	bic.w	r8, lr, r5
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c88:	4d52      	ldr	r5, [pc, #328]	; (8004dd4 <HAL_GPIO_Init+0x1d4>)
 8004c8a:	42a8      	cmp	r0, r5
 8004c8c:	d017      	beq.n	8004cbe <HAL_GPIO_Init+0xbe>
 8004c8e:	f505 6580 	add.w	r5, r5, #1024	; 0x400
 8004c92:	42a8      	cmp	r0, r5
 8004c94:	f000 8086 	beq.w	8004da4 <HAL_GPIO_Init+0x1a4>
 8004c98:	4d4f      	ldr	r5, [pc, #316]	; (8004dd8 <HAL_GPIO_Init+0x1d8>)
 8004c9a:	42a8      	cmp	r0, r5
 8004c9c:	f000 8087 	beq.w	8004dae <HAL_GPIO_Init+0x1ae>
 8004ca0:	4d4e      	ldr	r5, [pc, #312]	; (8004ddc <HAL_GPIO_Init+0x1dc>)
 8004ca2:	42a8      	cmp	r0, r5
 8004ca4:	f000 808a 	beq.w	8004dbc <HAL_GPIO_Init+0x1bc>
 8004ca8:	4d4d      	ldr	r5, [pc, #308]	; (8004de0 <HAL_GPIO_Init+0x1e0>)
 8004caa:	42a8      	cmp	r0, r5
 8004cac:	bf0c      	ite	eq
 8004cae:	f04f 0e04 	moveq.w	lr, #4
 8004cb2:	f04f 0e07 	movne.w	lr, #7
 8004cb6:	fa0e f707 	lsl.w	r7, lr, r7
 8004cba:	ea48 0807 	orr.w	r8, r8, r7
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004cbe:	f8c1 8008 	str.w	r8, [r1, #8]
        temp = EXTI->RTSR;
 8004cc2:	68b1      	ldr	r1, [r6, #8]
        temp &= ~((uint32_t)iocurrent);
 8004cc4:	ea6f 070b 	mvn.w	r7, fp
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004cc8:	f41c 1f80 	tst.w	ip, #1048576	; 0x100000
        temp &= ~((uint32_t)iocurrent);
 8004ccc:	bf0c      	ite	eq
 8004cce:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004cd0:	ea4b 0101 	orrne.w	r1, fp, r1
        }
        EXTI->RTSR = temp;
 8004cd4:	60b1      	str	r1, [r6, #8]

        temp = EXTI->FTSR;
 8004cd6:	68f5      	ldr	r5, [r6, #12]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004cd8:	f41c 1f00 	tst.w	ip, #2097152	; 0x200000
        temp &= ~((uint32_t)iocurrent);
 8004cdc:	bf0c      	ite	eq
 8004cde:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004ce0:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->FTSR = temp;
 8004ce4:	60f5      	str	r5, [r6, #12]

        temp = EXTI->EMR;
 8004ce6:	6875      	ldr	r5, [r6, #4]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004ce8:	f41c 3f00 	tst.w	ip, #131072	; 0x20000
        temp &= ~((uint32_t)iocurrent);
 8004cec:	bf0c      	ite	eq
 8004cee:	403d      	andeq	r5, r7
        {
          temp |= iocurrent;
 8004cf0:	ea4b 0505 	orrne.w	r5, fp, r5
        }
        EXTI->EMR = temp;
 8004cf4:	6075      	str	r5, [r6, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004cf6:	6831      	ldr	r1, [r6, #0]
        temp &= ~((uint32_t)iocurrent);
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004cf8:	f41c 3f80 	tst.w	ip, #65536	; 0x10000
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004cfc:	f103 0301 	add.w	r3, r3, #1
        temp &= ~((uint32_t)iocurrent);
 8004d00:	bf0c      	ite	eq
 8004d02:	4039      	andeq	r1, r7
        {
          temp |= iocurrent;
 8004d04:	ea4b 0101 	orrne.w	r1, fp, r1
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d08:	2b10      	cmp	r3, #16
        }
        EXTI->IMR = temp;
 8004d0a:	6031      	str	r1, [r6, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004d0c:	f102 0202 	add.w	r2, r2, #2
 8004d10:	d186      	bne.n	8004c20 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8004d12:	b005      	add	sp, #20
 8004d14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d18:	f8d9 500c 	ldr.w	r5, [r9, #12]
        temp = GPIOx->OSPEEDR; 
 8004d1c:	6887      	ldr	r7, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d1e:	fa05 f802 	lsl.w	r8, r5, r2
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d22:	2503      	movs	r5, #3
 8004d24:	fa05 fe02 	lsl.w	lr, r5, r2
 8004d28:	ea27 070e 	bic.w	r7, r7, lr
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004d2c:	ea48 0707 	orr.w	r7, r8, r7
        GPIOx->OSPEEDR = temp;
 8004d30:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8004d32:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d34:	ea6f 050e 	mvn.w	r5, lr
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004d38:	ea27 0e0b 	bic.w	lr, r7, fp
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004d3c:	f3cc 1700 	ubfx	r7, ip, #4, #1
 8004d40:	409f      	lsls	r7, r3
 8004d42:	ea47 070e 	orr.w	r7, r7, lr
        GPIOx->OTYPER = temp;
 8004d46:	6047      	str	r7, [r0, #4]
        temp = GPIOx->PUPDR;
 8004d48:	68c7      	ldr	r7, [r0, #12]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004d4a:	ea07 0e05 	and.w	lr, r7, r5
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004d4e:	f8d9 7008 	ldr.w	r7, [r9, #8]
 8004d52:	4097      	lsls	r7, r2
 8004d54:	ea47 070e 	orr.w	r7, r7, lr
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d58:	2902      	cmp	r1, #2
        GPIOx->PUPDR = temp;
 8004d5a:	60c7      	str	r7, [r0, #12]
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004d5c:	fa01 f102 	lsl.w	r1, r1, r2
 8004d60:	f47f af70 	bne.w	8004c44 <HAL_GPIO_Init+0x44>
        temp = GPIOx->AFR[position >> 3U];
 8004d64:	ea4f 0ed3 	mov.w	lr, r3, lsr #3
 8004d68:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d6c:	f003 0807 	and.w	r8, r3, #7
        temp = GPIOx->AFR[position >> 3U];
 8004d70:	f8de 7020 	ldr.w	r7, [lr, #32]
 8004d74:	9700      	str	r7, [sp, #0]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d76:	f8d9 7010 	ldr.w	r7, [r9, #16]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d7a:	ea4f 0888 	mov.w	r8, r8, lsl #2
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d7e:	fa07 f708 	lsl.w	r7, r7, r8
 8004d82:	9701      	str	r7, [sp, #4]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004d84:	270f      	movs	r7, #15
 8004d86:	fa07 f808 	lsl.w	r8, r7, r8
 8004d8a:	9f00      	ldr	r7, [sp, #0]
 8004d8c:	ea27 0808 	bic.w	r8, r7, r8
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004d90:	9f01      	ldr	r7, [sp, #4]
 8004d92:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->AFR[position >> 3U] = temp;
 8004d96:	f8ce 7020 	str.w	r7, [lr, #32]
 8004d9a:	e753      	b.n	8004c44 <HAL_GPIO_Init+0x44>
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004d9c:	2503      	movs	r5, #3
 8004d9e:	4095      	lsls	r5, r2
 8004da0:	43ed      	mvns	r5, r5
 8004da2:	e7d1      	b.n	8004d48 <HAL_GPIO_Init+0x148>
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004da4:	fa0a f707 	lsl.w	r7, sl, r7
 8004da8:	ea48 0807 	orr.w	r8, r8, r7
 8004dac:	e787      	b.n	8004cbe <HAL_GPIO_Init+0xbe>
 8004dae:	f04f 0e02 	mov.w	lr, #2
 8004db2:	fa0e f707 	lsl.w	r7, lr, r7
 8004db6:	ea48 0807 	orr.w	r8, r8, r7
 8004dba:	e780      	b.n	8004cbe <HAL_GPIO_Init+0xbe>
 8004dbc:	f04f 0e03 	mov.w	lr, #3
 8004dc0:	fa0e f707 	lsl.w	r7, lr, r7
 8004dc4:	ea48 0807 	orr.w	r8, r8, r7
 8004dc8:	e779      	b.n	8004cbe <HAL_GPIO_Init+0xbe>
 8004dca:	bf00      	nop
 8004dcc:	40013c00 	.word	0x40013c00
 8004dd0:	40023800 	.word	0x40023800
 8004dd4:	40020000 	.word	0x40020000
 8004dd8:	40020800 	.word	0x40020800
 8004ddc:	40020c00 	.word	0x40020c00
 8004de0:	40021000 	.word	0x40021000

08004de4 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004de4:	b902      	cbnz	r2, 8004de8 <HAL_GPIO_WritePin+0x4>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004de6:	0409      	lsls	r1, r1, #16
 8004de8:	6181      	str	r1, [r0, #24]
  }
}
 8004dea:	4770      	bx	lr

08004dec <HAL_RCC_OscConfig>:
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dec:	2800      	cmp	r0, #0
 8004dee:	f000 81a2 	beq.w	8005136 <HAL_RCC_OscConfig+0x34a>
{
 8004df2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004df6:	6803      	ldr	r3, [r0, #0]
 8004df8:	07dd      	lsls	r5, r3, #31
{
 8004dfa:	b082      	sub	sp, #8
 8004dfc:	4604      	mov	r4, r0
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dfe:	d52f      	bpl.n	8004e60 <HAL_RCC_OscConfig+0x74>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e00:	499e      	ldr	r1, [pc, #632]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8004e02:	688a      	ldr	r2, [r1, #8]
 8004e04:	f002 020c 	and.w	r2, r2, #12
 8004e08:	2a04      	cmp	r2, #4
 8004e0a:	f000 80ed 	beq.w	8004fe8 <HAL_RCC_OscConfig+0x1fc>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004e0e:	688a      	ldr	r2, [r1, #8]
 8004e10:	f002 020c 	and.w	r2, r2, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004e14:	2a08      	cmp	r2, #8
 8004e16:	f000 80e3 	beq.w	8004fe0 <HAL_RCC_OscConfig+0x1f4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e1a:	6863      	ldr	r3, [r4, #4]
 8004e1c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e20:	f000 80ec 	beq.w	8004ffc <HAL_RCC_OscConfig+0x210>
 8004e24:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e28:	f000 8175 	beq.w	8005116 <HAL_RCC_OscConfig+0x32a>
 8004e2c:	4d93      	ldr	r5, [pc, #588]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8004e2e:	682a      	ldr	r2, [r5, #0]
 8004e30:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8004e34:	602a      	str	r2, [r5, #0]
 8004e36:	682a      	ldr	r2, [r5, #0]
 8004e38:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004e3c:	602a      	str	r2, [r5, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e3e:	2b00      	cmp	r3, #0
 8004e40:	f040 80e1 	bne.w	8005006 <HAL_RCC_OscConfig+0x21a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e44:	f7ff fb8c 	bl	8004560 <HAL_GetTick>
 8004e48:	4606      	mov	r6, r0

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e4a:	e005      	b.n	8004e58 <HAL_RCC_OscConfig+0x6c>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e4c:	f7ff fb88 	bl	8004560 <HAL_GetTick>
 8004e50:	1b80      	subs	r0, r0, r6
 8004e52:	2864      	cmp	r0, #100	; 0x64
 8004e54:	f200 8101 	bhi.w	800505a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004e58:	682b      	ldr	r3, [r5, #0]
 8004e5a:	039b      	lsls	r3, r3, #14
 8004e5c:	d4f6      	bmi.n	8004e4c <HAL_RCC_OscConfig+0x60>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004e5e:	6823      	ldr	r3, [r4, #0]
 8004e60:	079f      	lsls	r7, r3, #30
 8004e62:	d528      	bpl.n	8004eb6 <HAL_RCC_OscConfig+0xca>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e64:	4a85      	ldr	r2, [pc, #532]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8004e66:	6891      	ldr	r1, [r2, #8]
 8004e68:	f011 0f0c 	tst.w	r1, #12
 8004e6c:	f000 8090 	beq.w	8004f90 <HAL_RCC_OscConfig+0x1a4>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004e70:	6891      	ldr	r1, [r2, #8]
 8004e72:	f001 010c 	and.w	r1, r1, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004e76:	2908      	cmp	r1, #8
 8004e78:	f000 8086 	beq.w	8004f88 <HAL_RCC_OscConfig+0x19c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004e7c:	68e3      	ldr	r3, [r4, #12]
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	f000 810e 	beq.w	80050a0 <HAL_RCC_OscConfig+0x2b4>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e84:	4b7e      	ldr	r3, [pc, #504]	; (8005080 <HAL_RCC_OscConfig+0x294>)

        /* Get Start Tick*/
        tickstart = HAL_GetTick();

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e86:	4e7d      	ldr	r6, [pc, #500]	; (800507c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_ENABLE();
 8004e88:	2201      	movs	r2, #1
 8004e8a:	601a      	str	r2, [r3, #0]
        tickstart = HAL_GetTick();
 8004e8c:	f7ff fb68 	bl	8004560 <HAL_GetTick>
 8004e90:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e92:	e005      	b.n	8004ea0 <HAL_RCC_OscConfig+0xb4>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004e94:	f7ff fb64 	bl	8004560 <HAL_GetTick>
 8004e98:	1b40      	subs	r0, r0, r5
 8004e9a:	2802      	cmp	r0, #2
 8004e9c:	f200 80dd 	bhi.w	800505a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ea0:	6833      	ldr	r3, [r6, #0]
 8004ea2:	0798      	lsls	r0, r3, #30
 8004ea4:	d5f6      	bpl.n	8004e94 <HAL_RCC_OscConfig+0xa8>
            return HAL_TIMEOUT;
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ea6:	6833      	ldr	r3, [r6, #0]
 8004ea8:	6922      	ldr	r2, [r4, #16]
 8004eaa:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004eae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8004eb2:	6033      	str	r3, [r6, #0]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eb4:	6823      	ldr	r3, [r4, #0]
 8004eb6:	071a      	lsls	r2, r3, #28
 8004eb8:	d451      	bmi.n	8004f5e <HAL_RCC_OscConfig+0x172>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004eba:	0758      	lsls	r0, r3, #29
 8004ebc:	d52f      	bpl.n	8004f1e <HAL_RCC_OscConfig+0x132>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004ebe:	4a6f      	ldr	r2, [pc, #444]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8004ec0:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004ec2:	f013 5380 	ands.w	r3, r3, #268435456	; 0x10000000
 8004ec6:	d07f      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x1dc>
    FlagStatus       pwrclkchanged = RESET;
 8004ec8:	2500      	movs	r5, #0
    {
      __HAL_RCC_PWR_CLK_ENABLE();
      pwrclkchanged = SET;
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004eca:	4e6e      	ldr	r6, [pc, #440]	; (8005084 <HAL_RCC_OscConfig+0x298>)
 8004ecc:	6833      	ldr	r3, [r6, #0]
 8004ece:	05d9      	lsls	r1, r3, #23
 8004ed0:	f140 80b3 	bpl.w	800503a <HAL_RCC_OscConfig+0x24e>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004ed4:	68a3      	ldr	r3, [r4, #8]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	f000 80c3 	beq.w	8005062 <HAL_RCC_OscConfig+0x276>
 8004edc:	2b05      	cmp	r3, #5
 8004ede:	f000 812c 	beq.w	800513a <HAL_RCC_OscConfig+0x34e>
 8004ee2:	4e66      	ldr	r6, [pc, #408]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8004ee4:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004ee6:	f022 0201 	bic.w	r2, r2, #1
 8004eea:	6732      	str	r2, [r6, #112]	; 0x70
 8004eec:	6f32      	ldr	r2, [r6, #112]	; 0x70
 8004eee:	f022 0204 	bic.w	r2, r2, #4
 8004ef2:	6732      	str	r2, [r6, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 80b9 	bne.w	800506c <HAL_RCC_OscConfig+0x280>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004efa:	f7ff fb31 	bl	8004560 <HAL_GetTick>

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004efe:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8004f02:	4607      	mov	r7, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f04:	e005      	b.n	8004f12 <HAL_RCC_OscConfig+0x126>
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004f06:	f7ff fb2b 	bl	8004560 <HAL_GetTick>
 8004f0a:	1bc0      	subs	r0, r0, r7
 8004f0c:	4540      	cmp	r0, r8
 8004f0e:	f200 80a4 	bhi.w	800505a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004f12:	6f33      	ldr	r3, [r6, #112]	; 0x70
 8004f14:	0798      	lsls	r0, r3, #30
 8004f16:	d4f6      	bmi.n	8004f06 <HAL_RCC_OscConfig+0x11a>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004f18:	2d00      	cmp	r5, #0
 8004f1a:	f040 8106 	bne.w	800512a <HAL_RCC_OscConfig+0x33e>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004f1e:	69a0      	ldr	r0, [r4, #24]
 8004f20:	b1c8      	cbz	r0, 8004f56 <HAL_RCC_OscConfig+0x16a>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004f22:	4d56      	ldr	r5, [pc, #344]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8004f24:	68ab      	ldr	r3, [r5, #8]
 8004f26:	f003 030c 	and.w	r3, r3, #12
 8004f2a:	2b08      	cmp	r3, #8
 8004f2c:	f000 80c9 	beq.w	80050c2 <HAL_RCC_OscConfig+0x2d6>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f30:	4b53      	ldr	r3, [pc, #332]	; (8005080 <HAL_RCC_OscConfig+0x294>)
 8004f32:	2200      	movs	r2, #0
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f34:	2802      	cmp	r0, #2
        __HAL_RCC_PLL_DISABLE();
 8004f36:	661a      	str	r2, [r3, #96]	; 0x60
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004f38:	f000 8109 	beq.w	800514e <HAL_RCC_OscConfig+0x362>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f3c:	f7ff fb10 	bl	8004560 <HAL_GetTick>
 8004f40:	4604      	mov	r4, r0

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f42:	e005      	b.n	8004f50 <HAL_RCC_OscConfig+0x164>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f44:	f7ff fb0c 	bl	8004560 <HAL_GetTick>
 8004f48:	1b00      	subs	r0, r0, r4
 8004f4a:	2802      	cmp	r0, #2
 8004f4c:	f200 8085 	bhi.w	800505a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f50:	682b      	ldr	r3, [r5, #0]
 8004f52:	019b      	lsls	r3, r3, #6
 8004f54:	d4f6      	bmi.n	8004f44 <HAL_RCC_OscConfig+0x158>
          return HAL_ERROR;
        }
      }
    }
  }
  return HAL_OK;
 8004f56:	2000      	movs	r0, #0
}
 8004f58:	b002      	add	sp, #8
 8004f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004f5e:	6963      	ldr	r3, [r4, #20]
 8004f60:	b30b      	cbz	r3, 8004fa6 <HAL_RCC_OscConfig+0x1ba>
      __HAL_RCC_LSI_ENABLE();
 8004f62:	4b47      	ldr	r3, [pc, #284]	; (8005080 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f64:	4e45      	ldr	r6, [pc, #276]	; (800507c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_ENABLE();
 8004f66:	2201      	movs	r2, #1
 8004f68:	f8c3 2e80 	str.w	r2, [r3, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004f6c:	f7ff faf8 	bl	8004560 <HAL_GetTick>
 8004f70:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f72:	e004      	b.n	8004f7e <HAL_RCC_OscConfig+0x192>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004f74:	f7ff faf4 	bl	8004560 <HAL_GetTick>
 8004f78:	1b40      	subs	r0, r0, r5
 8004f7a:	2802      	cmp	r0, #2
 8004f7c:	d86d      	bhi.n	800505a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004f7e:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004f80:	079b      	lsls	r3, r3, #30
 8004f82:	d5f7      	bpl.n	8004f74 <HAL_RCC_OscConfig+0x188>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f84:	6823      	ldr	r3, [r4, #0]
 8004f86:	e798      	b.n	8004eba <HAL_RCC_OscConfig+0xce>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004f88:	6852      	ldr	r2, [r2, #4]
 8004f8a:	0256      	lsls	r6, r2, #9
 8004f8c:	f53f af76 	bmi.w	8004e7c <HAL_RCC_OscConfig+0x90>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f90:	4a3a      	ldr	r2, [pc, #232]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8004f92:	6812      	ldr	r2, [r2, #0]
 8004f94:	0795      	lsls	r5, r2, #30
 8004f96:	d544      	bpl.n	8005022 <HAL_RCC_OscConfig+0x236>
 8004f98:	68e2      	ldr	r2, [r4, #12]
 8004f9a:	2a01      	cmp	r2, #1
 8004f9c:	d041      	beq.n	8005022 <HAL_RCC_OscConfig+0x236>
        return HAL_ERROR;
 8004f9e:	2001      	movs	r0, #1
}
 8004fa0:	b002      	add	sp, #8
 8004fa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      __HAL_RCC_LSI_DISABLE();
 8004fa6:	4a36      	ldr	r2, [pc, #216]	; (8005080 <HAL_RCC_OscConfig+0x294>)
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fa8:	4e34      	ldr	r6, [pc, #208]	; (800507c <HAL_RCC_OscConfig+0x290>)
      __HAL_RCC_LSI_DISABLE();
 8004faa:	f8c2 3e80 	str.w	r3, [r2, #3712]	; 0xe80
      tickstart = HAL_GetTick();
 8004fae:	f7ff fad7 	bl	8004560 <HAL_GetTick>
 8004fb2:	4605      	mov	r5, r0
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fb4:	e004      	b.n	8004fc0 <HAL_RCC_OscConfig+0x1d4>
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fb6:	f7ff fad3 	bl	8004560 <HAL_GetTick>
 8004fba:	1b40      	subs	r0, r0, r5
 8004fbc:	2802      	cmp	r0, #2
 8004fbe:	d84c      	bhi.n	800505a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004fc0:	6f73      	ldr	r3, [r6, #116]	; 0x74
 8004fc2:	079f      	lsls	r7, r3, #30
 8004fc4:	d4f7      	bmi.n	8004fb6 <HAL_RCC_OscConfig+0x1ca>
 8004fc6:	e7dd      	b.n	8004f84 <HAL_RCC_OscConfig+0x198>
      __HAL_RCC_PWR_CLK_ENABLE();
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004fcc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004fd0:	6413      	str	r3, [r2, #64]	; 0x40
 8004fd2:	6c13      	ldr	r3, [r2, #64]	; 0x40
 8004fd4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004fd8:	9301      	str	r3, [sp, #4]
 8004fda:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8004fdc:	2501      	movs	r5, #1
 8004fde:	e774      	b.n	8004eca <HAL_RCC_OscConfig+0xde>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004fe0:	684a      	ldr	r2, [r1, #4]
 8004fe2:	0250      	lsls	r0, r2, #9
 8004fe4:	f57f af19 	bpl.w	8004e1a <HAL_RCC_OscConfig+0x2e>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fe8:	4a24      	ldr	r2, [pc, #144]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8004fea:	6812      	ldr	r2, [r2, #0]
 8004fec:	0391      	lsls	r1, r2, #14
 8004fee:	f57f af37 	bpl.w	8004e60 <HAL_RCC_OscConfig+0x74>
 8004ff2:	6862      	ldr	r2, [r4, #4]
 8004ff4:	2a00      	cmp	r2, #0
 8004ff6:	f47f af33 	bne.w	8004e60 <HAL_RCC_OscConfig+0x74>
 8004ffa:	e7d0      	b.n	8004f9e <HAL_RCC_OscConfig+0x1b2>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004ffc:	4a1f      	ldr	r2, [pc, #124]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8004ffe:	6813      	ldr	r3, [r2, #0]
 8005000:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005004:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005006:	f7ff faab 	bl	8004560 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500a:	4e1c      	ldr	r6, [pc, #112]	; (800507c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800500c:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800500e:	e004      	b.n	800501a <HAL_RCC_OscConfig+0x22e>
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005010:	f7ff faa6 	bl	8004560 <HAL_GetTick>
 8005014:	1b40      	subs	r0, r0, r5
 8005016:	2864      	cmp	r0, #100	; 0x64
 8005018:	d81f      	bhi.n	800505a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800501a:	6833      	ldr	r3, [r6, #0]
 800501c:	039a      	lsls	r2, r3, #14
 800501e:	d5f7      	bpl.n	8005010 <HAL_RCC_OscConfig+0x224>
 8005020:	e71d      	b.n	8004e5e <HAL_RCC_OscConfig+0x72>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005022:	4916      	ldr	r1, [pc, #88]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8005024:	6920      	ldr	r0, [r4, #16]
 8005026:	680a      	ldr	r2, [r1, #0]
 8005028:	f022 02f8 	bic.w	r2, r2, #248	; 0xf8
 800502c:	ea42 02c0 	orr.w	r2, r2, r0, lsl #3
 8005030:	600a      	str	r2, [r1, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005032:	071a      	lsls	r2, r3, #28
 8005034:	f57f af41 	bpl.w	8004eba <HAL_RCC_OscConfig+0xce>
 8005038:	e791      	b.n	8004f5e <HAL_RCC_OscConfig+0x172>
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800503a:	6833      	ldr	r3, [r6, #0]
 800503c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005040:	6033      	str	r3, [r6, #0]
      tickstart = HAL_GetTick();
 8005042:	f7ff fa8d 	bl	8004560 <HAL_GetTick>
 8005046:	4607      	mov	r7, r0
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005048:	6833      	ldr	r3, [r6, #0]
 800504a:	05da      	lsls	r2, r3, #23
 800504c:	f53f af42 	bmi.w	8004ed4 <HAL_RCC_OscConfig+0xe8>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005050:	f7ff fa86 	bl	8004560 <HAL_GetTick>
 8005054:	1bc0      	subs	r0, r0, r7
 8005056:	2802      	cmp	r0, #2
 8005058:	d9f6      	bls.n	8005048 <HAL_RCC_OscConfig+0x25c>
            return HAL_TIMEOUT;
 800505a:	2003      	movs	r0, #3
}
 800505c:	b002      	add	sp, #8
 800505e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005062:	4a06      	ldr	r2, [pc, #24]	; (800507c <HAL_RCC_OscConfig+0x290>)
 8005064:	6f13      	ldr	r3, [r2, #112]	; 0x70
 8005066:	f043 0301 	orr.w	r3, r3, #1
 800506a:	6713      	str	r3, [r2, #112]	; 0x70
      tickstart = HAL_GetTick();
 800506c:	f7ff fa78 	bl	8004560 <HAL_GetTick>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005070:	4f02      	ldr	r7, [pc, #8]	; (800507c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8005072:	4606      	mov	r6, r0
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005074:	f241 3888 	movw	r8, #5000	; 0x1388
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005078:	e00b      	b.n	8005092 <HAL_RCC_OscConfig+0x2a6>
 800507a:	bf00      	nop
 800507c:	40023800 	.word	0x40023800
 8005080:	42470000 	.word	0x42470000
 8005084:	40007000 	.word	0x40007000
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005088:	f7ff fa6a 	bl	8004560 <HAL_GetTick>
 800508c:	1b80      	subs	r0, r0, r6
 800508e:	4540      	cmp	r0, r8
 8005090:	d8e3      	bhi.n	800505a <HAL_RCC_OscConfig+0x26e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005092:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005094:	079b      	lsls	r3, r3, #30
 8005096:	d5f7      	bpl.n	8005088 <HAL_RCC_OscConfig+0x29c>
    if(pwrclkchanged == SET)
 8005098:	2d00      	cmp	r5, #0
 800509a:	f43f af40 	beq.w	8004f1e <HAL_RCC_OscConfig+0x132>
 800509e:	e044      	b.n	800512a <HAL_RCC_OscConfig+0x33e>
        __HAL_RCC_HSI_DISABLE();
 80050a0:	4a42      	ldr	r2, [pc, #264]	; (80051ac <HAL_RCC_OscConfig+0x3c0>)
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050a2:	4e43      	ldr	r6, [pc, #268]	; (80051b0 <HAL_RCC_OscConfig+0x3c4>)
        __HAL_RCC_HSI_DISABLE();
 80050a4:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 80050a6:	f7ff fa5b 	bl	8004560 <HAL_GetTick>
 80050aa:	4605      	mov	r5, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050ac:	e004      	b.n	80050b8 <HAL_RCC_OscConfig+0x2cc>
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80050ae:	f7ff fa57 	bl	8004560 <HAL_GetTick>
 80050b2:	1b40      	subs	r0, r0, r5
 80050b4:	2802      	cmp	r0, #2
 80050b6:	d8d0      	bhi.n	800505a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80050b8:	6833      	ldr	r3, [r6, #0]
 80050ba:	0799      	lsls	r1, r3, #30
 80050bc:	d4f7      	bmi.n	80050ae <HAL_RCC_OscConfig+0x2c2>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	e6f9      	b.n	8004eb6 <HAL_RCC_OscConfig+0xca>
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80050c2:	2801      	cmp	r0, #1
 80050c4:	f43f af48 	beq.w	8004f58 <HAL_RCC_OscConfig+0x16c>
        pll_config = RCC->PLLCFGR;
 80050c8:	686b      	ldr	r3, [r5, #4]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050ca:	69e2      	ldr	r2, [r4, #28]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050cc:	f403 0180 	and.w	r1, r3, #4194304	; 0x400000
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80050d0:	4291      	cmp	r1, r2
 80050d2:	f47f af64 	bne.w	8004f9e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050d6:	6a22      	ldr	r2, [r4, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050d8:	f003 013f 	and.w	r1, r3, #63	; 0x3f
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80050dc:	4291      	cmp	r1, r2
 80050de:	f47f af5e 	bne.w	8004f9e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050e2:	6a61      	ldr	r1, [r4, #36]	; 0x24
 80050e4:	f647 72c0 	movw	r2, #32704	; 0x7fc0
 80050e8:	401a      	ands	r2, r3
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80050ea:	ebb2 1f81 	cmp.w	r2, r1, lsl #6
 80050ee:	f47f af56 	bne.w	8004f9e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80050f2:	6aa2      	ldr	r2, [r4, #40]	; 0x28
 80050f4:	0852      	lsrs	r2, r2, #1
 80050f6:	f403 3140 	and.w	r1, r3, #196608	; 0x30000
 80050fa:	3a01      	subs	r2, #1
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80050fc:	ebb1 4f02 	cmp.w	r1, r2, lsl #16
 8005100:	f47f af4d 	bne.w	8004f9e <HAL_RCC_OscConfig+0x1b2>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005104:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 8005106:	f003 6370 	and.w	r3, r3, #251658240	; 0xf000000
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800510a:	ebb3 6f02 	cmp.w	r3, r2, lsl #24
            return HAL_TIMEOUT;
 800510e:	bf14      	ite	ne
 8005110:	2001      	movne	r0, #1
 8005112:	2000      	moveq	r0, #0
 8005114:	e720      	b.n	8004f58 <HAL_RCC_OscConfig+0x16c>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005116:	4b26      	ldr	r3, [pc, #152]	; (80051b0 <HAL_RCC_OscConfig+0x3c4>)
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 800511e:	601a      	str	r2, [r3, #0]
 8005120:	681a      	ldr	r2, [r3, #0]
 8005122:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8005126:	601a      	str	r2, [r3, #0]
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005128:	e76d      	b.n	8005006 <HAL_RCC_OscConfig+0x21a>
      __HAL_RCC_PWR_CLK_DISABLE();
 800512a:	4a21      	ldr	r2, [pc, #132]	; (80051b0 <HAL_RCC_OscConfig+0x3c4>)
 800512c:	6c13      	ldr	r3, [r2, #64]	; 0x40
 800512e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005132:	6413      	str	r3, [r2, #64]	; 0x40
 8005134:	e6f3      	b.n	8004f1e <HAL_RCC_OscConfig+0x132>
    return HAL_ERROR;
 8005136:	2001      	movs	r0, #1
}
 8005138:	4770      	bx	lr
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800513a:	4b1d      	ldr	r3, [pc, #116]	; (80051b0 <HAL_RCC_OscConfig+0x3c4>)
 800513c:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800513e:	f042 0204 	orr.w	r2, r2, #4
 8005142:	671a      	str	r2, [r3, #112]	; 0x70
 8005144:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8005146:	f042 0201 	orr.w	r2, r2, #1
 800514a:	671a      	str	r2, [r3, #112]	; 0x70
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800514c:	e78e      	b.n	800506c <HAL_RCC_OscConfig+0x280>
        tickstart = HAL_GetTick();
 800514e:	f7ff fa07 	bl	8004560 <HAL_GetTick>
 8005152:	4606      	mov	r6, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005154:	e005      	b.n	8005162 <HAL_RCC_OscConfig+0x376>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005156:	f7ff fa03 	bl	8004560 <HAL_GetTick>
 800515a:	1b80      	subs	r0, r0, r6
 800515c:	2802      	cmp	r0, #2
 800515e:	f63f af7c 	bhi.w	800505a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005162:	682b      	ldr	r3, [r5, #0]
 8005164:	0199      	lsls	r1, r3, #6
 8005166:	d4f6      	bmi.n	8005156 <HAL_RCC_OscConfig+0x36a>
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005168:	e9d4 3107 	ldrd	r3, r1, [r4, #28]
 800516c:	6a62      	ldr	r2, [r4, #36]	; 0x24
 800516e:	430b      	orrs	r3, r1
 8005170:	ea43 1382 	orr.w	r3, r3, r2, lsl #6
 8005174:	e9d4 210a 	ldrd	r2, r1, [r4, #40]	; 0x28
 8005178:	0852      	lsrs	r2, r2, #1
 800517a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
 800517e:	3a01      	subs	r2, #1
        __HAL_RCC_PLL_ENABLE();
 8005180:	490a      	ldr	r1, [pc, #40]	; (80051ac <HAL_RCC_OscConfig+0x3c0>)
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005182:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
        __HAL_RCC_PLL_ENABLE();
 8005186:	2201      	movs	r2, #1
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005188:	606b      	str	r3, [r5, #4]
        __HAL_RCC_PLL_ENABLE();
 800518a:	660a      	str	r2, [r1, #96]	; 0x60
        tickstart = HAL_GetTick();
 800518c:	f7ff f9e8 	bl	8004560 <HAL_GetTick>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005190:	4d07      	ldr	r5, [pc, #28]	; (80051b0 <HAL_RCC_OscConfig+0x3c4>)
        tickstart = HAL_GetTick();
 8005192:	4604      	mov	r4, r0
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005194:	e005      	b.n	80051a2 <HAL_RCC_OscConfig+0x3b6>
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005196:	f7ff f9e3 	bl	8004560 <HAL_GetTick>
 800519a:	1b00      	subs	r0, r0, r4
 800519c:	2802      	cmp	r0, #2
 800519e:	f63f af5c 	bhi.w	800505a <HAL_RCC_OscConfig+0x26e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051a2:	682b      	ldr	r3, [r5, #0]
 80051a4:	019a      	lsls	r2, r3, #6
 80051a6:	d5f6      	bpl.n	8005196 <HAL_RCC_OscConfig+0x3aa>
 80051a8:	e6d5      	b.n	8004f56 <HAL_RCC_OscConfig+0x16a>
 80051aa:	bf00      	nop
 80051ac:	42470000 	.word	0x42470000
 80051b0:	40023800 	.word	0x40023800

080051b4 <HAL_RCC_EnableCSS>:
  *         the Cortex-M4 NMI (Non-Maskable Interrupt) exception vector.
  * @retval None
  */
void HAL_RCC_EnableCSS(void)
{
  *(__IO uint32_t *) RCC_CR_CSSON_BB = (uint32_t)ENABLE;
 80051b4:	4b01      	ldr	r3, [pc, #4]	; (80051bc <HAL_RCC_EnableCSS+0x8>)
 80051b6:	2201      	movs	r2, #1
 80051b8:	64da      	str	r2, [r3, #76]	; 0x4c
}
 80051ba:	4770      	bx	lr
 80051bc:	42470000 	.word	0x42470000

080051c0 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
  uint32_t sysclockfreq = 0U;

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051c0:	4916      	ldr	r1, [pc, #88]	; (800521c <HAL_RCC_GetSysClockFreq+0x5c>)
{
 80051c2:	b508      	push	{r3, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80051c4:	688b      	ldr	r3, [r1, #8]
 80051c6:	f003 030c 	and.w	r3, r3, #12
 80051ca:	2b04      	cmp	r3, #4
 80051cc:	d01b      	beq.n	8005206 <HAL_RCC_GetSysClockFreq+0x46>
 80051ce:	2b08      	cmp	r3, #8
 80051d0:	d117      	bne.n	8005202 <HAL_RCC_GetSysClockFreq+0x42>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051d2:	684a      	ldr	r2, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051d4:	684b      	ldr	r3, [r1, #4]
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051d6:	6849      	ldr	r1, [r1, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051d8:	f413 0380 	ands.w	r3, r3, #4194304	; 0x400000
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80051dc:	f002 023f 	and.w	r2, r2, #63	; 0x3f
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80051e0:	d113      	bne.n	800520a <HAL_RCC_GetSysClockFreq+0x4a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80051e2:	480f      	ldr	r0, [pc, #60]	; (8005220 <HAL_RCC_GetSysClockFreq+0x60>)
 80051e4:	f3c1 1188 	ubfx	r1, r1, #6, #9
 80051e8:	fba1 0100 	umull	r0, r1, r1, r0
 80051ec:	f7fb fb02 	bl	80007f4 <__aeabi_uldivmod>
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80051f0:	4b0a      	ldr	r3, [pc, #40]	; (800521c <HAL_RCC_GetSysClockFreq+0x5c>)
 80051f2:	685b      	ldr	r3, [r3, #4]
 80051f4:	f3c3 4301 	ubfx	r3, r3, #16, #2
 80051f8:	3301      	adds	r3, #1
 80051fa:	005b      	lsls	r3, r3, #1

      sysclockfreq = pllvco/pllp;
 80051fc:	fbb0 f0f3 	udiv	r0, r0, r3
      sysclockfreq = HSI_VALUE;
      break;
    }
  }
  return sysclockfreq;
}
 8005200:	bd08      	pop	{r3, pc}
      sysclockfreq = HSI_VALUE;
 8005202:	4807      	ldr	r0, [pc, #28]	; (8005220 <HAL_RCC_GetSysClockFreq+0x60>)
}
 8005204:	bd08      	pop	{r3, pc}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005206:	4807      	ldr	r0, [pc, #28]	; (8005224 <HAL_RCC_GetSysClockFreq+0x64>)
}
 8005208:	bd08      	pop	{r3, pc}
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800520a:	4806      	ldr	r0, [pc, #24]	; (8005224 <HAL_RCC_GetSysClockFreq+0x64>)
 800520c:	f3c1 1188 	ubfx	r1, r1, #6, #9
 8005210:	2300      	movs	r3, #0
 8005212:	fba1 0100 	umull	r0, r1, r1, r0
 8005216:	f7fb faed 	bl	80007f4 <__aeabi_uldivmod>
 800521a:	e7e9      	b.n	80051f0 <HAL_RCC_GetSysClockFreq+0x30>
 800521c:	40023800 	.word	0x40023800
 8005220:	00f42400 	.word	0x00f42400
 8005224:	007a1200 	.word	0x007a1200

08005228 <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 8005228:	2800      	cmp	r0, #0
 800522a:	f000 8087 	beq.w	800533c <HAL_RCC_ClockConfig+0x114>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800522e:	4a48      	ldr	r2, [pc, #288]	; (8005350 <HAL_RCC_ClockConfig+0x128>)
 8005230:	6813      	ldr	r3, [r2, #0]
 8005232:	f003 0307 	and.w	r3, r3, #7
 8005236:	428b      	cmp	r3, r1
{
 8005238:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800523c:	460d      	mov	r5, r1
 800523e:	4604      	mov	r4, r0
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005240:	d209      	bcs.n	8005256 <HAL_RCC_ClockConfig+0x2e>
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005242:	b2cb      	uxtb	r3, r1
 8005244:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005246:	6813      	ldr	r3, [r2, #0]
 8005248:	f003 0307 	and.w	r3, r3, #7
 800524c:	428b      	cmp	r3, r1
 800524e:	d002      	beq.n	8005256 <HAL_RCC_ClockConfig+0x2e>
    return HAL_ERROR;
 8005250:	2001      	movs	r0, #1
}
 8005252:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005256:	6823      	ldr	r3, [r4, #0]
 8005258:	0798      	lsls	r0, r3, #30
 800525a:	d514      	bpl.n	8005286 <HAL_RCC_ClockConfig+0x5e>
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800525c:	0759      	lsls	r1, r3, #29
 800525e:	d504      	bpl.n	800526a <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005260:	493c      	ldr	r1, [pc, #240]	; (8005354 <HAL_RCC_ClockConfig+0x12c>)
 8005262:	688a      	ldr	r2, [r1, #8]
 8005264:	f442 52e0 	orr.w	r2, r2, #7168	; 0x1c00
 8005268:	608a      	str	r2, [r1, #8]
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800526a:	071a      	lsls	r2, r3, #28
 800526c:	d504      	bpl.n	8005278 <HAL_RCC_ClockConfig+0x50>
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800526e:	4939      	ldr	r1, [pc, #228]	; (8005354 <HAL_RCC_ClockConfig+0x12c>)
 8005270:	688a      	ldr	r2, [r1, #8]
 8005272:	f442 4260 	orr.w	r2, r2, #57344	; 0xe000
 8005276:	608a      	str	r2, [r1, #8]
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005278:	4936      	ldr	r1, [pc, #216]	; (8005354 <HAL_RCC_ClockConfig+0x12c>)
 800527a:	68a0      	ldr	r0, [r4, #8]
 800527c:	688a      	ldr	r2, [r1, #8]
 800527e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005282:	4302      	orrs	r2, r0
 8005284:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005286:	07df      	lsls	r7, r3, #31
 8005288:	d521      	bpl.n	80052ce <HAL_RCC_ClockConfig+0xa6>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800528a:	6862      	ldr	r2, [r4, #4]
 800528c:	2a01      	cmp	r2, #1
 800528e:	d057      	beq.n	8005340 <HAL_RCC_ClockConfig+0x118>
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005290:	1e93      	subs	r3, r2, #2
 8005292:	2b01      	cmp	r3, #1
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005294:	4b2f      	ldr	r3, [pc, #188]	; (8005354 <HAL_RCC_ClockConfig+0x12c>)
 8005296:	681b      	ldr	r3, [r3, #0]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005298:	d94d      	bls.n	8005336 <HAL_RCC_ClockConfig+0x10e>
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800529a:	0799      	lsls	r1, r3, #30
 800529c:	d5d8      	bpl.n	8005250 <HAL_RCC_ClockConfig+0x28>
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800529e:	4e2d      	ldr	r6, [pc, #180]	; (8005354 <HAL_RCC_ClockConfig+0x12c>)
 80052a0:	68b3      	ldr	r3, [r6, #8]
 80052a2:	f023 0303 	bic.w	r3, r3, #3
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 80052aa:	f7ff f959 	bl	8004560 <HAL_GetTick>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052ae:	f241 3888 	movw	r8, #5000	; 0x1388
    tickstart = HAL_GetTick();
 80052b2:	4607      	mov	r7, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052b4:	e004      	b.n	80052c0 <HAL_RCC_ClockConfig+0x98>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80052b6:	f7ff f953 	bl	8004560 <HAL_GetTick>
 80052ba:	1bc0      	subs	r0, r0, r7
 80052bc:	4540      	cmp	r0, r8
 80052be:	d844      	bhi.n	800534a <HAL_RCC_ClockConfig+0x122>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80052c0:	68b3      	ldr	r3, [r6, #8]
 80052c2:	6862      	ldr	r2, [r4, #4]
 80052c4:	f003 030c 	and.w	r3, r3, #12
 80052c8:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 80052cc:	d1f3      	bne.n	80052b6 <HAL_RCC_ClockConfig+0x8e>
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80052ce:	4a20      	ldr	r2, [pc, #128]	; (8005350 <HAL_RCC_ClockConfig+0x128>)
 80052d0:	6813      	ldr	r3, [r2, #0]
 80052d2:	f003 0307 	and.w	r3, r3, #7
 80052d6:	42ab      	cmp	r3, r5
 80052d8:	d906      	bls.n	80052e8 <HAL_RCC_ClockConfig+0xc0>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052da:	b2eb      	uxtb	r3, r5
 80052dc:	7013      	strb	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052de:	6813      	ldr	r3, [r2, #0]
 80052e0:	f003 0307 	and.w	r3, r3, #7
 80052e4:	42ab      	cmp	r3, r5
 80052e6:	d1b3      	bne.n	8005250 <HAL_RCC_ClockConfig+0x28>
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052e8:	6823      	ldr	r3, [r4, #0]
 80052ea:	075a      	lsls	r2, r3, #29
 80052ec:	d506      	bpl.n	80052fc <HAL_RCC_ClockConfig+0xd4>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80052ee:	4919      	ldr	r1, [pc, #100]	; (8005354 <HAL_RCC_ClockConfig+0x12c>)
 80052f0:	68e0      	ldr	r0, [r4, #12]
 80052f2:	688a      	ldr	r2, [r1, #8]
 80052f4:	f422 52e0 	bic.w	r2, r2, #7168	; 0x1c00
 80052f8:	4302      	orrs	r2, r0
 80052fa:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80052fc:	071b      	lsls	r3, r3, #28
 80052fe:	d507      	bpl.n	8005310 <HAL_RCC_ClockConfig+0xe8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005300:	4a14      	ldr	r2, [pc, #80]	; (8005354 <HAL_RCC_ClockConfig+0x12c>)
 8005302:	6921      	ldr	r1, [r4, #16]
 8005304:	6893      	ldr	r3, [r2, #8]
 8005306:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 800530a:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 800530e:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005310:	f7ff ff56 	bl	80051c0 <HAL_RCC_GetSysClockFreq>
 8005314:	4a0f      	ldr	r2, [pc, #60]	; (8005354 <HAL_RCC_ClockConfig+0x12c>)
 8005316:	4c10      	ldr	r4, [pc, #64]	; (8005358 <HAL_RCC_ClockConfig+0x130>)
 8005318:	6892      	ldr	r2, [r2, #8]
 800531a:	4910      	ldr	r1, [pc, #64]	; (800535c <HAL_RCC_ClockConfig+0x134>)
 800531c:	f3c2 1203 	ubfx	r2, r2, #4, #4
 8005320:	4603      	mov	r3, r0
 8005322:	5ca2      	ldrb	r2, [r4, r2]
  HAL_InitTick (uwTickPrio);
 8005324:	480e      	ldr	r0, [pc, #56]	; (8005360 <HAL_RCC_ClockConfig+0x138>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005326:	40d3      	lsrs	r3, r2
  HAL_InitTick (uwTickPrio);
 8005328:	6800      	ldr	r0, [r0, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800532a:	600b      	str	r3, [r1, #0]
  HAL_InitTick (uwTickPrio);
 800532c:	f7ff f8ce 	bl	80044cc <HAL_InitTick>
  return HAL_OK;
 8005330:	2000      	movs	r0, #0
}
 8005332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005336:	0198      	lsls	r0, r3, #6
 8005338:	d4b1      	bmi.n	800529e <HAL_RCC_ClockConfig+0x76>
 800533a:	e789      	b.n	8005250 <HAL_RCC_ClockConfig+0x28>
    return HAL_ERROR;
 800533c:	2001      	movs	r0, #1
}
 800533e:	4770      	bx	lr
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005340:	4b04      	ldr	r3, [pc, #16]	; (8005354 <HAL_RCC_ClockConfig+0x12c>)
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	039e      	lsls	r6, r3, #14
 8005346:	d4aa      	bmi.n	800529e <HAL_RCC_ClockConfig+0x76>
 8005348:	e782      	b.n	8005250 <HAL_RCC_ClockConfig+0x28>
        return HAL_TIMEOUT;
 800534a:	2003      	movs	r0, #3
 800534c:	e781      	b.n	8005252 <HAL_RCC_ClockConfig+0x2a>
 800534e:	bf00      	nop
 8005350:	40023c00 	.word	0x40023c00
 8005354:	40023800 	.word	0x40023800
 8005358:	08007ff8 	.word	0x08007ff8
 800535c:	20000678 	.word	0x20000678
 8005360:	20000680 	.word	0x20000680

08005364 <HAL_RCC_GetHCLKFreq>:
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
  return SystemCoreClock;
 8005364:	4b01      	ldr	r3, [pc, #4]	; (800536c <HAL_RCC_GetHCLKFreq+0x8>)
}
 8005366:	6818      	ldr	r0, [r3, #0]
 8005368:	4770      	bx	lr
 800536a:	bf00      	nop
 800536c:	20000678 	.word	0x20000678

08005370 <HAL_RCC_GetPCLK1Freq>:
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005370:	4b04      	ldr	r3, [pc, #16]	; (8005384 <HAL_RCC_GetPCLK1Freq+0x14>)
  return SystemCoreClock;
 8005372:	4905      	ldr	r1, [pc, #20]	; (8005388 <HAL_RCC_GetPCLK1Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	4a05      	ldr	r2, [pc, #20]	; (800538c <HAL_RCC_GetPCLK1Freq+0x1c>)
 8005378:	6808      	ldr	r0, [r1, #0]
 800537a:	f3c3 2382 	ubfx	r3, r3, #10, #3
 800537e:	5cd3      	ldrb	r3, [r2, r3]
}
 8005380:	40d8      	lsrs	r0, r3
 8005382:	4770      	bx	lr
 8005384:	40023800 	.word	0x40023800
 8005388:	20000678 	.word	0x20000678
 800538c:	08008008 	.word	0x08008008

08005390 <HAL_RCC_GetPCLK2Freq>:
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005390:	4b04      	ldr	r3, [pc, #16]	; (80053a4 <HAL_RCC_GetPCLK2Freq+0x14>)
  return SystemCoreClock;
 8005392:	4905      	ldr	r1, [pc, #20]	; (80053a8 <HAL_RCC_GetPCLK2Freq+0x18>)
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	4a05      	ldr	r2, [pc, #20]	; (80053ac <HAL_RCC_GetPCLK2Freq+0x1c>)
 8005398:	6808      	ldr	r0, [r1, #0]
 800539a:	f3c3 3342 	ubfx	r3, r3, #13, #3
 800539e:	5cd3      	ldrb	r3, [r2, r3]
}
 80053a0:	40d8      	lsrs	r0, r3
 80053a2:	4770      	bx	lr
 80053a4:	40023800 	.word	0x40023800
 80053a8:	20000678 	.word	0x20000678
 80053ac:	08008008 	.word	0x08008008

080053b0 <HAL_TIM_Base_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d076      	beq.n	80054a2 <HAL_TIM_Base_Init+0xf2>
{
 80053b4:	b510      	push	{r4, lr}
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80053b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80053ba:	4604      	mov	r4, r0
 80053bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d055      	beq.n	8005470 <HAL_TIM_Base_Init+0xc0>

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80053c4:	6822      	ldr	r2, [r4, #0]
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053c6:	4938      	ldr	r1, [pc, #224]	; (80054a8 <HAL_TIM_Base_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80053c8:	2302      	movs	r3, #2
 80053ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053ce:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80053d0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80053d2:	d052      	beq.n	800547a <HAL_TIM_Base_Init+0xca>
 80053d4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80053d8:	d021      	beq.n	800541e <HAL_TIM_Base_Init+0x6e>
 80053da:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80053de:	428a      	cmp	r2, r1
 80053e0:	d01d      	beq.n	800541e <HAL_TIM_Base_Init+0x6e>
 80053e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053e6:	428a      	cmp	r2, r1
 80053e8:	d019      	beq.n	800541e <HAL_TIM_Base_Init+0x6e>
 80053ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053ee:	428a      	cmp	r2, r1
 80053f0:	d015      	beq.n	800541e <HAL_TIM_Base_Init+0x6e>
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80053f2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80053f6:	428a      	cmp	r2, r1
 80053f8:	d015      	beq.n	8005426 <HAL_TIM_Base_Init+0x76>
 80053fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80053fe:	428a      	cmp	r2, r1
 8005400:	d011      	beq.n	8005426 <HAL_TIM_Base_Init+0x76>
 8005402:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005406:	428a      	cmp	r2, r1
 8005408:	d00d      	beq.n	8005426 <HAL_TIM_Base_Init+0x76>
    tmpcr1 &= ~TIM_CR1_CKD;
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800540a:	69a0      	ldr	r0, [r4, #24]

  TIMx->CR1 = tmpcr1;

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800540c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800540e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005412:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005414:	6013      	str	r3, [r2, #0]

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005416:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005418:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800541a:	6293      	str	r3, [r2, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800541c:	e010      	b.n	8005440 <HAL_TIM_Base_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800541e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005420:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005424:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005426:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005428:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800542a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800542e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005430:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005434:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005436:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005438:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800543a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800543c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800543e:	6291      	str	r1, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005440:	2301      	movs	r3, #1
 8005442:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005444:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005448:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800544c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005450:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005454:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005458:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800545c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005460:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005464:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005468:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800546c:	2000      	movs	r0, #0
}
 800546e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005470:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_Base_MspInit(htim);
 8005474:	f7fe fd9c 	bl	8003fb0 <HAL_TIM_Base_MspInit>
 8005478:	e7a4      	b.n	80053c4 <HAL_TIM_Base_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800547a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800547c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800547e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005482:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005484:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005488:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800548a:	69a1      	ldr	r1, [r4, #24]
 800548c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005490:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005492:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005494:	68e3      	ldr	r3, [r4, #12]
 8005496:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005498:	6863      	ldr	r3, [r4, #4]
 800549a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800549c:	6963      	ldr	r3, [r4, #20]
 800549e:	6313      	str	r3, [r2, #48]	; 0x30
 80054a0:	e7ce      	b.n	8005440 <HAL_TIM_Base_Init+0x90>
    return HAL_ERROR;
 80054a2:	2001      	movs	r0, #1
}
 80054a4:	4770      	bx	lr
 80054a6:	bf00      	nop
 80054a8:	40010000 	.word	0x40010000

080054ac <HAL_TIM_PWM_MspInit>:
 80054ac:	4770      	bx	lr
 80054ae:	bf00      	nop

080054b0 <HAL_TIM_PWM_Init>:
  if (htim == NULL)
 80054b0:	2800      	cmp	r0, #0
 80054b2:	d076      	beq.n	80055a2 <HAL_TIM_PWM_Init+0xf2>
{
 80054b4:	b510      	push	{r4, lr}
  if (htim->State == HAL_TIM_STATE_RESET)
 80054b6:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80054ba:	4604      	mov	r4, r0
 80054bc:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d055      	beq.n	8005570 <HAL_TIM_PWM_Init+0xc0>
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80054c4:	6822      	ldr	r2, [r4, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054c6:	4938      	ldr	r1, [pc, #224]	; (80055a8 <HAL_TIM_PWM_Init+0xf8>)
  htim->State = HAL_TIM_STATE_BUSY;
 80054c8:	2302      	movs	r3, #2
 80054ca:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054ce:	428a      	cmp	r2, r1
  tmpcr1 = TIMx->CR1;
 80054d0:	6813      	ldr	r3, [r2, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80054d2:	d052      	beq.n	800557a <HAL_TIM_PWM_Init+0xca>
 80054d4:	f1b2 4f80 	cmp.w	r2, #1073741824	; 0x40000000
 80054d8:	d021      	beq.n	800551e <HAL_TIM_PWM_Init+0x6e>
 80054da:	f5a1 417c 	sub.w	r1, r1, #64512	; 0xfc00
 80054de:	428a      	cmp	r2, r1
 80054e0:	d01d      	beq.n	800551e <HAL_TIM_PWM_Init+0x6e>
 80054e2:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054e6:	428a      	cmp	r2, r1
 80054e8:	d019      	beq.n	800551e <HAL_TIM_PWM_Init+0x6e>
 80054ea:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054ee:	428a      	cmp	r2, r1
 80054f0:	d015      	beq.n	800551e <HAL_TIM_PWM_Init+0x6e>
  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80054f2:	f501 319a 	add.w	r1, r1, #78848	; 0x13400
 80054f6:	428a      	cmp	r2, r1
 80054f8:	d015      	beq.n	8005526 <HAL_TIM_PWM_Init+0x76>
 80054fa:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 80054fe:	428a      	cmp	r2, r1
 8005500:	d011      	beq.n	8005526 <HAL_TIM_PWM_Init+0x76>
 8005502:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8005506:	428a      	cmp	r2, r1
 8005508:	d00d      	beq.n	8005526 <HAL_TIM_PWM_Init+0x76>
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800550a:	69a0      	ldr	r0, [r4, #24]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800550c:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800550e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005512:	4303      	orrs	r3, r0
  TIMx->CR1 = tmpcr1;
 8005514:	6013      	str	r3, [r2, #0]
  TIMx->PSC = Structure->Prescaler;
 8005516:	6863      	ldr	r3, [r4, #4]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005518:	62d1      	str	r1, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800551a:	6293      	str	r3, [r2, #40]	; 0x28
  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800551c:	e010      	b.n	8005540 <HAL_TIM_PWM_Init+0x90>
    tmpcr1 |= Structure->CounterMode;
 800551e:	68a1      	ldr	r1, [r4, #8]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005520:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005524:	430b      	orrs	r3, r1
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005526:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005528:	69a1      	ldr	r1, [r4, #24]
    tmpcr1 &= ~TIM_CR1_CKD;
 800552a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800552e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005530:	f023 0380 	bic.w	r3, r3, #128	; 0x80
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005534:	68e0      	ldr	r0, [r4, #12]
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005536:	430b      	orrs	r3, r1
  TIMx->PSC = Structure->Prescaler;
 8005538:	6861      	ldr	r1, [r4, #4]
  TIMx->CR1 = tmpcr1;
 800553a:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 800553c:	62d0      	str	r0, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 800553e:	6291      	str	r1, [r2, #40]	; 0x28
  TIMx->EGR = TIM_EGR_UG;
 8005540:	2301      	movs	r3, #1
 8005542:	6153      	str	r3, [r2, #20]
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005544:	f884 3046 	strb.w	r3, [r4, #70]	; 0x46
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005548:	f884 303e 	strb.w	r3, [r4, #62]	; 0x3e
 800554c:	f884 303f 	strb.w	r3, [r4, #63]	; 0x3f
 8005550:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
 8005554:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005558:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800555c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8005560:	f884 3044 	strb.w	r3, [r4, #68]	; 0x44
 8005564:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
  htim->State = HAL_TIM_STATE_READY;
 8005568:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
  return HAL_OK;
 800556c:	2000      	movs	r0, #0
}
 800556e:	bd10      	pop	{r4, pc}
    htim->Lock = HAL_UNLOCKED;
 8005570:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_TIM_PWM_MspInit(htim);
 8005574:	f7ff ff9a 	bl	80054ac <HAL_TIM_PWM_MspInit>
 8005578:	e7a4      	b.n	80054c4 <HAL_TIM_PWM_Init+0x14>
    tmpcr1 |= Structure->CounterMode;
 800557a:	68a0      	ldr	r0, [r4, #8]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800557c:	6921      	ldr	r1, [r4, #16]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800557e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
    tmpcr1 |= Structure->CounterMode;
 8005582:	4303      	orrs	r3, r0
    tmpcr1 &= ~TIM_CR1_CKD;
 8005584:	f423 7340 	bic.w	r3, r3, #768	; 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005588:	430b      	orrs	r3, r1
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800558a:	69a1      	ldr	r1, [r4, #24]
 800558c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005590:	430b      	orrs	r3, r1
  TIMx->CR1 = tmpcr1;
 8005592:	6013      	str	r3, [r2, #0]
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005594:	68e3      	ldr	r3, [r4, #12]
 8005596:	62d3      	str	r3, [r2, #44]	; 0x2c
  TIMx->PSC = Structure->Prescaler;
 8005598:	6863      	ldr	r3, [r4, #4]
 800559a:	6293      	str	r3, [r2, #40]	; 0x28
    TIMx->RCR = Structure->RepetitionCounter;
 800559c:	6963      	ldr	r3, [r4, #20]
 800559e:	6313      	str	r3, [r2, #48]	; 0x30
 80055a0:	e7ce      	b.n	8005540 <HAL_TIM_PWM_Init+0x90>
    return HAL_ERROR;
 80055a2:	2001      	movs	r0, #1
}
 80055a4:	4770      	bx	lr
 80055a6:	bf00      	nop
 80055a8:	40010000 	.word	0x40010000

080055ac <HAL_TIM_PWM_ConfigChannel>:
  __HAL_LOCK(htim);
 80055ac:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80055b0:	2b01      	cmp	r3, #1
 80055b2:	f000 80ca 	beq.w	800574a <HAL_TIM_PWM_ConfigChannel+0x19e>
 80055b6:	2301      	movs	r3, #1
{
 80055b8:	b4f0      	push	{r4, r5, r6, r7}
  __HAL_LOCK(htim);
 80055ba:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80055be:	2a0c      	cmp	r2, #12
 80055c0:	d808      	bhi.n	80055d4 <HAL_TIM_PWM_ConfigChannel+0x28>
 80055c2:	e8df f002 	tbb	[pc, r2]
 80055c6:	073d      	.short	0x073d
 80055c8:	07680707 	.word	0x07680707
 80055cc:	07960707 	.word	0x07960707
 80055d0:	0707      	.short	0x0707
 80055d2:	0e          	.byte	0x0e
 80055d3:	00          	.byte	0x00
  __HAL_UNLOCK(htim);
 80055d4:	2300      	movs	r3, #0
 80055d6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  switch (Channel)
 80055da:	2201      	movs	r2, #1
}
 80055dc:	4610      	mov	r0, r2
 80055de:	bcf0      	pop	{r4, r5, r6, r7}
 80055e0:	4770      	bx	lr
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80055e2:	6803      	ldr	r3, [r0, #0]
  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
  tmpccmrx &= ~TIM_CCMR2_CC4S;

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055e4:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80055e6:	6a1a      	ldr	r2, [r3, #32]
 80055e8:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80055ec:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80055ee:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80055f0:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 80055f2:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80055f4:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80055f8:	ea44 2406 	orr.w	r4, r4, r6, lsl #8

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80055fc:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC4P;
 80055fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005602:	ea42 3206 	orr.w	r2, r2, r6, lsl #12

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005606:	4e6b      	ldr	r6, [pc, #428]	; (80057b4 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8005608:	42b3      	cmp	r3, r6
 800560a:	f000 80bd 	beq.w	8005788 <HAL_TIM_PWM_ConfigChannel+0x1dc>
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800560e:	605d      	str	r5, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005610:	61dc      	str	r4, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005612:	684c      	ldr	r4, [r1, #4]
 8005614:	641c      	str	r4, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005616:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005618:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800561a:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800561c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005620:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005622:	69dc      	ldr	r4, [r3, #28]
 8005624:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8005628:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800562a:	69d9      	ldr	r1, [r3, #28]
 800562c:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 8005630:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 8005632:	2300      	movs	r3, #0
 8005634:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005638:	2200      	movs	r2, #0
}
 800563a:	4610      	mov	r0, r2
 800563c:	bcf0      	pop	{r4, r5, r6, r7}
 800563e:	4770      	bx	lr
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005640:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 8005642:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005644:	6a1a      	ldr	r2, [r3, #32]
 8005646:	f022 0201 	bic.w	r2, r2, #1
 800564a:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 800564c:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 800564e:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 8005650:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005652:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005656:	4334      	orrs	r4, r6
  tmpccer |= OC_Config->OCPolarity;
 8005658:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC1P;
 800565a:	f022 0202 	bic.w	r2, r2, #2
  tmpccer |= OC_Config->OCPolarity;
 800565e:	4332      	orrs	r2, r6
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005660:	4e54      	ldr	r6, [pc, #336]	; (80057b4 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8005662:	42b3      	cmp	r3, r6
 8005664:	d074      	beq.n	8005750 <HAL_TIM_PWM_ConfigChannel+0x1a4>
  TIMx->CR2 = tmpcr2;
 8005666:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 8005668:	619c      	str	r4, [r3, #24]
  TIMx->CCR1 = OC_Config->Pulse;
 800566a:	684c      	ldr	r4, [r1, #4]
 800566c:	635c      	str	r4, [r3, #52]	; 0x34
  TIMx->CCER = tmpccer;
 800566e:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005670:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005672:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005674:	f042 0208 	orr.w	r2, r2, #8
 8005678:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800567a:	699c      	ldr	r4, [r3, #24]
 800567c:	f024 0404 	bic.w	r4, r4, #4
 8005680:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005682:	6999      	ldr	r1, [r3, #24]
 8005684:	4329      	orrs	r1, r5
 8005686:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 8005688:	2300      	movs	r3, #0
 800568a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 800568e:	2200      	movs	r2, #0
}
 8005690:	4610      	mov	r0, r2
 8005692:	bcf0      	pop	{r4, r5, r6, r7}
 8005694:	4770      	bx	lr
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005696:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005698:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800569a:	6a1a      	ldr	r2, [r3, #32]
 800569c:	f022 0210 	bic.w	r2, r2, #16
 80056a0:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80056a2:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 80056a4:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR1;
 80056a6:	699c      	ldr	r4, [r3, #24]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80056a8:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80056ac:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b0:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC2P;
 80056b2:	f022 0220 	bic.w	r2, r2, #32
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80056b6:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80056ba:	4e3e      	ldr	r6, [pc, #248]	; (80057b4 <HAL_TIM_PWM_ConfigChannel+0x208>)
 80056bc:	42b3      	cmp	r3, r6
 80056be:	d054      	beq.n	800576a <HAL_TIM_PWM_ConfigChannel+0x1be>
  TIMx->CR2 = tmpcr2;
 80056c0:	605d      	str	r5, [r3, #4]
  TIMx->CCMR1 = tmpccmrx;
 80056c2:	619c      	str	r4, [r3, #24]
  TIMx->CCR2 = OC_Config->Pulse;
 80056c4:	684c      	ldr	r4, [r1, #4]
 80056c6:	639c      	str	r4, [r3, #56]	; 0x38
  TIMx->CCER = tmpccer;
 80056c8:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056ca:	699a      	ldr	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056cc:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80056ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80056d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80056d4:	699c      	ldr	r4, [r3, #24]
 80056d6:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 80056da:	619c      	str	r4, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80056dc:	6999      	ldr	r1, [r3, #24]
 80056de:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
 80056e2:	6199      	str	r1, [r3, #24]
  __HAL_UNLOCK(htim);
 80056e4:	2300      	movs	r3, #0
 80056e6:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 80056ea:	2200      	movs	r2, #0
}
 80056ec:	4610      	mov	r0, r2
 80056ee:	bcf0      	pop	{r4, r5, r6, r7}
 80056f0:	4770      	bx	lr
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80056f2:	6803      	ldr	r3, [r0, #0]
  tmpccmrx |= OC_Config->OCMode;
 80056f4:	680e      	ldr	r6, [r1, #0]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80056f6:	6a1a      	ldr	r2, [r3, #32]
 80056f8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80056fc:	621a      	str	r2, [r3, #32]
  tmpccer = TIMx->CCER;
 80056fe:	6a1a      	ldr	r2, [r3, #32]
  tmpcr2 =  TIMx->CR2;
 8005700:	685d      	ldr	r5, [r3, #4]
  tmpccmrx = TIMx->CCMR2;
 8005702:	69dc      	ldr	r4, [r3, #28]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005704:	f024 0473 	bic.w	r4, r4, #115	; 0x73
  tmpccmrx |= OC_Config->OCMode;
 8005708:	4334      	orrs	r4, r6
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800570a:	688e      	ldr	r6, [r1, #8]
  tmpccer &= ~TIM_CCER_CC3P;
 800570c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005710:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005714:	4e27      	ldr	r6, [pc, #156]	; (80057b4 <HAL_TIM_PWM_ConfigChannel+0x208>)
 8005716:	42b3      	cmp	r3, r6
 8005718:	d03c      	beq.n	8005794 <HAL_TIM_PWM_ConfigChannel+0x1e8>
  TIMx->CR2 = tmpcr2;
 800571a:	605d      	str	r5, [r3, #4]
  TIMx->CCMR2 = tmpccmrx;
 800571c:	61dc      	str	r4, [r3, #28]
  TIMx->CCR3 = OC_Config->Pulse;
 800571e:	684c      	ldr	r4, [r1, #4]
 8005720:	63dc      	str	r4, [r3, #60]	; 0x3c
  TIMx->CCER = tmpccer;
 8005722:	621a      	str	r2, [r3, #32]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005724:	69da      	ldr	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005726:	690d      	ldr	r5, [r1, #16]
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005728:	f042 0208 	orr.w	r2, r2, #8
 800572c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800572e:	69dc      	ldr	r4, [r3, #28]
 8005730:	f024 0404 	bic.w	r4, r4, #4
 8005734:	61dc      	str	r4, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005736:	69d9      	ldr	r1, [r3, #28]
 8005738:	4329      	orrs	r1, r5
 800573a:	61d9      	str	r1, [r3, #28]
  __HAL_UNLOCK(htim);
 800573c:	2300      	movs	r3, #0
 800573e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
  HAL_StatusTypeDef status = HAL_OK;
 8005742:	2200      	movs	r2, #0
}
 8005744:	4610      	mov	r0, r2
 8005746:	bcf0      	pop	{r4, r5, r6, r7}
 8005748:	4770      	bx	lr
  __HAL_LOCK(htim);
 800574a:	2202      	movs	r2, #2
}
 800574c:	4610      	mov	r0, r2
 800574e:	4770      	bx	lr
    tmpccer |= OC_Config->OCNPolarity;
 8005750:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC1NP;
 8005752:	f022 0208 	bic.w	r2, r2, #8
    tmpccer |= OC_Config->OCNPolarity;
 8005756:	4332      	orrs	r2, r6
    tmpcr2 |= OC_Config->OCNIdleState;
 8005758:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800575c:	f425 7540 	bic.w	r5, r5, #768	; 0x300
    tmpcr2 |= OC_Config->OCNIdleState;
 8005760:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC1NE;
 8005762:	f022 0204 	bic.w	r2, r2, #4
    tmpcr2 |= OC_Config->OCNIdleState;
 8005766:	4335      	orrs	r5, r6
 8005768:	e77d      	b.n	8005666 <HAL_TIM_PWM_ConfigChannel+0xba>
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800576a:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC2NP;
 800576c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005770:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005774:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005778:	f425 6540 	bic.w	r5, r5, #3072	; 0xc00
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800577c:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC2NE;
 800577e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005782:	ea45 0586 	orr.w	r5, r5, r6, lsl #2
 8005786:	e79b      	b.n	80056c0 <HAL_TIM_PWM_ConfigChannel+0x114>
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005788:	694e      	ldr	r6, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS4;
 800578a:	f425 4580 	bic.w	r5, r5, #16384	; 0x4000
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800578e:	ea45 1586 	orr.w	r5, r5, r6, lsl #6
 8005792:	e73c      	b.n	800560e <HAL_TIM_PWM_ConfigChannel+0x62>
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005794:	68ce      	ldr	r6, [r1, #12]
    tmpccer &= ~TIM_CCER_CC3NP;
 8005796:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800579a:	ea42 2206 	orr.w	r2, r2, r6, lsl #8
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800579e:	e9d1 6705 	ldrd	r6, r7, [r1, #20]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80057a2:	f425 5540 	bic.w	r5, r5, #12288	; 0x3000
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057a6:	433e      	orrs	r6, r7
    tmpccer &= ~TIM_CCER_CC3NE;
 80057a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80057ac:	ea45 1506 	orr.w	r5, r5, r6, lsl #4
 80057b0:	e7b3      	b.n	800571a <HAL_TIM_PWM_ConfigChannel+0x16e>
 80057b2:	bf00      	nop
 80057b4:	40010000 	.word	0x40010000

080057b8 <HAL_TIM_SlaveConfigSynchro>:
  __HAL_LOCK(htim);
 80057b8:	f890 203c 	ldrb.w	r2, [r0, #60]	; 0x3c
 80057bc:	2a01      	cmp	r2, #1
 80057be:	d050      	beq.n	8005862 <HAL_TIM_SlaveConfigSynchro+0xaa>
 80057c0:	4603      	mov	r3, r0
{
 80057c2:	b470      	push	{r4, r5, r6}
  htim->State = HAL_TIM_STATE_BUSY;
 80057c4:	2202      	movs	r2, #2
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c6:	6804      	ldr	r4, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80057c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  __HAL_LOCK(htim);
 80057cc:	2001      	movs	r0, #1
 80057ce:	f883 003c 	strb.w	r0, [r3, #60]	; 0x3c
  tmpsmcr = htim->Instance->SMCR;
 80057d2:	68a2      	ldr	r2, [r4, #8]

  /* Reset the Trigger Selection Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
  /* Set the Input Trigger source */
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80057d4:	6848      	ldr	r0, [r1, #4]

  /* Reset the slave mode Bits */
  tmpsmcr &= ~TIM_SMCR_SMS;
  /* Set the slave mode */
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80057d6:	680d      	ldr	r5, [r1, #0]
  tmpsmcr &= ~TIM_SMCR_TS;
 80057d8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpsmcr |= sSlaveConfig->InputTrigger;
 80057dc:	4302      	orrs	r2, r0
  tmpsmcr &= ~TIM_SMCR_SMS;
 80057de:	f022 0207 	bic.w	r2, r2, #7
  tmpsmcr |= sSlaveConfig->SlaveMode;
 80057e2:	432a      	orrs	r2, r5

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;

  /* Configure the trigger prescaler, filter, and polarity */
  switch (sSlaveConfig->InputTrigger)
 80057e4:	2850      	cmp	r0, #80	; 0x50
  htim->Instance->SMCR = tmpsmcr;
 80057e6:	60a2      	str	r2, [r4, #8]
  switch (sSlaveConfig->InputTrigger)
 80057e8:	d060      	beq.n	80058ac <HAL_TIM_SlaveConfigSynchro+0xf4>
 80057ea:	d90f      	bls.n	800580c <HAL_TIM_SlaveConfigSynchro+0x54>
 80057ec:	2860      	cmp	r0, #96	; 0x60
 80057ee:	d03a      	beq.n	8005866 <HAL_TIM_SlaveConfigSynchro+0xae>
 80057f0:	2870      	cmp	r0, #112	; 0x70
 80057f2:	d10e      	bne.n	8005812 <HAL_TIM_SlaveConfigSynchro+0x5a>

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057f4:	e9d1 5202 	ldrd	r5, r2, [r1, #8]
  tmpsmcr = TIMx->SMCR;
 80057f8:	68a0      	ldr	r0, [r4, #8]
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057fa:	432a      	orrs	r2, r5
 80057fc:	690d      	ldr	r5, [r1, #16]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057fe:	f420 417f 	bic.w	r1, r0, #65280	; 0xff00
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005802:	ea42 2205 	orr.w	r2, r2, r5, lsl #8
 8005806:	430a      	orrs	r2, r1

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005808:	60a2      	str	r2, [r4, #8]
 800580a:	e00f      	b.n	800582c <HAL_TIM_SlaveConfigSynchro+0x74>
  switch (sSlaveConfig->InputTrigger)
 800580c:	2840      	cmp	r0, #64	; 0x40
 800580e:	d03d      	beq.n	800588c <HAL_TIM_SlaveConfigSynchro+0xd4>
 8005810:	d907      	bls.n	8005822 <HAL_TIM_SlaveConfigSynchro+0x6a>
    htim->State = HAL_TIM_STATE_READY;
 8005812:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005814:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005816:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800581a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 800581e:	bc70      	pop	{r4, r5, r6}
 8005820:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 8005822:	2820      	cmp	r0, #32
 8005824:	d002      	beq.n	800582c <HAL_TIM_SlaveConfigSynchro+0x74>
 8005826:	d912      	bls.n	800584e <HAL_TIM_SlaveConfigSynchro+0x96>
 8005828:	2830      	cmp	r0, #48	; 0x30
 800582a:	d1f2      	bne.n	8005812 <HAL_TIM_SlaveConfigSynchro+0x5a>
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_TRIGGER);
 800582c:	68e2      	ldr	r2, [r4, #12]
 800582e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005832:	60e2      	str	r2, [r4, #12]
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 8005834:	68e2      	ldr	r2, [r4, #12]
  __HAL_UNLOCK(htim);
 8005836:	2100      	movs	r1, #0
  htim->State = HAL_TIM_STATE_READY;
 8005838:	2501      	movs	r5, #1
  __HAL_TIM_DISABLE_DMA(htim, TIM_DMA_TRIGGER);
 800583a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800583e:	60e2      	str	r2, [r4, #12]
  htim->State = HAL_TIM_STATE_READY;
 8005840:	f883 503d 	strb.w	r5, [r3, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 8005844:	f883 103c 	strb.w	r1, [r3, #60]	; 0x3c
  return HAL_OK;
 8005848:	4608      	mov	r0, r1
}
 800584a:	bc70      	pop	{r4, r5, r6}
 800584c:	4770      	bx	lr
  switch (sSlaveConfig->InputTrigger)
 800584e:	f030 0210 	bics.w	r2, r0, #16
 8005852:	d0eb      	beq.n	800582c <HAL_TIM_SlaveConfigSynchro+0x74>
    htim->State = HAL_TIM_STATE_READY;
 8005854:	2001      	movs	r0, #1
    __HAL_UNLOCK(htim);
 8005856:	2200      	movs	r2, #0
    htim->State = HAL_TIM_STATE_READY;
 8005858:	f883 003d 	strb.w	r0, [r3, #61]	; 0x3d
    __HAL_UNLOCK(htim);
 800585c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    return HAL_ERROR;
 8005860:	e7dd      	b.n	800581e <HAL_TIM_SlaveConfigSynchro+0x66>
  __HAL_LOCK(htim);
 8005862:	2002      	movs	r0, #2
}
 8005864:	4770      	bx	lr
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005866:	6a20      	ldr	r0, [r4, #32]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005868:	690a      	ldr	r2, [r1, #16]
 800586a:	688d      	ldr	r5, [r1, #8]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800586c:	f020 0010 	bic.w	r0, r0, #16
 8005870:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005872:	69a1      	ldr	r1, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005874:	f421 4170 	bic.w	r1, r1, #61440	; 0xf000
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005878:	ea41 3102 	orr.w	r1, r1, r2, lsl #12
  tmpccer = TIMx->CCER;
 800587c:	6a22      	ldr	r2, [r4, #32]
  TIMx->CCMR1 = tmpccmr1 ;
 800587e:	61a1      	str	r1, [r4, #24]
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005880:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
  tmpccer |= (TIM_ICPolarity << 4U);
 8005884:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCER = tmpccer;
 8005888:	6222      	str	r2, [r4, #32]
 800588a:	e7cf      	b.n	800582c <HAL_TIM_SlaveConfigSynchro+0x74>
      if (sSlaveConfig->SlaveMode == TIM_SLAVEMODE_GATED)
 800588c:	2d05      	cmp	r5, #5
 800588e:	d0c0      	beq.n	8005812 <HAL_TIM_SlaveConfigSynchro+0x5a>
      tmpccer = htim->Instance->CCER;
 8005890:	6a25      	ldr	r5, [r4, #32]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005892:	6a20      	ldr	r0, [r4, #32]
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 8005894:	690e      	ldr	r6, [r1, #16]
      htim->Instance->CCER &= ~TIM_CCER_CC1E;
 8005896:	f020 0001 	bic.w	r0, r0, #1
 800589a:	6220      	str	r0, [r4, #32]
      tmpccmr1 = htim->Instance->CCMR1;
 800589c:	69a2      	ldr	r2, [r4, #24]
      tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800589e:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
      tmpccmr1 |= ((sSlaveConfig->TriggerFilter) << 4U);
 80058a2:	ea42 1206 	orr.w	r2, r2, r6, lsl #4
      htim->Instance->CCMR1 = tmpccmr1;
 80058a6:	61a2      	str	r2, [r4, #24]
      htim->Instance->CCER = tmpccer;
 80058a8:	6225      	str	r5, [r4, #32]
      break;
 80058aa:	e7bf      	b.n	800582c <HAL_TIM_SlaveConfigSynchro+0x74>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80058ac:	6888      	ldr	r0, [r1, #8]
 80058ae:	690d      	ldr	r5, [r1, #16]
  tmpccer = TIMx->CCER;
 80058b0:	6a21      	ldr	r1, [r4, #32]
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80058b2:	f021 010a 	bic.w	r1, r1, #10
  tmpccer |= TIM_ICPolarity;
 80058b6:	4301      	orrs	r1, r0
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058b8:	6a20      	ldr	r0, [r4, #32]
 80058ba:	f020 0001 	bic.w	r0, r0, #1
 80058be:	6220      	str	r0, [r4, #32]
  tmpccmr1 = TIMx->CCMR1;
 80058c0:	69a2      	ldr	r2, [r4, #24]
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80058c2:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80058c6:	ea42 1205 	orr.w	r2, r2, r5, lsl #4
  TIMx->CCMR1 = tmpccmr1;
 80058ca:	61a2      	str	r2, [r4, #24]
  TIMx->CCER = tmpccer;
 80058cc:	6221      	str	r1, [r4, #32]
 80058ce:	e7ad      	b.n	800582c <HAL_TIM_SlaveConfigSynchro+0x74>

080058d0 <HAL_TIMEx_MasterConfigSynchronization>:
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 80058d4:	2b01      	cmp	r3, #1
 80058d6:	d02f      	beq.n	8005938 <HAL_TIMEx_MasterConfigSynchronization+0x68>

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058d8:	6803      	ldr	r3, [r0, #0]
  htim->State = HAL_TIM_STATE_BUSY;
 80058da:	2202      	movs	r2, #2
{
 80058dc:	b430      	push	{r4, r5}
  htim->State = HAL_TIM_STATE_BUSY;
 80058de:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  tmpcr2 = htim->Instance->CR2;
 80058e2:	685a      	ldr	r2, [r3, #4]
  tmpsmcr = htim->Instance->SMCR;

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058e4:	680d      	ldr	r5, [r1, #0]
  tmpsmcr = htim->Instance->SMCR;
 80058e6:	689c      	ldr	r4, [r3, #8]
  tmpcr2 &= ~TIM_CR2_MMS;
 80058e8:	f022 0270 	bic.w	r2, r2, #112	; 0x70
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80058ec:	432a      	orrs	r2, r5

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80058ee:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80058f0:	4a12      	ldr	r2, [pc, #72]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0x6c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d012      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058f6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058fa:	d00f      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 80058fc:	f5a2 427c 	sub.w	r2, r2, #64512	; 0xfc00
 8005900:	4293      	cmp	r3, r2
 8005902:	d00b      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005904:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005908:	4293      	cmp	r3, r2
 800590a:	d007      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800590c:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8005910:	4293      	cmp	r3, r2
 8005912:	d003      	beq.n	800591c <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8005914:	f502 329a 	add.w	r2, r2, #78848	; 0x13400
 8005918:	4293      	cmp	r3, r2
 800591a:	d104      	bne.n	8005926 <HAL_TIMEx_MasterConfigSynchronization+0x56>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800591c:	684a      	ldr	r2, [r1, #4]
    tmpsmcr &= ~TIM_SMCR_MSM;
 800591e:	f024 0480 	bic.w	r4, r4, #128	; 0x80
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005922:	4314      	orrs	r4, r2

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005924:	609c      	str	r4, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;

  __HAL_UNLOCK(htim);
 8005926:	2300      	movs	r3, #0
  htim->State = HAL_TIM_STATE_READY;
 8005928:	2201      	movs	r2, #1
 800592a:	f880 203d 	strb.w	r2, [r0, #61]	; 0x3d
  __HAL_UNLOCK(htim);
 800592e:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c

  return HAL_OK;
}
 8005932:	bc30      	pop	{r4, r5}
  return HAL_OK;
 8005934:	4618      	mov	r0, r3
}
 8005936:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005938:	2002      	movs	r0, #2
}
 800593a:	4770      	bx	lr
 800593c:	40010000 	.word	0x40010000

08005940 <HAL_TIMEx_ConfigBreakDeadTime>:
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005940:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
 8005944:	2b01      	cmp	r3, #1
 8005946:	d023      	beq.n	8005990 <HAL_TIMEx_ConfigBreakDeadTime+0x50>
{
 8005948:	b410      	push	{r4}
  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800594a:	e9d1 4302 	ldrd	r4, r3, [r1, #8]
 800594e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005952:	4602      	mov	r2, r0
 8005954:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005956:	6848      	ldr	r0, [r1, #4]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005958:	680c      	ldr	r4, [r1, #0]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800595a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800595e:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005960:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005964:	6908      	ldr	r0, [r1, #16]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005966:	4323      	orrs	r3, r4
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005968:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800596c:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800596e:	6948      	ldr	r0, [r1, #20]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005970:	69cc      	ldr	r4, [r1, #28]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005972:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005976:	4303      	orrs	r3, r0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005978:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 800597c:	6810      	ldr	r0, [r2, #0]

  __HAL_UNLOCK(htim);
 800597e:	2100      	movs	r1, #0
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005980:	4323      	orrs	r3, r4
  htim->Instance->BDTR = tmpbdtr;
 8005982:	6443      	str	r3, [r0, #68]	; 0x44
  __HAL_UNLOCK(htim);
 8005984:	f882 103c 	strb.w	r1, [r2, #60]	; 0x3c

  return HAL_OK;
 8005988:	4608      	mov	r0, r1
}
 800598a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800598e:	4770      	bx	lr
  __HAL_LOCK(htim);
 8005990:	2002      	movs	r0, #2
}
 8005992:	4770      	bx	lr

08005994 <HAL_UART_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005994:	2800      	cmp	r0, #0
 8005996:	f000 808f 	beq.w	8005ab8 <HAL_UART_Init+0x124>
{
 800599a:	b538      	push	{r3, r4, r5, lr}
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800599c:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
 80059a0:	4604      	mov	r4, r0
 80059a2:	f003 02ff 	and.w	r2, r3, #255	; 0xff
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	f000 8081 	beq.w	8005aae <HAL_UART_Init+0x11a>
  }

  huart->gState = HAL_UART_STATE_BUSY;

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059ac:	6823      	ldr	r3, [r4, #0]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ae:	68e0      	ldr	r0, [r4, #12]
  huart->gState = HAL_UART_STATE_BUSY;
 80059b0:	2224      	movs	r2, #36	; 0x24
 80059b2:	f884 203d 	strb.w	r2, [r4, #61]	; 0x3d
  __HAL_UART_DISABLE(huart);
 80059b6:	68da      	ldr	r2, [r3, #12]
 80059b8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059bc:	60da      	str	r2, [r3, #12]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059be:	6919      	ldr	r1, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059c0:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059c2:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
 80059c6:	4301      	orrs	r1, r0
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059c8:	6920      	ldr	r0, [r4, #16]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80059ca:	6119      	str	r1, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059cc:	4302      	orrs	r2, r0
 80059ce:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1,
 80059d0:	68d9      	ldr	r1, [r3, #12]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059d2:	4302      	orrs	r2, r0
 80059d4:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1,
 80059d6:	f421 4116 	bic.w	r1, r1, #38400	; 0x9600
 80059da:	f021 010c 	bic.w	r1, r1, #12
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80059de:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1,
 80059e0:	430a      	orrs	r2, r1
 80059e2:	60da      	str	r2, [r3, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059e4:	695a      	ldr	r2, [r3, #20]
 80059e6:	69a0      	ldr	r0, [r4, #24]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059e8:	4934      	ldr	r1, [pc, #208]	; (8005abc <HAL_UART_Init+0x128>)
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059ea:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80059ee:	4302      	orrs	r2, r0
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059f0:	428b      	cmp	r3, r1
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80059f2:	615a      	str	r2, [r3, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80059f4:	d035      	beq.n	8005a62 <HAL_UART_Init+0xce>
 80059f6:	4a32      	ldr	r2, [pc, #200]	; (8005ac0 <HAL_UART_Init+0x12c>)
 80059f8:	4293      	cmp	r3, r2
 80059fa:	d032      	beq.n	8005a62 <HAL_UART_Init+0xce>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80059fc:	f7ff fcb8 	bl	8005370 <HAL_RCC_GetPCLK1Freq>
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a00:	69e3      	ldr	r3, [r4, #28]
 8005a02:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a06:	d032      	beq.n	8005a6e <HAL_UART_Init+0xda>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005a08:	6863      	ldr	r3, [r4, #4]
 8005a0a:	2119      	movs	r1, #25
 8005a0c:	009a      	lsls	r2, r3, #2
 8005a0e:	fba0 0101 	umull	r0, r1, r0, r1
 8005a12:	0f9b      	lsrs	r3, r3, #30
 8005a14:	f7fa feee 	bl	80007f4 <__aeabi_uldivmod>
 8005a18:	492a      	ldr	r1, [pc, #168]	; (8005ac4 <HAL_UART_Init+0x130>)
 8005a1a:	fba1 3200 	umull	r3, r2, r1, r0
 8005a1e:	0952      	lsrs	r2, r2, #5
 8005a20:	2564      	movs	r5, #100	; 0x64
 8005a22:	fb05 0012 	mls	r0, r5, r2, r0
 8005a26:	0100      	lsls	r0, r0, #4
 8005a28:	3032      	adds	r0, #50	; 0x32
 8005a2a:	6823      	ldr	r3, [r4, #0]
 8005a2c:	fba1 1000 	umull	r1, r0, r1, r0
 8005a30:	0112      	lsls	r2, r2, #4
 8005a32:	eb02 1050 	add.w	r0, r2, r0, lsr #5
 8005a36:	6098      	str	r0, [r3, #8]
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005a38:	691a      	ldr	r2, [r3, #16]
 8005a3a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005a3e:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005a40:	695a      	ldr	r2, [r3, #20]
 8005a42:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005a46:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE(huart);
 8005a48:	68da      	ldr	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a4a:	2500      	movs	r5, #0
  huart->gState = HAL_UART_STATE_READY;
 8005a4c:	2120      	movs	r1, #32
  __HAL_UART_ENABLE(huart);
 8005a4e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005a52:	60da      	str	r2, [r3, #12]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005a54:	6425      	str	r5, [r4, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8005a56:	f884 103d 	strb.w	r1, [r4, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005a5a:	f884 103e 	strb.w	r1, [r4, #62]	; 0x3e
  return HAL_OK;
 8005a5e:	4628      	mov	r0, r5
}
 8005a60:	bd38      	pop	{r3, r4, r5, pc}
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a62:	f7ff fc95 	bl	8005390 <HAL_RCC_GetPCLK2Freq>
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a66:	69e3      	ldr	r3, [r4, #28]
 8005a68:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a6c:	d1cc      	bne.n	8005a08 <HAL_UART_Init+0x74>
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005a6e:	6862      	ldr	r2, [r4, #4]
 8005a70:	2119      	movs	r1, #25
 8005a72:	1892      	adds	r2, r2, r2
 8005a74:	f04f 0300 	mov.w	r3, #0
 8005a78:	415b      	adcs	r3, r3
 8005a7a:	fba0 0101 	umull	r0, r1, r0, r1
 8005a7e:	f7fa feb9 	bl	80007f4 <__aeabi_uldivmod>
 8005a82:	4b10      	ldr	r3, [pc, #64]	; (8005ac4 <HAL_UART_Init+0x130>)
 8005a84:	fba3 2100 	umull	r2, r1, r3, r0
 8005a88:	094d      	lsrs	r5, r1, #5
 8005a8a:	2264      	movs	r2, #100	; 0x64
 8005a8c:	fb02 0215 	mls	r2, r2, r5, r0
 8005a90:	00d2      	lsls	r2, r2, #3
 8005a92:	3232      	adds	r2, #50	; 0x32
 8005a94:	fba3 3202 	umull	r3, r2, r3, r2
 8005a98:	f3c2 1142 	ubfx	r1, r2, #5, #3
 8005a9c:	0912      	lsrs	r2, r2, #4
 8005a9e:	6823      	ldr	r3, [r4, #0]
 8005aa0:	eb01 1105 	add.w	r1, r1, r5, lsl #4
 8005aa4:	f402 72f8 	and.w	r2, r2, #496	; 0x1f0
 8005aa8:	440a      	add	r2, r1
 8005aaa:	609a      	str	r2, [r3, #8]
 8005aac:	e7c4      	b.n	8005a38 <HAL_UART_Init+0xa4>
    huart->Lock = HAL_UNLOCKED;
 8005aae:	f880 203c 	strb.w	r2, [r0, #60]	; 0x3c
    HAL_UART_MspInit(huart);
 8005ab2:	f7fe fae9 	bl	8004088 <HAL_UART_MspInit>
 8005ab6:	e779      	b.n	80059ac <HAL_UART_Init+0x18>
    return HAL_ERROR;
 8005ab8:	2001      	movs	r0, #1
}
 8005aba:	4770      	bx	lr
 8005abc:	40011000 	.word	0x40011000
 8005ac0:	40011400 	.word	0x40011400
 8005ac4:	51eb851f 	.word	0x51eb851f

08005ac8 <VBS_GetAvBusVoltage_d>:
  }
  return (temp_avBusVoltage_d);
#else
  return (pHandle->AvBusVoltage_d);
#endif
}
 8005ac8:	88c0      	ldrh	r0, [r0, #6]
 8005aca:	4770      	bx	lr

08005acc <VBS_GetAvBusVoltage_V>:
    temp = 0U;
  }
  else
  {
#endif
    temp = (uint32_t)(pHandle->AvBusVoltage_d);
 8005acc:	88c3      	ldrh	r3, [r0, #6]
    temp *= pHandle->ConversionFactor;
 8005ace:	8840      	ldrh	r0, [r0, #2]
 8005ad0:	fb03 f000 	mul.w	r0, r3, r0
    temp /= 65536U;
#ifdef NULL_PTR_CHECK_BUS_VOLT
  }
#endif
  return ((uint16_t)temp);
}
 8005ad4:	0c00      	lsrs	r0, r0, #16
 8005ad6:	4770      	bx	lr

08005ad8 <Circle_Limitation>:

#if defined CIRCLE_LIMITATION_SQRT_M0
const uint16_t SqrtTable[1025] = SQRT_CIRCLE_LIMITATION;
#endif
__weak qd_t Circle_Limitation(const CircleLimitation_Handle_t *pHandle, qd_t Vqd)
{
 8005ad8:	b570      	push	{r4, r5, r6, lr}
    int32_t square_limit;
    int32_t vd_square_limit;
    int32_t new_q;
    int32_t new_d;

    maxModule = (int32_t)pHandle->MaxModule;
 8005ada:	8803      	ldrh	r3, [r0, #0]
 8005adc:	140d      	asrs	r5, r1, #16
{
 8005ade:	b084      	sub	sp, #16
 8005ae0:	b20c      	sxth	r4, r1

    square_q = ((int32_t)(Vqd.q)) * Vqd.q;
    square_d = ((int32_t)(Vqd.d)) * Vqd.d;
 8005ae2:	fb05 f205 	mul.w	r2, r5, r5
    square_limit = maxModule * maxModule;
 8005ae6:	fb03 f303 	mul.w	r3, r3, r3
{
 8005aea:	9101      	str	r1, [sp, #4]
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
    square_sum = square_q + square_d;
 8005aec:	fb04 2104 	mla	r1, r4, r4, r2

    if (square_sum > square_limit)
 8005af0:	428b      	cmp	r3, r1
 8005af2:	da10      	bge.n	8005b16 <Circle_Limitation+0x3e>
    vd_square_limit = ((int32_t)pHandle->MaxVd) * ((int32_t)pHandle->MaxVd);
 8005af4:	8846      	ldrh	r6, [r0, #2]
 8005af6:	fb06 f006 	mul.w	r0, r6, r6
    {
      if (square_d <= vd_square_limit)
 8005afa:	4282      	cmp	r2, r0
 8005afc:	dd14      	ble.n	8005b28 <Circle_Limitation+0x50>
        new_d = Vqd.d;
      }
      else
      {
        new_d = (int32_t)pHandle->MaxVd;
        if (Vqd.d < 0)
 8005afe:	2d00      	cmp	r5, #0
#if defined CIRCLE_LIMITATION_SQRT_M0
        square_temp = (square_limit - vd_square_limit) / 1048576;
        new_q = SqrtTable[square_temp];
#else
        square_temp = square_limit - vd_square_limit;
        new_q = MCM_Sqrt(square_temp);
 8005b00:	eba3 0000 	sub.w	r0, r3, r0
          new_d = -new_d;
 8005b04:	bfb8      	it	lt
 8005b06:	4276      	neglt	r6, r6
        new_q = MCM_Sqrt(square_temp);
 8005b08:	f7fb fff8 	bl	8001afc <MCM_Sqrt>
#endif
        if (Vqd.q < 0)
 8005b0c:	2c00      	cmp	r4, #0
        {
          new_q = - new_q;
 8005b0e:	bfb8      	it	lt
 8005b10:	4240      	neglt	r0, r0
        }
      }
      Local_Vqd.q = (int16_t)new_q;
      Local_Vqd.d = (int16_t)new_d;
 8005b12:	b235      	sxth	r5, r6
      Local_Vqd.q = (int16_t)new_q;
 8005b14:	b204      	sxth	r4, r0
    }
#ifdef NULL_PTR_CHECK_CRC_LIM
  }
#endif
  return (Local_Vqd);
 8005b16:	b2a4      	uxth	r4, r4
 8005b18:	2000      	movs	r0, #0
 8005b1a:	f364 000f 	bfi	r0, r4, #0, #16
 8005b1e:	b2ad      	uxth	r5, r5
 8005b20:	f365 401f 	bfi	r0, r5, #16, #16
}
 8005b24:	b004      	add	sp, #16
 8005b26:	bd70      	pop	{r4, r5, r6, pc}
        new_q = MCM_Sqrt(square_temp);
 8005b28:	1a98      	subs	r0, r3, r2
 8005b2a:	f7fb ffe7 	bl	8001afc <MCM_Sqrt>
        if (Vqd.q < 0)
 8005b2e:	2c00      	cmp	r4, #0
 8005b30:	daf0      	bge.n	8005b14 <Circle_Limitation+0x3c>
          new_q = -new_q;
 8005b32:	4240      	negs	r0, r0
 8005b34:	e7ee      	b.n	8005b14 <Circle_Limitation+0x3c>
 8005b36:	bf00      	nop

08005b38 <MCP_ReceivedPacket>:
#include "register_interface.h"
#include "mc_config.h"
#include "mcp_config.h"

void MCP_ReceivedPacket(MCP_Handle_t *pHandle)
{
 8005b38:	b570      	push	{r4, r5, r6, lr}
    /* Nothing to do, txBuffer and txLength have not been modified */
  }
  else /* Length is 0, this is a request to send back the last packet */
  {
#endif
    packetHeader = (uint16_t *)pHandle->rxBuffer; //cstat !MISRAC2012-Rule-11.3
 8005b3a:	6845      	ldr	r5, [r0, #4]
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8005b3c:	882a      	ldrh	r2, [r5, #0]
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005b3e:	f402 417f 	and.w	r1, r2, #65280	; 0xff00
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8005b42:	f022 0307 	bic.w	r3, r2, #7
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005b46:	f5b1 7f80 	cmp.w	r1, #256	; 0x100
{
 8005b4a:	b082      	sub	sp, #8
 8005b4c:	4604      	mov	r4, r0
    command = (uint16_t)(*packetHeader & CMD_MASK);
 8005b4e:	b29b      	uxth	r3, r3
    if ((command & MCP_USER_CMD_MASK) == MCP_USER_CMD)
 8005b50:	f000 8082 	beq.w	8005c58 <MCP_ReceivedPacket+0x120>
    }

    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);

    
    MCI_Handle_t *pMCI = &Mci[motorID];
 8005b54:	4e71      	ldr	r6, [pc, #452]	; (8005d1c <MCP_ReceivedPacket+0x1e4>)
    motorID = (uint8_t)((*packetHeader - 1U) & MOTOR_MASK);
 8005b56:	3a01      	subs	r2, #1
    MCI_Handle_t *pMCI = &Mci[motorID];
 8005b58:	f002 0207 	and.w	r2, r2, #7
    /* Removing MCP Header from RxBuffer*/
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005b5c:	3502      	adds	r5, #2
    MCI_Handle_t *pMCI = &Mci[motorID];
 8005b5e:	eb06 1642 	add.w	r6, r6, r2, lsl #5
    /* Commands requiering payload response must be aware of space available for the payload*/
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005b62:	6822      	ldr	r2, [r4, #0]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005b64:	6045      	str	r5, [r0, #4]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005b66:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005b68:	8991      	ldrh	r1, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005b6a:	3802      	subs	r0, #2
 8005b6c:	b280      	uxth	r0, r0
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005b6e:	3901      	subs	r1, #1
    /* Initialization of the tx length, command which send back data has to increment the txLength
     * (case of Read register) */
    pHandle->txLength = 0;
 8005b70:	f04f 0c00 	mov.w	ip, #0

    switch (command)
 8005b74:	2b38      	cmp	r3, #56	; 0x38
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005b76:	81a0      	strh	r0, [r4, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005b78:	b289      	uxth	r1, r1
    pHandle->txLength = 0;
 8005b7a:	f8a4 c00e 	strh.w	ip, [r4, #14]
    switch (command)
 8005b7e:	d829      	bhi.n	8005bd4 <MCP_ReceivedPacket+0x9c>
 8005b80:	2b38      	cmp	r3, #56	; 0x38
 8005b82:	d81e      	bhi.n	8005bc2 <MCP_ReceivedPacket+0x8a>
 8005b84:	e8df f003 	tbb	[pc, r3]
 8005b88:	1d1d1d98 	.word	0x1d1d1d98
 8005b8c:	1d1d1d1d 	.word	0x1d1d1d1d
 8005b90:	1d1d1da0 	.word	0x1d1d1da0
 8005b94:	1d1d1d1d 	.word	0x1d1d1d1d
 8005b98:	1d1d1da5 	.word	0x1d1d1da5
 8005b9c:	1d1d1d1d 	.word	0x1d1d1d1d
 8005ba0:	1d1d1d8a 	.word	0x1d1d1d8a
 8005ba4:	1d1d1d1d 	.word	0x1d1d1d1d
 8005ba8:	1d1d1d84 	.word	0x1d1d1d84
 8005bac:	1d1d1d1d 	.word	0x1d1d1d1d
 8005bb0:	1d1d1daa 	.word	0x1d1d1daa
 8005bb4:	1d1d1d1d 	.word	0x1d1d1d1d
 8005bb8:	1d1d1d80 	.word	0x1d1d1d80
 8005bbc:	1d1d1d1d 	.word	0x1d1d1d1d
 8005bc0:	92          	.byte	0x92
 8005bc1:	00          	.byte	0x00
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	2002      	movs	r0, #2
      {
        MCPResponse = MCP_CMD_UNKNOWN;
        break;
      }
    }
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005bc6:	68a2      	ldr	r2, [r4, #8]
 8005bc8:	54d0      	strb	r0, [r2, r3]
    pHandle->txLength++;
 8005bca:	89e3      	ldrh	r3, [r4, #14]
 8005bcc:	3301      	adds	r3, #1
 8005bce:	81e3      	strh	r3, [r4, #14]
#ifdef NULL_PTR_CHECK_MCP
  }
#endif
}
 8005bd0:	b002      	add	sp, #8
 8005bd2:	bd70      	pop	{r4, r5, r6, pc}
    switch (command)
 8005bd4:	2b60      	cmp	r3, #96	; 0x60
 8005bd6:	d839      	bhi.n	8005c4c <MCP_ReceivedPacket+0x114>
 8005bd8:	2b47      	cmp	r3, #71	; 0x47
 8005bda:	d93a      	bls.n	8005c52 <MCP_ReceivedPacket+0x11a>
 8005bdc:	3b48      	subs	r3, #72	; 0x48
 8005bde:	2b18      	cmp	r3, #24
 8005be0:	d8ef      	bhi.n	8005bc2 <MCP_ReceivedPacket+0x8a>
 8005be2:	a201      	add	r2, pc, #4	; (adr r2, 8005be8 <MCP_ReceivedPacket+0xb0>)
 8005be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005be8:	08005c7d 	.word	0x08005c7d
 8005bec:	08005bc3 	.word	0x08005bc3
 8005bf0:	08005bc3 	.word	0x08005bc3
 8005bf4:	08005bc3 	.word	0x08005bc3
 8005bf8:	08005bc3 	.word	0x08005bc3
 8005bfc:	08005bc3 	.word	0x08005bc3
 8005c00:	08005bc3 	.word	0x08005bc3
 8005c04:	08005bc3 	.word	0x08005bc3
 8005c08:	08005d15 	.word	0x08005d15
 8005c0c:	08005bc3 	.word	0x08005bc3
 8005c10:	08005bc3 	.word	0x08005bc3
 8005c14:	08005bc3 	.word	0x08005bc3
 8005c18:	08005bc3 	.word	0x08005bc3
 8005c1c:	08005bc3 	.word	0x08005bc3
 8005c20:	08005bc3 	.word	0x08005bc3
 8005c24:	08005bc3 	.word	0x08005bc3
 8005c28:	08005d15 	.word	0x08005d15
 8005c2c:	08005bc3 	.word	0x08005bc3
 8005c30:	08005bc3 	.word	0x08005bc3
 8005c34:	08005bc3 	.word	0x08005bc3
 8005c38:	08005bc3 	.word	0x08005bc3
 8005c3c:	08005bc3 	.word	0x08005bc3
 8005c40:	08005bc3 	.word	0x08005bc3
 8005c44:	08005bc3 	.word	0x08005bc3
 8005c48:	08005d15 	.word	0x08005d15
 8005c4c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c50:	d060      	beq.n	8005d14 <MCP_ReceivedPacket+0x1dc>
 8005c52:	4663      	mov	r3, ip
 8005c54:	2002      	movs	r0, #2
 8005c56:	e7b6      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005c58:	8980      	ldrh	r0, [r0, #12]
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005c5a:	6822      	ldr	r2, [r4, #0]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005c5c:	3802      	subs	r0, #2
      userCommand = (command >> 3) & 0x1f;
 8005c5e:	f3c3 03c7 	ubfx	r3, r3, #3, #8
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005c62:	8991      	ldrh	r1, [r2, #12]
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005c64:	b280      	uxth	r0, r0
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005c66:	3502      	adds	r5, #2
    pHandle->txLength = 0;
 8005c68:	2200      	movs	r2, #0
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005c6a:	f013 0f1e 	tst.w	r3, #30
    pHandle->rxLength = pHandle->rxLength-MCP_HEADER_SIZE;
 8005c6e:	81a0      	strh	r0, [r4, #12]
    pHandle->rxBuffer = pHandle->rxBuffer+MCP_HEADER_SIZE;
 8005c70:	6065      	str	r5, [r4, #4]
    pHandle->txLength = 0;
 8005c72:	81e2      	strh	r2, [r4, #14]
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005c74:	d03d      	beq.n	8005cf2 <MCP_ReceivedPacket+0x1ba>
        MCPResponse = MCP_CMD_OK;
 8005c76:	2300      	movs	r3, #0
          MCPResponse = MCP_ERROR_CALLBACK_NOT_REGISTRED;
 8005c78:	200d      	movs	r0, #13
 8005c7a:	e7a4      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
        MCI_Clear_Iqdref(pMCI);
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	f7fb fe59 	bl	8001934 <MCI_Clear_Iqdref>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005c82:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005c84:	2000      	movs	r0, #0
        break;
 8005c86:	e79e      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
        if (IDLE == MCI_GetSTMState(pMCI))
 8005c88:	4630      	mov	r0, r6
 8005c8a:	f7fb fd69 	bl	8001760 <MCI_GetSTMState>
 8005c8e:	b128      	cbz	r0, 8005c9c <MCP_ReceivedPacket+0x164>
          (void)MCI_StopMotor(pMCI);
 8005c90:	4630      	mov	r0, r6
 8005c92:	f7fb fd81 	bl	8001798 <MCI_StopMotor>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005c96:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = MCP_CMD_OK;
 8005c98:	2000      	movs	r0, #0
 8005c9a:	e794      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7fb fd65 	bl	800176c <MCI_StartMotor>
 8005ca2:	f080 0001 	eor.w	r0, r0, #1
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005ca6:	89e3      	ldrh	r3, [r4, #14]
          MCPResponse = (MCI_StartMotor(pMCI)) ? MCP_CMD_OK : MCP_CMD_NOK;
 8005ca8:	b2c0      	uxtb	r0, r0
 8005caa:	e78c      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
        (void)MCI_FaultAcknowledged(pMCI);
 8005cac:	4630      	mov	r0, r6
 8005cae:	f7fb fd93 	bl	80017d8 <MCI_FaultAcknowledged>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005cb2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005cb4:	2000      	movs	r0, #0
        break;
 8005cb6:	e786      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005cb8:	68a3      	ldr	r3, [r4, #8]
        pHandle->txLength = 4;
 8005cba:	2104      	movs	r1, #4
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005cbc:	2201      	movs	r2, #1
        pHandle->txLength = 4;
 8005cbe:	81e1      	strh	r1, [r4, #14]
        *pHandle->txBuffer = (uint32_t) MCP_VERSION;
 8005cc0:	701a      	strb	r2, [r3, #0]
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005cc2:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005cc4:	2000      	movs	r0, #0
      break;
 8005cc6:	e77e      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
        MCPResponse = RI_SetRegCommandParser(pHandle, txSyncFreeSpace);
 8005cc8:	4620      	mov	r0, r4
 8005cca:	f7fc ff2b 	bl	8002b24 <RI_SetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005cce:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005cd0:	e779      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
        MCPResponse = RI_GetRegCommandParser(pHandle, txSyncFreeSpace);
 8005cd2:	4620      	mov	r0, r4
 8005cd4:	f7fd fad8 	bl	8003288 <RI_GetRegCommandParser>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005cd8:	89e3      	ldrh	r3, [r4, #14]
        break;
 8005cda:	e774      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
        if (RUN == MCI_GetSTMState(pMCI))
 8005cdc:	4630      	mov	r0, r6
 8005cde:	f7fb fd3f 	bl	8001760 <MCI_GetSTMState>
 8005ce2:	2806      	cmp	r0, #6
 8005ce4:	d1d7      	bne.n	8005c96 <MCP_ReceivedPacket+0x15e>
          MCI_StopRamp(pMCI);
 8005ce6:	4630      	mov	r0, r6
 8005ce8:	f7fb fdbc 	bl	8001864 <MCI_StopRamp>
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005cec:	89e3      	ldrh	r3, [r4, #14]
        MCPResponse = MCP_CMD_OK;
 8005cee:	2000      	movs	r0, #0
 8005cf0:	e769      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005cf2:	3901      	subs	r1, #1
      userCommand = (command >> 3) & 0x1f;
 8005cf4:	f003 031f 	and.w	r3, r3, #31
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005cf8:	b20a      	sxth	r2, r1
    	  if (userCommand < MCP_USER_CALLBACK_MAX && MCP_UserCallBack[userCommand] != NULL)
 8005cfa:	4909      	ldr	r1, [pc, #36]	; (8005d20 <MCP_ReceivedPacket+0x1e8>)
 8005cfc:	f851 6023 	ldr.w	r6, [r1, r3, lsl #2]
 8005d00:	2e00      	cmp	r6, #0
 8005d02:	d0b8      	beq.n	8005c76 <MCP_ReceivedPacket+0x13e>
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8005d04:	68a3      	ldr	r3, [r4, #8]
 8005d06:	9300      	str	r3, [sp, #0]
 8005d08:	4629      	mov	r1, r5
 8005d0a:	f104 030e 	add.w	r3, r4, #14
 8005d0e:	47b0      	blx	r6
    pHandle->txBuffer[pHandle->txLength] = MCPResponse;
 8005d10:	89e3      	ldrh	r3, [r4, #14]
    	    MCPResponse = MCP_UserCallBack[userCommand](pHandle->rxLength, pHandle->rxBuffer, txSyncFreeSpace, &pHandle->txLength, pHandle->txBuffer);
 8005d12:	e758      	b.n	8005bc6 <MCP_ReceivedPacket+0x8e>
    txSyncFreeSpace = pHandle->pTransportLayer->txSyncMaxPayload-1; /* Last byte is reserved for MCP response*/
 8005d14:	b20a      	sxth	r2, r1
  uint8_t userCommand=0;
 8005d16:	2300      	movs	r3, #0
 8005d18:	e7ef      	b.n	8005cfa <MCP_ReceivedPacket+0x1c2>
 8005d1a:	bf00      	nop
 8005d1c:	2000083c 	.word	0x2000083c
 8005d20:	20001b44 	.word	0x20001b44

08005d24 <MCPA_dataLog>:

uint32_t GLOBAL_TIMESTAMP = 0;
static void MCPA_stopDataLog (MCPA_Handle_t *pHandle);

void MCPA_dataLog(MCPA_Handle_t *pHandle)
{
 8005d24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif
    uint8_t i;
    uint16_t *logValue16;
    uint32_t *logValue;

    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005d26:	7fc3      	ldrb	r3, [r0, #31]
 8005d28:	f890 2022 	ldrb.w	r2, [r0, #34]	; 0x22
 8005d2c:	429a      	cmp	r2, r3
{
 8005d2e:	4604      	mov	r4, r0
    if (pHandle->HFIndex == pHandle->HFRateBuff) /*  */
 8005d30:	d002      	beq.n	8005d38 <MCPA_dataLog+0x14>
      }
    }
    else
    {
      /* nothing to log just waiting next call to MCPA_datalog*/
      pHandle->HFIndex++;
 8005d32:	3301      	adds	r3, #1
 8005d34:	77c3      	strb	r3, [r0, #31]
    }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
}
 8005d36:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if (0U == pHandle->bufferIndex)
 8005d38:	8b05      	ldrh	r5, [r0, #24]
      pHandle->HFIndex = 0U;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	77c3      	strb	r3, [r0, #31]
      if (0U == pHandle->bufferIndex)
 8005d3e:	b1a5      	cbz	r5, 8005d6a <MCPA_dataLog+0x46>
 8005d40:	6961      	ldr	r1, [r4, #20]
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005d42:	8ba2      	ldrh	r2, [r4, #28]
 8005d44:	42aa      	cmp	r2, r5
 8005d46:	d24e      	bcs.n	8005de6 <MCPA_dataLog+0xc2>
 8005d48:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
        if (pHandle->MFRateBuff == 254U) /* MFRateBuff = 254 means we dump MF data once per buffer */
 8005d4c:	2bfe      	cmp	r3, #254	; 0xfe
 8005d4e:	d066      	beq.n	8005e1e <MCPA_dataLog+0xfa>
        *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005d50:	f894 302a 	ldrb.w	r3, [r4, #42]	; 0x2a
 8005d54:	534b      	strh	r3, [r1, r5]
        pHandle->pTransportLayer->fSendPacket(pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex + 2U,
 8005d56:	8b22      	ldrh	r2, [r4, #24]
 8005d58:	6820      	ldr	r0, [r4, #0]
 8005d5a:	3202      	adds	r2, #2
 8005d5c:	2309      	movs	r3, #9
 8005d5e:	6845      	ldr	r5, [r0, #4]
 8005d60:	b292      	uxth	r2, r2
 8005d62:	47a8      	blx	r5
        pHandle->bufferIndex = 0U;
 8005d64:	2300      	movs	r3, #0
 8005d66:	8323      	strh	r3, [r4, #24]
}
 8005d68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        if (0U == pHandle->pTransportLayer->fGetBuffer (pHandle->pTransportLayer,
 8005d6a:	4601      	mov	r1, r0
 8005d6c:	2209      	movs	r2, #9
 8005d6e:	f851 0b14 	ldr.w	r0, [r1], #20
 8005d72:	6803      	ldr	r3, [r0, #0]
 8005d74:	4798      	blx	r3
 8005d76:	b390      	cbz	r0, 8005dde <MCPA_dataLog+0xba>
          *logValue = GLOBAL_TIMESTAMP; /* 32 first bits is used to store Timestamp */
 8005d78:	4b4b      	ldr	r3, [pc, #300]	; (8005ea8 <MCPA_dataLog+0x184>)
 8005d7a:	6961      	ldr	r1, [r4, #20]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	600b      	str	r3, [r1, #0]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005d80:	f894 2029 	ldrb.w	r2, [r4, #41]	; 0x29
 8005d84:	f894 002a 	ldrb.w	r0, [r4, #42]	; 0x2a
          pHandle->MFIndex = 0U; /* Restart the motif from scratch at each buffer*/
 8005d88:	f884 5020 	strb.w	r5, [r4, #32]
          pHandle->bufferIndex = 4U;
 8005d8c:	2304      	movs	r3, #4
          if (pHandle->Mark == pHandle->MarkBuff)
 8005d8e:	4290      	cmp	r0, r2
          pHandle->bufferIndex = 4U;
 8005d90:	8323      	strh	r3, [r4, #24]
          if (pHandle->Mark == pHandle->MarkBuff)
 8005d92:	d101      	bne.n	8005d98 <MCPA_dataLog+0x74>
 8005d94:	461d      	mov	r5, r3
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005d96:	e7d4      	b.n	8005d42 <MCPA_dataLog+0x1e>
            pHandle->HFNumBuff = pHandle->HFNum;
 8005d98:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
            pHandle->MFNumBuff = pHandle->MFNum;
 8005d9c:	f894 1027 	ldrb.w	r1, [r4, #39]	; 0x27
            pHandle->HFRateBuff = pHandle->HFRate;
 8005da0:	f894 0021 	ldrb.w	r0, [r4, #33]	; 0x21
            pHandle->MarkBuff = pHandle->Mark;
 8005da4:	f884 202a 	strb.w	r2, [r4, #42]	; 0x2a
            pHandle->HFNumBuff = pHandle->HFNum;
 8005da8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8005dac:	185a      	adds	r2, r3, r1
            pHandle->MFNumBuff = pHandle->MFNum;
 8005dae:	f884 1028 	strb.w	r1, [r4, #40]	; 0x28
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005db2:	8b63      	ldrh	r3, [r4, #26]
            pHandle->MFRateBuff = pHandle->MFRate;
 8005db4:	f894 1025 	ldrb.w	r1, [r4, #37]	; 0x25
            pHandle->HFRateBuff = pHandle->HFRate;
 8005db8:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8005dbc:	0092      	lsls	r2, r2, #2
            pHandle->MFRateBuff = pHandle->MFRate;
 8005dbe:	f884 1026 	strb.w	r1, [r4, #38]	; 0x26
            pHandle->bufferTxTriggerBuff = pHandle->bufferTxTrigger;
 8005dc2:	83a3      	strh	r3, [r4, #28]
          memcpy(pHandle->dataPtrTableBuff, pHandle->dataPtrTable, (pHandle->HFNum+pHandle->MFNum) * 4U); /* We store pointer here, so 4 bytes */
 8005dc4:	e9d4 1001 	ldrd	r1, r0, [r4, #4]
 8005dc8:	f001 fed0 	bl	8007b6c <memcpy>
          memcpy(pHandle->dataSizeTableBuff, pHandle->dataSizeTable, pHandle->HFNum+pHandle->MFNum); /* 1 size byte per ID*/
 8005dcc:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
 8005dd0:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
 8005dd4:	e9d4 1003 	ldrd	r1, r0, [r4, #12]
 8005dd8:	441a      	add	r2, r3
 8005dda:	f001 fec7 	bl	8007b6c <memcpy>
      if ((pHandle->bufferIndex > 0U)  && (pHandle->bufferIndex <= pHandle->bufferTxTriggerBuff))
 8005dde:	8b25      	ldrh	r5, [r4, #24]
 8005de0:	2d00      	cmp	r5, #0
 8005de2:	d1ad      	bne.n	8005d40 <MCPA_dataLog+0x1c>
}
 8005de4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005de6:	f894 6024 	ldrb.w	r6, [r4, #36]	; 0x24
        logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005dea:	194b      	adds	r3, r1, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005dec:	b36e      	cbz	r6, 8005e4a <MCPA_dataLog+0x126>
 8005dee:	68a2      	ldr	r2, [r4, #8]
 8005df0:	eb03 0c46 	add.w	ip, r3, r6, lsl #1
 8005df4:	3a04      	subs	r2, #4
          *logValue16 = *((uint16_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005df6:	f852 0f04 	ldr.w	r0, [r2, #4]!
 8005dfa:	8800      	ldrh	r0, [r0, #0]
 8005dfc:	f823 0b02 	strh.w	r0, [r3], #2
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8005e00:	8b25      	ldrh	r5, [r4, #24]
 8005e02:	3502      	adds	r5, #2
 8005e04:	b2ad      	uxth	r5, r5
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005e06:	4563      	cmp	r3, ip
          pHandle->bufferIndex = pHandle->bufferIndex + 2U;
 8005e08:	8325      	strh	r5, [r4, #24]
        for (i = 0U; i < pHandle->HFNumBuff; i++)
 8005e0a:	d1f4      	bne.n	8005df6 <MCPA_dataLog+0xd2>
        if (pHandle->MFRateBuff < 254U)
 8005e0c:	f894 3026 	ldrb.w	r3, [r4, #38]	; 0x26
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e10:	8ba2      	ldrh	r2, [r4, #28]
        if (pHandle->MFRateBuff < 254U)
 8005e12:	2bfd      	cmp	r3, #253	; 0xfd
 8005e14:	4618      	mov	r0, r3
 8005e16:	d91d      	bls.n	8005e54 <MCPA_dataLog+0x130>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e18:	4295      	cmp	r5, r2
 8005e1a:	d897      	bhi.n	8005d4c <MCPA_dataLog+0x28>
}
 8005e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e1e:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
 8005e22:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
 8005e26:	4418      	add	r0, r3
 8005e28:	4298      	cmp	r0, r3
 8005e2a:	dd91      	ble.n	8005d50 <MCPA_dataLog+0x2c>
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005e2c:	68a7      	ldr	r7, [r4, #8]
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005e2e:	6926      	ldr	r6, [r4, #16]
           *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]); //cstat !MISRAC2012-Rule-11.5
 8005e30:	f857 2023 	ldr.w	r2, [r7, r3, lsl #2]
 8005e34:	6812      	ldr	r2, [r2, #0]
 8005e36:	514a      	str	r2, [r1, r5]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e38:	1c5a      	adds	r2, r3, #1
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005e3a:	5cf3      	ldrb	r3, [r6, r3]
 8005e3c:	441d      	add	r5, r3
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e3e:	b2d3      	uxtb	r3, r2
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005e40:	b2ad      	uxth	r5, r5
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e42:	4283      	cmp	r3, r0
           pHandle->bufferIndex = pHandle->bufferIndex + pHandle->dataSizeTableBuff[i];
 8005e44:	8325      	strh	r5, [r4, #24]
          for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e46:	dbf3      	blt.n	8005e30 <MCPA_dataLog+0x10c>
 8005e48:	e782      	b.n	8005d50 <MCPA_dataLog+0x2c>
        if (pHandle->MFRateBuff < 254U)
 8005e4a:	f894 0026 	ldrb.w	r0, [r4, #38]	; 0x26
 8005e4e:	28fd      	cmp	r0, #253	; 0xfd
 8005e50:	f63f af71 	bhi.w	8005d36 <MCPA_dataLog+0x12>
          if (pHandle->MFIndex == pHandle->MFRateBuff)
 8005e54:	f894 3020 	ldrb.w	r3, [r4, #32]
 8005e58:	4283      	cmp	r3, r0
 8005e5a:	d007      	beq.n	8005e6c <MCPA_dataLog+0x148>
            pHandle->MFIndex ++;
 8005e5c:	3301      	adds	r3, #1
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e5e:	8b25      	ldrh	r5, [r4, #24]
            pHandle->MFIndex ++;
 8005e60:	f884 3020 	strb.w	r3, [r4, #32]
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005e64:	42aa      	cmp	r2, r5
 8005e66:	f4ff af73 	bcc.w	8005d50 <MCPA_dataLog+0x2c>
}
 8005e6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e6c:	f894 7028 	ldrb.w	r7, [r4, #40]	; 0x28
 8005e70:	4437      	add	r7, r6
            pHandle->MFIndex = 0U;
 8005e72:	2300      	movs	r3, #0
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e74:	42b7      	cmp	r7, r6
            pHandle->MFIndex = 0U;
 8005e76:	f884 3020 	strb.w	r3, [r4, #32]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e7a:	dd12      	ble.n	8005ea2 <MCPA_dataLog+0x17e>
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005e7c:	f8d4 e008 	ldr.w	lr, [r4, #8]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e80:	f8d4 c010 	ldr.w	ip, [r4, #16]
              logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex]; //cstat !MISRAC2012-Rule-11.3
 8005e84:	8b25      	ldrh	r5, [r4, #24]
              *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005e86:	f85e 3026 	ldr.w	r3, [lr, r6, lsl #2]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	514b      	str	r3, [r1, r5]
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e8e:	f81c 3006 	ldrb.w	r3, [ip, r6]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e92:	1c70      	adds	r0, r6, #1
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e94:	441d      	add	r5, r3
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e96:	b2c6      	uxtb	r6, r0
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e98:	b2ad      	uxth	r5, r5
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e9a:	42be      	cmp	r6, r7
              pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005e9c:	8325      	strh	r5, [r4, #24]
            for (i = pHandle->HFNumBuff; i < pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005e9e:	dbf2      	blt.n	8005e86 <MCPA_dataLog+0x162>
 8005ea0:	e7e0      	b.n	8005e64 <MCPA_dataLog+0x140>
      if (pHandle->bufferIndex > pHandle->bufferTxTriggerBuff)
 8005ea2:	8b25      	ldrh	r5, [r4, #24]
 8005ea4:	e7de      	b.n	8005e64 <MCPA_dataLog+0x140>
 8005ea6:	bf00      	nop
 8005ea8:	20001bf4 	.word	0x20001bf4

08005eac <MCPA_flushDataLog>:
{
  uint8_t i;
  uint16_t *logValue16;
  uint32_t *logValue;
  
  if (pHandle->bufferIndex > 0) {  /* if buffer is allocated, we must send it*/
 8005eac:	8b03      	ldrh	r3, [r0, #24]
 8005eae:	b19b      	cbz	r3, 8005ed8 <MCPA_flushDataLog+0x2c>
{
 8005eb0:	b570      	push	{r4, r5, r6, lr}
    if (pHandle->MFRateBuff == 254) /* In case of flush, we must respect the packet format to allow proper decoding */
 8005eb2:	f890 2026 	ldrb.w	r2, [r0, #38]	; 0x26
 8005eb6:	2afe      	cmp	r2, #254	; 0xfe
 8005eb8:	4604      	mov	r4, r0
 8005eba:	d00e      	beq.n	8005eda <MCPA_flushDataLog+0x2e>
      {
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
        {
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005ebc:	6941      	ldr	r1, [r0, #20]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
        }
      }
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005ebe:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005ec2:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8005ec4:	8b22      	ldrh	r2, [r4, #24]
 8005ec6:	6820      	ldr	r0, [r4, #0]
 8005ec8:	3202      	adds	r2, #2
 8005eca:	2309      	movs	r3, #9
 8005ecc:	6845      	ldr	r5, [r0, #4]
 8005ece:	b292      	uxth	r2, r2
 8005ed0:	47a8      	blx	r5
    pHandle->bufferIndex = 0;
 8005ed2:	2300      	movs	r3, #0
 8005ed4:	8323      	strh	r3, [r4, #24]
  }   
}
 8005ed6:	bd70      	pop	{r4, r5, r6, pc}
 8005ed8:	4770      	bx	lr
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005eda:	f890 2024 	ldrb.w	r2, [r0, #36]	; 0x24
 8005ede:	f890 c028 	ldrb.w	ip, [r0, #40]	; 0x28
         logValue = (uint32_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005ee2:	6941      	ldr	r1, [r0, #20]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005ee4:	4494      	add	ip, r2
 8005ee6:	4562      	cmp	r2, ip
 8005ee8:	dae9      	bge.n	8005ebe <MCPA_flushDataLog+0x12>
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005eea:	6886      	ldr	r6, [r0, #8]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005eec:	6905      	ldr	r5, [r0, #16]
         *logValue = *((uint32_t *) pHandle->dataPtrTableBuff[i]);
 8005eee:	f856 0022 	ldr.w	r0, [r6, r2, lsl #2]
 8005ef2:	6800      	ldr	r0, [r0, #0]
 8005ef4:	50c8      	str	r0, [r1, r3]
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005ef6:	5ca8      	ldrb	r0, [r5, r2]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005ef8:	3201      	adds	r2, #1
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005efa:	4403      	add	r3, r0
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005efc:	b2d2      	uxtb	r2, r2
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005efe:	b29b      	uxth	r3, r3
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005f00:	4562      	cmp	r2, ip
         pHandle->bufferIndex = pHandle->bufferIndex+pHandle->dataSizeTableBuff[i];
 8005f02:	8323      	strh	r3, [r4, #24]
        for (i=pHandle->HFNumBuff; i<pHandle->MFNumBuff+pHandle->HFNumBuff; i++)
 8005f04:	dbf3      	blt.n	8005eee <MCPA_flushDataLog+0x42>
 8005f06:	e7da      	b.n	8005ebe <MCPA_flushDataLog+0x12>

08005f08 <MCPA_cfgLog>:
  pHandle->HFIndex = 0;
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
}

uint8_t MCPA_cfgLog(MCPA_Handle_t *pHandle, uint8_t *cfgdata)
{
 8005f08:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
    uint16_t newID, buffSize;
    uint8_t i;
    uint8_t *pCfgData = cfgdata;

    buffSize = *((uint16_t *)pCfgData); //cstat !MISRAC2012-Rule-11.3
 8005f0c:	880f      	ldrh	r7, [r1, #0]
{
 8005f0e:	4604      	mov	r4, r0

    if (buffSize == 0)
 8005f10:	2f00      	cmp	r7, #0
 8005f12:	d044      	beq.n	8005f9e <MCPA_cfgLog+0x96>
    { 
      /* Switch Off condition */
      MCPA_stopDataLog(pHandle);
    }
    else if (buffSize > pHandle->pTransportLayer->txAsyncMaxPayload )
 8005f14:	6803      	ldr	r3, [r0, #0]
 8005f16:	89db      	ldrh	r3, [r3, #14]
 8005f18:	42bb      	cmp	r3, r7
 8005f1a:	d33d      	bcc.n	8005f98 <MCPA_cfgLog+0x90>
    {
      result = MCP_ERROR_NO_TXASYNC_SPACE;
    }
    else
    {
      pHandle->HFRate = *((uint8_t *)&pCfgData[2]);
 8005f1c:	788b      	ldrb	r3, [r1, #2]
 8005f1e:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
      pHandle->HFNum  = *((uint8_t *)&pCfgData[3]);
 8005f22:	78ca      	ldrb	r2, [r1, #3]
 8005f24:	f880 2023 	strb.w	r2, [r0, #35]	; 0x23
      pHandle->MFRate = *((uint8_t *)&pCfgData[4]);
 8005f28:	790b      	ldrb	r3, [r1, #4]
 8005f2a:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8005f2e:	794e      	ldrb	r6, [r1, #5]
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/

      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8005f30:	7f83      	ldrb	r3, [r0, #30]
      pHandle->MFNum =  *((uint8_t *)&pCfgData[5]);
 8005f32:	f880 6027 	strb.w	r6, [r0, #39]	; 0x27
      if ((pHandle->HFNum+pHandle->MFNum) <= pHandle->nbrOfDataLog )
 8005f36:	4416      	add	r6, r2
 8005f38:	429e      	cmp	r6, r3
 8005f3a:	dc52      	bgt.n	8005fe2 <MCPA_cfgLog+0xda>
      pCfgData = &pCfgData[6]; /* Start of the HF IDs*/
 8005f3c:	3106      	adds	r1, #6
      {
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005f3e:	2e00      	cmp	r6, #0
 8005f40:	d056      	beq.n	8005ff0 <MCPA_cfgLog+0xe8>
 8005f42:	2500      	movs	r5, #0
 8005f44:	4688      	mov	r8, r1
    uint16_t logSize = 0U; /* Max size of a log per iteration (HF+MF)*/
 8005f46:	462e      	mov	r6, r5
 8005f48:	e011      	b.n	8005f6e <MCPA_cfgLog+0x66>
      {
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
         /* HF Data are fixed to 2 bytes*/
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8005f4a:	68e3      	ldr	r3, [r4, #12]
 8005f4c:	5558      	strb	r0, [r3, r5]
        pCfgData++;/* Point to the next UID */
        pCfgData++;
         logSize = logSize+pHandle->dataSizeTable[i];
 8005f4e:	68e2      	ldr	r2, [r4, #12]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005f50:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005f54:	f894 0027 	ldrb.w	r0, [r4, #39]	; 0x27
         logSize = logSize+pHandle->dataSizeTable[i];
 8005f58:	5d52      	ldrb	r2, [r2, r5]
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005f5a:	f105 0c01 	add.w	ip, r5, #1
 8005f5e:	fa5f f58c 	uxtb.w	r5, ip
 8005f62:	4403      	add	r3, r0
         logSize = logSize+pHandle->dataSizeTable[i];
 8005f64:	4432      	add	r2, r6
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005f66:	429d      	cmp	r5, r3
        pCfgData++;
 8005f68:	4641      	mov	r1, r8
         logSize = logSize+pHandle->dataSizeTable[i];
 8005f6a:	b296      	uxth	r6, r2
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005f6c:	da11      	bge.n	8005f92 <MCPA_cfgLog+0x8a>
         newID = *((uint16_t *) pCfgData); //cstat !MISRAC2012-Rule-11.3
 8005f6e:	f838 9b02 	ldrh.w	r9, [r8], #2
         (void)RI_GetPtrReg (newID, &pHandle->dataPtrTable[i]);
 8005f72:	6861      	ldr	r1, [r4, #4]
 8005f74:	4648      	mov	r0, r9
 8005f76:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8005f7a:	f7fd fdd1 	bl	8003b20 <RI_GetPtrReg>
         pHandle->dataSizeTable[i] = (i < pHandle->HFNum )? 2:  RI_GetIDSize(newID);
 8005f7e:	f894 3023 	ldrb.w	r3, [r4, #35]	; 0x23
 8005f82:	42ab      	cmp	r3, r5
 8005f84:	f04f 0002 	mov.w	r0, #2
 8005f88:	d8df      	bhi.n	8005f4a <MCPA_cfgLog+0x42>
 8005f8a:	4648      	mov	r0, r9
 8005f8c:	f7fd fdbc 	bl	8003b08 <RI_GetIDSize>
 8005f90:	e7db      	b.n	8005f4a <MCPA_cfgLog+0x42>
      }

     /*smallest packet must be able to contain logSize Markbyte AsyncID and TimeStamp*/
     if (buffSize < (logSize + 2U + 4U))
 8005f92:	1db3      	adds	r3, r6, #6
 8005f94:	429f      	cmp	r7, r3
 8005f96:	d21a      	bcs.n	8005fce <MCPA_cfgLog+0xc6>
      result = MCP_ERROR_NO_TXASYNC_SPACE;
 8005f98:	2009      	movs	r0, #9
      }
#ifdef NULL_PTR_CHECK_MCPA
  }
#endif
  return result;
}
 8005f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8005f9e:	8b03      	ldrh	r3, [r0, #24]
  pHandle->Mark = 0;
 8005fa0:	f880 7029 	strb.w	r7, [r0, #41]	; 0x29
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8005fa4:	b153      	cbz	r3, 8005fbc <MCPA_cfgLog+0xb4>
    logValue16 = (uint16_t *) &pHandle->currentBuffer[pHandle->bufferIndex];
 8005fa6:	6961      	ldr	r1, [r4, #20]
    *logValue16 = pHandle->MarkBuff; /* MarkBuff is actually 8 bits, but we add also 8 bits of the ASYNCID=0 after the MARK*/
 8005fa8:	f894 202a 	ldrb.w	r2, [r4, #42]	; 0x2a
 8005fac:	52ca      	strh	r2, [r1, r3]
    pHandle->pTransportLayer->fSendPacket (pHandle->pTransportLayer, pHandle->currentBuffer, pHandle->bufferIndex+2, MCTL_ASYNC);
 8005fae:	8b22      	ldrh	r2, [r4, #24]
 8005fb0:	6820      	ldr	r0, [r4, #0]
 8005fb2:	3202      	adds	r2, #2
 8005fb4:	6845      	ldr	r5, [r0, #4]
 8005fb6:	b292      	uxth	r2, r2
 8005fb8:	2309      	movs	r3, #9
 8005fba:	47a8      	blx	r5
  pHandle->bufferIndex = 0;
 8005fbc:	2000      	movs	r0, #0
  pHandle->MarkBuff = 0;
 8005fbe:	f884 002a 	strb.w	r0, [r4, #42]	; 0x2a
  pHandle->HFIndex = 0;
 8005fc2:	77e0      	strb	r0, [r4, #31]
  pHandle->HFRateBuff =0; /* We do not want to miss any sample at the restart*/
 8005fc4:	f884 0022 	strb.w	r0, [r4, #34]	; 0x22
  pHandle->bufferIndex = 0;
 8005fc8:	8320      	strh	r0, [r4, #24]
}
 8005fca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       pHandle->bufferTxTrigger = buffSize-logSize-2U; /* 2 is required to add the last Mark byte and NUL ASYNCID */
 8005fce:	1eba      	subs	r2, r7, #2
 8005fd0:	1b92      	subs	r2, r2, r6
 8005fd2:	8362      	strh	r2, [r4, #26]
       pHandle->Mark = *((uint8_t *) pCfgData);
 8005fd4:	780b      	ldrb	r3, [r1, #0]
 8005fd6:	f884 3029 	strb.w	r3, [r4, #41]	; 0x29
       if (0U == pHandle->Mark)
 8005fda:	b12b      	cbz	r3, 8005fe8 <MCPA_cfgLog+0xe0>
  uint8_t result = MCP_CMD_OK;
 8005fdc:	2000      	movs	r0, #0
}
 8005fde:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
       result = MCP_ERROR_BAD_RAW_FORMAT;
 8005fe2:	200a      	movs	r0, #10
}
 8005fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (pHandle->bufferIndex > 0) { /* if buffer is allocated, we must send it*/ 
 8005fe8:	8b23      	ldrh	r3, [r4, #24]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d0e6      	beq.n	8005fbc <MCPA_cfgLog+0xb4>
 8005fee:	e7da      	b.n	8005fa6 <MCPA_cfgLog+0x9e>
       for (i =0; i < (pHandle->HFNum+pHandle->MFNum) ; i++)
 8005ff0:	2306      	movs	r3, #6
 8005ff2:	e7cf      	b.n	8005f94 <MCPA_cfgLog+0x8c>

08005ff4 <MPM_Clear>:
  *         measurement buffer and initialize the index.
  * @param power handle.
  * @retval none.
  */
__weak void MPM_Clear(MotorPowMeas_Handle_t *pHandle)
{
 8005ff4:	b510      	push	{r4, lr}
  {
#endif
    uint16_t i;
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
    {
      pHandle->hMeasBuffer[i] = 0;
 8005ff6:	f44f 7280 	mov.w	r2, #256	; 0x100
{
 8005ffa:	4604      	mov	r4, r0
      pHandle->hMeasBuffer[i] = 0;
 8005ffc:	2100      	movs	r1, #0
 8005ffe:	f001 fdc3 	bl	8007b88 <memset>
    }
    pHandle->hNextMeasBufferIndex = 0u;
 8006002:	2300      	movs	r3, #0
 8006004:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
    pHandle->hLastMeasBufferIndex = 0u;
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  }
#endif
}
 8006008:	bd10      	pop	{r4, pc}
 800600a:	bf00      	nop

0800600c <MPM_CalcElMotorPower>:
#endif
    uint16_t i;
    int32_t wAux = 0;

    /* Store the measured values in the buffer.*/
    pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800600c:	f8b0 2100 	ldrh.w	r2, [r0, #256]	; 0x100
    pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
    pHandle->hNextMeasBufferIndex++;
 8006010:	1c53      	adds	r3, r2, #1
 8006012:	b29b      	uxth	r3, r3
    if (pHandle->hNextMeasBufferIndex >= MPM_BUFFER_LENGHT)
 8006014:	2b7f      	cmp	r3, #127	; 0x7f
    {
      pHandle->hNextMeasBufferIndex = 0u;
 8006016:	bf88      	it	hi
 8006018:	2300      	movhi	r3, #0
{
 800601a:	b500      	push	{lr}
    pHandle->hMeasBuffer[pHandle->hNextMeasBufferIndex] = CurrentMotorPower;
 800601c:	f820 1012 	strh.w	r1, [r0, r2, lsl #1]
    pHandle->hLastMeasBufferIndex = pHandle->hNextMeasBufferIndex;
 8006020:	f100 0efe 	add.w	lr, r0, #254	; 0xfe
 8006024:	f8a0 2102 	strh.w	r2, [r0, #258]	; 0x102
      pHandle->hNextMeasBufferIndex = 0u;
 8006028:	f8a0 3100 	strh.w	r3, [r0, #256]	; 0x100
    int32_t wAux = 0;
 800602c:	2200      	movs	r2, #0
 800602e:	1e83      	subs	r3, r0, #2
    }
    /* Compute the average measured motor power */
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
    {
      wAux += (int32_t)(pHandle->hMeasBuffer[i]);
 8006030:	f933 cf02 	ldrsh.w	ip, [r3, #2]!
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
 8006034:	4573      	cmp	r3, lr
      wAux += (int32_t)(pHandle->hMeasBuffer[i]);
 8006036:	4462      	add	r2, ip
    for (i = 0u; i < MPM_BUFFER_LENGHT; i++)
 8006038:	d1fa      	bne.n	8006030 <MPM_CalcElMotorPower+0x24>
    }
    wAux /= ((int32_t)MPM_BUFFER_LENGHT);
 800603a:	2a00      	cmp	r2, #0
 800603c:	bfb8      	it	lt
 800603e:	327f      	addlt	r2, #127	; 0x7f
 8006040:	11d2      	asrs	r2, r2, #7
    pHandle->hAvrgElMotorPowerW = (int16_t)wAux;
 8006042:	f8a0 2104 	strh.w	r2, [r0, #260]	; 0x104
  }
#endif

  /* Return the last measured motor power */
  return CurrentMotorPower;
}
 8006046:	4608      	mov	r0, r1
 8006048:	f85d fb04 	ldr.w	pc, [sp], #4

0800604c <MPM_GetAvrgElMotorPowerW>:
#ifdef NULL_PTR_CHECK_MOT_POW_MES
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrgElMotorPowerW);
#else
  return (pHandle->hAvrgElMotorPowerW);
#endif
}
 800604c:	f9b0 0104 	ldrsh.w	r0, [r0, #260]	; 0x104
 8006050:	4770      	bx	lr
 8006052:	bf00      	nop

08006054 <NTC_SetFaultState>:
    hFault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->hAvTemp_d > pHandle->hOverTempThreshold)
 8006054:	8a03      	ldrh	r3, [r0, #16]
 8006056:	8b42      	ldrh	r2, [r0, #26]
 8006058:	429a      	cmp	r2, r3
 800605a:	d306      	bcc.n	800606a <NTC_SetFaultState+0x16>
    {
      hFault = MC_OVER_TEMP;
    }
    else if (pHandle->hAvTemp_d < pHandle->hOverTempDeactThreshold)
 800605c:	8b82      	ldrh	r2, [r0, #28]
 800605e:	429a      	cmp	r2, r3
 8006060:	d901      	bls.n	8006066 <NTC_SetFaultState+0x12>
    {
      hFault = MC_NO_ERROR;
 8006062:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return hFault;
}
 8006064:	4770      	bx	lr
      hFault = pHandle->hFaultState;
 8006066:	8ac0      	ldrh	r0, [r0, #22]
 8006068:	4770      	bx	lr
      hFault = MC_OVER_TEMP;
 800606a:	2008      	movs	r0, #8
 800606c:	4770      	bx	lr
 800606e:	bf00      	nop

08006070 <NTC_Clear>:
    /* nothing to do */
  }
  else
  {
#endif
    pHandle->hAvTemp_d = 0U;
 8006070:	2300      	movs	r3, #0
 8006072:	8203      	strh	r3, [r0, #16]
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
}
 8006074:	4770      	bx	lr
 8006076:	bf00      	nop

08006078 <NTC_Init>:
{
 8006078:	b510      	push	{r4, lr}
    if (REAL_SENSOR == pHandle->bSensorType)
 800607a:	7803      	ldrb	r3, [r0, #0]
{
 800607c:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 800607e:	b123      	cbz	r3, 800608a <NTC_Init+0x12>
      pHandle->hAvTemp_d = pHandle->hExpectedTemp_d;
 8006080:	8a43      	ldrh	r3, [r0, #18]
 8006082:	8203      	strh	r3, [r0, #16]
      pHandle->hFaultState = MC_NO_ERROR;
 8006084:	2200      	movs	r2, #0
 8006086:	82c2      	strh	r2, [r0, #22]
}
 8006088:	bd10      	pop	{r4, pc}
      pHandle->convHandle = RCM_RegisterRegConv(&pHandle->TempRegConv);
 800608a:	3004      	adds	r0, #4
 800608c:	f7fd fdea 	bl	8003c64 <RCM_RegisterRegConv>
 8006090:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
      NTC_Clear(pHandle);
 8006094:	4620      	mov	r0, r4
 8006096:	f7ff ffeb 	bl	8006070 <NTC_Clear>
}
 800609a:	bd10      	pop	{r4, pc}

0800609c <NTC_CalcAvTemp>:
  *  @p pHandle : Pointer on Handle structure of TemperatureSensor component
  *
  *  @r Fault status : Error reported in case of an over temperature detection
  */
__weak uint16_t NTC_CalcAvTemp(NTC_Handle_t *pHandle)
{
 800609c:	b510      	push	{r4, lr}
    returnValue = 0U;
  }
  else
  {
#endif
    if (REAL_SENSOR == pHandle->bSensorType)
 800609e:	7803      	ldrb	r3, [r0, #0]
{
 80060a0:	4604      	mov	r4, r0
    if (REAL_SENSOR == pHandle->bSensorType)
 80060a2:	b113      	cbz	r3, 80060aa <NTC_CalcAvTemp+0xe>

      pHandle->hFaultState = NTC_SetFaultState(pHandle);
    }
    else  /* case VIRTUAL_SENSOR */
    {
      pHandle->hFaultState = MC_NO_ERROR;
 80060a4:	2000      	movs	r0, #0
 80060a6:	82e0      	strh	r0, [r4, #22]
    returnValue = pHandle->hFaultState;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80060a8:	bd10      	pop	{r4, pc}
      hAux = RCM_ExecRegularConv(pHandle->convHandle);
 80060aa:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 80060ae:	f7fd feb5 	bl	8003e1c <RCM_ExecRegularConv>
      if (0xFFFFU == hAux)
 80060b2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80060b6:	4298      	cmp	r0, r3
 80060b8:	d007      	beq.n	80060ca <NTC_CalcAvTemp+0x2e>
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80060ba:	8b23      	ldrh	r3, [r4, #24]
        wtemp *= ((uint32_t)pHandle->hAvTemp_d);
 80060bc:	8a22      	ldrh	r2, [r4, #16]
        wtemp = (uint32_t)(pHandle->hLowPassFilterBW) - 1U;
 80060be:	1e59      	subs	r1, r3, #1
        wtemp += hAux;
 80060c0:	fb01 0002 	mla	r0, r1, r2, r0
        wtemp /= ((uint32_t)pHandle->hLowPassFilterBW);
 80060c4:	fbb0 f0f3 	udiv	r0, r0, r3
        pHandle->hAvTemp_d = (uint16_t)wtemp;
 80060c8:	8220      	strh	r0, [r4, #16]
      pHandle->hFaultState = NTC_SetFaultState(pHandle);
 80060ca:	4620      	mov	r0, r4
 80060cc:	f7ff ffc2 	bl	8006054 <NTC_SetFaultState>
 80060d0:	82e0      	strh	r0, [r4, #22]
}
 80060d2:	bd10      	pop	{r4, pc}

080060d4 <NTC_GetAvTemp_C>:
  else
  {
#endif
    int32_t wTemp;

    if (REAL_SENSOR == pHandle->bSensorType)
 80060d4:	7803      	ldrb	r3, [r0, #0]
 80060d6:	b95b      	cbnz	r3, 80060f0 <NTC_GetAvTemp_C+0x1c>
    {
      wTemp = (int32_t)pHandle->hAvTemp_d;
 80060d8:	8a02      	ldrh	r2, [r0, #16]
      wTemp -= ((int32_t)pHandle->wV0);
 80060da:	6a01      	ldr	r1, [r0, #32]
      wTemp *= pHandle->hSensitivity;
 80060dc:	f9b0 301e 	ldrsh.w	r3, [r0, #30]
#ifndef FULL_MISRA_C_COMPLIANCY_NTC_TEMP
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80060e0:	8c80      	ldrh	r0, [r0, #36]	; 0x24
      wTemp -= ((int32_t)pHandle->wV0);
 80060e2:	1a52      	subs	r2, r2, r1
      wTemp *= pHandle->hSensitivity;
 80060e4:	fb02 f303 	mul.w	r3, r2, r3
      wTemp = (wTemp >> 16) + (int32_t)pHandle->hT0;
 80060e8:	eb00 4023 	add.w	r0, r0, r3, asr #16
    returnValue = (int16_t)wTemp;
#ifdef NULL_PTR_CHECK_NTC_TEMP_SENS
  }
#endif
  return (returnValue);
}
 80060ec:	b200      	sxth	r0, r0
 80060ee:	4770      	bx	lr
      wTemp = (int32_t)pHandle->hExpectedTemp_C;
 80060f0:	8a80      	ldrh	r0, [r0, #20]
}
 80060f2:	b200      	sxth	r0, r0
 80060f4:	4770      	bx	lr
 80060f6:	bf00      	nop

080060f8 <PID_HandleInit>:
  {
#endif
    pHandle->hKpGain =  pHandle->hDefKpGain;
    pHandle->hKiGain =  pHandle->hDefKiGain;
    pHandle->hKdGain =  pHandle->hDefKdGain;
    pHandle->wIntegralTerm = 0;
 80060f8:	2300      	movs	r3, #0
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80060fa:	6801      	ldr	r1, [r0, #0]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 80060fc:	8c02      	ldrh	r2, [r0, #32]
    pHandle->hKpGain =  pHandle->hDefKpGain;
 80060fe:	6041      	str	r1, [r0, #4]
    pHandle->hKdGain =  pHandle->hDefKdGain;
 8006100:	8442      	strh	r2, [r0, #34]	; 0x22
    pHandle->wIntegralTerm = 0;
 8006102:	6083      	str	r3, [r0, #8]
    pHandle->wPrevProcessVarError = 0;
 8006104:	6283      	str	r3, [r0, #40]	; 0x28
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006106:	4770      	bx	lr

08006108 <PID_SetKP>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKpGain = hKpGain;
 8006108:	8081      	strh	r1, [r0, #4]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800610a:	4770      	bx	lr

0800610c <PID_SetKI>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKiGain = hKiGain;
 800610c:	80c1      	strh	r1, [r0, #6]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800610e:	4770      	bx	lr

08006110 <PID_GetKP>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKpGain);
#else
  return (pHandle->hKpGain);
#endif
}
 8006110:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006114:	4770      	bx	lr
 8006116:	bf00      	nop

08006118 <PID_GetKI>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKiGain);
#else
  return (pHandle->hKiGain);
#endif
}
 8006118:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800611c:	4770      	bx	lr
 800611e:	bf00      	nop

08006120 <PID_SetIntegralTerm>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wIntegralTerm = wIntegralTermValue;
 8006120:	6081      	str	r1, [r0, #8]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return;
}
 8006122:	4770      	bx	lr

08006124 <PID_GetKPDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKpDivisorPOW2);
#else
  return (pHandle->hKpDivisorPOW2);
#endif
}
 8006124:	8b80      	ldrh	r0, [r0, #28]
 8006126:	4770      	bx	lr

08006128 <PID_SetKPDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 8006128:	2301      	movs	r3, #1
 800612a:	408b      	lsls	r3, r1
    pHandle->hKpDivisorPOW2 = hKpDivisorPOW2;
 800612c:	8381      	strh	r1, [r0, #28]
    pHandle->hKpDivisor = (((uint16_t)1) << hKpDivisorPOW2);
 800612e:	8303      	strh	r3, [r0, #24]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006130:	4770      	bx	lr
 8006132:	bf00      	nop

08006134 <PID_GetKIDivisor>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisor);
#else
  return (pHandle->hKiDivisor);
#endif
}
 8006134:	8b40      	ldrh	r0, [r0, #26]
 8006136:	4770      	bx	lr

08006138 <PID_GetKIDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKiDivisorPOW2);
#else
  return (pHandle->hKiDivisorPOW2);
#endif
}
 8006138:	8bc0      	ldrh	r0, [r0, #30]
 800613a:	4770      	bx	lr

0800613c <PID_SetLowerIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wLowerIntegralLimit = wLowerLimit;
 800613c:	6101      	str	r1, [r0, #16]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800613e:	4770      	bx	lr

08006140 <PID_SetUpperIntegralTermLimit>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->wUpperIntegralLimit = wUpperLimit;
 8006140:	60c1      	str	r1, [r0, #12]
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006142:	4770      	bx	lr

08006144 <PID_SetKIDivisorPOW2>:
{
 8006144:	b538      	push	{r3, r4, r5, lr}
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 8006146:	2301      	movs	r3, #1
{
 8006148:	460c      	mov	r4, r1
    uint32_t wKiDiv = (((uint32_t)1) << hKiDivisorPOW2);
 800614a:	408b      	lsls	r3, r1
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 800614c:	f647 71ff 	movw	r1, #32767	; 0x7fff
 8006150:	40a1      	lsls	r1, r4
    pHandle->hKiDivisorPOW2 = hKiDivisorPOW2;
 8006152:	83c4      	strh	r4, [r0, #30]
    pHandle->hKiDivisor = (uint16_t)wKiDiv;
 8006154:	8343      	strh	r3, [r0, #26]
{
 8006156:	4605      	mov	r5, r0
    PID_SetUpperIntegralTermLimit(pHandle, (int32_t)INT16_MAX * (int32_t)wKiDiv);
 8006158:	f7ff fff2 	bl	8006140 <PID_SetUpperIntegralTermLimit>
    PID_SetLowerIntegralTermLimit(pHandle, (int32_t)(-INT16_MAX) * (int32_t)wKiDiv);
 800615c:	4902      	ldr	r1, [pc, #8]	; (8006168 <PID_SetKIDivisorPOW2+0x24>)
 800615e:	4628      	mov	r0, r5
 8006160:	40a1      	lsls	r1, r4
 8006162:	f7ff ffeb 	bl	800613c <PID_SetLowerIntegralTermLimit>
}
 8006166:	bd38      	pop	{r3, r4, r5, pc}
 8006168:	ffff8001 	.word	0xffff8001

0800616c <PID_SetKD>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hKdGain = hKdGain;
 800616c:	8441      	strh	r1, [r0, #34]	; 0x22
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 800616e:	4770      	bx	lr

08006170 <PID_GetKD>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0 : pHandle->hKdGain);
#else
  return (pHandle->hKdGain);
#endif
}
 8006170:	f9b0 0022 	ldrsh.w	r0, [r0, #34]	; 0x22
 8006174:	4770      	bx	lr
 8006176:	bf00      	nop

08006178 <PID_GetKDDivisorPOW2>:
#ifdef NULL_PTR_CHECK_PID_REG
  return ((MC_NULL == pHandle) ? 0U : pHandle->hKdDivisorPOW2);
#else
  return (pHandle->hKdDivisorPOW2);
#endif
}
 8006178:	8cc0      	ldrh	r0, [r0, #38]	; 0x26
 800617a:	4770      	bx	lr

0800617c <PID_SetKDDivisorPOW2>:
  }
  else
  {
#endif
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 800617c:	2301      	movs	r3, #1
 800617e:	408b      	lsls	r3, r1
    pHandle->hKdDivisorPOW2 = hKdDivisorPOW2;
 8006180:	84c1      	strh	r1, [r0, #38]	; 0x26
    pHandle->hKdDivisor = (((uint16_t)1) << hKdDivisorPOW2);
 8006182:	8483      	strh	r3, [r0, #36]	; 0x24
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
}
 8006184:	4770      	bx	lr
 8006186:	bf00      	nop

08006188 <PI_Controller>:
    int32_t wDischarge = 0;
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;

    /* Proportional term computation*/
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006188:	f9b0 3004 	ldrsh.w	r3, [r0, #4]

    /* Integral term computation */
    if (0 == pHandle->hKiGain)
 800618c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
    int16_t hUpperOutputLimit = pHandle->hUpperOutputLimit;
 8006190:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
{
 8006194:	b510      	push	{r4, lr}
    wProportional_Term = pHandle->hKpGain * wProcessVarError;
 8006196:	fb01 f303 	mul.w	r3, r1, r3
    int16_t hLowerOutputLimit = pHandle->hLowerOutputLimit;
 800619a:	f9b0 e016 	ldrsh.w	lr, [r0, #22]
    if (0 == pHandle->hKiGain)
 800619e:	b162      	cbz	r2, 80061ba <PI_Controller+0x32>
    {
      pHandle->wIntegralTerm = 0;
    }
    else
    {
      wIntegral_Term = pHandle->hKiGain * wProcessVarError;
 80061a0:	fb01 f202 	mul.w	r2, r1, r2
      wIntegral_sum_temp = pHandle->wIntegralTerm + wIntegral_Term;
 80061a4:	6881      	ldr	r1, [r0, #8]

      if (wIntegral_sum_temp < 0)
 80061a6:	188c      	adds	r4, r1, r2
 80061a8:	d420      	bmi.n	80061ec <PI_Controller+0x64>
          /* Nothing to do */
        }
      }
      else
      {
        if (pHandle->wIntegralTerm < 0)
 80061aa:	2900      	cmp	r1, #0
 80061ac:	db2a      	blt.n	8006204 <PI_Controller+0x7c>
        {
          /* Nothing to do */
        }
      }

      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80061ae:	68c2      	ldr	r2, [r0, #12]
 80061b0:	42a2      	cmp	r2, r4
 80061b2:	db02      	blt.n	80061ba <PI_Controller+0x32>
      {
        pHandle->wIntegralTerm = pHandle->wUpperIntegralLimit;
      }
      else if (wIntegral_sum_temp < pHandle->wLowerIntegralLimit)
 80061b4:	6902      	ldr	r2, [r0, #16]
 80061b6:	42a2      	cmp	r2, r4
 80061b8:	dd22      	ble.n	8006200 <PI_Controller+0x78>
    /* WARNING: the below instruction is not MISRA compliant, user should verify
               that Cortex-M3 assembly instruction ASR (arithmetic shift right)
               is used by the compiler to perform the shifts (instead of LSR
               logical shift right)*/
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    wOutput_32 = (wProportional_Term >> pHandle->hKpDivisorPOW2) + (pHandle->wIntegralTerm >> pHandle->hKiDivisorPOW2);
 80061ba:	8b81      	ldrh	r1, [r0, #28]
 80061bc:	410b      	asrs	r3, r1
 80061be:	8bc1      	ldrh	r1, [r0, #30]
 80061c0:	fa42 f101 	asr.w	r1, r2, r1
 80061c4:	440b      	add	r3, r1
#else
    wOutput_32 = (wProportional_Term / (int32_t)pHandle->hKpDivisor)
              + (pHandle->wIntegralTerm / (int32_t)pHandle->hKiDivisor);
#endif

    if (wOutput_32 > hUpperOutputLimit)
 80061c6:	459c      	cmp	ip, r3
 80061c8:	da05      	bge.n	80061d6 <PI_Controller+0x4e>
    {
      wDischarge = hUpperOutputLimit - wOutput_32;
 80061ca:	ebac 0303 	sub.w	r3, ip, r3
    else
    {
      /* Nothing to do here */
    }

    pHandle->wIntegralTerm += wDischarge;
 80061ce:	441a      	add	r2, r3
 80061d0:	6082      	str	r2, [r0, #8]
    returnValue = (int16_t)wOutput_32;
#ifdef NULL_PTR_CHECK_PID_REG
  }
#endif
  return (returnValue);
}
 80061d2:	4660      	mov	r0, ip
 80061d4:	bd10      	pop	{r4, pc}
    else if (wOutput_32 < hLowerOutputLimit)
 80061d6:	459e      	cmp	lr, r3
      wDischarge = hLowerOutputLimit - wOutput_32;
 80061d8:	bfc9      	itett	gt
 80061da:	ebae 0303 	subgt.w	r3, lr, r3
    returnValue = (int16_t)wOutput_32;
 80061de:	fa0f fc83 	sxthle.w	ip, r3
    pHandle->wIntegralTerm += wDischarge;
 80061e2:	18d2      	addgt	r2, r2, r3
 80061e4:	46f4      	movgt	ip, lr
 80061e6:	6082      	str	r2, [r0, #8]
}
 80061e8:	4660      	mov	r0, ip
 80061ea:	bd10      	pop	{r4, pc}
        if (pHandle->wIntegralTerm > 0)
 80061ec:	2900      	cmp	r1, #0
 80061ee:	ddde      	ble.n	80061ae <PI_Controller+0x26>
          if (wIntegral_Term > 0)
 80061f0:	2a00      	cmp	r2, #0
 80061f2:	dddc      	ble.n	80061ae <PI_Controller+0x26>
      if (wIntegral_sum_temp > pHandle->wUpperIntegralLimit)
 80061f4:	68c2      	ldr	r2, [r0, #12]
 80061f6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80061fa:	428a      	cmp	r2, r1
 80061fc:	d1dd      	bne.n	80061ba <PI_Controller+0x32>
            wIntegral_sum_temp = INT32_MAX;
 80061fe:	4614      	mov	r4, r2
 8006200:	4622      	mov	r2, r4
 8006202:	e7da      	b.n	80061ba <PI_Controller+0x32>
            wIntegral_sum_temp = -INT32_MAX;
 8006204:	4902      	ldr	r1, [pc, #8]	; (8006210 <PI_Controller+0x88>)
 8006206:	ea34 0422 	bics.w	r4, r4, r2, asr #32
 800620a:	bf28      	it	cs
 800620c:	460c      	movcs	r4, r1
 800620e:	e7ce      	b.n	80061ae <PI_Controller+0x26>
 8006210:	80000001 	.word	0x80000001

08006214 <PQD_CalcElMotorPower>:
  {
#endif
    int32_t wAux;
    int32_t wAux2;
    int32_t wAux3;
    qd_t Iqd = pHandle->pFOCVars->Iqd;
 8006214:	f8d0 210c 	ldr.w	r2, [r0, #268]	; 0x10c
{
 8006218:	b570      	push	{r4, r5, r6, lr}
    qd_t Vqd = pHandle->pFOCVars->Vqd;

    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 800621a:	8b11      	ldrh	r1, [r2, #24]
 800621c:	89d4      	ldrh	r4, [r2, #14]
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 800621e:	8993      	ldrh	r3, [r2, #12]
 8006220:	8ad2      	ldrh	r2, [r2, #22]
    wAux /= 65536;

    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 8006222:	f8d0 6108 	ldr.w	r6, [r0, #264]	; 0x108
{
 8006226:	4605      	mov	r5, r0
         + ((int32_t)Iqd.d * (int32_t)Vqd.d);
 8006228:	fb14 f401 	smulbb	r4, r4, r1
    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 800622c:	f8d0 0110 	ldr.w	r0, [r0, #272]	; 0x110
    wAux = ((int32_t)Iqd.q * (int32_t)Vqd.q)
 8006230:	fb13 4402 	smlabb	r4, r3, r2, r4
    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 8006234:	f7ff fc4a 	bl	8005acc <VBS_GetAvBusVoltage_V>
    wAux /= 65536;
 8006238:	1e23      	subs	r3, r4, #0
    wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800623a:	490f      	ldr	r1, [pc, #60]	; (8006278 <PQD_CalcElMotorPower+0x64>)
    wAux2 = pHandle->wConvFact * (int32_t)VBS_GetAvBusVoltage_V(pHandle->pVBS);
 800623c:	fb06 f000 	mul.w	r0, r6, r0
    wAux /= 65536;
 8006240:	bfb8      	it	lt
 8006242:	f503 437f 	addlt.w	r3, r3, #65280	; 0xff00
    wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 8006246:	ea4f 72e0 	mov.w	r2, r0, asr #31
    wAux /= 65536;
 800624a:	bfb8      	it	lt
 800624c:	33ff      	addlt	r3, #255	; 0xff
    wAux2 /= 600; /* 600 is max bus voltage expressed in volt.*/
 800624e:	fb81 1000 	smull	r1, r0, r1, r0
 8006252:	ebc2 10a0 	rsb	r0, r2, r0, asr #6
    wAux /= 65536;
 8006256:	141b      	asrs	r3, r3, #16

    wAux3 = wAux * wAux2;
 8006258:	fb00 f303 	mul.w	r3, r0, r3
    wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
    wAux3 /= 10;
    wAux3 /= 65536;
 800625c:	4907      	ldr	r1, [pc, #28]	; (800627c <PQD_CalcElMotorPower+0x68>)
    wAux3 *= 6; /* 6 is max bus voltage expressed in thousend of volt.*/
 800625e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8006262:	005b      	lsls	r3, r3, #1
    wAux3 /= 65536;
 8006264:	fb81 2103 	smull	r2, r1, r1, r3
 8006268:	17db      	asrs	r3, r3, #31

    (void)MPM_CalcElMotorPower(&pHandle->_super, (int16_t)wAux3);
 800626a:	4628      	mov	r0, r5
 800626c:	ebc3 41a1 	rsb	r1, r3, r1, asr #18
#ifdef NULL_PTR_MOT_POW_MEAS
  }
#endif
}
 8006270:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    (void)MPM_CalcElMotorPower(&pHandle->_super, (int16_t)wAux3);
 8006274:	f7ff beca 	b.w	800600c <MPM_CalcElMotorPower>
 8006278:	1b4e81b5 	.word	0x1b4e81b5
 800627c:	66666667 	.word	0x66666667

08006280 <startTimers>:
  *         (*) value not defined in all devices.
  * @retval State of Periphs (1 or 0).
*/
__STATIC_INLINE uint32_t LL_APB1_GRP1_IsEnabledClock(uint32_t Periphs)
{
  return (READ_BIT(RCC->APB1ENR, Periphs) == Periphs);
 8006280:	4b17      	ldr	r3, [pc, #92]	; (80062e0 <startTimers+0x60>)
 8006282:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
  uint32_t isTIM2ClockOn;
  uint32_t trigOut;

  isTIM2ClockOn = LL_APB1_GRP1_IsEnabledClock(LL_APB1_GRP1_PERIPH_TIM2);
  if ((uint32_t)0 == isTIM2ClockOn)
 8006284:	07d2      	lsls	r2, r2, #31
 8006286:	d415      	bmi.n	80062b4 <startTimers+0x34>
  SET_BIT(RCC->APB1ENR, Periphs);
 8006288:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800628a:	f042 0201 	orr.w	r2, r2, #1
 800628e:	641a      	str	r2, [r3, #64]	; 0x40
  tmpreg = READ_BIT(RCC->APB1ENR, Periphs);
 8006290:	6c1a      	ldr	r2, [r3, #64]	; 0x40
{
 8006292:	b082      	sub	sp, #8
  * @param  TIMx Timer instance
  * @retval None
  */
__STATIC_INLINE void LL_TIM_GenerateEvent_UPDATE(TIM_TypeDef *TIMx)
{
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 8006294:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8006298:	f002 0201 	and.w	r2, r2, #1
 800629c:	9201      	str	r2, [sp, #4]
  (void)tmpreg;
 800629e:	9a01      	ldr	r2, [sp, #4]
 80062a0:	694a      	ldr	r2, [r1, #20]
 80062a2:	f042 0201 	orr.w	r2, r2, #1
 80062a6:	614a      	str	r2, [r1, #20]
  *         (*) value not defined in all devices.
  * @retval None
*/
__STATIC_INLINE void LL_APB1_GRP1_DisableClock(uint32_t Periphs)
{
  CLEAR_BIT(RCC->APB1ENR, Periphs);
 80062a8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80062aa:	f022 0201 	bic.w	r2, r2, #1
 80062ae:	641a      	str	r2, [r3, #64]	; 0x40
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
    LL_TIM_SetTriggerOutput(TIM2, LL_TIM_TRGO_UPDATE);
    LL_TIM_GenerateEvent_UPDATE(TIM2);
    LL_TIM_SetTriggerOutput(TIM2, trigOut);
  }
}
 80062b0:	b002      	add	sp, #8
 80062b2:	4770      	bx	lr
    trigOut = LL_TIM_ReadReg(TIM2, CR2) & TIM_CR2_MMS;
 80062b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80062b8:	685a      	ldr	r2, [r3, #4]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80062ba:	6859      	ldr	r1, [r3, #4]
 80062bc:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80062c0:	f041 0120 	orr.w	r1, r1, #32
 80062c4:	6059      	str	r1, [r3, #4]
  SET_BIT(TIMx->EGR, TIM_EGR_UG);
 80062c6:	6959      	ldr	r1, [r3, #20]
 80062c8:	f041 0101 	orr.w	r1, r1, #1
 80062cc:	6159      	str	r1, [r3, #20]
  MODIFY_REG(TIMx->CR2, TIM_CR2_MMS, TimerSynchronization);
 80062ce:	6859      	ldr	r1, [r3, #4]
 80062d0:	f002 0270 	and.w	r2, r2, #112	; 0x70
 80062d4:	f021 0170 	bic.w	r1, r1, #112	; 0x70
 80062d8:	430a      	orrs	r2, r1
 80062da:	605a      	str	r2, [r3, #4]
 80062dc:	4770      	bx	lr
 80062de:	bf00      	nop
 80062e0:	40023800 	.word	0x40023800

080062e4 <waitForPolarizationEnd>:
  {
#endif
    uint16_t hCalibrationPeriodCounter;
    uint16_t hMaxPeriodsNumber;

    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80062e4:	3201      	adds	r2, #1
{
 80062e6:	b570      	push	{r4, r5, r6, lr}
    hMaxPeriodsNumber = ((uint16_t)2 * NB_CONVERSIONS) * (((uint16_t)repCnt + 1U) >> 1);
 80062e8:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 80062ea:	f06f 0602 	mvn.w	r6, #2
 80062ee:	0155      	lsls	r5, r2, #5
 80062f0:	6106      	str	r6, [r0, #16]

    /* Wait for NB_CONVERSIONS to be executed */
    LL_TIM_ClearFlag_CC1(TIMx);
    hCalibrationPeriodCounter = 0u;
 80062f2:	2200      	movs	r2, #0
    while (*cnt < NB_CONVERSIONS)
 80062f4:	f893 c000 	ldrb.w	ip, [r3]
 80062f8:	f1bc 0f0f 	cmp.w	ip, #15
    {
      if ((uint32_t)ERROR == LL_TIM_IsActiveFlag_CC1(TIMx))
      {
        LL_TIM_ClearFlag_CC1(TIMx);
        hCalibrationPeriodCounter++;
 80062fc:	f102 0e01 	add.w	lr, r2, #1
    while (*cnt < NB_CONVERSIONS)
 8006300:	d80c      	bhi.n	800631c <waitForPolarizationEnd+0x38>
  return ((READ_BIT(TIMx->SR, TIM_SR_CC1IF) == (TIM_SR_CC1IF)) ? 1UL : 0UL);
 8006302:	6904      	ldr	r4, [r0, #16]
 8006304:	07a4      	lsls	r4, r4, #30
 8006306:	d5f5      	bpl.n	80062f4 <waitForPolarizationEnd+0x10>
        hCalibrationPeriodCounter++;
 8006308:	fa1f f28e 	uxth.w	r2, lr
        if (hCalibrationPeriodCounter >= hMaxPeriodsNumber)
 800630c:	4295      	cmp	r5, r2
  WRITE_REG(TIMx->SR, ~(TIM_SR_CC1IF));
 800630e:	6106      	str	r6, [r0, #16]
 8006310:	d8f0      	bhi.n	80062f4 <waitForPolarizationEnd+0x10>
        {
          if (*cnt < NB_CONVERSIONS)
 8006312:	781c      	ldrb	r4, [r3, #0]
 8006314:	2c0f      	cmp	r4, #15
 8006316:	d8ed      	bhi.n	80062f4 <waitForPolarizationEnd+0x10>
          {
            *SWerror = 1u;
 8006318:	2301      	movs	r3, #1
 800631a:	800b      	strh	r3, [r1, #0]
      }
    }
#ifdef NULL_POW_COM
  }
#endif
}
 800631c:	bd70      	pop	{r4, r5, r6, pc}
 800631e:	bf00      	nop

08006320 <R3_1_GetPhaseCurrents>:
  * @retval Ia and Ib current in ab_t format
  */
__weak void R3_1_GetPhaseCurrents(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
  PWMC_R3_1_Handle_t * pHandle = ( PWMC_R3_1_Handle_t * )pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006320:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
{
 8006324:	b530      	push	{r4, r5, lr}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006326:	685c      	ldr	r4, [r3, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006328:	6a22      	ldr	r2, [r4, #32]
 800632a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800632e:	6222      	str	r2, [r4, #32]
  uint8_t bSector;

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  bSector = ( uint8_t )( pHandle->_Super.Sector );
 8006330:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70

  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8006334:	eb03 0382 	add.w	r3, r3, r2, lsl #2
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8006338:	6d1c      	ldr	r4, [r3, #80]	; 0x50
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 800633a:	6b9d      	ldr	r5, [r3, #56]	; 0x38
 800633c:	682b      	ldr	r3, [r5, #0]
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 800633e:	6824      	ldr	r4, [r4, #0]
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8006340:	005b      	lsls	r3, r3, #1
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8006342:	ea4f 0c44 	mov.w	ip, r4, lsl #1
  hReg1 =  *pHandle->pParams_str->ADCDataReg1[bSector]*2;
 8006346:	b29b      	uxth	r3, r3
  hReg2 =  *pHandle->pParams_str->ADCDataReg2[bSector]*2;
 8006348:	fa1f fc8c 	uxth.w	ip, ip

  switch ( bSector )
 800634c:	2a05      	cmp	r2, #5
 800634e:	f200 80a8 	bhi.w	80064a2 <R3_1_GetPhaseCurrents+0x182>
 8006352:	e8df f002 	tbb	[pc, r2]
 8006356:	1c37      	.short	0x1c37
 8006358:	3703031c 	.word	0x3703031c
    case SECTOR_4:
    case SECTOR_5:
    {
      /* Current on Phase C is not accessible     */
      /* Ia = PhaseAOffset - ADC converted value) */
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800635c:	6f82      	ldr	r2, [r0, #120]	; 0x78
 800635e:	1ad3      	subs	r3, r2, r3
      /* Saturation of Ia */
      if ( wAux < -INT16_MAX )
 8006360:	4a53      	ldr	r2, [pc, #332]	; (80064b0 <R3_1_GetPhaseCurrents+0x190>)
 8006362:	4293      	cmp	r3, r2
 8006364:	db5c      	blt.n	8006420 <R3_1_GetPhaseCurrents+0x100>
      {
        pStator_Currents->a = ( int16_t )wAux;
      }

      /* Ib = PhaseBOffset - ADC converted value) */
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006366:	6fc2      	ldr	r2, [r0, #124]	; 0x7c

      /* Saturation of Ib */
      if ( wAux < -INT16_MAX )
 8006368:	4d51      	ldr	r5, [pc, #324]	; (80064b0 <R3_1_GetPhaseCurrents+0x190>)
      else  if ( wAux > INT16_MAX )
 800636a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 800636e:	eba2 0c0c 	sub.w	ip, r2, ip
        pStator_Currents->a = INT16_MAX;
 8006372:	bfa8      	it	ge
 8006374:	f647 73ff 	movwge	r3, #32767	; 0x7fff
      if ( wAux < -INT16_MAX )
 8006378:	45ac      	cmp	ip, r5
        pStator_Currents->a = ( int16_t )wAux;
 800637a:	800b      	strh	r3, [r1, #0]
      if ( wAux < -INT16_MAX )
 800637c:	da57      	bge.n	800642e <R3_1_GetPhaseCurrents+0x10e>
    default:
    {
    }
    break;
  }
  pHandle->_Super.Ia = pStator_Currents->a;
 800637e:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = -INT16_MAX;
 8006382:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ib = pStator_Currents->b;
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006384:	fa1f f38e 	uxth.w	r3, lr
 8006388:	f248 0201 	movw	r2, #32769	; 0x8001
 800638c:	e033      	b.n	80063f6 <R3_1_GetPhaseCurrents+0xd6>
      wAux = ( int32_t )( pHandle->PhaseAOffset ) - ( int32_t )( hReg1 );
 800638e:	6f84      	ldr	r4, [r0, #120]	; 0x78
 8006390:	1ae4      	subs	r4, r4, r3
      if ( wAux < -INT16_MAX )
 8006392:	4b47      	ldr	r3, [pc, #284]	; (80064b0 <R3_1_GetPhaseCurrents+0x190>)
 8006394:	429c      	cmp	r4, r3
 8006396:	db3d      	blt.n	8006414 <R3_1_GetPhaseCurrents+0xf4>
      else  if ( wAux > INT16_MAX )
 8006398:	f5b4 4f00 	cmp.w	r4, #32768	; 0x8000
 800639c:	db71      	blt.n	8006482 <R3_1_GetPhaseCurrents+0x162>
        pStator_Currents->a = INT16_MAX;
 800639e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80063a2:	4613      	mov	r3, r2
 80063a4:	800a      	strh	r2, [r1, #0]
 80063a6:	4614      	mov	r4, r2
 80063a8:	4696      	mov	lr, r2
      wAux = -wAux -  ( int32_t )pStator_Currents->a;
 80063aa:	f8d0 2080 	ldr.w	r2, [r0, #128]	; 0x80
 80063ae:	ebac 0202 	sub.w	r2, ip, r2
 80063b2:	1b12      	subs	r2, r2, r4
      if ( wAux > INT16_MAX )
 80063b4:	f5b2 4f00 	cmp.w	r2, #32768	; 0x8000
 80063b8:	db4e      	blt.n	8006458 <R3_1_GetPhaseCurrents+0x138>
        pStator_Currents->b = INT16_MAX;
 80063ba:	f647 72ff 	movw	r2, #32767	; 0x7fff
 80063be:	804a      	strh	r2, [r1, #2]
 80063c0:	4615      	mov	r5, r2
 80063c2:	e018      	b.n	80063f6 <R3_1_GetPhaseCurrents+0xd6>
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80063c4:	6fc4      	ldr	r4, [r0, #124]	; 0x7c
      if ( wAux < -INT16_MAX )
 80063c6:	4a3a      	ldr	r2, [pc, #232]	; (80064b0 <R3_1_GetPhaseCurrents+0x190>)
      wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg1 );
 80063c8:	1ae3      	subs	r3, r4, r3
      if ( wAux < -INT16_MAX )
 80063ca:	4293      	cmp	r3, r2
 80063cc:	db1c      	blt.n	8006408 <R3_1_GetPhaseCurrents+0xe8>
      else  if ( wAux > INT16_MAX )
 80063ce:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063d2:	db48      	blt.n	8006466 <R3_1_GetPhaseCurrents+0x146>
        pStator_Currents->b = INT16_MAX;
 80063d4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80063d8:	461a      	mov	r2, r3
 80063da:	804b      	strh	r3, [r1, #2]
 80063dc:	461d      	mov	r5, r3
      wAux = -wAux - ( int32_t )pStator_Currents->b;
 80063de:	f8d0 4080 	ldr.w	r4, [r0, #128]	; 0x80
 80063e2:	ebac 0404 	sub.w	r4, ip, r4
 80063e6:	1ae3      	subs	r3, r4, r3
      if ( wAux > INT16_MAX )
 80063e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80063ec:	db2c      	blt.n	8006448 <R3_1_GetPhaseCurrents+0x128>
        pStator_Currents->a = INT16_MAX;
 80063ee:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80063f2:	800b      	strh	r3, [r1, #0]
 80063f4:	469e      	mov	lr, r3
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80063f6:	4413      	add	r3, r2
 80063f8:	425b      	negs	r3, r3
  pHandle->_Super.Ia = pStator_Currents->a;
 80063fa:	f8a0 e054 	strh.w	lr, [r0, #84]	; 0x54
  pHandle->_Super.Ib = pStator_Currents->b;
 80063fe:	f8a0 5056 	strh.w	r5, [r0, #86]	; 0x56
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006402:	f8a0 3058 	strh.w	r3, [r0, #88]	; 0x58
}
 8006406:	bd30      	pop	{r4, r5, pc}
        pStator_Currents->b = -INT16_MAX;
 8006408:	4613      	mov	r3, r2
 800640a:	804a      	strh	r2, [r1, #2]
 800640c:	461d      	mov	r5, r3
 800640e:	f248 0201 	movw	r2, #32769	; 0x8001
 8006412:	e7e4      	b.n	80063de <R3_1_GetPhaseCurrents+0xbe>
        pStator_Currents->a = -INT16_MAX;
 8006414:	461c      	mov	r4, r3
 8006416:	800b      	strh	r3, [r1, #0]
 8006418:	46a6      	mov	lr, r4
 800641a:	f248 0301 	movw	r3, #32769	; 0x8001
 800641e:	e7c4      	b.n	80063aa <R3_1_GetPhaseCurrents+0x8a>
        pStator_Currents->a = -INT16_MAX;
 8006420:	800a      	strh	r2, [r1, #0]
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006422:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
      if ( wAux < -INT16_MAX )
 8006424:	4d22      	ldr	r5, [pc, #136]	; (80064b0 <R3_1_GetPhaseCurrents+0x190>)
        wAux = ( int32_t )( pHandle->PhaseBOffset ) - ( int32_t )( hReg2 );
 8006426:	eba2 0c0c 	sub.w	ip, r2, ip
      if ( wAux < -INT16_MAX )
 800642a:	45ac      	cmp	ip, r5
 800642c:	dba7      	blt.n	800637e <R3_1_GetPhaseCurrents+0x5e>
      else  if ( wAux > INT16_MAX )
 800642e:	f5bc 4f00 	cmp.w	ip, #32768	; 0x8000
 8006432:	db1c      	blt.n	800646e <R3_1_GetPhaseCurrents+0x14e>
        pStator_Currents->b = INT16_MAX;
 8006434:	f647 73ff 	movw	r3, #32767	; 0x7fff
  pHandle->_Super.Ia = pStator_Currents->a;
 8006438:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = INT16_MAX;
 800643c:	804b      	strh	r3, [r1, #2]
 800643e:	461a      	mov	r2, r3
 8006440:	4615      	mov	r5, r2
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006442:	fa1f f38e 	uxth.w	r3, lr
 8006446:	e7d6      	b.n	80063f6 <R3_1_GetPhaseCurrents+0xd6>
      else  if ( wAux < -INT16_MAX )
 8006448:	4c19      	ldr	r4, [pc, #100]	; (80064b0 <R3_1_GetPhaseCurrents+0x190>)
 800644a:	42a3      	cmp	r3, r4
 800644c:	da1f      	bge.n	800648e <R3_1_GetPhaseCurrents+0x16e>
        pStator_Currents->a = -INT16_MAX;
 800644e:	800c      	strh	r4, [r1, #0]
 8006450:	f248 0301 	movw	r3, #32769	; 0x8001
 8006454:	46a6      	mov	lr, r4
 8006456:	e7ce      	b.n	80063f6 <R3_1_GetPhaseCurrents+0xd6>
      else  if ( wAux < -INT16_MAX )
 8006458:	4d15      	ldr	r5, [pc, #84]	; (80064b0 <R3_1_GetPhaseCurrents+0x190>)
 800645a:	42aa      	cmp	r2, r5
 800645c:	da1d      	bge.n	800649a <R3_1_GetPhaseCurrents+0x17a>
        pStator_Currents->b = -INT16_MAX;
 800645e:	804d      	strh	r5, [r1, #2]
 8006460:	f248 0201 	movw	r2, #32769	; 0x8001
 8006464:	e7c7      	b.n	80063f6 <R3_1_GetPhaseCurrents+0xd6>
        pStator_Currents->b = ( int16_t )wAux;
 8006466:	b21d      	sxth	r5, r3
 8006468:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800646a:	b29a      	uxth	r2, r3
 800646c:	e7b7      	b.n	80063de <R3_1_GetPhaseCurrents+0xbe>
  pHandle->_Super.Ia = pStator_Currents->a;
 800646e:	f9b1 e000 	ldrsh.w	lr, [r1]
        pStator_Currents->b = ( int16_t )wAux;
 8006472:	fa0f f58c 	sxth.w	r5, ip
 8006476:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006478:	fa1f f38e 	uxth.w	r3, lr
 800647c:	fa1f f28c 	uxth.w	r2, ip
 8006480:	e7b9      	b.n	80063f6 <R3_1_GetPhaseCurrents+0xd6>
        pStator_Currents->a = ( int16_t )wAux;
 8006482:	fa0f fe84 	sxth.w	lr, r4
 8006486:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800648a:	b2a3      	uxth	r3, r4
 800648c:	e78d      	b.n	80063aa <R3_1_GetPhaseCurrents+0x8a>
        pStator_Currents->a = ( int16_t )wAux;
 800648e:	fa0f fe83 	sxth.w	lr, r3
 8006492:	f8a1 e000 	strh.w	lr, [r1]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 8006496:	b29b      	uxth	r3, r3
 8006498:	e7ad      	b.n	80063f6 <R3_1_GetPhaseCurrents+0xd6>
        pStator_Currents->b = ( int16_t )wAux;
 800649a:	b215      	sxth	r5, r2
 800649c:	804d      	strh	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 800649e:	b292      	uxth	r2, r2
 80064a0:	e7a9      	b.n	80063f6 <R3_1_GetPhaseCurrents+0xd6>
  pHandle->_Super.Ia = pStator_Currents->a;
 80064a2:	f9b1 e000 	ldrsh.w	lr, [r1]
  pHandle->_Super.Ib = pStator_Currents->b;
 80064a6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
  pHandle->_Super.Ic = -pStator_Currents->a - pStator_Currents->b;
 80064aa:	880b      	ldrh	r3, [r1, #0]
 80064ac:	884a      	ldrh	r2, [r1, #2]
 80064ae:	e7a2      	b.n	80063f6 <R3_1_GetPhaseCurrents+0xd6>
 80064b0:	ffff8001 	.word	0xffff8001

080064b4 <R3_1_HFCurrentsCalibrationAB>:
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationAB( PWMC_Handle_t * pHdl, ab_t * pStator_Currents )
{
  PWMC_R3_1_Handle_t * pHandle = (PWMC_R3_1_Handle_t *) pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80064b4:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
{
 80064b8:	b410      	push	{r4}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 80064ba:	685c      	ldr	r4, [r3, #4]
 80064bc:	6a22      	ldr	r2, [r4, #32]
 80064be:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 80064c2:	6222      	str	r2, [r4, #32]
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 80064c4:	f890 208f 	ldrb.w	r2, [r0, #143]	; 0x8f
 80064c8:	2a0f      	cmp	r2, #15
 80064ca:	d813      	bhi.n	80064f4 <R3_1_HFCurrentsCalibrationAB+0x40>
  {
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80064cc:	f890 408e 	ldrb.w	r4, [r0, #142]	; 0x8e
 80064d0:	6f82      	ldr	r2, [r0, #120]	; 0x78
 80064d2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80064d6:	6b9c      	ldr	r4, [r3, #56]	; 0x38
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80064d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
    pHandle->PhaseAOffset += *pHandle->pParams_str->ADCDataReg1[pHandle->CalibSector];
 80064da:	6824      	ldr	r4, [r4, #0]
 80064dc:	4422      	add	r2, r4
 80064de:	6782      	str	r2, [r0, #120]	; 0x78
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80064e0:	681c      	ldr	r4, [r3, #0]
    pHandle->PolarizationCounter++;
 80064e2:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80064e6:	6fc2      	ldr	r2, [r0, #124]	; 0x7c
    pHandle->PolarizationCounter++;
 80064e8:	3301      	adds	r3, #1
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80064ea:	4422      	add	r2, r4
    pHandle->PolarizationCounter++;
 80064ec:	b2db      	uxtb	r3, r3
    pHandle->PhaseBOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 80064ee:	67c2      	str	r2, [r0, #124]	; 0x7c
    pHandle->PolarizationCounter++;
 80064f0:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 80064f4:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 80064f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 80064fa:	600b      	str	r3, [r1, #0]
}
 80064fc:	4770      	bx	lr
 80064fe:	bf00      	nop

08006500 <R3_1_HFCurrentsCalibrationC>:
  *         the offset computation.
  * @param pHdl: handler of the current instance of the PWM component
  * @retval It always returns {0,0} in ab_t format
  */
__weak void R3_1_HFCurrentsCalibrationC(PWMC_Handle_t *pHdl, ab_t* pStator_Currents)
{
 8006500:	b410      	push	{r4}
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006502:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 8006506:	6862      	ldr	r2, [r4, #4]
 8006508:	6a13      	ldr	r3, [r2, #32]
 800650a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800650e:	6213      	str	r3, [r2, #32]

  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);

  if ( pHandle->PolarizationCounter < NB_CONVERSIONS )
 8006510:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
 8006514:	2b0f      	cmp	r3, #15
 8006516:	d810      	bhi.n	800653a <R3_1_HFCurrentsCalibrationC+0x3a>
  {
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 8006518:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
 800651c:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
 8006520:	3214      	adds	r2, #20
 8006522:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006526:	6812      	ldr	r2, [r2, #0]
 8006528:	441a      	add	r2, r3
    pHandle->PolarizationCounter++;
 800652a:	f890 308f 	ldrb.w	r3, [r0, #143]	; 0x8f
    pHandle->PhaseCOffset += *pHandle->pParams_str->ADCDataReg2[pHandle->CalibSector];
 800652e:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
    pHandle->PolarizationCounter++;
 8006532:	3301      	adds	r3, #1
 8006534:	b2db      	uxtb	r3, r3
 8006536:	f880 308f 	strb.w	r3, [r0, #143]	; 0x8f
  }

  /* during offset calibration no current is flowing in the phases */
  pStator_Currents->a = 0;
 800653a:	2300      	movs	r3, #0
  pStator_Currents->b = 0;
}
 800653c:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = 0;
 8006540:	600b      	str	r3, [r1, #0]
}
 8006542:	4770      	bx	lr

08006544 <R3_1_TurnOnLowSides>:
  * @retval none
  */
__weak void R3_1_TurnOnLowSides(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006544:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94

  pHandle->_Super.TurnOnLowSidesAction = true;
 8006548:	f04f 0c01 	mov.w	ip, #1
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800654c:	684a      	ldr	r2, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = true;
 800654e:	f880 c071 	strb.w	ip, [r0, #113]	; 0x71
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006552:	2300      	movs	r3, #0
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006554:	f06f 0001 	mvn.w	r0, #1
 8006558:	6110      	str	r0, [r2, #16]
  WRITE_REG(TIMx->CCR1, CompareValue);
 800655a:	6353      	str	r3, [r2, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 800655c:	6393      	str	r3, [r2, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 800655e:	63d3      	str	r3, [r2, #60]	; 0x3c
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006560:	6913      	ldr	r3, [r2, #16]
  LL_TIM_OC_SetCompareCH1( TIMx, 0 );
  LL_TIM_OC_SetCompareCH2( TIMx, 0 );
  LL_TIM_OC_SetCompareCH3( TIMx, 0 );

  /* Wait until next update */
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8006562:	07db      	lsls	r3, r3, #31
 8006564:	d5fc      	bpl.n	8006560 <R3_1_TurnOnLowSides+0x1c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006566:	f06f 0301 	mvn.w	r3, #1
 800656a:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800656c:	6c53      	ldr	r3, [r2, #68]	; 0x44
 800656e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006572:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);
  
  if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8006574:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8006578:	2b02      	cmp	r3, #2
 800657a:	d000      	beq.n	800657e <R3_1_TurnOnLowSides+0x3a>
 800657c:	4770      	bx	lr
{
 800657e:	b410      	push	{r4}
  {
    /* Enable signals activation */
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 8006580:	e9d1 2002 	ldrd	r2, r0, [r1, #8]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006584:	e9d1 3404 	ldrd	r3, r4, [r1, #16]
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_SetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, PinMask);
 8006588:	6194      	str	r4, [r2, #24]
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800658a:	e9d1 4206 	ldrd	r4, r2, [r1, #24]
 800658e:	6184      	str	r4, [r0, #24]
  }
  return; 
}
 8006590:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006594:	619a      	str	r2, [r3, #24]
 8006596:	4770      	bx	lr

08006598 <R3_1_SwitchOnPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOnPWM(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006598:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94

  pHandle->_Super.TurnOnLowSidesAction = false;
  
  /* Set all duty to 50% */
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 800659c:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80065a0:	684b      	ldr	r3, [r1, #4]
  pHandle->_Super.TurnOnLowSidesAction = false;
 80065a2:	f04f 0c00 	mov.w	ip, #0
{  
 80065a6:	b430      	push	{r4, r5}
  pHandle->_Super.TurnOnLowSidesAction = false;
 80065a8:	f880 c071 	strb.w	ip, [r0, #113]	; 0x71
  LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
 80065ac:	0850      	lsrs	r0, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 80065ae:	6358      	str	r0, [r3, #52]	; 0x34
  LL_TIM_OC_SetCompareCH2(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH3(TIMx, (uint32_t)(pHandle->Half_PWMPeriod  >> 1));
  LL_TIM_OC_SetCompareCH4(TIMx, (uint32_t)(pHandle->Half_PWMPeriod - 5u));
 80065b0:	3a05      	subs	r2, #5
  WRITE_REG(TIMx->CCR2, CompareValue);
 80065b2:	6398      	str	r0, [r3, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80065b4:	63d8      	str	r0, [r3, #60]	; 0x3c
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065b6:	f06f 0001 	mvn.w	r0, #1
  WRITE_REG(TIMx->CCR4, CompareValue);
 80065ba:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065bc:	6118      	str	r0, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 80065be:	691a      	ldr	r2, [r3, #16]

  /* wait for a new PWM period */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 80065c0:	07d2      	lsls	r2, r2, #31
 80065c2:	d5fc      	bpl.n	80065be <R3_1_SwitchOnPWM+0x26>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065c4:	f06f 0201 	mvn.w	r2, #1
 80065c8:	611a      	str	r2, [r3, #16]
  {}
  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE(TIMx);

  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 80065ca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065cc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065d0:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 80065d2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80065d4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80065d8:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs( TIMx );

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 80065da:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 80065de:	2a02      	cmp	r2, #2
 80065e0:	d008      	beq.n	80065f4 <R3_1_SwitchOnPWM+0x5c>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80065e2:	f06f 0201 	mvn.w	r2, #1
 80065e6:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 80065e8:	68da      	ldr	r2, [r3, #12]
 80065ea:	f042 0201 	orr.w	r2, r2, #1
  LL_TIM_ClearFlag_UPDATE( TIMx );
  /* Enable Update IRQ */
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 80065ee:	bc30      	pop	{r4, r5}
 80065f0:	60da      	str	r2, [r3, #12]
 80065f2:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80065f4:	6a18      	ldr	r0, [r3, #32]
 80065f6:	f240 5255 	movw	r2, #1365	; 0x555
 80065fa:	4210      	tst	r0, r2
 80065fc:	d009      	beq.n	8006612 <R3_1_SwitchOnPWM+0x7a>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80065fe:	e9d1 4002 	ldrd	r4, r0, [r1, #8]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006602:	e9d1 2504 	ldrd	r2, r5, [r1, #16]
 8006606:	61a5      	str	r5, [r4, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 8006608:	e9d1 4106 	ldrd	r4, r1, [r1, #24]
 800660c:	6184      	str	r4, [r0, #24]
 800660e:	6191      	str	r1, [r2, #24]
}
 8006610:	e7e7      	b.n	80065e2 <R3_1_SwitchOnPWM+0x4a>
  *         @arg @ref LL_GPIO_PIN_ALL
  * @retval None
  */
__STATIC_INLINE void LL_GPIO_ResetOutputPin(GPIO_TypeDef *GPIOx, uint32_t PinMask)
{
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006612:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006616:	688d      	ldr	r5, [r1, #8]
 8006618:	69ca      	ldr	r2, [r1, #28]
 800661a:	0424      	lsls	r4, r4, #16
 800661c:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800661e:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 8006622:	0400      	lsls	r0, r0, #16
 8006624:	0412      	lsls	r2, r2, #16
 8006626:	61a8      	str	r0, [r5, #24]
 8006628:	61a2      	str	r2, [r4, #24]
}
 800662a:	e7da      	b.n	80065e2 <R3_1_SwitchOnPWM+0x4a>

0800662c <R3_1_SwitchOffPWM>:
  * @param pHdl handler of the current instance of the PWM component
  */
__weak void R3_1_SwitchOffPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 800662c:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 8006630:	684a      	ldr	r2, [r1, #4]
  CLEAR_BIT(TIMx->DIER, TIM_DIER_UIE);
 8006632:	68d3      	ldr	r3, [r2, #12]
 8006634:	f023 0301 	bic.w	r3, r3, #1
 8006638:	60d3      	str	r3, [r2, #12]
  CLEAR_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 800663a:	6c53      	ldr	r3, [r2, #68]	; 0x44

  /* Disable UPDATE ISR */
  LL_TIM_DisableIT_UPDATE( TIMx );

  pHandle->_Super.TurnOnLowSidesAction = false;
 800663c:	f04f 0c00 	mov.w	ip, #0
 8006640:	f880 c071 	strb.w	ip, [r0, #113]	; 0x71

  /* Main PWM Output Disable */
  LL_TIM_DisableAllOutputs(TIMx);
  if (pHandle->BrakeActionLock == true)
 8006644:	f890 0092 	ldrb.w	r0, [r0, #146]	; 0x92
 8006648:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800664c:	6453      	str	r3, [r2, #68]	; 0x44
 800664e:	b918      	cbnz	r0, 8006658 <R3_1_SwitchOffPWM+0x2c>
  {
  }
  else
  {
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006650:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 8006654:	2b02      	cmp	r3, #2
 8006656:	d009      	beq.n	800666c <R3_1_SwitchOffPWM+0x40>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006658:	f06f 0301 	mvn.w	r3, #1
 800665c:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800665e:	6913      	ldr	r3, [r2, #16]
    }
  }

  /* wait for a new PWM period to flush last HF task */
  LL_TIM_ClearFlag_UPDATE(TIMx);
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 8006660:	07db      	lsls	r3, r3, #31
 8006662:	d5fc      	bpl.n	800665e <R3_1_SwitchOffPWM+0x32>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006664:	f06f 0301 	mvn.w	r3, #1
 8006668:	6113      	str	r3, [r2, #16]
 800666a:	4770      	bx	lr
{
 800666c:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 800666e:	e9d1 4005 	ldrd	r4, r0, [r1, #20]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006672:	688d      	ldr	r5, [r1, #8]
 8006674:	69cb      	ldr	r3, [r1, #28]
 8006676:	0424      	lsls	r4, r4, #16
 8006678:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800667a:	e9d1 5403 	ldrd	r5, r4, [r1, #12]
 800667e:	041b      	lsls	r3, r3, #16
 8006680:	0400      	lsls	r0, r0, #16
 8006682:	61a8      	str	r0, [r5, #24]
 8006684:	61a3      	str	r3, [r4, #24]
 8006686:	f06f 0301 	mvn.w	r3, #1
 800668a:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800668c:	6913      	ldr	r3, [r2, #16]
  while (LL_TIM_IsActiveFlag_UPDATE(TIMx) == 0)
 800668e:	07d9      	lsls	r1, r3, #31
 8006690:	d5fc      	bpl.n	800668c <R3_1_SwitchOffPWM+0x60>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006692:	f06f 0301 	mvn.w	r3, #1
  {}
  LL_TIM_ClearFlag_UPDATE(TIMx);

  return;
}
 8006696:	bc30      	pop	{r4, r5}
 8006698:	6113      	str	r3, [r2, #16]
 800669a:	4770      	bx	lr

0800669c <R3_1_RLGetPhaseCurrents>:
  *         during RL detection phase
  * @param pHdl: handler of the current instance of the PWM component
  * @retval Ia and Ib current in ab_t format
  */
void R3_1_RLGetPhaseCurrents(PWMC_Handle_t *pHdl,ab_t* pStator_Currents)
{
 800669c:	b410      	push	{r4}

  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 800669e:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 80066a2:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 80066a4:	6a13      	ldr	r3, [r2, #32]
 80066a6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80066aa:	6213      	str	r3, [r2, #32]
  int32_t wAux;
  
  /* disable ADC trigger source */
  LL_TIM_CC_DisableChannel(TIMx, LL_TIM_CHANNEL_CH4);
  
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 80066ac:	f890 2070 	ldrb.w	r2, [r0, #112]	; 0x70
 80066b0:	6fc3      	ldr	r3, [r0, #124]	; 0x7c
  
  /* Check saturation */
  if (wAux > -INT16_MAX)
 80066b2:	480e      	ldr	r0, [pc, #56]	; (80066ec <R3_1_RLGetPhaseCurrents+0x50>)
  wAux = (int32_t)( pHandle->PhaseBOffset ) - (int32_t)*pHandle->pParams_str->ADCDataReg2[pHandle->_Super.Sector]*2;
 80066b4:	3214      	adds	r2, #20
 80066b6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80066ba:	6812      	ldr	r2, [r2, #0]
 80066bc:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
  if (wAux > -INT16_MAX)
 80066c0:	4283      	cmp	r3, r0
 80066c2:	db05      	blt.n	80066d0 <R3_1_RLGetPhaseCurrents+0x34>
  {
    if (wAux < INT16_MAX)
 80066c4:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80066c8:	4293      	cmp	r3, r2
 80066ca:	dc0b      	bgt.n	80066e4 <R3_1_RLGetPhaseCurrents+0x48>
  else
  {
    wAux = -INT16_MAX;
  }
  /* First value read of Phase B*/
  pStator_Currents->a = ( int16_t )( wAux );
 80066cc:	b21b      	sxth	r3, r3
 80066ce:	e000      	b.n	80066d2 <R3_1_RLGetPhaseCurrents+0x36>
 80066d0:	4b07      	ldr	r3, [pc, #28]	; (80066f0 <R3_1_RLGetPhaseCurrents+0x54>)
  pStator_Currents->b = ( int16_t )( wAux );

}
 80066d2:	f85d 4b04 	ldr.w	r4, [sp], #4
  pStator_Currents->a = ( int16_t )( wAux );
 80066d6:	2200      	movs	r2, #0
 80066d8:	f363 020f 	bfi	r2, r3, #0, #16
 80066dc:	f363 421f 	bfi	r2, r3, #16, #16
 80066e0:	600a      	str	r2, [r1, #0]
}
 80066e2:	4770      	bx	lr
 80066e4:	f647 73ff 	movw	r3, #32767	; 0x7fff
 80066e8:	e7f3      	b.n	80066d2 <R3_1_RLGetPhaseCurrents+0x36>
 80066ea:	bf00      	nop
 80066ec:	ffff8002 	.word	0xffff8002
 80066f0:	ffff8001 	.word	0xffff8001

080066f4 <R3_1_RLTurnOnLowSides>:
  * @retval none
  */
void R3_1_RLTurnOnLowSides(PWMC_Handle_t *pHdl)
{  
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80066f4:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 80066f8:	684a      	ldr	r2, [r1, #4]
{  
 80066fa:	b410      	push	{r4}
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 80066fc:	f06f 0301 	mvn.w	r3, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006700:	2400      	movs	r4, #0
 8006702:	6354      	str	r4, [r2, #52]	; 0x34
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006704:	6113      	str	r3, [r2, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 8006706:	6913      	ldr	r3, [r2, #16]

  /* Clear Update Flag */
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Wait until next update */
  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006708:	07db      	lsls	r3, r3, #31
 800670a:	d5fc      	bpl.n	8006706 <R3_1_RLTurnOnLowSides+0x12>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 800670c:	f06f 0301 	mvn.w	r3, #1
 8006710:	6113      	str	r3, [r2, #16]
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006712:	6c53      	ldr	r3, [r2, #68]	; 0x44
 8006714:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8006718:	6453      	str	r3, [r2, #68]	; 0x44
  LL_TIM_ClearFlag_UPDATE( TIMx );

  /* Main PWM Output Enable */
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800671a:	f891 3074 	ldrb.w	r3, [r1, #116]	; 0x74
 800671e:	2b02      	cmp	r3, #2
 8006720:	d10a      	bne.n	8006738 <R3_1_RLTurnOnLowSides+0x44>
  {
    LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 8006722:	6888      	ldr	r0, [r1, #8]
 8006724:	694c      	ldr	r4, [r1, #20]
 8006726:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
  WRITE_REG(GPIOx->BSRR, PinMask);
 800672a:	6184      	str	r4, [r0, #24]
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
    LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 800672c:	e9d1 0103 	ldrd	r0, r1, [r1, #12]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006730:	0412      	lsls	r2, r2, #16
 8006732:	041b      	lsls	r3, r3, #16
 8006734:	6182      	str	r2, [r0, #24]
 8006736:	618b      	str	r3, [r1, #24]
  }
  return; 
}
 8006738:	f85d 4b04 	ldr.w	r4, [sp], #4
 800673c:	4770      	bx	lr
 800673e:	bf00      	nop

08006740 <R3_1_RLSwitchOnPWM>:
  * @retval none
  */
void R3_1_RLSwitchOnPWM(PWMC_Handle_t *pHdl)
{
  PWMC_R3_1_Handle_t *pHandle = (PWMC_R3_1_Handle_t *)pHdl;
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006740:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
  
  pHandle->_Super.TurnOnLowSidesAction = false;
 8006744:	2200      	movs	r2, #0
{
 8006746:	b430      	push	{r4, r5}
  ADC_TypeDef * ADCx = pHandle->pParams_str->ADCx;
 8006748:	e9d1 4300 	ldrd	r4, r3, [r1]
  pHandle->_Super.TurnOnLowSidesAction = false;
 800674c:	f880 2071 	strb.w	r2, [r0, #113]	; 0x71
  /* The following while cycles ensure the identification of the nergative counting mode of TIM1
   * for correct modification of Repetition Counter value of TIM1.*/

  /* Wait the change of Counter Direction of TIM1 from Down-Direction to Up-Direction*/

  while ( ( TIMx->CR1 & DIR_MASK ) == DIR_MASK )
 8006750:	681a      	ldr	r2, [r3, #0]
 8006752:	06d2      	lsls	r2, r2, #27
 8006754:	d4fc      	bmi.n	8006750 <R3_1_RLSwitchOnPWM+0x10>
  {
  }
  /* Wait the change of Counter Direction of TIM1 from Up-Direction to Down-Direction*/
  while ( ( TIMx->CR1 & DIR_MASK ) == 0u )
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	06d5      	lsls	r5, r2, #27
 800675a:	d5fc      	bpl.n	8006756 <R3_1_RLSwitchOnPWM+0x16>
  /* Set channel 1 Compare/Capture register to 1 */
  LL_TIM_OC_SetCompareCH1(TIMx, 1u);

  /* Set channel 4 Compare/Capture register to trig ADC in the middle 
     of the PWM period */
  LL_TIM_OC_SetCompareCH4(TIMx,(( uint32_t )( pHandle->Half_PWMPeriod ) - 5u));
 800675c:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006760:	2001      	movs	r0, #1
 8006762:	3a05      	subs	r2, #5
 8006764:	6358      	str	r0, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR4, CompareValue);
 8006766:	641a      	str	r2, [r3, #64]	; 0x40
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006768:	f06f 0201 	mvn.w	r2, #1
 800676c:	611a      	str	r2, [r3, #16]
  return ((READ_BIT(TIMx->SR, TIM_SR_UIF) == (TIM_SR_UIF)) ? 1UL : 0UL);
 800676e:	691a      	ldr	r2, [r3, #16]
  

  LL_TIM_ClearFlag_UPDATE( TIMx ); /* Clear flag to wait next update */

  while ( LL_TIM_IsActiveFlag_UPDATE( TIMx ) == 0 )
 8006770:	07d2      	lsls	r2, r2, #31
 8006772:	d5fc      	bpl.n	800676e <R3_1_RLSwitchOnPWM+0x2e>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006774:	f06f 0201 	mvn.w	r2, #1
 8006778:	611a      	str	r2, [r3, #16]
  {}
  LL_TIM_ClearFlag_UPDATE( TIMx );
  
  /* Main PWM Output Enable */
  TIMx->BDTR |= LL_TIM_OSSI_ENABLE;
 800677a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800677c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8006780:	645a      	str	r2, [r3, #68]	; 0x44
  SET_BIT(TIMx->BDTR, TIM_BDTR_MOE);
 8006782:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006784:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006788:	645a      	str	r2, [r3, #68]	; 0x44
  LL_TIM_EnableAllOutputs(TIMx);

  if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 800678a:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 800678e:	2a02      	cmp	r2, #2
 8006790:	d00b      	beq.n	80067aa <R3_1_RLSwitchOnPWM+0x6a>
  WRITE_REG(TIMx->SR, ~(TIM_SR_UIF));
 8006792:	f06f 0201 	mvn.w	r2, #1
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006796:	f06f 0104 	mvn.w	r1, #4
 800679a:	6021      	str	r1, [r4, #0]
 800679c:	611a      	str	r2, [r3, #16]
  SET_BIT(TIMx->DIER, TIM_DIER_UIE);
 800679e:	68da      	ldr	r2, [r3, #12]
 80067a0:	f042 0201 	orr.w	r2, r2, #1

  /* enable TIMx update interrupt*/
  LL_TIM_EnableIT_UPDATE( TIMx );

  return; 
}
 80067a4:	bc30      	pop	{r4, r5}
 80067a6:	60da      	str	r2, [r3, #12]
 80067a8:	4770      	bx	lr
    if ((TIMx->CCER & TIMxCCER_MASK_CH123) != 0u)
 80067aa:	6a18      	ldr	r0, [r3, #32]
 80067ac:	f240 5255 	movw	r2, #1365	; 0x555
 80067b0:	4210      	tst	r0, r2
 80067b2:	d00a      	beq.n	80067ca <R3_1_RLSwitchOnPWM+0x8a>
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin);
 80067b4:	688a      	ldr	r2, [r1, #8]
 80067b6:	6948      	ldr	r0, [r1, #20]
  WRITE_REG(GPIOx->BSRR, PinMask);
 80067b8:	6190      	str	r0, [r2, #24]
      LL_GPIO_SetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80067ba:	68ca      	ldr	r2, [r1, #12]
 80067bc:	6988      	ldr	r0, [r1, #24]
 80067be:	6190      	str	r0, [r2, #24]
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80067c0:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80067c2:	6909      	ldr	r1, [r1, #16]
 80067c4:	0412      	lsls	r2, r2, #16
 80067c6:	618a      	str	r2, [r1, #24]
}
 80067c8:	e7e3      	b.n	8006792 <R3_1_RLSwitchOnPWM+0x52>
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 80067ca:	e9d1 0205 	ldrd	r0, r2, [r1, #20]
 80067ce:	688d      	ldr	r5, [r1, #8]
 80067d0:	0400      	lsls	r0, r0, #16
 80067d2:	61a8      	str	r0, [r5, #24]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_v_port, pHandle->pParams_str->pwm_en_v_pin);
 80067d4:	68c8      	ldr	r0, [r1, #12]
 80067d6:	0412      	lsls	r2, r2, #16
 80067d8:	6182      	str	r2, [r0, #24]
 80067da:	69ca      	ldr	r2, [r1, #28]
      LL_GPIO_ResetOutputPin(pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin);
 80067dc:	6909      	ldr	r1, [r1, #16]
 80067de:	0412      	lsls	r2, r2, #16
 80067e0:	618a      	str	r2, [r1, #24]
}
 80067e2:	e7d6      	b.n	8006792 <R3_1_RLSwitchOnPWM+0x52>

080067e4 <R3_1_Init>:
{
 80067e4:	b430      	push	{r4, r5}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80067e6:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
  ADC_TypeDef* ADCx  = pHandle->pParams_str->ADCx;
 80067ea:	6823      	ldr	r3, [r4, #0]
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80067ec:	6862      	ldr	r2, [r4, #4]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80067ee:	6859      	ldr	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80067f0:	f06f 0502 	mvn.w	r5, #2
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_EOCS);
 80067f4:	f021 0120 	bic.w	r1, r1, #32
 80067f8:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_EOCS);
 80067fa:	601d      	str	r5, [r3, #0]
  CLEAR_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 80067fc:	6859      	ldr	r1, [r3, #4]
 80067fe:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8006802:	6059      	str	r1, [r3, #4]
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006804:	f06f 0104 	mvn.w	r1, #4
 8006808:	6019      	str	r1, [r3, #0]
  CLEAR_BIT(TIMx->CR1, TIM_CR1_CEN);
 800680a:	6811      	ldr	r1, [r2, #0]
 800680c:	f021 0101 	bic.w	r1, r1, #1
 8006810:	6011      	str	r1, [r2, #0]
    if ( TIMx == TIM1 )
 8006812:	491b      	ldr	r1, [pc, #108]	; (8006880 <R3_1_Init+0x9c>)
 8006814:	428a      	cmp	r2, r1
 8006816:	d02d      	beq.n	8006874 <R3_1_Init+0x90>
  WRITE_REG(TIMx->SR, ~(TIM_SR_BIF));
 8006818:	f06f 0180 	mvn.w	r1, #128	; 0x80
 800681c:	6111      	str	r1, [r2, #16]
    if ( ( pHandle->pParams_str->EmergencyStop ) != DISABLE )
 800681e:	f894 1072 	ldrb.w	r1, [r4, #114]	; 0x72
 8006822:	b119      	cbz	r1, 800682c <R3_1_Init+0x48>
  SET_BIT(TIMx->DIER, TIM_DIER_BIE);
 8006824:	68d1      	ldr	r1, [r2, #12]
 8006826:	f041 0180 	orr.w	r1, r1, #128	; 0x80
 800682a:	60d1      	str	r1, [r2, #12]
  SET_BIT(TIMx->CCER, Channels);
 800682c:	6a11      	ldr	r1, [r2, #32]
 800682e:	f441 61aa 	orr.w	r1, r1, #1360	; 0x550
 8006832:	f041 0105 	orr.w	r1, r1, #5
 8006836:	6211      	str	r1, [r2, #32]
  SET_BIT(ADCx->CR2, ADC_CR2_ADON);
 8006838:	689a      	ldr	r2, [r3, #8]
 800683a:	f042 0201 	orr.w	r2, r2, #1
 800683e:	609a      	str	r2, [r3, #8]
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006840:	6ada      	ldr	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 8006842:	f06f 0404 	mvn.w	r4, #4
  MODIFY_REG(ADCx->SQR1, ADC_SQR1_L, SequencerNbRanks);
 8006846:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800684a:	62da      	str	r2, [r3, #44]	; 0x2c
  WRITE_REG(ADCx->SR, ~LL_ADC_FLAG_JEOS);
 800684c:	601c      	str	r4, [r3, #0]
  SET_BIT(ADCx->CR1, LL_ADC_IT_JEOS);
 800684e:	685a      	ldr	r2, [r3, #4]
 8006850:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8006854:	605a      	str	r2, [r3, #4]
  MODIFY_REG(ADCx->JSQR, ADC_JSQR_JL, SequencerNbRanks);
 8006856:	6b9a      	ldr	r2, [r3, #56]	; 0x38
    pHandle->OverCurrentFlag = false;
 8006858:	2100      	movs	r1, #0
    pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 800685a:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 800685e:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 8006862:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
 8006866:	639a      	str	r2, [r3, #56]	; 0x38
}
 8006868:	bc30      	pop	{r4, r5}
    pHandle->OverCurrentFlag = false;
 800686a:	f880 1090 	strb.w	r1, [r0, #144]	; 0x90
    pHandle->_Super.DTTest = 0u;
 800686e:	f8a0 1062 	strh.w	r1, [r0, #98]	; 0x62
}
 8006872:	4770      	bx	lr
  *         (*) value not defined in all devices.
  * @retval None
  */
__STATIC_INLINE void LL_DBGMCU_APB2_GRP1_FreezePeriph(uint32_t Periphs)
{
  SET_BIT(DBGMCU->APB2FZ, Periphs);
 8006874:	4d03      	ldr	r5, [pc, #12]	; (8006884 <R3_1_Init+0xa0>)
 8006876:	68e9      	ldr	r1, [r5, #12]
 8006878:	f041 0101 	orr.w	r1, r1, #1
 800687c:	60e9      	str	r1, [r5, #12]
}
 800687e:	e7cb      	b.n	8006818 <R3_1_Init+0x34>
 8006880:	40010000 	.word	0x40010000
 8006884:	e0042000 	.word	0xe0042000

08006888 <R3_1_SetOffsetCalib>:
{
 8006888:	b410      	push	{r4}
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 800688a:	e9d1 4201 	ldrd	r4, r2, [r1, #4]
 800688e:	680b      	ldr	r3, [r1, #0]
 8006890:	6783      	str	r3, [r0, #120]	; 0x78
  pHdl->offsetCalibStatus = true;
 8006892:	2301      	movs	r3, #1
  pHandle->PhaseAOffset = offsets->phaseAOffset;
 8006894:	e9c0 421f 	strd	r4, r2, [r0, #124]	; 0x7c
  pHdl->offsetCalibStatus = true;
 8006898:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
}
 800689c:	f85d 4b04 	ldr.w	r4, [sp], #4
 80068a0:	4770      	bx	lr
 80068a2:	bf00      	nop

080068a4 <R3_1_GetOffsetCalib>:
  offsets->phaseAOffset = pHandle->PhaseAOffset;
 80068a4:	e9d0 231f 	ldrd	r2, r3, [r0, #124]	; 0x7c
 80068a8:	6f80      	ldr	r0, [r0, #120]	; 0x78
 80068aa:	608b      	str	r3, [r1, #8]
 80068ac:	e9c1 0200 	strd	r0, r2, [r1]
}
 80068b0:	4770      	bx	lr
 80068b2:	bf00      	nop

080068b4 <R3_1_CurrentReadingCalibration>:
{
 80068b4:	b570      	push	{r4, r5, r6, lr}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80068b6:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
  if (false == pHandle->_Super.offsetCalibStatus)
 80068ba:	f890 6074 	ldrb.w	r6, [r0, #116]	; 0x74
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80068be:	685c      	ldr	r4, [r3, #4]
{
 80068c0:	b084      	sub	sp, #16
 80068c2:	4605      	mov	r5, r0
  if (false == pHandle->_Super.offsetCalibStatus)
 80068c4:	b356      	cbz	r6, 800691c <R3_1_CurrentReadingCalibration+0x68>
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80068c6:	69a2      	ldr	r2, [r4, #24]
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->Half_PWMPeriod);
 80068c8:	f8b5 308c 	ldrh.w	r3, [r5, #140]	; 0x8c
  CLEAR_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80068cc:	f022 0208 	bic.w	r2, r2, #8
 80068d0:	61a2      	str	r2, [r4, #24]
 80068d2:	69a2      	ldr	r2, [r4, #24]
 80068d4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80068d8:	61a2      	str	r2, [r4, #24]
 80068da:	69e2      	ldr	r2, [r4, #28]
 80068dc:	f022 0208 	bic.w	r2, r2, #8
 80068e0:	61e2      	str	r2, [r4, #28]
  WRITE_REG(TIMx->CCR1, CompareValue);
 80068e2:	6363      	str	r3, [r4, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80068e4:	63a3      	str	r3, [r4, #56]	; 0x38
  WRITE_REG(TIMx->CCR3, CompareValue);
 80068e6:	63e3      	str	r3, [r4, #60]	; 0x3c
  SET_BIT(*pReg, (TIM_CCMR1_OC1PE << SHIFT_TAB_OCxx[iChannel]));
 80068e8:	69a3      	ldr	r3, [r4, #24]
 80068ea:	f043 0308 	orr.w	r3, r3, #8
 80068ee:	61a3      	str	r3, [r4, #24]
 80068f0:	69a3      	ldr	r3, [r4, #24]
 80068f2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80068f6:	61a3      	str	r3, [r4, #24]
 80068f8:	69e3      	ldr	r3, [r4, #28]
 80068fa:	f043 0308 	orr.w	r3, r3, #8
 80068fe:	61e3      	str	r3, [r4, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006900:	6a23      	ldr	r3, [r4, #32]
 8006902:	f443 63aa 	orr.w	r3, r3, #1360	; 0x550
  pHandle->_Super.Sector = SECTOR_5;
 8006906:	2104      	movs	r1, #4
  pHandle->BrakeActionLock = false;
 8006908:	2200      	movs	r2, #0
 800690a:	f043 0305 	orr.w	r3, r3, #5
 800690e:	6223      	str	r3, [r4, #32]
  pHandle->_Super.Sector = SECTOR_5;
 8006910:	f885 1070 	strb.w	r1, [r5, #112]	; 0x70
  pHandle->BrakeActionLock = false;
 8006914:	f885 2092 	strb.w	r2, [r5, #146]	; 0x92
}
 8006918:	b004      	add	sp, #16
 800691a:	bd70      	pop	{r4, r5, r6, pc}
    GetPhaseCurrCbSave = pHandle->_Super.pFctGetPhaseCurrents;
 800691c:	6843      	ldr	r3, [r0, #4]
 800691e:	9302      	str	r3, [sp, #8]
    SetSampPointSectXCbSave = pHandle->_Super.pFctSetADCSampPointSectX;
 8006920:	6983      	ldr	r3, [r0, #24]
 8006922:	9303      	str	r3, [sp, #12]
    pHandle->PolarizationCounter = 0u;
 8006924:	f880 608f 	strb.w	r6, [r0, #143]	; 0x8f
  CLEAR_BIT(TIMx->CCER, Channels);
 8006928:	6a23      	ldr	r3, [r4, #32]
    pHandle->PhaseAOffset = 0u;
 800692a:	6786      	str	r6, [r0, #120]	; 0x78
 800692c:	f423 63aa 	bic.w	r3, r3, #1360	; 0x550
 8006930:	f023 0305 	bic.w	r3, r3, #5
    pHandle->PhaseCOffset = 0u;
 8006934:	e9c0 661f 	strd	r6, r6, [r0, #124]	; 0x7c
 8006938:	6223      	str	r3, [r4, #32]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationAB;
 800693a:	4b22      	ldr	r3, [pc, #136]	; (80069c4 <R3_1_CurrentReadingCalibration+0x110>)
 800693c:	6043      	str	r3, [r0, #4]
    pHandle->_Super.pFctSetADCSampPointSectX = &R3_1_SetADCSampPointCalibration;
 800693e:	4b22      	ldr	r3, [pc, #136]	; (80069c8 <R3_1_CurrentReadingCalibration+0x114>)
 8006940:	6183      	str	r3, [r0, #24]
    pHandle->CalibSector = SECTOR_5;
 8006942:	2304      	movs	r3, #4
 8006944:	f880 308e 	strb.w	r3, [r0, #142]	; 0x8e
    pHandle->_Super.Sector = SECTOR_5;
 8006948:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    R3_1_SwitchOnPWM( &pHandle->_Super );
 800694c:	f7ff fe24 	bl	8006598 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8006950:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 8006954:	f105 0148 	add.w	r1, r5, #72	; 0x48
 8006958:	f105 038f 	add.w	r3, r5, #143	; 0x8f
 800695c:	f892 2073 	ldrb.w	r2, [r2, #115]	; 0x73
 8006960:	4620      	mov	r0, r4
 8006962:	e9cd 1300 	strd	r1, r3, [sp]
 8006966:	f7ff fcbd 	bl	80062e4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 800696a:	4628      	mov	r0, r5
 800696c:	f7ff fe5e 	bl	800662c <R3_1_SwitchOffPWM>
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_HFCurrentsCalibrationC;
 8006970:	4a16      	ldr	r2, [pc, #88]	; (80069cc <R3_1_CurrentReadingCalibration+0x118>)
 8006972:	606a      	str	r2, [r5, #4]
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006974:	4628      	mov	r0, r5
    pHandle->PolarizationCounter = 0u;
 8006976:	f885 608f 	strb.w	r6, [r5, #143]	; 0x8f
    pHandle->CalibSector = SECTOR_1;
 800697a:	f885 608e 	strb.w	r6, [r5, #142]	; 0x8e
    pHandle->_Super.Sector = SECTOR_1;
 800697e:	f885 6070 	strb.w	r6, [r5, #112]	; 0x70
    R3_1_SwitchOnPWM( &pHandle->_Super );
 8006982:	f7ff fe09 	bl	8006598 <R3_1_SwitchOnPWM>
    waitForPolarizationEnd( TIMx,
 8006986:	f8d5 2094 	ldr.w	r2, [r5, #148]	; 0x94
 800698a:	9b01      	ldr	r3, [sp, #4]
 800698c:	f892 2073 	ldrb.w	r2, [r2, #115]	; 0x73
 8006990:	9900      	ldr	r1, [sp, #0]
 8006992:	4620      	mov	r0, r4
 8006994:	f7ff fca6 	bl	80062e4 <waitForPolarizationEnd>
    R3_1_SwitchOffPWM( &pHandle->_Super );
 8006998:	4628      	mov	r0, r5
 800699a:	f7ff fe47 	bl	800662c <R3_1_SwitchOffPWM>
    pHandle->PhaseBOffset >>= 3;
 800699e:	e9d5 121e 	ldrd	r1, r2, [r5, #120]	; 0x78
    pHandle->PhaseCOffset >>= 3;
 80069a2:	f8d5 3080 	ldr.w	r3, [r5, #128]	; 0x80
    pHandle->PhaseAOffset >>= 3;
 80069a6:	08c9      	lsrs	r1, r1, #3
    pHandle->PhaseBOffset >>= 3;
 80069a8:	08d2      	lsrs	r2, r2, #3
    pHandle->PhaseCOffset >>= 3;
 80069aa:	08db      	lsrs	r3, r3, #3
    pHandle->PhaseBOffset >>= 3;
 80069ac:	e9c5 121e 	strd	r1, r2, [r5, #120]	; 0x78
    pHandle->PhaseCOffset >>= 3;
 80069b0:	f8c5 3080 	str.w	r3, [r5, #128]	; 0x80
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80069b4:	9a02      	ldr	r2, [sp, #8]
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80069b6:	9b03      	ldr	r3, [sp, #12]
    pHandle->_Super.pFctGetPhaseCurrents = GetPhaseCurrCbSave;
 80069b8:	606a      	str	r2, [r5, #4]
    pHandle->_Super.offsetCalibStatus = true;
 80069ba:	2101      	movs	r1, #1
 80069bc:	f885 1074 	strb.w	r1, [r5, #116]	; 0x74
    pHandle->_Super.pFctSetADCSampPointSectX = SetSampPointSectXCbSave;
 80069c0:	61ab      	str	r3, [r5, #24]
 80069c2:	e780      	b.n	80068c6 <R3_1_CurrentReadingCalibration+0x12>
 80069c4:	080064b5 	.word	0x080064b5
 80069c8:	08006a09 	.word	0x08006a09
 80069cc:	08006501 	.word	0x08006501

080069d0 <R3_1_WriteTIMRegisters>:
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80069d0:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
  LL_TIM_OC_SetCompareCH2 (TIMx,pHandle->_Super.CntPhB);
 80069d4:	f8b0 2044 	ldrh.w	r2, [r0, #68]	; 0x44
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 80069d8:	685b      	ldr	r3, [r3, #4]
  LL_TIM_OC_SetCompareCH3 (TIMx,pHandle->_Super.CntPhC);
 80069da:	f8b0 1046 	ldrh.w	r1, [r0, #70]	; 0x46
{
 80069de:	b410      	push	{r4}
  LL_TIM_OC_SetCompareCH1 (TIMx,pHandle->_Super.CntPhA);
 80069e0:	f8b0 4042 	ldrh.w	r4, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 80069e4:	635c      	str	r4, [r3, #52]	; 0x34
  WRITE_REG(TIMx->CCR2, CompareValue);
 80069e6:	639a      	str	r2, [r3, #56]	; 0x38
  if ( pHandle->_Super.SWerror == 1u )
 80069e8:	f8b0 2048 	ldrh.w	r2, [r0, #72]	; 0x48
  WRITE_REG(TIMx->CCR3, CompareValue);
 80069ec:	63d9      	str	r1, [r3, #60]	; 0x3c
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 80069ee:	6a1b      	ldr	r3, [r3, #32]
}
 80069f0:	f85d 4b04 	ldr.w	r4, [sp], #4
  if ( pHandle->_Super.SWerror == 1u )
 80069f4:	2a01      	cmp	r2, #1
    hAux = MC_FOC_DURATION;
 80069f6:	bf12      	itee	ne
 80069f8:	f3c3 3200 	ubfxne	r2, r3, #12, #1
    pHandle->_Super.SWerror = 0u;
 80069fc:	2300      	moveq	r3, #0
 80069fe:	f8a0 3048 	strheq.w	r3, [r0, #72]	; 0x48
}
 8006a02:	4610      	mov	r0, r2
 8006a04:	4770      	bx	lr
 8006a06:	bf00      	nop

08006a08 <R3_1_SetADCSampPointCalibration>:
{
 8006a08:	b510      	push	{r4, lr}
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006a0a:	f8b0 108c 	ldrh.w	r1, [r0, #140]	; 0x8c
  pHandle->_Super.Sector = pHandle->CalibSector;
 8006a0e:	f890 208e 	ldrb.w	r2, [r0, #142]	; 0x8e
 8006a12:	f880 2070 	strb.w	r2, [r0, #112]	; 0x70
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006a16:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006a1a:	3901      	subs	r1, #1
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006a1c:	f8c0 4088 	str.w	r4, [r0, #136]	; 0x88
  return R3_1_WriteTIMRegisters(&pHandle->_Super, (uint16_t)(pHandle->Half_PWMPeriod) - 1u);
 8006a20:	b289      	uxth	r1, r1
 8006a22:	f7ff ffd5 	bl	80069d0 <R3_1_WriteTIMRegisters>
}
 8006a26:	bd10      	pop	{r4, pc}

08006a28 <R3_1_SetADCSampPointSectX>:
{
 8006a28:	b510      	push	{r4, lr}
  register uint16_t lowDuty = pHdl->lowDuty;
 8006a2a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
  if ( ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) > pHandle->pParams_str->hTafter )
 8006a2e:	f8b0 e08c 	ldrh.w	lr, [r0, #140]	; 0x8c
 8006a32:	f8d0 4094 	ldr.w	r4, [r0, #148]	; 0x94
 8006a36:	ebae 0201 	sub.w	r2, lr, r1
 8006a3a:	f8b4 3068 	ldrh.w	r3, [r4, #104]	; 0x68
 8006a3e:	b292      	uxth	r2, r2
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d908      	bls.n	8006a56 <R3_1_SetADCSampPointSectX+0x2e>
    pHandle->_Super.Sector = SECTOR_5;
 8006a44:	2304      	movs	r3, #4
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006a46:	f10e 31ff 	add.w	r1, lr, #4294967295
    pHandle->_Super.Sector = SECTOR_5;
 8006a4a:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    hCntSmp = ( uint32_t )( pHandle->Half_PWMPeriod ) - 1u;
 8006a4e:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006a50:	f7ff ffbe 	bl	80069d0 <R3_1_WriteTIMRegisters>
}
 8006a54:	bd10      	pop	{r4, pc}
    hDeltaDuty = ( uint16_t )( lowDuty - midDuty );
 8006a56:	f8b0 c04c 	ldrh.w	ip, [r0, #76]	; 0x4c
 8006a5a:	eba1 0c0c 	sub.w	ip, r1, ip
    if ( hDeltaDuty > ( uint16_t )( pHandle->Half_PWMPeriod - lowDuty ) * 2u )
 8006a5e:	fa1f fc8c 	uxth.w	ip, ip
 8006a62:	ebbc 0f42 	cmp.w	ip, r2, lsl #1
 8006a66:	d906      	bls.n	8006a76 <R3_1_SetADCSampPointSectX+0x4e>
      hCntSmp = lowDuty - pHandle->pParams_str->hTbefore;
 8006a68:	f8b4 306a 	ldrh.w	r3, [r4, #106]	; 0x6a
 8006a6c:	1ac9      	subs	r1, r1, r3
 8006a6e:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006a70:	f7ff ffae 	bl	80069d0 <R3_1_WriteTIMRegisters>
}
 8006a74:	bd10      	pop	{r4, pc}
      hCntSmp = lowDuty + pHandle->pParams_str->hTafter;
 8006a76:	440b      	add	r3, r1
 8006a78:	b299      	uxth	r1, r3
      if ( hCntSmp >= pHandle->Half_PWMPeriod )
 8006a7a:	458e      	cmp	lr, r1
 8006a7c:	d8e8      	bhi.n	8006a50 <R3_1_SetADCSampPointSectX+0x28>
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006a7e:	43c9      	mvns	r1, r1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006a80:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006a84:	eb01 014e 	add.w	r1, r1, lr, lsl #1
        pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_FALLING;
 8006a88:	f8c0 3088 	str.w	r3, [r0, #136]	; 0x88
        hCntSmp = ( 2u * pHandle->Half_PWMPeriod ) - hCntSmp - 1u;
 8006a8c:	b289      	uxth	r1, r1
  return R3_1_WriteTIMRegisters( &pHandle->_Super, hCntSmp);
 8006a8e:	f7ff ff9f 	bl	80069d0 <R3_1_WriteTIMRegisters>
}
 8006a92:	bd10      	pop	{r4, pc}

08006a94 <R3_1_TIMx_UP_IRQHandler>:
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006a94:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
{
 8006a98:	b430      	push	{r4, r5}
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006a9a:	e9d1 2400 	ldrd	r2, r4, [r1]
{
 8006a9e:	4603      	mov	r3, r0
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8006aa0:	6890      	ldr	r0, [r2, #8]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006aa2:	f8d3 5088 	ldr.w	r5, [r3, #136]	; 0x88
  CLEAR_BIT(ADCx->CR2, ADC_CR2_JEXTEN);
 8006aa6:	f420 1040 	bic.w	r0, r0, #3145728	; 0x300000
 8006aaa:	6090      	str	r0, [r2, #8]
  ADCx->JSQR = pHandle->pParams_str->ADCConfig[pHandle->_Super.Sector];
 8006aac:	f893 0070 	ldrb.w	r0, [r3, #112]	; 0x70
 8006ab0:	3008      	adds	r0, #8
 8006ab2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8006ab6:	6391      	str	r1, [r2, #56]	; 0x38
  SET_BIT(TIMx->CCER, Channels);
 8006ab8:	6a20      	ldr	r0, [r4, #32]
 8006aba:	f440 5080 	orr.w	r0, r0, #4096	; 0x1000
 8006abe:	6220      	str	r0, [r4, #32]
  SET_BIT(ADCx->CR2, ExternalTriggerEdge);
 8006ac0:	6891      	ldr	r1, [r2, #8]
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006ac2:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 8006ac6:	4329      	orrs	r1, r5
 8006ac8:	6091      	str	r1, [r2, #8]
}
 8006aca:	f103 006e 	add.w	r0, r3, #110	; 0x6e
  pHandle->ADCTriggerEdge = LL_ADC_INJ_TRIG_EXT_RISING;
 8006ace:	f8c3 4088 	str.w	r4, [r3, #136]	; 0x88
}
 8006ad2:	bc30      	pop	{r4, r5}
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop

08006ad8 <R3_1_BRK_IRQHandler>:
  if ( pHandle->BrakeActionLock == false )
 8006ad8:	f890 3092 	ldrb.w	r3, [r0, #146]	; 0x92
 8006adc:	b92b      	cbnz	r3, 8006aea <R3_1_BRK_IRQHandler+0x12>
    if ( ( pHandle->pParams_str->LowSideOutputs ) == ES_GPIO )
 8006ade:	f8d0 3094 	ldr.w	r3, [r0, #148]	; 0x94
 8006ae2:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
 8006ae6:	2a02      	cmp	r2, #2
 8006ae8:	d004      	beq.n	8006af4 <R3_1_BRK_IRQHandler+0x1c>
  pHandle->OverCurrentFlag = true;
 8006aea:	2301      	movs	r3, #1
 8006aec:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
}
 8006af0:	306e      	adds	r0, #110	; 0x6e
 8006af2:	4770      	bx	lr
{
 8006af4:	b430      	push	{r4, r5}
  WRITE_REG(GPIOx->BSRR, (PinMask << 16));
 8006af6:	e9d3 4105 	ldrd	r4, r1, [r3, #20]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_u_port, pHandle->pParams_str->pwm_en_u_pin );
 8006afa:	689d      	ldr	r5, [r3, #8]
 8006afc:	69da      	ldr	r2, [r3, #28]
 8006afe:	0424      	lsls	r4, r4, #16
 8006b00:	61ac      	str	r4, [r5, #24]
      LL_GPIO_ResetOutputPin( pHandle->pParams_str->pwm_en_w_port, pHandle->pParams_str->pwm_en_w_pin );
 8006b02:	e9d3 5403 	ldrd	r5, r4, [r3, #12]
 8006b06:	0409      	lsls	r1, r1, #16
 8006b08:	0412      	lsls	r2, r2, #16
  pHandle->OverCurrentFlag = true;
 8006b0a:	2301      	movs	r3, #1
 8006b0c:	61a9      	str	r1, [r5, #24]
}
 8006b0e:	306e      	adds	r0, #110	; 0x6e
 8006b10:	61a2      	str	r2, [r4, #24]
  pHandle->OverCurrentFlag = true;
 8006b12:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
}
 8006b16:	bc30      	pop	{r4, r5}
 8006b18:	4770      	bx	lr
 8006b1a:	bf00      	nop

08006b1c <R3_1_IsOverCurrentOccurred>:
  if (pHandle->OverCurrentFlag == true )
 8006b1c:	f890 3090 	ldrb.w	r3, [r0, #144]	; 0x90
 8006b20:	b90b      	cbnz	r3, 8006b26 <R3_1_IsOverCurrentOccurred+0xa>
  uint16_t retVal = MC_NO_FAULTS;
 8006b22:	4618      	mov	r0, r3
}
 8006b24:	4770      	bx	lr
    pHandle->OverCurrentFlag = false;
 8006b26:	2300      	movs	r3, #0
 8006b28:	f880 3090 	strb.w	r3, [r0, #144]	; 0x90
    retVal |= MC_BREAK_IN;
 8006b2c:	2040      	movs	r0, #64	; 0x40
 8006b2e:	4770      	bx	lr

08006b30 <R3_1_RLDetectionModeEnable>:
  if (pHandle->_Super.RLDetectionMode == false)
 8006b30:	f890 1073 	ldrb.w	r1, [r0, #115]	; 0x73
{
 8006b34:	b430      	push	{r4, r5}
  if (pHandle->_Super.RLDetectionMode == false)
 8006b36:	2900      	cmp	r1, #0
 8006b38:	d135      	bne.n	8006ba6 <R3_1_RLDetectionModeEnable+0x76>
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006b3a:	f8d0 5094 	ldr.w	r5, [r0, #148]	; 0x94
 8006b3e:	686b      	ldr	r3, [r5, #4]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b40:	699a      	ldr	r2, [r3, #24]
 8006b42:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006b46:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006b4a:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b4c:	6a1a      	ldr	r2, [r3, #32]
 8006b4e:	f042 0201 	orr.w	r2, r2, #1
 8006b52:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b54:	6a1a      	ldr	r2, [r3, #32]
 8006b56:	f022 0204 	bic.w	r2, r2, #4
 8006b5a:	621a      	str	r2, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006b5c:	6359      	str	r1, [r3, #52]	; 0x34
    if ((pHandle->pParams_str->LowSideOutputs)== LS_PWM_TIMER)
 8006b5e:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
 8006b62:	2a01      	cmp	r2, #1
  __IO uint32_t *pReg = (__IO uint32_t *)((uint32_t)((uint32_t)(&TIMx->CCMR1) + OFFSET_TAB_CCMRx[iChannel]));
 8006b64:	f103 0418 	add.w	r4, r3, #24
 8006b68:	d02a      	beq.n	8006bc0 <R3_1_RLDetectionModeEnable+0x90>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8006b6a:	2a02      	cmp	r2, #2
 8006b6c:	d10d      	bne.n	8006b8a <R3_1_RLDetectionModeEnable+0x5a>
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b6e:	699a      	ldr	r2, [r3, #24]
 8006b70:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006b74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006b78:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006b7a:	6a1a      	ldr	r2, [r3, #32]
 8006b7c:	f042 0210 	orr.w	r2, r2, #16
 8006b80:	621a      	str	r2, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b82:	6a1a      	ldr	r2, [r3, #32]
 8006b84:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006b88:	621a      	str	r2, [r3, #32]
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006b8a:	6862      	ldr	r2, [r4, #4]
 8006b8c:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006b90:	f042 0270 	orr.w	r2, r2, #112	; 0x70
 8006b94:	6062      	str	r2, [r4, #4]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006b96:	6a1a      	ldr	r2, [r3, #32]
 8006b98:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8006b9c:	621a      	str	r2, [r3, #32]
 8006b9e:	6a1a      	ldr	r2, [r3, #32]
 8006ba0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006ba4:	621a      	str	r2, [r3, #32]
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006ba6:	4b0e      	ldr	r3, [pc, #56]	; (8006be0 <R3_1_RLDetectionModeEnable+0xb0>)
  pHandle->_Super.pFctSwitchOnPwm = &R3_1_RLSwitchOnPWM;
 8006ba8:	490e      	ldr	r1, [pc, #56]	; (8006be4 <R3_1_RLDetectionModeEnable+0xb4>)
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006baa:	4a0f      	ldr	r2, [pc, #60]	; (8006be8 <R3_1_RLDetectionModeEnable+0xb8>)
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006bac:	4c0f      	ldr	r4, [pc, #60]	; (8006bec <R3_1_RLDetectionModeEnable+0xbc>)
  pHandle->_Super.pFctTurnOnLowSides = &R3_1_RLTurnOnLowSides;
 8006bae:	6143      	str	r3, [r0, #20]
  pHandle->_Super.RLDetectionMode = true;
 8006bb0:	2301      	movs	r3, #1
  pHandle->_Super.pFctGetPhaseCurrents = &R3_1_RLGetPhaseCurrents;
 8006bb2:	6044      	str	r4, [r0, #4]
  pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006bb4:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8006bb8:	bc30      	pop	{r4, r5}
  pHandle->_Super.RLDetectionMode = true;
 8006bba:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
}
 8006bbe:	4770      	bx	lr
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006bc0:	699a      	ldr	r2, [r3, #24]
 8006bc2:	f422 42e6 	bic.w	r2, r2, #29440	; 0x7300
 8006bc6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8006bca:	619a      	str	r2, [r3, #24]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006bcc:	6a1a      	ldr	r2, [r3, #32]
 8006bce:	f022 0210 	bic.w	r2, r2, #16
 8006bd2:	621a      	str	r2, [r3, #32]
  SET_BIT(TIMx->CCER, Channels);
 8006bd4:	6a1a      	ldr	r2, [r3, #32]
 8006bd6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006bda:	621a      	str	r2, [r3, #32]
}
 8006bdc:	e7d5      	b.n	8006b8a <R3_1_RLDetectionModeEnable+0x5a>
 8006bde:	bf00      	nop
 8006be0:	080066f5 	.word	0x080066f5
 8006be4:	08006741 	.word	0x08006741
 8006be8:	0800662d 	.word	0x0800662d
 8006bec:	0800669d 	.word	0x0800669d

08006bf0 <R3_1_RLDetectionModeDisable>:
  if (pHandle->_Super.RLDetectionMode == true)
 8006bf0:	f890 3073 	ldrb.w	r3, [r0, #115]	; 0x73
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d049      	beq.n	8006c8c <R3_1_RLDetectionModeDisable+0x9c>
{
 8006bf8:	b410      	push	{r4}
  TIM_TypeDef*  TIMx = pHandle->pParams_str->TIMx;
 8006bfa:	f8d0 1094 	ldr.w	r1, [r0, #148]	; 0x94
 8006bfe:	684b      	ldr	r3, [r1, #4]
    while ((TIMx->CR1 & DIR_MASK) == 0u)
 8006c00:	681a      	ldr	r2, [r3, #0]
 8006c02:	06d4      	lsls	r4, r2, #27
 8006c04:	d5fc      	bpl.n	8006c00 <R3_1_RLDetectionModeDisable+0x10>
    while ((TIMx->CR1 & DIR_MASK) == DIR_MASK)
 8006c06:	681a      	ldr	r2, [r3, #0]
 8006c08:	06d2      	lsls	r2, r2, #27
 8006c0a:	d4fc      	bmi.n	8006c06 <R3_1_RLDetectionModeDisable+0x16>
    TIMx->RCR = pHandle->pParams_str->RepetitionCounter;
 8006c0c:	f891 2073 	ldrb.w	r2, [r1, #115]	; 0x73
 8006c10:	631a      	str	r2, [r3, #48]	; 0x30
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c12:	699a      	ldr	r2, [r3, #24]
 8006c14:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006c18:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8006c1c:	619a      	str	r2, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006c1e:	6a1a      	ldr	r2, [r3, #32]
 8006c20:	f042 0201 	orr.w	r2, r2, #1
 8006c24:	621a      	str	r2, [r3, #32]
    if ((pHandle->pParams_str-> LowSideOutputs)== LS_PWM_TIMER)
 8006c26:	f891 2074 	ldrb.w	r2, [r1, #116]	; 0x74
 8006c2a:	2a01      	cmp	r2, #1
 8006c2c:	d02f      	beq.n	8006c8e <R3_1_RLDetectionModeDisable+0x9e>
    else if ((pHandle->pParams_str->LowSideOutputs)== ES_GPIO)
 8006c2e:	2a02      	cmp	r2, #2
 8006c30:	d053      	beq.n	8006cda <R3_1_RLDetectionModeDisable+0xea>
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006c32:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8006c36:	0852      	lsrs	r2, r2, #1
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c38:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c3a:	699c      	ldr	r4, [r3, #24]
 8006c3c:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006c40:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006c44:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006c46:	6a1c      	ldr	r4, [r3, #32]
 8006c48:	f044 0410 	orr.w	r4, r4, #16
 8006c4c:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006c4e:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c50:	69dc      	ldr	r4, [r3, #28]
 8006c52:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8006c56:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006c5a:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006c5c:	6a1c      	ldr	r4, [r3, #32]
 8006c5e:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006c62:	621c      	str	r4, [r3, #32]
    LL_ADC_INJ_SetSequencerDiscont(pHandle->pParams_str->ADCx,
 8006c64:	6809      	ldr	r1, [r1, #0]
  WRITE_REG(TIMx->CCR3, CompareValue);
 8006c66:	63da      	str	r2, [r3, #60]	; 0x3c
  MODIFY_REG(ADCx->CR1, ADC_CR1_JDISCEN, SeqDiscont);
 8006c68:	684b      	ldr	r3, [r1, #4]
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006c6a:	4a2f      	ldr	r2, [pc, #188]	; (8006d28 <R3_1_RLDetectionModeDisable+0x138>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006c6c:	4c2f      	ldr	r4, [pc, #188]	; (8006d2c <R3_1_RLDetectionModeDisable+0x13c>)
 8006c6e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006c72:	604b      	str	r3, [r1, #4]
    pHandle->_Super.pFctSwitchOnPwm = &R3_1_SwitchOnPWM;
 8006c74:	492e      	ldr	r1, [pc, #184]	; (8006d30 <R3_1_RLDetectionModeDisable+0x140>)
    pHandle->_Super.pFctGetPhaseCurrents = &R3_1_GetPhaseCurrents;
 8006c76:	6042      	str	r2, [r0, #4]
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006c78:	4a2e      	ldr	r2, [pc, #184]	; (8006d34 <R3_1_RLDetectionModeDisable+0x144>)
    pHandle->_Super.pFctTurnOnLowSides = &R3_1_TurnOnLowSides;
 8006c7a:	6144      	str	r4, [r0, #20]
    pHandle->_Super.RLDetectionMode = false;
 8006c7c:	2300      	movs	r3, #0
    pHandle->_Super.pFctSwitchOffPwm = &R3_1_SwitchOffPWM;
 8006c7e:	e9c0 2102 	strd	r2, r1, [r0, #8]
}
 8006c82:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.RLDetectionMode = false;
 8006c86:	f880 3073 	strb.w	r3, [r0, #115]	; 0x73
}
 8006c8a:	4770      	bx	lr
 8006c8c:	4770      	bx	lr
  SET_BIT(TIMx->CCER, Channels);
 8006c8e:	6a1c      	ldr	r4, [r3, #32]
    LL_TIM_OC_SetCompareCH1(TIMx, (uint32_t)(pHandle->Half_PWMPeriod) >> 1);
 8006c90:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8006c94:	f044 0404 	orr.w	r4, r4, #4
 8006c98:	0852      	lsrs	r2, r2, #1
 8006c9a:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006c9c:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006c9e:	699c      	ldr	r4, [r3, #24]
 8006ca0:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006ca4:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006ca8:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006caa:	6a1c      	ldr	r4, [r3, #32]
 8006cac:	f044 0410 	orr.w	r4, r4, #16
 8006cb0:	621c      	str	r4, [r3, #32]
 8006cb2:	6a1c      	ldr	r4, [r3, #32]
 8006cb4:	f044 0440 	orr.w	r4, r4, #64	; 0x40
 8006cb8:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006cba:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006cbc:	69dc      	ldr	r4, [r3, #28]
 8006cbe:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8006cc2:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006cc6:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006cc8:	6a1c      	ldr	r4, [r3, #32]
 8006cca:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006cce:	621c      	str	r4, [r3, #32]
 8006cd0:	6a1c      	ldr	r4, [r3, #32]
 8006cd2:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
 8006cd6:	621c      	str	r4, [r3, #32]
}
 8006cd8:	e7c4      	b.n	8006c64 <R3_1_RLDetectionModeDisable+0x74>
  CLEAR_BIT(TIMx->CCER, Channels);
 8006cda:	6a1c      	ldr	r4, [r3, #32]
 8006cdc:	f8b0 208c 	ldrh.w	r2, [r0, #140]	; 0x8c
 8006ce0:	f024 0404 	bic.w	r4, r4, #4
 8006ce4:	0852      	lsrs	r2, r2, #1
 8006ce6:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006ce8:	635a      	str	r2, [r3, #52]	; 0x34
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006cea:	699c      	ldr	r4, [r3, #24]
 8006cec:	f424 44e6 	bic.w	r4, r4, #29440	; 0x7300
 8006cf0:	f444 44c0 	orr.w	r4, r4, #24576	; 0x6000
 8006cf4:	619c      	str	r4, [r3, #24]
  SET_BIT(TIMx->CCER, Channels);
 8006cf6:	6a1c      	ldr	r4, [r3, #32]
 8006cf8:	f044 0410 	orr.w	r4, r4, #16
 8006cfc:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006cfe:	6a1c      	ldr	r4, [r3, #32]
 8006d00:	f024 0440 	bic.w	r4, r4, #64	; 0x40
 8006d04:	621c      	str	r4, [r3, #32]
  WRITE_REG(TIMx->CCR2, CompareValue);
 8006d06:	639a      	str	r2, [r3, #56]	; 0x38
  MODIFY_REG(*pReg, ((TIM_CCMR1_OC1M  | TIM_CCMR1_CC1S) << SHIFT_TAB_OCxx[iChannel]), Mode << SHIFT_TAB_OCxx[iChannel]);
 8006d08:	69dc      	ldr	r4, [r3, #28]
 8006d0a:	f024 0473 	bic.w	r4, r4, #115	; 0x73
 8006d0e:	f044 0460 	orr.w	r4, r4, #96	; 0x60
 8006d12:	61dc      	str	r4, [r3, #28]
  SET_BIT(TIMx->CCER, Channels);
 8006d14:	6a1c      	ldr	r4, [r3, #32]
 8006d16:	f444 7480 	orr.w	r4, r4, #256	; 0x100
 8006d1a:	621c      	str	r4, [r3, #32]
  CLEAR_BIT(TIMx->CCER, Channels);
 8006d1c:	6a1c      	ldr	r4, [r3, #32]
 8006d1e:	f424 6480 	bic.w	r4, r4, #1024	; 0x400
 8006d22:	621c      	str	r4, [r3, #32]
}
 8006d24:	e79e      	b.n	8006c64 <R3_1_RLDetectionModeDisable+0x74>
 8006d26:	bf00      	nop
 8006d28:	08006321 	.word	0x08006321
 8006d2c:	08006545 	.word	0x08006545
 8006d30:	08006599 	.word	0x08006599
 8006d34:	0800662d 	.word	0x0800662d

08006d38 <R3_1_RLDetectionModeSetDuty>:
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006d38:	f8b0 308c 	ldrh.w	r3, [r0, #140]	; 0x8c
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006d3c:	f8d0 2094 	ldr.w	r2, [r0, #148]	; 0x94
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006d40:	fb03 f101 	mul.w	r1, r3, r1
  TIM_TypeDef * TIMx = pHandle->pParams_str->TIMx;
 8006d44:	6852      	ldr	r2, [r2, #4]
  if (pHandle->_Super.SWerror == 1u)
 8006d46:	f8b0 3048 	ldrh.w	r3, [r0, #72]	; 0x48
  val = ( ( uint32_t )( pHandle->Half_PWMPeriod ) * ( uint32_t )( hDuty ) ) >> 16;
 8006d4a:	0c09      	lsrs	r1, r1, #16
  pHandle->_Super.Sector = SECTOR_4;
 8006d4c:	f04f 0c03 	mov.w	ip, #3
 8006d50:	f880 c070 	strb.w	ip, [r0, #112]	; 0x70
  pHandle->_Super.CntPhA = ( uint16_t )( val );
 8006d54:	f8a0 1042 	strh.w	r1, [r0, #66]	; 0x42
  WRITE_REG(TIMx->CCR1, CompareValue);
 8006d58:	6351      	str	r1, [r2, #52]	; 0x34
  return ((READ_BIT(TIMx->CCER, Channels) == (Channels)) ? 1UL : 0UL);
 8006d5a:	6a12      	ldr	r2, [r2, #32]
  if (pHandle->_Super.SWerror == 1u)
 8006d5c:	2b01      	cmp	r3, #1
    hAux = MC_FOC_DURATION;
 8006d5e:	bf12      	itee	ne
 8006d60:	f3c2 3300 	ubfxne	r3, r2, #12, #1
    pHandle->_Super.SWerror = 0u;
 8006d64:	2200      	moveq	r2, #0
 8006d66:	f8a0 2048 	strheq.w	r2, [r0, #72]	; 0x48
}
 8006d6a:	4618      	mov	r0, r3
 8006d6c:	4770      	bx	lr
 8006d6e:	bf00      	nop

08006d70 <RVBS_Clear>:
  {
#endif
    uint16_t aux;
    uint16_t index;

    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006d70:	f8b0 c01a 	ldrh.w	ip, [r0, #26]
 8006d74:	8b82      	ldrh	r2, [r0, #28]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006d76:	8b03      	ldrh	r3, [r0, #24]
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006d78:	4494      	add	ip, r2
{
 8006d7a:	b410      	push	{r4}
    aux = (pHandle->OverVoltageThreshold + pHandle->UnderVoltageThreshold) / 2U;
 8006d7c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006d80:	b14b      	cbz	r3, 8006d96 <RVBS_Clear+0x26>
    {
      pHandle->aBuffer[index] = aux;
 8006d82:	6a04      	ldr	r4, [r0, #32]
 8006d84:	2300      	movs	r3, #0
 8006d86:	b29a      	uxth	r2, r3
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006d88:	3301      	adds	r3, #1
      pHandle->aBuffer[index] = aux;
 8006d8a:	f824 c012 	strh.w	ip, [r4, r2, lsl #1]
    for (index = 0U; index < pHandle->LowPassFilterBW; index++)
 8006d8e:	8b01      	ldrh	r1, [r0, #24]
 8006d90:	b29a      	uxth	r2, r3
 8006d92:	4291      	cmp	r1, r2
 8006d94:	d8f7      	bhi.n	8006d86 <RVBS_Clear+0x16>
    }
    pHandle->_Super.LatestConv = aux;
 8006d96:	2300      	movs	r3, #0
 8006d98:	f36c 030f 	bfi	r3, ip, #0, #16
 8006d9c:	f36c 431f 	bfi	r3, ip, #16, #16
    pHandle->_Super.AvBusVoltage_d = aux;
    pHandle->index = 0U;
 8006da0:	2200      	movs	r2, #0
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
}
 8006da2:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->_Super.LatestConv = aux;
 8006da6:	6043      	str	r3, [r0, #4]
    pHandle->index = 0U;
 8006da8:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
}
 8006dac:	4770      	bx	lr
 8006dae:	bf00      	nop

08006db0 <RVBS_Init>:
{
 8006db0:	b510      	push	{r4, lr}
 8006db2:	4604      	mov	r4, r0
    pHandle->convHandle = RCM_RegisterRegConv(&pHandle->VbusRegConv);
 8006db4:	300c      	adds	r0, #12
 8006db6:	f7fc ff55 	bl	8003c64 <RCM_RegisterRegConv>
 8006dba:	f884 0026 	strb.w	r0, [r4, #38]	; 0x26
    RVBS_Clear(pHandle);
 8006dbe:	4620      	mov	r0, r4
 8006dc0:	f7ff ffd6 	bl	8006d70 <RVBS_Clear>
}
 8006dc4:	bd10      	pop	{r4, pc}
 8006dc6:	bf00      	nop

08006dc8 <RVBS_CheckFaultState>:
    fault = MC_SW_ERROR;
  }
  else
  {
#endif
    if (pHandle->_Super.AvBusVoltage_d > pHandle->OverVoltageThreshold)
 8006dc8:	88c3      	ldrh	r3, [r0, #6]
 8006dca:	8b42      	ldrh	r2, [r0, #26]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d305      	bcc.n	8006ddc <RVBS_CheckFaultState+0x14>
    {
      fault = MC_OVER_VOLT;
    }
    else if (pHandle->_Super.AvBusVoltage_d < pHandle->UnderVoltageThreshold)
 8006dd0:	8b80      	ldrh	r0, [r0, #28]
    {
      fault = MC_UNDER_VOLT;
    }
    else
    {
      fault = MC_NO_ERROR;
 8006dd2:	4298      	cmp	r0, r3
 8006dd4:	bf8c      	ite	hi
 8006dd6:	2004      	movhi	r0, #4
 8006dd8:	2000      	movls	r0, #0
 8006dda:	4770      	bx	lr
      fault = MC_OVER_VOLT;
 8006ddc:	2002      	movs	r0, #2
    }
#ifdef NULL_PTR_RDIV_BUS_VLT_SNS
  }
#endif
  return (fault);
}
 8006dde:	4770      	bx	lr

08006de0 <RVBS_CalcAvVbus>:
{
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4604      	mov	r4, r0
    hAux = RCM_ExecRegularConv(pHandle->convHandle);
 8006de4:	f890 0026 	ldrb.w	r0, [r0, #38]	; 0x26
 8006de8:	f7fd f818 	bl	8003e1c <RCM_ExecRegularConv>
    if (0xFFFFU == hAux)
 8006dec:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006df0:	4298      	cmp	r0, r3
 8006df2:	d024      	beq.n	8006e3e <RVBS_CalcAvVbus+0x5e>
      pHandle->aBuffer[pHandle->index] = hAux;
 8006df4:	6a23      	ldr	r3, [r4, #32]
 8006df6:	f894 5025 	ldrb.w	r5, [r4, #37]	; 0x25
 8006dfa:	f823 0015 	strh.w	r0, [r3, r5, lsl #1]
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006dfe:	f8b4 e018 	ldrh.w	lr, [r4, #24]
 8006e02:	f01e 02ff 	ands.w	r2, lr, #255	; 0xff
 8006e06:	d00d      	beq.n	8006e24 <RVBS_CalcAvVbus+0x44>
 8006e08:	3a01      	subs	r2, #1
 8006e0a:	b2d2      	uxtb	r2, r2
 8006e0c:	eb03 0c42 	add.w	ip, r3, r2, lsl #1
 8006e10:	3b02      	subs	r3, #2
      wtemp = 0u;
 8006e12:	2200      	movs	r2, #0
        wtemp += pHandle->aBuffer[i];
 8006e14:	f833 1f02 	ldrh.w	r1, [r3, #2]!
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006e18:	459c      	cmp	ip, r3
        wtemp += pHandle->aBuffer[i];
 8006e1a:	440a      	add	r2, r1
      for (i = 0U; i < (uint8_t)pHandle->LowPassFilterBW; i++)
 8006e1c:	d1fa      	bne.n	8006e14 <RVBS_CalcAvVbus+0x34>
      wtemp /= pHandle->LowPassFilterBW;
 8006e1e:	fbb2 f2fe 	udiv	r2, r2, lr
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006e22:	b292      	uxth	r2, r2
      if ((uint16_t)pHandle->index < (pHandle->LowPassFilterBW - 1U))
 8006e24:	f10e 3eff 	add.w	lr, lr, #4294967295
 8006e28:	4575      	cmp	r5, lr
        pHandle->index++;
 8006e2a:	bf34      	ite	cc
 8006e2c:	3501      	addcc	r5, #1
        pHandle->index = 0U;
 8006e2e:	2300      	movcs	r3, #0
      pHandle->_Super.AvBusVoltage_d = (uint16_t)wtemp;
 8006e30:	80e2      	strh	r2, [r4, #6]
      pHandle->_Super.LatestConv = hAux;
 8006e32:	80a0      	strh	r0, [r4, #4]
        pHandle->index++;
 8006e34:	bf34      	ite	cc
 8006e36:	f884 5025 	strbcc.w	r5, [r4, #37]	; 0x25
        pHandle->index = 0U;
 8006e3a:	f884 3025 	strbcs.w	r3, [r4, #37]	; 0x25
    pHandle->_Super.FaultState = RVBS_CheckFaultState(pHandle);
 8006e3e:	4620      	mov	r0, r4
 8006e40:	f7ff ffc2 	bl	8006dc8 <RVBS_CheckFaultState>
 8006e44:	8120      	strh	r0, [r4, #8]
}
 8006e46:	bd38      	pop	{r3, r4, r5, pc}

08006e48 <REMNG_Init>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->Ext = 0;
 8006e48:	2300      	movs	r3, #0
    pHandle->TargetFinal = 0;
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
    pHandle->ScalingFactor = 1U;
 8006e4a:	2201      	movs	r2, #1
    pHandle->TargetFinal = 0;
 8006e4c:	e9c0 3301 	strd	r3, r3, [r0, #4]
    pHandle->IncDecAmount = 0;
 8006e50:	e9c0 3303 	strd	r3, r3, [r0, #12]
    pHandle->ScalingFactor = 1U;
 8006e54:	6142      	str	r2, [r0, #20]
    FD_Init(& (pHandle->fd));
#endif
#ifdef NULL_RMP_EXT_MNG
  }
#endif
}
 8006e56:	4770      	bx	lr

08006e58 <REMNG_Calc>:
  else
  {
#endif
    int32_t current_ref;

    current_ref = pHandle->Ext;
 8006e58:	e9d0 3102 	ldrd	r3, r1, [r0, #8]

    /* Update the variable and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 8006e5c:	2901      	cmp	r1, #1
 8006e5e:	d90c      	bls.n	8006e7a <REMNG_Calc+0x22>
{
 8006e60:	b410      	push	{r4}
    {
      /* Increment/decrement the reference value. */
      current_ref += pHandle->IncDecAmount;
 8006e62:	e9d0 4204 	ldrd	r4, r2, [r0, #16]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep --;
 8006e66:	3901      	subs	r1, #1
      current_ref += pHandle->IncDecAmount;
 8006e68:	4423      	add	r3, r4
      pHandle->RampRemainingStep --;
 8006e6a:	60c1      	str	r1, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    pHandle->Ext = current_ref;
 8006e6c:	6083      	str	r3, [r0, #8]

#ifdef FASTDIV
    ret_val = FD_FastDiv(&(pHandle->fd), pHandle->Ext, ((int32_t)pHandle->ScalingFactor));
#else
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006e6e:	fb93 f2f2 	sdiv	r2, r3, r2
#endif
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (ret_val);
}
 8006e72:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006e76:	4610      	mov	r0, r2
 8006e78:	4770      	bx	lr
    else if (1U == pHandle->RampRemainingStep)
 8006e7a:	d005      	beq.n	8006e88 <REMNG_Calc+0x30>
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006e7c:	6942      	ldr	r2, [r0, #20]
    pHandle->Ext = current_ref;
 8006e7e:	6083      	str	r3, [r0, #8]
    ret_val = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006e80:	fb93 f2f2 	sdiv	r2, r3, r2
}
 8006e84:	4610      	mov	r0, r2
 8006e86:	4770      	bx	lr
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006e88:	6842      	ldr	r2, [r0, #4]
 8006e8a:	6943      	ldr	r3, [r0, #20]
      pHandle->RampRemainingStep = 0U;
 8006e8c:	2100      	movs	r1, #0
      current_ref = pHandle->TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006e8e:	fb02 f303 	mul.w	r3, r2, r3
      pHandle->RampRemainingStep = 0U;
 8006e92:	60c1      	str	r1, [r0, #12]
    pHandle->Ext = current_ref;
 8006e94:	6083      	str	r3, [r0, #8]
}
 8006e96:	4610      	mov	r0, r2
 8006e98:	4770      	bx	lr
 8006e9a:	bf00      	nop

08006e9c <REMNG_RampCompleted>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (0U == pHandle->RampRemainingStep)
 8006e9c:	68c0      	ldr	r0, [r0, #12]
#ifdef NULL_RMP_EXT_MNG
  }
#endif
  return (retVal);

}
 8006e9e:	fab0 f080 	clz	r0, r0
 8006ea2:	0940      	lsrs	r0, r0, #5
 8006ea4:	4770      	bx	lr
 8006ea6:	bf00      	nop

08006ea8 <getScalingFactor>:
  int32_t aux;
  uint8_t i;

  if (Target < 0)
  {
    aux = -Target;
 8006ea8:	2800      	cmp	r0, #0
 8006eaa:	bfb8      	it	lt
 8006eac:	4240      	neglt	r0, r0
{
 8006eae:	2301      	movs	r3, #1
  {
    TargetAbs = (uint32_t)Target;
  }
  for (i = 1U; i < 32U; i++)
  {
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8006eb0:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8006eb4:	e002      	b.n	8006ebc <getScalingFactor+0x14>
  for (i = 1U; i < 32U; i++)
 8006eb6:	3301      	adds	r3, #1
 8006eb8:	2b20      	cmp	r3, #32
 8006eba:	d007      	beq.n	8006ecc <getScalingFactor+0x24>
    uint32_t limit = (((uint32_t)1) << (31U - i));
 8006ebc:	fa21 f203 	lsr.w	r2, r1, r3
    if (TargetAbs >= limit)
 8006ec0:	4290      	cmp	r0, r2
 8006ec2:	d3f8      	bcc.n	8006eb6 <getScalingFactor+0xe>
    else
    {
      /* Nothing to do */
    }
  }
  return (((uint32_t)1) << (i - 1U));
 8006ec4:	3b01      	subs	r3, #1
 8006ec6:	2001      	movs	r0, #1
 8006ec8:	4098      	lsls	r0, r3
}
 8006eca:	4770      	bx	lr
 8006ecc:	f04f 4000 	mov.w	r0, #2147483648	; 0x80000000
 8006ed0:	4770      	bx	lr
 8006ed2:	bf00      	nop

08006ed4 <REMNG_ExecRamp>:
{
 8006ed4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ed8:	4605      	mov	r5, r0
 8006eda:	460e      	mov	r6, r1
    if (0U == Durationms)
 8006edc:	4614      	mov	r4, r2
 8006ede:	b95a      	cbnz	r2, 8006ef8 <REMNG_ExecRamp+0x24>
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8006ee0:	4608      	mov	r0, r1
 8006ee2:	f7ff ffe1 	bl	8006ea8 <getScalingFactor>
      pHandle->Ext = TargetFinal * ((int32_t)pHandle->ScalingFactor);
 8006ee6:	fb00 f606 	mul.w	r6, r0, r6
      pHandle->ScalingFactor = getScalingFactor(TargetFinal);
 8006eea:	6168      	str	r0, [r5, #20]
      pHandle->RampRemainingStep = 0U;
 8006eec:	e9c5 6402 	strd	r6, r4, [r5, #8]
      pHandle->IncDecAmount = 0;
 8006ef0:	612c      	str	r4, [r5, #16]
}
 8006ef2:	2001      	movs	r0, #1
 8006ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    current_ref = pHandle->Ext / ((int32_t)pHandle->ScalingFactor);
 8006ef8:	6943      	ldr	r3, [r0, #20]
 8006efa:	6887      	ldr	r7, [r0, #8]
 8006efc:	fb97 f7f3 	sdiv	r7, r7, r3
      uint32_t wScalingFactor = getScalingFactor(TargetFinal - current_ref);
 8006f00:	eba1 0807 	sub.w	r8, r1, r7
 8006f04:	4640      	mov	r0, r8
 8006f06:	f7ff ffcf 	bl	8006ea8 <getScalingFactor>
 8006f0a:	4682      	mov	sl, r0
      uint32_t wScalingFactor2 = getScalingFactor(current_ref);
 8006f0c:	4638      	mov	r0, r7
 8006f0e:	f7ff ffcb 	bl	8006ea8 <getScalingFactor>
 8006f12:	4681      	mov	r9, r0
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8006f14:	4630      	mov	r0, r6
 8006f16:	f7ff ffc7 	bl	8006ea8 <getScalingFactor>
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8006f1a:	682a      	ldr	r2, [r5, #0]
      pHandle->TargetFinal = TargetFinal;
 8006f1c:	606e      	str	r6, [r5, #4]
      if (wScalingFactor <  wScalingFactor2)
 8006f1e:	45ca      	cmp	sl, r9
      aux = Durationms * ((uint32_t)pHandle->FrequencyHz); /* Check for overflow and use prescaler */
 8006f20:	fb02 f404 	mul.w	r4, r2, r4
      aux /= 1000U;
 8006f24:	4a0c      	ldr	r2, [pc, #48]	; (8006f58 <REMNG_ExecRamp+0x84>)
      uint32_t wScalingFactor3 = getScalingFactor(TargetFinal);
 8006f26:	4603      	mov	r3, r0
        if (wScalingFactor < wScalingFactor3)
 8006f28:	bf2c      	ite	cs
 8006f2a:	4648      	movcs	r0, r9
 8006f2c:	4650      	movcc	r0, sl
        if (wScalingFactor2 < wScalingFactor3)
 8006f2e:	4298      	cmp	r0, r3
      aux /= 1000U;
 8006f30:	fba2 2404 	umull	r2, r4, r2, r4
 8006f34:	bf28      	it	cs
 8006f36:	4618      	movcs	r0, r3
 8006f38:	09a4      	lsrs	r4, r4, #6
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8006f3a:	fb00 f707 	mul.w	r7, r0, r7
      pHandle->RampRemainingStep++;
 8006f3e:	3401      	adds	r4, #1
      aux1 = (TargetFinal - current_ref) * ((int32_t)pHandle->ScalingFactor);
 8006f40:	fb00 f308 	mul.w	r3, r0, r8
      pHandle->ScalingFactor = wScalingFactorMin;
 8006f44:	6168      	str	r0, [r5, #20]
      pHandle->RampRemainingStep++;
 8006f46:	60ec      	str	r4, [r5, #12]
      pHandle->Ext = current_ref * ((int32_t)pHandle->ScalingFactor);
 8006f48:	60af      	str	r7, [r5, #8]
      aux1 /= ((int32_t)pHandle->RampRemainingStep);
 8006f4a:	fb93 f4f4 	sdiv	r4, r3, r4
}
 8006f4e:	2001      	movs	r0, #1
      pHandle->IncDecAmount = aux1;
 8006f50:	612c      	str	r4, [r5, #16]
}
 8006f52:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f56:	bf00      	nop
 8006f58:	10624dd3 	.word	0x10624dd3

08006f5c <RUC_Init>:
  * @param  pPWM: Pointer on the PWM structure.
  *  @retval none
  */
__weak void RUC_Init(RevUpCtrl_Handle_t *pHandle, SpeednTorqCtrl_Handle_t *pSTC, VirtualSpeedSensor_Handle_t *pVSS,
                     STO_Handle_t *pSNSL, PWMC_Handle_t *pPWM)
{
 8006f5c:	b410      	push	{r4}
  {
#endif
    RevUpCtrl_PhaseParams_t *pRUCPhaseParams = &pHandle->ParamsData[0];
    uint8_t bPhase = 0U;

    pHandle->pSTC = pSTC;
 8006f5e:	6681      	str	r1, [r0, #104]	; 0x68
    pHandle->EnteredZone1 = false;

    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
    {
      /* Dump HF data for now HF data are forced to 16 bits*/
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006f60:	6941      	ldr	r1, [r0, #20]
{
 8006f62:	9c01      	ldr	r4, [sp, #4]
    pHandle->pPWM = pPWM;
 8006f64:	6744      	str	r4, [r0, #116]	; 0x74
    pHandle->OTFSCLowside = false;
 8006f66:	f04f 0c00 	mov.w	ip, #0
    pHandle->pSNSL = pSNSL;
 8006f6a:	e9c0 231b 	strd	r2, r3, [r0, #108]	; 0x6c
    pHandle->OTFSCLowside = false;
 8006f6e:	f8a0 c054 	strh.w	ip, [r0, #84]	; 0x54
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006f72:	b301      	cbz	r1, 8006fb6 <RUC_Init+0x5a>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006f74:	688b      	ldr	r3, [r1, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006f76:	b30b      	cbz	r3, 8006fbc <RUC_Init+0x60>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006f78:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006f7a:	b30b      	cbz	r3, 8006fc0 <RUC_Init+0x64>
      pRUCPhaseParams = (RevUpCtrl_PhaseParams_t *)pRUCPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8006f7c:	689b      	ldr	r3, [r3, #8]
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006f7e:	b30b      	cbz	r3, 8006fc4 <RUC_Init+0x68>
 8006f80:	689b      	ldr	r3, [r3, #8]
      bPhase++;
 8006f82:	2105      	movs	r1, #5
    while ((pRUCPhaseParams != MC_NULL) && (bPhase < RUC_MAX_PHASE_NUMBER))
 8006f84:	b1c3      	cbz	r3, 8006fb8 <RUC_Init+0x5c>
 8006f86:	2204      	movs	r2, #4
 8006f88:	2105      	movs	r1, #5
    {
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;

      pHandle->bPhaseNbr = bPhase;

      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006f8a:	8803      	ldrh	r3, [r0, #0]
 8006f8c:	4c0e      	ldr	r4, [pc, #56]	; (8006fc8 <RUC_Init+0x6c>)
 8006f8e:	f04f 0c64 	mov.w	ip, #100	; 0x64
 8006f92:	fb0c f303 	mul.w	r3, ip, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006f96:	eb02 0242 	add.w	r2, r2, r2, lsl #1
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006f9a:	fba4 4303 	umull	r4, r3, r4, r3
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006f9e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8006fa2:	2400      	movs	r4, #0
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006fa4:	099b      	lsrs	r3, r3, #6
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006fa6:	6154      	str	r4, [r2, #20]
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 8006fa8:	f85d 4b04 	ldr.w	r4, [sp], #4
      pHandle->bPhaseNbr = bPhase;
 8006fac:	f880 1048 	strb.w	r1, [r0, #72]	; 0x48
      pHandle->bResetPLLTh = (uint8_t)((RUC_OTF_PLL_RESET_TIMEOUT * pHandle->hRUCFrequencyHz) / 1000U);
 8006fb0:	f880 3056 	strb.w	r3, [r0, #86]	; 0x56
}
 8006fb4:	4770      	bx	lr
      bPhase++;
 8006fb6:	2101      	movs	r1, #1
      pHandle->ParamsData[bPhase - 1u].pNext = MC_NULL;
 8006fb8:	1e4a      	subs	r2, r1, #1
 8006fba:	e7e6      	b.n	8006f8a <RUC_Init+0x2e>
      bPhase++;
 8006fbc:	2102      	movs	r1, #2
 8006fbe:	e7fb      	b.n	8006fb8 <RUC_Init+0x5c>
 8006fc0:	2103      	movs	r1, #3
 8006fc2:	e7f9      	b.n	8006fb8 <RUC_Init+0x5c>
 8006fc4:	2104      	movs	r1, #4
 8006fc6:	e7f7      	b.n	8006fb8 <RUC_Init+0x5c>
 8006fc8:	10624dd3 	.word	0x10624dd3

08006fcc <RUC_Clear>:
  * @param  hMotorDirection: rotor rotation direction.
  *         This parameter must be -1 or +1.
  *  @retval none
  */
__weak void RUC_Clear(RevUpCtrl_Handle_t *pHandle, int16_t hMotorDirection)
{
 8006fcc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    /* Nothing to do */
  }
  else
  {
#endif
    VirtualSpeedSensor_Handle_t *pVSS = pHandle->pVSS;
 8006fd0:	6ec7      	ldr	r7, [r0, #108]	; 0x6c
    SpeednTorqCtrl_Handle_t *pSTC = pHandle->pSTC;
 8006fd2:	f8d0 8068 	ldr.w	r8, [r0, #104]	; 0x68
    RevUpCtrl_PhaseParams_t *pPhaseParams = pHandle->ParamsData;

    pHandle->hDirection = hMotorDirection;
 8006fd6:	80c1      	strh	r1, [r0, #6]
    pHandle->EnteredZone1 = false;

    /*Initializes the rev up stages counter.*/
    pHandle->bStageCnt = 0U;
 8006fd8:	2600      	movs	r6, #0
{
 8006fda:	4604      	mov	r4, r0
    pHandle->bStageCnt = 0U;
 8006fdc:	f880 6058 	strb.w	r6, [r0, #88]	; 0x58
    pHandle->bOTFRelCounter = 0U;
 8006fe0:	f880 6053 	strb.w	r6, [r0, #83]	; 0x53
    pHandle->OTFSCLowside = false;
 8006fe4:	f8a0 6054 	strh.w	r6, [r0, #84]	; 0x54

    /* Calls the clear method of VSS.*/
    VSS_Clear(pVSS);
 8006fe8:	4638      	mov	r0, r7

    /* Sets the STC in torque mode.*/
    STC_SetControlMode(pSTC, STC_TORQUE_MODE);

    /* Sets the mechanical starting angle of VSS.*/
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8006fea:	b28d      	uxth	r5, r1
    VSS_Clear(pVSS);
 8006fec:	f000 fc80 	bl	80078f0 <VSS_Clear>
    STC_SetControlMode(pSTC, STC_TORQUE_MODE);
 8006ff0:	4631      	mov	r1, r6
 8006ff2:	4640      	mov	r0, r8
 8006ff4:	f000 f906 	bl	8007204 <STC_SetControlMode>
    VSS_SetMecAngle(pVSS, pHandle->hStartingMecAngle * hMotorDirection);
 8006ff8:	8861      	ldrh	r1, [r4, #2]
 8006ffa:	fb11 f105 	smulbb	r1, r1, r5
 8006ffe:	b209      	sxth	r1, r1
 8007000:	4638      	mov	r0, r7
 8007002:	f000 fd2d 	bl	8007a60 <VSS_SetMecAngle>

    /* Sets to zero the starting torque of STC */
    (void)STC_ExecRamp(pSTC, 0, 0U);
 8007006:	4632      	mov	r2, r6
 8007008:	4631      	mov	r1, r6
 800700a:	4640      	mov	r0, r8
 800700c:	f000 f8fe 	bl	800720c <STC_ExecRamp>

    /* Gives the first command to STC and VSS.*/
    (void)STC_ExecRamp(pSTC, pPhaseParams->hFinalTorque * hMotorDirection, (uint32_t)(pPhaseParams->hDurationms));
 8007010:	8a21      	ldrh	r1, [r4, #16]
 8007012:	89a2      	ldrh	r2, [r4, #12]
 8007014:	fb11 f105 	smulbb	r1, r1, r5
 8007018:	b209      	sxth	r1, r1
 800701a:	4640      	mov	r0, r8
 800701c:	f000 f8f6 	bl	800720c <STC_ExecRamp>

    VSS_SetMecAcceleration(pVSS, pPhaseParams->hFinalMecSpeedUnit * hMotorDirection, pPhaseParams->hDurationms);
 8007020:	89e1      	ldrh	r1, [r4, #14]
 8007022:	89a2      	ldrh	r2, [r4, #12]
 8007024:	fb11 f105 	smulbb	r1, r1, r5
 8007028:	b209      	sxth	r1, r1
 800702a:	4638      	mov	r0, r7
 800702c:	f000 fd20 	bl	8007a70 <VSS_SetMecAcceleration>

    /* Compute hPhaseRemainingTicks.*/
    pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pPhaseParams->hDurationms)
 8007030:	89a3      	ldrh	r3, [r4, #12]
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 8007032:	8821      	ldrh	r1, [r4, #0]
                                              / 1000U );
 8007034:	4a06      	ldr	r2, [pc, #24]	; (8007050 <RUC_Clear+0x84>)

    /*Set the next phases parameter pointer.*/
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5

    /*Timeout counter for PLL reset during OTF.*/
    pHandle->bResetPLLCnt = 0U;
 8007036:	f884 6057 	strb.w	r6, [r4, #87]	; 0x57
                                              * ((uint32_t)pHandle->hRUCFrequencyHz))
 800703a:	fb01 f303 	mul.w	r3, r1, r3
                                              / 1000U );
 800703e:	fba2 2303 	umull	r2, r3, r2, r3
 8007042:	099b      	lsrs	r3, r3, #6
    pHandle->pCurrentPhaseParams = (RevUpCtrl_PhaseParams_t *)pPhaseParams->pNext;  //cstat !MISRAC2012-Rule-11.5
 8007044:	6962      	ldr	r2, [r4, #20]
 8007046:	60a2      	str	r2, [r4, #8]
    pHandle->hPhaseRemainingTicks++;
 8007048:	3301      	adds	r3, #1
 800704a:	80a3      	strh	r3, [r4, #4]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
}
 800704c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007050:	10624dd3 	.word	0x10624dd3

08007054 <RUC_Exec>:
    retVal = false;
  }
  else
  {
#endif
    if (pHandle->hPhaseRemainingTicks > 0U)
 8007054:	8883      	ldrh	r3, [r0, #4]
{
 8007056:	b510      	push	{r4, lr}
 8007058:	4604      	mov	r4, r0
    if (pHandle->hPhaseRemainingTicks > 0U)
 800705a:	bb43      	cbnz	r3, 80070ae <RUC_Exec+0x5a>

    } /* hPhaseRemainingTicks > 0 */

    if (0U == pHandle->hPhaseRemainingTicks)
    {
      if (pHandle->pCurrentPhaseParams != MC_NULL)
 800705c:	68a0      	ldr	r0, [r4, #8]
 800705e:	b328      	cbz	r0, 80070ac <RUC_Exec+0x58>
      {
        /* If it becomes zero the current phase has been completed.*/
        /* Gives the next command to STC and VSS.*/
        (void)STC_ExecRamp(pHandle->pSTC, pHandle->pCurrentPhaseParams->hFinalTorque * pHandle->hDirection,
 8007060:	8881      	ldrh	r1, [r0, #4]
 8007062:	88e3      	ldrh	r3, [r4, #6]
 8007064:	8802      	ldrh	r2, [r0, #0]
 8007066:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 8007068:	fb11 f103 	smulbb	r1, r1, r3
 800706c:	b209      	sxth	r1, r1
 800706e:	f000 f8cd 	bl	800720c <STC_ExecRamp>
                           (uint32_t)(pHandle->pCurrentPhaseParams->hDurationms));

        VSS_SetMecAcceleration(pHandle->pVSS,
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 8007072:	68a3      	ldr	r3, [r4, #8]
 8007074:	88e0      	ldrh	r0, [r4, #6]
 8007076:	8859      	ldrh	r1, [r3, #2]
        VSS_SetMecAcceleration(pHandle->pVSS,
 8007078:	881a      	ldrh	r2, [r3, #0]
                               pHandle->pCurrentPhaseParams->hFinalMecSpeedUnit * pHandle->hDirection,
 800707a:	fb11 f100 	smulbb	r1, r1, r0
        VSS_SetMecAcceleration(pHandle->pVSS,
 800707e:	b209      	sxth	r1, r1
 8007080:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 8007082:	f000 fcf5 	bl	8007a70 <VSS_SetMecAcceleration>
                               pHandle->pCurrentPhaseParams->hDurationms);

        /* Compute hPhaseRemainingTicks.*/
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 8007086:	68a1      	ldr	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007088:	8820      	ldrh	r0, [r4, #0]
        pHandle->hPhaseRemainingTicks = (uint16_t)((((uint32_t)pHandle->pCurrentPhaseParams->hDurationms)
 800708a:	880b      	ldrh	r3, [r1, #0]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800708c:	4a0b      	ldr	r2, [pc, #44]	; (80070bc <RUC_Exec+0x68>)
        pHandle->hPhaseRemainingTicks++;

        /*Set the next phases parameter pointer.*/
        pHandle->pCurrentPhaseParams = pHandle->pCurrentPhaseParams->pNext; //cstat !MISRAC2012-Rule-11.5
 800708e:	6889      	ldr	r1, [r1, #8]
 8007090:	60a1      	str	r1, [r4, #8]
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 8007092:	fb00 f303 	mul.w	r3, r0, r3
 8007096:	fba2 2303 	umull	r2, r3, r2, r3

        /*Increases the rev up stages counter.*/
        pHandle->bStageCnt++;
 800709a:	f894 2058 	ldrb.w	r2, [r4, #88]	; 0x58
                                                  * ((uint32_t)pHandle->hRUCFrequencyHz)) / 1000U );
 800709e:	099b      	lsrs	r3, r3, #6
        pHandle->hPhaseRemainingTicks++;
 80070a0:	3301      	adds	r3, #1
        pHandle->bStageCnt++;
 80070a2:	3201      	adds	r2, #1
        pHandle->hPhaseRemainingTicks++;
 80070a4:	80a3      	strh	r3, [r4, #4]
        pHandle->bStageCnt++;
 80070a6:	f884 2058 	strb.w	r2, [r4, #88]	; 0x58
  bool retVal = true;
 80070aa:	2001      	movs	r0, #1
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 80070ac:	bd10      	pop	{r4, pc}
      pHandle->hPhaseRemainingTicks--;
 80070ae:	3b01      	subs	r3, #1
 80070b0:	b29b      	uxth	r3, r3
 80070b2:	8083      	strh	r3, [r0, #4]
    if (0U == pHandle->hPhaseRemainingTicks)
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d0d1      	beq.n	800705c <RUC_Exec+0x8>
  bool retVal = true;
 80070b8:	2001      	movs	r0, #1
}
 80070ba:	bd10      	pop	{r4, pc}
 80070bc:	10624dd3 	.word	0x10624dd3

080070c0 <RUC_FirstAccelerationStageReached>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (pHandle->bStageCnt >= pHandle->bFirstAccelerationStage)
 80070c0:	f890 2058 	ldrb.w	r2, [r0, #88]	; 0x58
 80070c4:	f890 0049 	ldrb.w	r0, [r0, #73]	; 0x49
    }
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retVal);
}
 80070c8:	4282      	cmp	r2, r0
 80070ca:	bf34      	ite	cc
 80070cc:	2000      	movcc	r0, #0
 80070ce:	2001      	movcs	r0, #1
 80070d0:	4770      	bx	lr
 80070d2:	bf00      	nop

080070d4 <RUC_SetPhase>:
  }
  else
  {
#endif
    pHandle->ParamsData[phaseNumber].hFinalTorque = phaseData->hFinalTorque;
    pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit = phaseData->hFinalMecSpeedUnit;
 80070d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80070d8:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 80070dc:	f8d2 c002 	ldr.w	ip, [r2, #2]
 80070e0:	f8c3 c00e 	str.w	ip, [r3, #14]
    pHandle->ParamsData[phaseNumber].hDurationms = phaseData->hDurationms;
 80070e4:	4618      	mov	r0, r3
 80070e6:	8813      	ldrh	r3, [r2, #0]
 80070e8:	8183      	strh	r3, [r0, #12]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 80070ea:	2001      	movs	r0, #1
 80070ec:	4770      	bx	lr
 80070ee:	bf00      	nop

080070f0 <RUC_GetNumberOfPhases>:
#ifdef NULL_PTR_REV_UP_CTL
  return ((MC_NULL == pHandle) ? 0U : (uint8_t)pHandle->bPhaseNbr);
#else
  return ((uint8_t)pHandle->bPhaseNbr);
#endif
}
 80070f0:	f890 0048 	ldrb.w	r0, [r0, #72]	; 0x48
 80070f4:	4770      	bx	lr
 80070f6:	bf00      	nop

080070f8 <RUC_GetPhase>:
  }
  else
  {
#endif
    phaseData->hFinalTorque = (int16_t)pHandle->ParamsData[phaseNumber].hFinalTorque;
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 80070f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80070fc:	0089      	lsls	r1, r1, #2
 80070fe:	f101 0308 	add.w	r3, r1, #8
 8007102:	4403      	add	r3, r0
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 8007104:	4401      	add	r1, r0
    phaseData->hFinalMecSpeedUnit = (int16_t)pHandle->ParamsData[phaseNumber].hFinalMecSpeedUnit;
 8007106:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800710a:	f8c2 3002 	str.w	r3, [r2, #2]
    phaseData->hDurationms = (uint16_t)pHandle->ParamsData[phaseNumber].hDurationms;
 800710e:	898b      	ldrh	r3, [r1, #12]
 8007110:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_REV_UP_CTL
  }
#endif
  return (retValue);
}
 8007112:	2001      	movs	r0, #1
 8007114:	4770      	bx	lr
 8007116:	bf00      	nop

08007118 <SPD_GetElAngle>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hElAngle);
#else
  return (pHandle->hElAngle);
#endif
}
 8007118:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 800711c:	4770      	bx	lr
 800711e:	bf00      	nop

08007120 <SPD_GetAvrgMecSpeedUnit>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->hAvrMecSpeedUnit);
#else
  return (pHandle->hAvrMecSpeedUnit);
#endif
}
 8007120:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8007124:	4770      	bx	lr
 8007126:	bf00      	nop

08007128 <SPD_GetInstElSpeedDpp>:
#ifdef NULL_PTR_SPD_POS_FBK
  return ((MC_NULL == pHandle) ? 0 : pHandle->InstantaneousElSpeedDpp);
#else
  return (pHandle->InstantaneousElSpeedDpp);
#endif
}
 8007128:	f9b0 0010 	ldrsh.w	r0, [r0, #16]
 800712c:	4770      	bx	lr
 800712e:	bf00      	nop

08007130 <SPD_IsMecSpeedReliable>:
    bool SpeedError = false;

    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;

    /* Compute absoulte value of mechanical speed */
    if (*pMecSpeedUnit < 0)
 8007130:	f9b1 3000 	ldrsh.w	r3, [r1]
    else
    {
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
    }

    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 8007134:	8a81      	ldrh	r1, [r0, #20]
{
 8007136:	b500      	push	{lr}
    if (*pMecSpeedUnit < 0)
 8007138:	2b00      	cmp	r3, #0
      hAux = -(*pMecSpeedUnit);
 800713a:	bfb8      	it	lt
 800713c:	425b      	neglt	r3, r3
    {
      SpeedError = true;
    }

    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800713e:	f8b0 e016 	ldrh.w	lr, [r0, #22]
    uint8_t bMaximumSpeedErrorsNumber = pHandle->bMaximumSpeedErrorsNumber;
 8007142:	f890 c003 	ldrb.w	ip, [r0, #3]
    bSpeedErrorNumber = pHandle->bSpeedErrorNumber;
 8007146:	7802      	ldrb	r2, [r0, #0]
      hAbsMecSpeedUnit = (uint16_t)(*pMecSpeedUnit);
 8007148:	b29b      	uxth	r3, r3
    if (hAbsMecSpeedUnit < pHandle->hMinReliableMecSpeedUnit)
 800714a:	459e      	cmp	lr, r3
 800714c:	d819      	bhi.n	8007182 <SPD_IsMecSpeedReliable+0x52>
    if (hAbsMecSpeedUnit > pHandle->hMaxReliableMecSpeedUnit)
 800714e:	4299      	cmp	r1, r3
 8007150:	bf2c      	ite	cs
 8007152:	2300      	movcs	r3, #0
 8007154:	2301      	movcc	r3, #1
    {
      SpeedError = true;
    }

    /* Compute absoulte value of mechanical acceleration */
    if (pHandle->hMecAccelUnitP < 0)
 8007156:	f9b0 1012 	ldrsh.w	r1, [r0, #18]
    else
    {
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
    }

    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 800715a:	f8b0 e018 	ldrh.w	lr, [r0, #24]
    if (pHandle->hMecAccelUnitP < 0)
 800715e:	2900      	cmp	r1, #0
      hAux = -(pHandle->hMecAccelUnitP);
 8007160:	bfb8      	it	lt
 8007162:	4249      	neglt	r1, r1
      hAbsMecAccelUnitP = (uint16_t)pHandle->hMecAccelUnitP;
 8007164:	b289      	uxth	r1, r1
    if (hAbsMecAccelUnitP > pHandle->hMaxReliableMecAccelUnitP)
 8007166:	458e      	cmp	lr, r1
 8007168:	d300      	bcc.n	800716c <SPD_IsMecSpeedReliable+0x3c>
    {
      SpeedError = true;
    }

    if (true == SpeedError)
 800716a:	b163      	cbz	r3, 8007186 <SPD_IsMecSpeedReliable+0x56>
    {
      if (bSpeedErrorNumber < bMaximumSpeedErrorsNumber)
 800716c:	4594      	cmp	ip, r2
 800716e:	d901      	bls.n	8007174 <SPD_IsMecSpeedReliable+0x44>
      {
        bSpeedErrorNumber++;
 8007170:	3201      	adds	r2, #1
 8007172:	b2d2      	uxtb	r2, r2
    if (bSpeedErrorNumber == bMaximumSpeedErrorsNumber)
    {
      SpeedSensorReliability = false;
    }

    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 8007174:	7002      	strb	r2, [r0, #0]
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (SpeedSensorReliability);
}
 8007176:	ebb2 000c 	subs.w	r0, r2, ip
 800717a:	bf18      	it	ne
 800717c:	2001      	movne	r0, #1
 800717e:	f85d fb04 	ldr.w	pc, [sp], #4
      SpeedError = true;
 8007182:	2301      	movs	r3, #1
 8007184:	e7e7      	b.n	8007156 <SPD_IsMecSpeedReliable+0x26>
        bSpeedErrorNumber = 0u;
 8007186:	4594      	cmp	ip, r2
 8007188:	bf88      	it	hi
 800718a:	2200      	movhi	r2, #0
    pHandle->bSpeedErrorNumber = bSpeedErrorNumber;
 800718c:	7002      	strb	r2, [r0, #0]
}
 800718e:	ebb2 000c 	subs.w	r0, r2, ip
 8007192:	bf18      	it	ne
 8007194:	2001      	movne	r0, #1
 8007196:	f85d fb04 	ldr.w	pc, [sp], #4
 800719a:	bf00      	nop

0800719c <SPD_GetS16Speed>:
  }
  else
  {
#endif
    int32_t wAux = (int32_t)pHandle->hAvrMecSpeedUnit;
    wAux *= INT16_MAX;
 800719c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80071a0:	f9b0 0014 	ldrsh.w	r0, [r0, #20]
    wAux *= INT16_MAX;
 80071a4:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
    wAux /= (int16_t)pHandle->hMaxReliableMecSpeedUnit;
 80071a8:	fb93 f0f0 	sdiv	r0, r3, r0
    tempValue = (int16_t)wAux;
#ifdef NULL_PTR_SPD_POS_FBK
  }
#endif
  return (tempValue);
}
 80071ac:	b200      	sxth	r0, r0
 80071ae:	4770      	bx	lr

080071b0 <STC_Init>:
  {
#endif
    pHandle->PISpeed = pPI;
    pHandle->SPD = SPD_Handle;
    pHandle->Mode = pHandle->ModeDefault;
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80071b0:	f9b0 c02c 	ldrsh.w	ip, [r0, #44]	; 0x2c
    pHandle->PISpeed = pPI;
 80071b4:	6101      	str	r1, [r0, #16]
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80071b6:	f9b0 102e 	ldrsh.w	r1, [r0, #46]	; 0x2e
    pHandle->SPD = SPD_Handle;
 80071ba:	6142      	str	r2, [r0, #20]
{
 80071bc:	b410      	push	{r4}
    pHandle->Mode = pHandle->ModeDefault;
 80071be:	f890 402a 	ldrb.w	r4, [r0, #42]	; 0x2a
 80071c2:	7004      	strb	r4, [r0, #0]
    pHandle->TargetFinal = 0;
 80071c4:	2300      	movs	r3, #0
    pHandle->SpeedRefUnitExt = ((int32_t)pHandle->MecSpeedRefUnitDefault) * 65536;
 80071c6:	ea4f 440c 	mov.w	r4, ip, lsl #16
    pHandle->TorqueRef = ((int32_t)pHandle->TorqueRefDefault) * 65536;
 80071ca:	0409      	lsls	r1, r1, #16
 80071cc:	e9c0 4101 	strd	r4, r1, [r0, #4]
    pHandle->TargetFinal = 0;
 80071d0:	8043      	strh	r3, [r0, #2]
    pHandle->RampRemainingStep = 0U;
    pHandle->IncDecAmount = 0;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80071d2:	f85d 4b04 	ldr.w	r4, [sp], #4
    pHandle->RampRemainingStep = 0U;
 80071d6:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 80071d8:	6183      	str	r3, [r0, #24]
}
 80071da:	4770      	bx	lr

080071dc <STC_SetSpeedSensor>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SPD = SPD_Handle;
 80071dc:	6141      	str	r1, [r0, #20]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80071de:	4770      	bx	lr

080071e0 <STC_GetSpeedSensor>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL ==  pHandle) ? MC_NULL : pHandle->SPD);
#else
  return (pHandle->SPD);
#endif
}
 80071e0:	6940      	ldr	r0, [r0, #20]
 80071e2:	4770      	bx	lr

080071e4 <STC_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    if (STC_SPEED_MODE == pHandle->Mode)
 80071e4:	7803      	ldrb	r3, [r0, #0]
 80071e6:	2b01      	cmp	r3, #1
 80071e8:	d000      	beq.n	80071ec <STC_Clear+0x8>
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 80071ea:	4770      	bx	lr
      PID_SetIntegralTerm(pHandle->PISpeed, 0);
 80071ec:	6900      	ldr	r0, [r0, #16]
 80071ee:	2100      	movs	r1, #0
 80071f0:	f7fe bf96 	b.w	8006120 <PID_SetIntegralTerm>

080071f4 <STC_GetMecSpeedRefUnit>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->SpeedRefUnitExt / 65536));
#else
  return ((int16_t)(pHandle->SpeedRefUnitExt / 65536));
#endif
#endif
}
 80071f4:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop

080071fc <STC_GetTorqueRef>:
  return ((MC_NULL == pHandle) ? 0 : (int16_t)(pHandle->TorqueRef / 65536));
#else
  return ((int16_t)(pHandle->TorqueRef / 65536));
#endif
#endif
}
 80071fc:	f9b0 000a 	ldrsh.w	r0, [r0, #10]
 8007200:	4770      	bx	lr
 8007202:	bf00      	nop

08007204 <STC_SetControlMode>:
  }
  else
  {
#endif
    pHandle->Mode = bMode;
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007204:	2300      	movs	r3, #0
    pHandle->Mode = bMode;
 8007206:	7001      	strb	r1, [r0, #0]
    pHandle->RampRemainingStep = 0u; /* Interrupts previous ramp. */
 8007208:	60c3      	str	r3, [r0, #12]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800720a:	4770      	bx	lr

0800720c <STC_ExecRamp>:
  *         application torque or below min application speed depending on
  *         current modality of TSC) in this case the command is ignored and the
  *         previous ramp is not interrupted, otherwise it returns true.
  */
__weak bool STC_ExecRamp(SpeednTorqCtrl_Handle_t *pHandle, int16_t hTargetFinal, uint32_t hDurationms)
{
 800720c:	b570      	push	{r4, r5, r6, lr}
    uint32_t wAux;
    int32_t wAux1;
    int16_t hCurrentReference;

    /* Check if the hTargetFinal is out of the bound of application. */
    if (STC_TORQUE_MODE == pHandle->Mode)
 800720e:	7803      	ldrb	r3, [r0, #0]
{
 8007210:	4604      	mov	r4, r0
 8007212:	460d      	mov	r5, r1
 8007214:	4616      	mov	r6, r2
    if (STC_TORQUE_MODE == pHandle->Mode)
 8007216:	b1f3      	cbz	r3, 8007256 <STC_ExecRamp+0x4a>
#else
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt / 65536);
#endif

#ifdef CHECK_BOUNDARY
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 8007218:	8bc3      	ldrh	r3, [r0, #30]
      hCurrentReference = (int16_t)(pHandle->SpeedRefUnitExt >> 16);
 800721a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxAppPositiveMecSpeedUnit)
 800721e:	4299      	cmp	r1, r3
 8007220:	dd01      	ble.n	8007226 <STC_ExecRamp+0x1a>
        allowedRange = false;
 8007222:	2000      	movs	r0, #0
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (allowedRange);
}
 8007224:	bd70      	pop	{r4, r5, r6, pc}
      else if (hTargetFinal < pHandle->MinAppNegativeMecSpeedUnit)
 8007226:	f9b4 3024 	ldrsh.w	r3, [r4, #36]	; 0x24
 800722a:	428b      	cmp	r3, r1
 800722c:	dcf9      	bgt.n	8007222 <STC_ExecRamp+0x16>
      else if ((int32_t)hTargetFinal < (int32_t)pHandle->MinAppPositiveMecSpeedUnit)
 800722e:	8c23      	ldrh	r3, [r4, #32]
 8007230:	4299      	cmp	r1, r3
 8007232:	da03      	bge.n	800723c <STC_ExecRamp+0x30>
        if (hTargetFinal > pHandle->MaxAppNegativeMecSpeedUnit)
 8007234:	f9b4 3022 	ldrsh.w	r3, [r4, #34]	; 0x22
 8007238:	428b      	cmp	r3, r1
 800723a:	dbf2      	blt.n	8007222 <STC_ExecRamp+0x16>
      if (0U == hDurationms)
 800723c:	b9ae      	cbnz	r6, 800726a <STC_ExecRamp+0x5e>
        if (STC_SPEED_MODE == pHandle->Mode)
 800723e:	7823      	ldrb	r3, [r4, #0]
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8007240:	042d      	lsls	r5, r5, #16
        if (STC_SPEED_MODE == pHandle->Mode)
 8007242:	2b01      	cmp	r3, #1
        pHandle->RampRemainingStep = 0U;
 8007244:	f04f 0300 	mov.w	r3, #0
          pHandle->SpeedRefUnitExt = ((int32_t)hTargetFinal) * 65536;
 8007248:	bf0c      	ite	eq
 800724a:	6065      	streq	r5, [r4, #4]
          pHandle->TorqueRef = ((int32_t)hTargetFinal) * 65536;
 800724c:	60a5      	strne	r5, [r4, #8]
        pHandle->RampRemainingStep = 0U;
 800724e:	60e3      	str	r3, [r4, #12]
        pHandle->IncDecAmount = 0;
 8007250:	61a3      	str	r3, [r4, #24]
 8007252:	2001      	movs	r0, #1
}
 8007254:	bd70      	pop	{r4, r5, r6, pc}
      hCurrentReference = STC_GetTorqueRef(pHandle);
 8007256:	f7ff ffd1 	bl	80071fc <STC_GetTorqueRef>
      if ((int32_t)hTargetFinal > (int32_t)pHandle->MaxPositiveTorque)
 800725a:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 800725c:	429d      	cmp	r5, r3
 800725e:	dce0      	bgt.n	8007222 <STC_ExecRamp+0x16>
      if ((int32_t)hTargetFinal < (int32_t)pHandle->MinNegativeTorque)
 8007260:	f9b4 3028 	ldrsh.w	r3, [r4, #40]	; 0x28
 8007264:	42ab      	cmp	r3, r5
 8007266:	dcdc      	bgt.n	8007222 <STC_ExecRamp+0x16>
 8007268:	e7e8      	b.n	800723c <STC_ExecRamp+0x30>
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800726a:	8ba3      	ldrh	r3, [r4, #28]
        pHandle->TargetFinal = hTargetFinal;
 800726c:	8065      	strh	r5, [r4, #2]
        wAux = ((uint32_t)hDurationms) * ((uint32_t)pHandle->STCFrequencyHz);
 800726e:	fb06 f303 	mul.w	r3, r6, r3
        wAux /= 1000U;
 8007272:	4e06      	ldr	r6, [pc, #24]	; (800728c <STC_ExecRamp+0x80>)
 8007274:	fba6 2303 	umull	r2, r3, r6, r3
 8007278:	099b      	lsrs	r3, r3, #6
        pHandle->RampRemainingStep++;
 800727a:	3301      	adds	r3, #1
        wAux1 = (((int32_t)hTargetFinal) - ((int32_t)hCurrentReference)) * 65536;
 800727c:	1a28      	subs	r0, r5, r0
 800727e:	0400      	lsls	r0, r0, #16
        pHandle->RampRemainingStep++;
 8007280:	60e3      	str	r3, [r4, #12]
        wAux1 /= ((int32_t)pHandle->RampRemainingStep);
 8007282:	fb90 f0f3 	sdiv	r0, r0, r3
        pHandle->IncDecAmount = wAux1;
 8007286:	61a0      	str	r0, [r4, #24]
 8007288:	2001      	movs	r0, #1
}
 800728a:	bd70      	pop	{r4, r5, r6, pc}
 800728c:	10624dd3 	.word	0x10624dd3

08007290 <STC_StopRamp>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->RampRemainingStep = 0U;
 8007290:	2300      	movs	r3, #0
 8007292:	60c3      	str	r3, [r0, #12]
    pHandle->IncDecAmount = 0;
 8007294:	6183      	str	r3, [r0, #24]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 8007296:	4770      	bx	lr

08007298 <STC_CalcTorqueReference>:
  *         To convert current expressed in Amps to current expressed in digit
  *         is possible to use the formula:
  *         Current(digit) = [Current(Amp) * 65536 * Rshunt * Aop]  /  Vdd micro
  */
__weak int16_t STC_CalcTorqueReference(SpeednTorqCtrl_Handle_t *pHandle)
{
 8007298:	b538      	push	{r3, r4, r5, lr}
    int16_t hTargetSpeed;
    int16_t hError;

    if (STC_TORQUE_MODE == pHandle->Mode)
    {
      wCurrentReference = pHandle->TorqueRef;
 800729a:	e9d0 5101 	ldrd	r5, r1, [r0, #4]
    if (STC_TORQUE_MODE == pHandle->Mode)
 800729e:	7802      	ldrb	r2, [r0, #0]
      wCurrentReference = pHandle->SpeedRefUnitExt;
    }

    /* Update the speed reference or the torque reference according to the mode
       and terminates the ramp if needed. */
    if (pHandle->RampRemainingStep > 1U)
 80072a0:	68c3      	ldr	r3, [r0, #12]
      wCurrentReference = pHandle->TorqueRef;
 80072a2:	2a00      	cmp	r2, #0
 80072a4:	bf08      	it	eq
 80072a6:	460d      	moveq	r5, r1
    if (pHandle->RampRemainingStep > 1U)
 80072a8:	2b01      	cmp	r3, #1
{
 80072aa:	4604      	mov	r4, r0
    if (pHandle->RampRemainingStep > 1U)
 80072ac:	d908      	bls.n	80072c0 <STC_CalcTorqueReference+0x28>
    {
      /* Increment/decrement the reference value. */
      wCurrentReference += pHandle->IncDecAmount;
 80072ae:	6981      	ldr	r1, [r0, #24]

      /* Decrement the number of remaining steps */
      pHandle->RampRemainingStep--;
 80072b0:	3b01      	subs	r3, #1
      wCurrentReference += pHandle->IncDecAmount;
 80072b2:	440d      	add	r5, r1
      pHandle->RampRemainingStep--;
 80072b4:	60c3      	str	r3, [r0, #12]
    else
    {
      /* Do nothing. */
    }

    if (STC_SPEED_MODE == pHandle->Mode)
 80072b6:	2a01      	cmp	r2, #1
 80072b8:	d00b      	beq.n	80072d2 <STC_CalcTorqueReference+0x3a>
      pHandle->SpeedRefUnitExt = wCurrentReference;
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
    }
    else
    {
      pHandle->TorqueRef = wCurrentReference;
 80072ba:	60a5      	str	r5, [r4, #8]
#ifndef FULL_MISRA_C_COMPLIANCY_SPD_TORQ_CTRL
      //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hTorqueReference = (int16_t)(wCurrentReference >> 16);
 80072bc:	1428      	asrs	r0, r5, #16
    }
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (hTorqueReference);
}
 80072be:	bd38      	pop	{r3, r4, r5, pc}
    else if (1U == pHandle->RampRemainingStep)
 80072c0:	d1f9      	bne.n	80072b6 <STC_CalcTorqueReference+0x1e>
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80072c2:	f9b0 5002 	ldrsh.w	r5, [r0, #2]
      pHandle->RampRemainingStep = 0U;
 80072c6:	2300      	movs	r3, #0
    if (STC_SPEED_MODE == pHandle->Mode)
 80072c8:	2a01      	cmp	r2, #1
      wCurrentReference = ((int32_t)pHandle->TargetFinal) * 65536;
 80072ca:	ea4f 4505 	mov.w	r5, r5, lsl #16
      pHandle->RampRemainingStep = 0U;
 80072ce:	60c3      	str	r3, [r0, #12]
    if (STC_SPEED_MODE == pHandle->Mode)
 80072d0:	d1f3      	bne.n	80072ba <STC_CalcTorqueReference+0x22>
      hMeasuredSpeed = SPD_GetAvrgMecSpeedUnit(pHandle->SPD);
 80072d2:	6960      	ldr	r0, [r4, #20]
 80072d4:	f7ff ff24 	bl	8007120 <SPD_GetAvrgMecSpeedUnit>
      hError = hTargetSpeed - hMeasuredSpeed;
 80072d8:	ebc0 4125 	rsb	r1, r0, r5, asr #16
      hTorqueReference = PI_Controller(pHandle->PISpeed, (int32_t)hError);
 80072dc:	b209      	sxth	r1, r1
 80072de:	6920      	ldr	r0, [r4, #16]
 80072e0:	f7fe ff52 	bl	8006188 <PI_Controller>
      pHandle->TorqueRef = ((int32_t)hTorqueReference) * 65536;
 80072e4:	0403      	lsls	r3, r0, #16
 80072e6:	e9c4 5301 	strd	r5, r3, [r4, #4]
}
 80072ea:	bd38      	pop	{r3, r4, r5, pc}

080072ec <STC_GetMecSpeedRefUnitDefault>:
#ifdef NULL_PTR_SPD_TRQ_CTL
  return ((MC_NULL == pHandle) ? 0 : pHandle->MecSpeedRefUnitDefault);
#else
  return (pHandle->MecSpeedRefUnitDefault);
#endif
}
 80072ec:	f9b0 002c 	ldrsh.w	r0, [r0, #44]	; 0x2c
 80072f0:	4770      	bx	lr
 80072f2:	bf00      	nop

080072f4 <STC_GetDefaultIqdref>:
    IqdRefDefault.d = 0;
  }
  else
  {
#endif
    IqdRefDefault.q = pHandle->TorqueRefDefault;
 80072f4:	f8d0 302e 	ldr.w	r3, [r0, #46]	; 0x2e
    IqdRefDefault.d = pHandle->IdrefDefault;
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
  return (IqdRefDefault);
 80072f8:	2200      	movs	r2, #0
 80072fa:	b299      	uxth	r1, r3
 80072fc:	f361 020f 	bfi	r2, r1, #0, #16
 8007300:	0c1b      	lsrs	r3, r3, #16
 8007302:	f363 421f 	bfi	r2, r3, #16, #16
{
 8007306:	b082      	sub	sp, #8
}
 8007308:	4610      	mov	r0, r2
 800730a:	b002      	add	sp, #8
 800730c:	4770      	bx	lr
 800730e:	bf00      	nop

08007310 <STC_ForceSpeedReferenceToCurrentSpeed>:
  *         at the START_RUN state to initialize the speed reference.
  * @param  pHandle: handler of the current instance of the SpeednTorqCtrl component
  * @retval none
  */
__weak void STC_ForceSpeedReferenceToCurrentSpeed(SpeednTorqCtrl_Handle_t *pHandle)
{
 8007310:	b510      	push	{r4, lr}
 8007312:	4604      	mov	r4, r0
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->SpeedRefUnitExt = ((int32_t)SPD_GetAvrgMecSpeedUnit(pHandle->SPD)) * (int32_t)65536;
 8007314:	6940      	ldr	r0, [r0, #20]
 8007316:	f7ff ff03 	bl	8007120 <SPD_GetAvrgMecSpeedUnit>
 800731a:	0400      	lsls	r0, r0, #16
 800731c:	6060      	str	r0, [r4, #4]
#ifdef NULL_PTR_SPD_TRQ_CTL
  }
#endif
}
 800731e:	bd10      	pop	{r4, pc}

08007320 <STO_PLL_CalcElAngle>:
  * @param  pHandle: handler of the current instance of the STO component
  * @param  pInputVars_str pointer to the observer inputs structure
  * @retval int16_t rotor electrical angle (s16Degrees)
  */
__weak int16_t STO_PLL_CalcElAngle(STO_PLL_Handle_t *pHandle, Observer_Inputs_t *pInputs)
{
 8007320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  int16_t retValue;

  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8007324:	4604      	mov	r4, r0
{
 8007326:	b087      	sub	sp, #28
  if ((MC_NULL == pHandle) || (MC_NULL == pInputs))
 8007328:	2800      	cmp	r0, #0
 800732a:	f000 80cc 	beq.w	80074c6 <STO_PLL_CalcElAngle+0x1a6>
 800732e:	2900      	cmp	r1, #0
 8007330:	f000 80cc 	beq.w	80074cc <STO_PLL_CalcElAngle+0x1ac>
    int16_t hIbeta_err;
    int16_t hRotor_Speed;
    int16_t hValfa;
    int16_t hVbeta;

    if (pHandle->wBemf_alfa_est > (((int32_t)pHandle->hF2) * INT16_MAX))
 8007334:	f9b0 302e 	ldrsh.w	r3, [r0, #46]	; 0x2e
 8007338:	6e87      	ldr	r7, [r0, #104]	; 0x68
 800733a:	ebc3 32c3 	rsb	r2, r3, r3, lsl #15
 800733e:	4297      	cmp	r7, r2
 8007340:	ea4f 30c3 	mov.w	r0, r3, lsl #15
 8007344:	f340 80dd 	ble.w	8007502 <STO_PLL_CalcElAngle+0x1e2>
    {
      pHandle->wBemf_alfa_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8007348:	66a2      	str	r2, [r4, #104]	; 0x68
 800734a:	4617      	mov	r7, r2
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 800734c:	f8b4 511e 	ldrh.w	r5, [r4, #286]	; 0x11e
#else
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est / pHandle->hF2);
#endif

    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 8007350:	6ee6      	ldr	r6, [r4, #108]	; 0x6c
 8007352:	9601      	str	r6, [sp, #4]
      hAux_Alfa = (int16_t)(pHandle->wBemf_alfa_est >> pHandle->F2LOG);
 8007354:	fa47 f605 	asr.w	r6, r7, r5
 8007358:	9602      	str	r6, [sp, #8]
 800735a:	fa0f fe86 	sxth.w	lr, r6
    if (pHandle->wBemf_beta_est > (INT16_MAX * ((int32_t)pHandle->hF2)))
 800735e:	9e01      	ldr	r6, [sp, #4]
 8007360:	42b2      	cmp	r2, r6
 8007362:	f280 80c8 	bge.w	80074f6 <STO_PLL_CalcElAngle+0x1d6>
    {
      pHandle->wBemf_beta_est = INT16_MAX * ((int32_t)pHandle->hF2);
 8007366:	66e2      	str	r2, [r4, #108]	; 0x6c
 8007368:	9201      	str	r2, [sp, #4]
    {
      /* Nothing to do */
    }
#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
    //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800736a:	9b01      	ldr	r3, [sp, #4]
#else
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est / pHandle->hF2);
#endif

    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800736c:	f8d4 9060 	ldr.w	r9, [r4, #96]	; 0x60
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 8007370:	fa43 f505 	asr.w	r5, r3, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007374:	f9b4 302c 	ldrsh.w	r3, [r4, #44]	; 0x2c
 8007378:	ebc3 32c3 	rsb	r2, r3, r3, lsl #15
 800737c:	4591      	cmp	r9, r2
    hAux_Beta = (int16_t)(pHandle->wBemf_beta_est >> pHandle->F2LOG);
 800737e:	fa0f fc85 	sxth.w	ip, r5
    if (pHandle->Ialfa_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 8007382:	ea4f 30c3 	mov.w	r0, r3, lsl #15
 8007386:	f340 80ae 	ble.w	80074e6 <STO_PLL_CalcElAngle+0x1c6>
    {
      pHandle->Ialfa_est = INT16_MAX * ((int32_t)pHandle->hF1);
 800738a:	6622      	str	r2, [r4, #96]	; 0x60
 800738c:	4691      	mov	r9, r2
    else
    {
      /* Nothing to do */
    }

    if (pHandle->Ibeta_est > (INT16_MAX * ((int32_t)pHandle->hF1)))
 800738e:	f8d4 8064 	ldr.w	r8, [r4, #100]	; 0x64
 8007392:	4542      	cmp	r2, r8
 8007394:	f280 80a1 	bge.w	80074da <STO_PLL_CalcElAngle+0x1ba>
    {
      pHandle->Ibeta_est = INT16_MAX * ((int32_t)pHandle->hF1);
 8007398:	6662      	str	r2, [r4, #100]	; 0x64
 800739a:	4690      	mov	r8, r2
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hIalfa_err = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 800739c:	888b      	ldrh	r3, [r1, #4]
    hIbeta_err = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif

    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 800739e:	8908      	ldrh	r0, [r1, #8]
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80073a0:	f8ad 300c 	strh.w	r3, [sp, #12]
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80073a4:	f9b1 3000 	ldrsh.w	r3, [r1]
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80073a8:	f8b1 a006 	ldrh.w	sl, [r1, #6]
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80073ac:	f8b4 211c 	ldrh.w	r2, [r4, #284]	; 0x11c
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
#else
    hValfa = (int16_t)(wAux / 65536);
#endif

    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 80073b0:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
    hAux = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
#else
    hAux = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

    wAux = ((int32_t)pHandle->hC1) * hAux;
 80073b4:	f9b4 b020 	ldrsh.w	fp, [r4, #32]
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
    wBemf_beta_est_Next -= wAux;

    /*Calls the PLL blockset*/
    pHandle->hBemf_alfa_est = hAux_Alfa;
    pHandle->hBemf_beta_est = hAux_Beta;
 80073b8:	f8a4 c072 	strh.w	ip, [r4, #114]	; 0x72
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.alpha;
 80073bc:	fb00 f303 	mul.w	r3, r0, r3
    hValfa = (int16_t)(wAux >> 16); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 80073c0:	141e      	asrs	r6, r3, #16
    wAux = ((int32_t)pInputs->Vbus) * pInputs->Valfa_beta.beta;
 80073c2:	fb01 f000 	mul.w	r0, r1, r0
    hIalfa_err = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 80073c6:	fa49 f302 	asr.w	r3, r9, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80073ca:	9903      	ldr	r1, [sp, #12]
    pHandle->hBemf_alfa_est = hAux_Alfa;
 80073cc:	f8a4 e070 	strh.w	lr, [r4, #112]	; 0x70
    hIbeta_err = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 80073d0:	fa48 f202 	asr.w	r2, r8, r2
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80073d4:	eba2 0a0a 	sub.w	sl, r2, sl
    wAux = ((int32_t)pHandle->hC1) * hAux;
 80073d8:	fb12 f20b 	smulbb	r2, r2, fp
    wIbeta_est_Next = pHandle->Ibeta_est - wAux;
 80073dc:	eba8 0202 	sub.w	r2, r8, r2
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80073e0:	1a59      	subs	r1, r3, r1
    wAux = ((int32_t)pHandle->hC2) * hIalfa_err;
 80073e2:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
    wAux = ((int32_t)pHandle->hC1) * hAux;
 80073e6:	fb13 f30b 	smulbb	r3, r3, fp
    wIalfa_est_Next = pHandle->Ialfa_est - wAux;
 80073ea:	eba9 0303 	sub.w	r3, r9, r3
    wAux = ((int32_t)pHandle->hC5) * hValfa;
 80073ee:	f9b4 b028 	ldrsh.w	fp, [r4, #40]	; 0x28
    wAux = wAux * pHandle->hC6;
 80073f2:	f9b4 902a 	ldrsh.w	r9, [r4, #42]	; 0x2a
    hIalfa_err = hIalfa_err - pInputs->Ialfa_beta.alpha;
 80073f6:	b209      	sxth	r1, r1
    hIbeta_err = hIbeta_err - pInputs->Ialfa_beta.beta;
 80073f8:	fa0f fa8a 	sxth.w	sl, sl
    wIalfa_est_Next += wAux;
 80073fc:	fb08 3301 	mla	r3, r8, r1, r3
    hVbeta = ( int16_t ) ( wAux >> 16 ); //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007400:	1400      	asrs	r0, r0, #16
    wIbeta_est_Next += wAux;
 8007402:	fb08 280a 	mla	r8, r8, sl, r2
    wIalfa_est_Next += wAux;
 8007406:	fb0b 3306 	mla	r3, fp, r6, r3
    wIbeta_est_Next += wAux;
 800740a:	fb0b 8800 	mla	r8, fp, r0, r8
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 800740e:	9e01      	ldr	r6, [sp, #4]
    wAux = ((int32_t)pHandle->hC4) * hIalfa_err;
 8007410:	f9b4 0026 	ldrsh.w	r0, [r4, #38]	; 0x26
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007414:	8e62      	ldrh	r2, [r4, #50]	; 0x32
    wBemf_beta_est_Next = pHandle->wBemf_beta_est + wAux;
 8007416:	fb00 6a0a 	mla	sl, r0, sl, r6
    wAux = ((int32_t)pHandle->hC3) * hAux_Alfa;
 800741a:	f9b4 6024 	ldrsh.w	r6, [r4, #36]	; 0x24
    wBemf_alfa_est_Next = pHandle->wBemf_alfa_est + wAux;
 800741e:	fb01 7100 	mla	r1, r1, r0, r7
    wIalfa_est_Next -= wAux;
 8007422:	fb06 371e 	mls	r7, r6, lr, r3

    if (0 == pHandle->hForcedDirection)
 8007426:	f994 0124 	ldrsb.w	r0, [r4, #292]	; 0x124
    wAux = pHandle->_Super.hElSpeedDpp * wAux;
 800742a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
    wIbeta_est_Next -= wAux;
 800742e:	fb06 861c 	mls	r6, r6, ip, r8
    wAux = (int32_t)hAux_Beta >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007432:	fa4c fc02 	asr.w	ip, ip, r2
    wAux = (int32_t)hAux_Alfa >> pHandle->F3POW2; //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
 8007436:	fa4e f202 	asr.w	r2, lr, r2
    wAux = wAux * pHandle->hC6;
 800743a:	fb0c fc09 	mul.w	ip, ip, r9
    wAux = wAux * pHandle->hC6;
 800743e:	fb02 f209 	mul.w	r2, r2, r9
    wBemf_alfa_est_Next += wAux;
 8007442:	fb0c 1803 	mla	r8, ip, r3, r1
    wBemf_beta_est_Next -= wAux;
 8007446:	fb02 aa13 	mls	sl, r2, r3, sl
    if (0 == pHandle->hForcedDirection)
 800744a:	2800      	cmp	r0, #0
 800744c:	d142      	bne.n	80074d4 <STO_PLL_CalcElAngle+0x1b4>
    {
      /* we are in auxiliary mode, then rely on the speed detected */
      if(pHandle->_Super.hElSpeedDpp >= 0)
 800744e:	2b00      	cmp	r3, #0
 8007450:	f64f 79ff 	movw	r9, #65535	; 0xffff
 8007454:	bfa8      	it	ge
 8007456:	f04f 0901 	movge.w	r9, #1
  Trig_Components Local_Components;
  int16_t hAux1;
  int16_t hAux2;
  int16_t hOutput;

  Local_Components = MCM_Trig_Functions(pHandle->_Super.hElAngle);
 800745a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 800745e:	f7fa fa9d 	bl	800199c <MCM_Trig_Functions>
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8007462:	9b02      	ldr	r3, [sp, #8]
    hAux_Beta = (int16_t)(hAux_Beta * wDirection);
 8007464:	fb15 f509 	smulbb	r5, r5, r9
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 8007468:	fb13 f109 	smulbb	r1, r3, r9
    hRotor_Speed = STO_ExecutePLL(pHandle, hAux_Alfa, -hAux_Beta);
 800746c:	426d      	negs	r5, r5

  /* Alfa & Beta BEMF multiplied by Cos & Sin*/
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
  wBeta_Cos_tmp = ((int32_t )hBemf_beta_est) * ((int32_t )Local_Components.hCos);
 800746e:	fb10 f505 	smulbb	r5, r0, r5
  wAlfa_Sin_tmp = ((int32_t )hBemf_alfa_est) * ((int32_t )Local_Components.hSin);
 8007472:	fb10 f021 	smultb	r0, r0, r1
#else
  hAux2 = (int16_t)(wAlfa_Sin_tmp / 32768);
#endif

  /* Speed PI regulator */
  hOutput = PI_Controller(& pHandle->PIRegulator, (int32_t)(hAux1 ) - hAux2);
 8007476:	f340 31cf 	sbfx	r1, r0, #15, #16
 800747a:	f345 35cf 	sbfx	r5, r5, #15, #16
 800747e:	1a69      	subs	r1, r5, r1
 8007480:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007484:	f7fe fe80 	bl	8006188 <PI_Controller>
  uint8_t bBuffer_index = pHandle->Speed_Buffer_Index;
 8007488:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 800748c:	f894 210e 	ldrb.w	r2, [r4, #270]	; 0x10e
    pHandle->_Super.InstantaneousElSpeedDpp = hRotor_Speed;
 8007490:	8220      	strh	r0, [r4, #16]
  bBuffer_index++;
 8007492:	3301      	adds	r3, #1
 8007494:	b2db      	uxtb	r3, r3
  if (bBuffer_index == pHandle->SpeedBufferSizeUnit)
 8007496:	429a      	cmp	r2, r3
 8007498:	bf0a      	itet	eq
 800749a:	2200      	moveq	r2, #0
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 800749c:	461a      	movne	r2, r3
    bBuffer_index = 0U;
 800749e:	4613      	moveq	r3, r2
  pHandle->SpeedBufferOldestEl = pHandle->Speed_Buffer[bBuffer_index];
 80074a0:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80074a4:	f9b2 1074 	ldrsh.w	r1, [r2, #116]	; 0x74
 80074a8:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
  pHandle->Speed_Buffer[bBuffer_index] = hRotor_Speed;
 80074ac:	f8a2 0074 	strh.w	r0, [r2, #116]	; 0x74
    pHandle->_Super.hElAngle += hRotor_Speed;
 80074b0:	88a1      	ldrh	r1, [r4, #4]
  pHandle->Speed_Buffer_Index = bBuffer_index;
 80074b2:	f884 30f4 	strb.w	r3, [r4, #244]	; 0xf4
    pHandle->_Super.hElAngle += hRotor_Speed;
 80074b6:	4408      	add	r0, r1
    pHandle->Ibeta_est = wIbeta_est_Next;
 80074b8:	e9c4 6819 	strd	r6, r8, [r4, #100]	; 0x64
    pHandle->_Super.hElAngle += hRotor_Speed;
 80074bc:	b200      	sxth	r0, r0
    pHandle->Ialfa_est = wIalfa_est_Next;
 80074be:	6627      	str	r7, [r4, #96]	; 0x60
    pHandle->wBemf_beta_est = wBemf_beta_est_Next;
 80074c0:	f8c4 a06c 	str.w	sl, [r4, #108]	; 0x6c
    pHandle->_Super.hElAngle += hRotor_Speed;
 80074c4:	80a0      	strh	r0, [r4, #4]
}
 80074c6:	b007      	add	sp, #28
 80074c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    retValue = 0;
 80074cc:	4608      	mov	r0, r1
}
 80074ce:	b007      	add	sp, #28
 80074d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    hAux_Alfa = (int16_t)(hAux_Alfa * wDirection);
 80074d4:	fa1f f980 	uxth.w	r9, r0
 80074d8:	e7bf      	b.n	800745a <STO_PLL_CalcElAngle+0x13a>
    else if (pHandle->Ibeta_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80074da:	1a1b      	subs	r3, r3, r0
 80074dc:	4598      	cmp	r8, r3
      pHandle->Ibeta_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 80074de:	bfdc      	itt	le
 80074e0:	6663      	strle	r3, [r4, #100]	; 0x64
 80074e2:	4698      	movle	r8, r3
 80074e4:	e75a      	b.n	800739c <STO_PLL_CalcElAngle+0x7c>
    else if (pHandle->Ialfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF1)))
 80074e6:	eba3 0800 	sub.w	r8, r3, r0
 80074ea:	45c1      	cmp	r9, r8
      pHandle->Ialfa_est = -INT16_MAX * ((int32_t)pHandle->hF1);
 80074ec:	bfdc      	itt	le
 80074ee:	f8c4 8060 	strle.w	r8, [r4, #96]	; 0x60
 80074f2:	46c1      	movle	r9, r8
 80074f4:	e74b      	b.n	800738e <STO_PLL_CalcElAngle+0x6e>
    else if (pHandle->wBemf_beta_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 80074f6:	1a1b      	subs	r3, r3, r0
 80074f8:	429e      	cmp	r6, r3
      pHandle->wBemf_beta_est = (-INT16_MAX * ((int32_t)pHandle->hF2));
 80074fa:	bfdc      	itt	le
 80074fc:	66e3      	strle	r3, [r4, #108]	; 0x6c
 80074fe:	9301      	strle	r3, [sp, #4]
 8007500:	e733      	b.n	800736a <STO_PLL_CalcElAngle+0x4a>
    else if (pHandle->wBemf_alfa_est <= (-INT16_MAX * ((int32_t)pHandle->hF2)))
 8007502:	1a1d      	subs	r5, r3, r0
 8007504:	42af      	cmp	r7, r5
      pHandle->wBemf_alfa_est = -INT16_MAX * ((int32_t)pHandle->hF2);
 8007506:	bfdc      	itt	le
 8007508:	66a5      	strle	r5, [r4, #104]	; 0x68
 800750a:	462f      	movle	r7, r5
 800750c:	e71e      	b.n	800734c <STO_PLL_CalcElAngle+0x2c>
 800750e:	bf00      	nop

08007510 <STO_PLL_CalcAvrgMecSpeedUnit>:
{
 8007510:	b570      	push	{r4, r5, r6, lr}
    uint8_t i, bSpeedBufferSizeUnit = pHandle->SpeedBufferSizeUnit;
 8007512:	f890 510e 	ldrb.w	r5, [r0, #270]	; 0x10e
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007516:	2d00      	cmp	r5, #0
 8007518:	f000 809e 	beq.w	8007658 <STO_PLL_CalcAvrgMecSpeedUnit+0x148>
 800751c:	f105 3cff 	add.w	ip, r5, #4294967295
 8007520:	fa5f f38c 	uxtb.w	r3, ip
 8007524:	f100 0472 	add.w	r4, r0, #114	; 0x72
 8007528:	f100 0c74 	add.w	ip, r0, #116	; 0x74
 800752c:	eb0c 0c43 	add.w	ip, ip, r3, lsl #1
    int32_t wAvrSpeed_dpp = (int32_t)0;
 8007530:	2200      	movs	r2, #0
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007532:	4623      	mov	r3, r4
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 8007534:	f933 ef02 	ldrsh.w	lr, [r3, #2]!
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007538:	459c      	cmp	ip, r3
      wAvrSpeed_dpp += (int32_t)(pHandle->Speed_Buffer[i]);
 800753a:	4472      	add	r2, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800753c:	d1fa      	bne.n	8007534 <STO_PLL_CalcAvrgMecSpeedUnit+0x24>
      wAvrSpeed_dpp = wAvrSpeed_dpp / ((int16_t)bSpeedBufferSizeUnit);
 800753e:	fb92 fef5 	sdiv	lr, r2, r5
 8007542:	2200      	movs	r2, #0
      wError = ((int32_t)pHandle->Speed_Buffer[i]) - wAvrSpeed_dpp;
 8007544:	f934 3f02 	ldrsh.w	r3, [r4, #2]!
 8007548:	eba3 030e 	sub.w	r3, r3, lr
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 800754c:	4564      	cmp	r4, ip
      wAvrQuadraticError += wError;
 800754e:	fb03 2203 	mla	r2, r3, r3, r2
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007552:	d1f7      	bne.n	8007544 <STO_PLL_CalcAvrgMecSpeedUnit+0x34>
    wAvrQuadraticError = wAvrQuadraticError / ((int16_t)bSpeedBufferSizeUnit);
 8007554:	fbb2 f2f5 	udiv	r2, r2, r5
    wAvrSquareSpeed = wAvrSpeed_dpp * wAvrSpeed_dpp;
 8007558:	fb0e f40e 	mul.w	r4, lr, lr
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 800755c:	17e6      	asrs	r6, r4, #31
 800755e:	f8b0 5110 	ldrh.w	r5, [r0, #272]	; 0x110
    wAux = wAvrSpeed_dpp * ((int32_t)pHandle->_Super.hMeasurementFrequency);
 8007562:	8b43      	ldrh	r3, [r0, #26]
 8007564:	fb0e fe03 	mul.w	lr, lr, r3
    int64_t lAvrSquareSpeed = (int64_t)(wAvrSquareSpeed) * pHandle->VariancePercentage;      
 8007568:	fba5 4304 	umull	r4, r3, r5, r4
 800756c:	fb05 3306 	mla	r3, r5, r6, r3
    wAvrSquareSpeed = lAvrSquareSpeed / (int16_t)128;
 8007570:	09e4      	lsrs	r4, r4, #7
 8007572:	ea44 6443 	orr.w	r4, r4, r3, lsl #25
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8007576:	7883      	ldrb	r3, [r0, #2]
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 8007578:	f890 6104 	ldrb.w	r6, [r0, #260]	; 0x104
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800757c:	69c5      	ldr	r5, [r0, #28]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800757e:	4294      	cmp	r4, r2
    wAux = wAux * ((int32_t)pHandle->_Super.SpeedUnit);
 8007580:	fb0e f303 	mul.w	r3, lr, r3
    if (wAvrQuadraticError < wAvrSquareSpeed)
 8007584:	bfd8      	it	le
 8007586:	f04f 0c00 	movle.w	ip, #0
    wAux = wAux / ((int32_t)pHandle->_Super.DPPConvFactor);
 800758a:	fb93 f3f5 	sdiv	r3, r3, r5
    if (wAvrQuadraticError < wAvrSquareSpeed)
 800758e:	bfc8      	it	gt
 8007590:	f04f 0c01 	movgt.w	ip, #1
    wAux = wAux / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007594:	7845      	ldrb	r5, [r0, #1]
 8007596:	fb93 f3f5 	sdiv	r3, r3, r5
    *pMecSpeedUnit = (int16_t)wAux;
 800759a:	b21d      	sxth	r5, r3
 800759c:	800d      	strh	r5, [r1, #0]
    pHandle->_Super.hAvrMecSpeedUnit = (int16_t)wAux;
 800759e:	8185      	strh	r5, [r0, #12]
    if (wAvrQuadraticError < wAvrSquareSpeed)
 80075a0:	f880 c0f5 	strb.w	ip, [r0, #245]	; 0xf5
    if (true == pHandle->EnableDualCheck) /*do algorithm if it's enabled*/
 80075a4:	b9ae      	cbnz	r6, 80075d2 <STO_PLL_CalcAvrgMecSpeedUnit+0xc2>
    if (false == pHandle->IsAlgorithmConverged)
 80075a6:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
 80075aa:	b353      	cbz	r3, 8007602 <STO_PLL_CalcAvrgMecSpeedUnit+0xf2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 80075ac:	4294      	cmp	r4, r2
 80075ae:	dc25      	bgt.n	80075fc <STO_PLL_CalcAvrgMecSpeedUnit+0xec>
        pHandle->ReliabilityCounter++;
 80075b0:	f890 30f7 	ldrb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80075b4:	f890 2117 	ldrb.w	r2, [r0, #279]	; 0x117
        pHandle->ReliabilityCounter++;
 80075b8:	3301      	adds	r3, #1
 80075ba:	b2db      	uxtb	r3, r3
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80075bc:	429a      	cmp	r2, r3
        pHandle->ReliabilityCounter++;
 80075be:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
        if (pHandle->ReliabilityCounter >= pHandle->Reliability_hysteresys)
 80075c2:	d81e      	bhi.n	8007602 <STO_PLL_CalcAvrgMecSpeedUnit+0xf2>
          pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80075c4:	78c2      	ldrb	r2, [r0, #3]
 80075c6:	7002      	strb	r2, [r0, #0]
          pHandle->ReliabilityCounter = 0U;
 80075c8:	2300      	movs	r3, #0
 80075ca:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 80075ce:	4618      	mov	r0, r3
 80075d0:	bd70      	pop	{r4, r5, r6, pc}
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 80075d2:	2b00      	cmp	r3, #0
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 80075d4:	f8b0 511a 	ldrh.w	r5, [r0, #282]	; 0x11a
      wAux = ((wAux < 0) ? (-wAux) : (wAux));
 80075d8:	bfb8      	it	lt
 80075da:	425b      	neglt	r3, r3
      if (wAux < (int32_t)(pHandle->MaxAppPositiveMecSpeedUnit))
 80075dc:	429d      	cmp	r5, r3
 80075de:	dc14      	bgt.n	800760a <STO_PLL_CalcAvrgMecSpeedUnit+0xfa>
    bool bIs_Bemf_Consistent = false;
 80075e0:	2500      	movs	r5, #0
    int32_t wEstBemfSq = 0;
 80075e2:	462b      	mov	r3, r5
    int32_t wObsBemfSq = 0;
 80075e4:	462e      	mov	r6, r5
      pHandle->Est_Bemf_Level = wEstBemfSq;
 80075e6:	e9c0 633f 	strd	r6, r3, [r0, #252]	; 0xfc
    if (false == pHandle->IsAlgorithmConverged)
 80075ea:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
      pHandle->IsBemfConsistent = bIs_Bemf_Consistent;
 80075ee:	f880 50f9 	strb.w	r5, [r0, #249]	; 0xf9
    if (false == pHandle->IsAlgorithmConverged)
 80075f2:	b133      	cbz	r3, 8007602 <STO_PLL_CalcAvrgMecSpeedUnit+0xf2>
      if ((false == pHandle->IsSpeedReliable) || (false == bIs_Bemf_Consistent))
 80075f4:	4294      	cmp	r4, r2
 80075f6:	dddb      	ble.n	80075b0 <STO_PLL_CalcAvrgMecSpeedUnit+0xa0>
 80075f8:	2d00      	cmp	r5, #0
 80075fa:	d0d9      	beq.n	80075b0 <STO_PLL_CalcAvrgMecSpeedUnit+0xa0>
        pHandle->ReliabilityCounter = 0U;
 80075fc:	2300      	movs	r3, #0
 80075fe:	f880 30f7 	strb.w	r3, [r0, #247]	; 0xf7
}
 8007602:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        bAux = SPD_IsMecSpeedReliable (&pHandle->_Super, pMecSpeedUnit);
 8007606:	f7ff bd93 	b.w	8007130 <SPD_IsMecSpeedReliable>
        wObsBemf = (int32_t)pHandle->hBemf_alfa_est;
 800760a:	f9b0 6070 	ldrsh.w	r6, [r0, #112]	; 0x70
        wObsBemf = (int32_t)pHandle->hBemf_beta_est;
 800760e:	f9b0 c072 	ldrsh.w	ip, [r0, #114]	; 0x72
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 8007612:	f890 5119 	ldrb.w	r5, [r0, #281]	; 0x119
        wObsBemfSq = wObsBemf * wObsBemf;
 8007616:	fb06 f606 	mul.w	r6, r6, r6
        wObsBemfSq += wObsBemf * wObsBemf;
 800761a:	fb0c 660c 	mla	r6, ip, ip, r6
        wEstBemf = (wAux * 32767) / ((int16_t)pHandle->_Super.hMaxReliableMecSpeedUnit);
 800761e:	ebc3 33c3 	rsb	r3, r3, r3, lsl #15
 8007622:	f9b0 c014 	ldrsh.w	ip, [r0, #20]
 8007626:	fb93 f3fc 	sdiv	r3, r3, ip
        wEstBemfSq = (wEstBemf * ((int32_t)pHandle->BemfConsistencyGain)) / 64;
 800762a:	fb03 f505 	mul.w	r5, r3, r5
 800762e:	2d00      	cmp	r5, #0
 8007630:	bfb8      	it	lt
 8007632:	353f      	addlt	r5, #63	; 0x3f
 8007634:	11ad      	asrs	r5, r5, #6
        wEstBemfSq *= wEstBemf;
 8007636:	fb05 f303 	mul.w	r3, r5, r3
        wEstBemfSqLo = wEstBemfSq - ((wEstBemfSq / 64) * ((int32_t)pHandle->BemfConsistencyCheck));
 800763a:	2b00      	cmp	r3, #0
 800763c:	461d      	mov	r5, r3
 800763e:	f890 c118 	ldrb.w	ip, [r0, #280]	; 0x118
 8007642:	bfb8      	it	lt
 8007644:	f103 053f 	addlt.w	r5, r3, #63	; 0x3f
 8007648:	11ad      	asrs	r5, r5, #6
 800764a:	fb0c 3515 	mls	r5, ip, r5, r3
        if (wObsBemfSq > wEstBemfSqLo)
 800764e:	42ae      	cmp	r6, r5
 8007650:	bfd4      	ite	le
 8007652:	2500      	movle	r5, #0
 8007654:	2501      	movgt	r5, #1
 8007656:	e7c6      	b.n	80075e6 <STO_PLL_CalcAvrgMecSpeedUnit+0xd6>
    for (i = 0U; i < bSpeedBufferSizeUnit; i++)
 8007658:	462a      	mov	r2, r5
 800765a:	462c      	mov	r4, r5
 800765c:	462e      	mov	r6, r5
    int32_t wAvrSpeed_dpp = (int32_t)0;
 800765e:	46ae      	mov	lr, r5
 8007660:	e77d      	b.n	800755e <STO_PLL_CalcAvrgMecSpeedUnit+0x4e>
 8007662:	bf00      	nop

08007664 <STO_PLL_CalcAvrgElSpeedDpp>:
    int16_t hSpeedBufferSizeUnit = (int16_t)pHandle->SpeedBufferSizeUnit;
 8007664:	f890 110e 	ldrb.w	r1, [r0, #270]	; 0x10e
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007668:	f890 310f 	ldrb.w	r3, [r0, #271]	; 0x10f
    int16_t hIndexNew = (int16_t)pHandle->Speed_Buffer_Index;
 800766c:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
    hBufferSizeDiff = hSpeedBufferSizeUnit - hSpeedBufferSizedpp;
 8007670:	1acb      	subs	r3, r1, r3
 8007672:	b29b      	uxth	r3, r3
{
 8007674:	b510      	push	{r4, lr}
    int32_t wSum = pHandle->DppBufferSum;
 8007676:	f8d0 4108 	ldr.w	r4, [r0, #264]	; 0x108
    if (0 == hBufferSizeDiff)
 800767a:	b973      	cbnz	r3, 800769a <STO_PLL_CalcAvrgElSpeedDpp+0x36>
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->SpeedBufferOldestEl;
 800767c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8007680:	f9b0 110c 	ldrsh.w	r1, [r0, #268]	; 0x10c
 8007684:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 8007688:	4423      	add	r3, r4
 800768a:	1a5b      	subs	r3, r3, r1
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 800768c:	f8b0 2120 	ldrh.w	r2, [r0, #288]	; 0x120
    pHandle->DppBufferSum = wSum;
 8007690:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
  wAvrSpeed_dpp = wSum >> pHandle->SpeedBufferSizeDppLOG;
 8007694:	4113      	asrs	r3, r2
    pHandle->_Super.hElSpeedDpp = (int16_t)wAvrSpeed_dpp;
 8007696:	81c3      	strh	r3, [r0, #14]
}
 8007698:	bd10      	pop	{r4, pc}
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 800769a:	4413      	add	r3, r2
 800769c:	fa0f fc83 	sxth.w	ip, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 80076a0:	4561      	cmp	r1, ip
      hIndexOldTemp = hIndexNew + hBufferSizeDiff;
 80076a2:	b29b      	uxth	r3, r3
      if (hIndexOldTemp >= hSpeedBufferSizeUnit)
 80076a4:	dc05      	bgt.n	80076b2 <STO_PLL_CalcAvrgElSpeedDpp+0x4e>
 80076a6:	fa1f fe81 	uxth.w	lr, r1
        hIndexOld = hIndexOldTemp - hSpeedBufferSizeUnit;
 80076aa:	eba3 030e 	sub.w	r3, r3, lr
 80076ae:	fa0f fc83 	sxth.w	ip, r3
      wSum = wSum + pHandle->Speed_Buffer[hIndexNew] - pHandle->Speed_Buffer[hIndexOld];
 80076b2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 80076b6:	eb00 0c4c 	add.w	ip, r0, ip, lsl #1
 80076ba:	f9b2 3074 	ldrsh.w	r3, [r2, #116]	; 0x74
 80076be:	f9bc 2074 	ldrsh.w	r2, [ip, #116]	; 0x74
 80076c2:	4423      	add	r3, r4
 80076c4:	1a9b      	subs	r3, r3, r2
 80076c6:	e7e1      	b.n	800768c <STO_PLL_CalcAvrgElSpeedDpp+0x28>

080076c8 <STO_PLL_Clear>:
{
 80076c8:	b510      	push	{r4, lr}
  * @retval none
  */
static void STO_InitSpeedBuffer(STO_PLL_Handle_t * pHandle)
{
  uint8_t b_i;
  uint8_t bSpeedBufferSize = pHandle->SpeedBufferSizeUnit;
 80076ca:	f890 210e 	ldrb.w	r2, [r0, #270]	; 0x10e
    pHandle->Ialfa_est = (int32_t)0;
 80076ce:	2100      	movs	r1, #0
    pHandle->Ibeta_est = (int32_t)0;
 80076d0:	e9c0 1118 	strd	r1, r1, [r0, #96]	; 0x60
    pHandle->wBemf_beta_est = (int32_t)0;
 80076d4:	e9c0 111a 	strd	r1, r1, [r0, #104]	; 0x68
    pHandle->Est_Bemf_Level = (int32_t)0;
 80076d8:	e9c0 113f 	strd	r1, r1, [r0, #252]	; 0xfc
{
 80076dc:	4604      	mov	r4, r0
    pHandle->_Super.hElAngle = (int16_t)0;
 80076de:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hElSpeedDpp = (int16_t)0;
 80076e0:	81c1      	strh	r1, [r0, #14]
    pHandle->ConsistencyCounter = 0u;
 80076e2:	f8a0 10f6 	strh.w	r1, [r0, #246]	; 0xf6
    pHandle->IsAlgorithmConverged = false;
 80076e6:	f8a0 10f8 	strh.w	r1, [r0, #248]	; 0xf8
    pHandle->DppBufferSum = (int32_t)0;
 80076ea:	f8c0 1108 	str.w	r1, [r0, #264]	; 0x108
    pHandle->ForceConvergency = false;
 80076ee:	f8a0 1122 	strh.w	r1, [r0, #290]	; 0x122

  /*init speed buffer*/
  for (b_i = 0U; b_i < bSpeedBufferSize; b_i++)
 80076f2:	b11a      	cbz	r2, 80076fc <STO_PLL_Clear+0x34>
  {
    pHandle->Speed_Buffer[b_i] = (int16_t)0;
 80076f4:	0052      	lsls	r2, r2, #1
 80076f6:	3074      	adds	r0, #116	; 0x74
 80076f8:	f000 fa46 	bl	8007b88 <memset>
  }
  pHandle->Speed_Buffer_Index = 0U;
 80076fc:	2100      	movs	r1, #0
 80076fe:	f884 10f4 	strb.w	r1, [r4, #244]	; 0xf4
  pHandle->SpeedBufferOldestEl = (int16_t)0;
 8007702:	f8a4 110c 	strh.w	r1, [r4, #268]	; 0x10c
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 8007706:	f104 0034 	add.w	r0, r4, #52	; 0x34
}
 800770a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    PID_SetIntegralTerm(& pHandle->PIRegulator, (int32_t)0);
 800770e:	f7fe bd07 	b.w	8006120 <PID_SetIntegralTerm>
 8007712:	bf00      	nop

08007714 <STO_PLL_Init>:
{
 8007714:	b510      	push	{r4, lr}
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8007716:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 800771a:	4b19      	ldr	r3, [pc, #100]	; (8007780 <STO_PLL_Init+0x6c>)
 800771c:	f9b0 e02e 	ldrsh.w	lr, [r0, #46]	; 0x2e
    pHandle->ConsistencyCounter = pHandle->StartUpConsistThreshold;
 8007720:	f880 10f6 	strb.w	r1, [r0, #246]	; 0xf6
    pHandle->EnableDualCheck = true;
 8007724:	2201      	movs	r2, #1
    pHandle->F3POW2 = 0U;
 8007726:	2100      	movs	r1, #0
    htempk = (int16_t)(C6_COMP_CONST1 / pHandle->hF2);
 8007728:	fb93 f3fe 	sdiv	r3, r3, lr
 800772c:	b21b      	sxth	r3, r3
{
 800772e:	4604      	mov	r4, r0
    pHandle->EnableDualCheck = true;
 8007730:	f880 2104 	strb.w	r2, [r0, #260]	; 0x104
    pHandle->F3POW2 = 0U;
 8007734:	8641      	strh	r1, [r0, #50]	; 0x32
    while (htempk != 0)
 8007736:	b30b      	cbz	r3, 800777c <STO_PLL_Init+0x68>
    wAux = ((int32_t)1);
 8007738:	4611      	mov	r1, r2
      htempk /= ((int16_t)2);
 800773a:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
    while (htempk != 0)
 800773e:	f102 0c01 	add.w	ip, r2, #1
 8007742:	105b      	asrs	r3, r3, #1
 8007744:	4610      	mov	r0, r2
      wAux *= ((int32_t)2);
 8007746:	ea4f 0141 	mov.w	r1, r1, lsl #1
    while (htempk != 0)
 800774a:	fa1f f28c 	uxth.w	r2, ip
 800774e:	d1f4      	bne.n	800773a <STO_PLL_Init+0x26>
    pHandle->hF3 = (int16_t)wAux;
 8007750:	b20a      	sxth	r2, r1
 8007752:	8660      	strh	r0, [r4, #50]	; 0x32
    wAux = ((int32_t)(pHandle->hF2)) * pHandle->hF3;
 8007754:	fb0e f102 	mul.w	r1, lr, r2
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007758:	480a      	ldr	r0, [pc, #40]	; (8007784 <STO_PLL_Init+0x70>)
    pHandle->hF3 = (int16_t)wAux;
 800775a:	8622      	strh	r2, [r4, #48]	; 0x30
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 800775c:	17cb      	asrs	r3, r1, #31
 800775e:	fb80 0101 	smull	r0, r1, r0, r1
 8007762:	ebc3 2121 	rsb	r1, r3, r1, asr #8
    STO_PLL_Clear(pHandle);
 8007766:	4620      	mov	r0, r4
    pHandle->hC6 = (int16_t)(wAux / C6_COMP_CONST2);
 8007768:	8561      	strh	r1, [r4, #42]	; 0x2a
    STO_PLL_Clear(pHandle);
 800776a:	f7ff ffad 	bl	80076c8 <STO_PLL_Clear>
    PID_HandleInit(&pHandle->PIRegulator);
 800776e:	f104 0034 	add.w	r0, r4, #52	; 0x34
 8007772:	f7fe fcc1 	bl	80060f8 <PID_HandleInit>
    pHandle->_Super.hMecAccelUnitP = 0;
 8007776:	2300      	movs	r3, #0
 8007778:	8263      	strh	r3, [r4, #18]
}
 800777a:	bd10      	pop	{r4, pc}
 800777c:	4671      	mov	r1, lr
 800777e:	e7eb      	b.n	8007758 <STO_PLL_Init+0x44>
 8007780:	000fea5e 	.word	0x000fea5e
 8007784:	06488dc5 	.word	0x06488dc5

08007788 <STO_PLL_IsObserverConverged>:
    int16_t hUpperThreshold;
    int16_t hLowerThreshold;
    int32_t wAux;
    int32_t wtemp;

    if (true == pHandle->ForceConvergency2)
 8007788:	f890 3123 	ldrb.w	r3, [r0, #291]	; 0x123
 800778c:	b113      	cbz	r3, 8007794 <STO_PLL_IsObserverConverged+0xc>
    {
      *phForcedMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 800778e:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8007792:	800b      	strh	r3, [r1, #0]
    }

    if (true == pHandle->ForceConvergency)
 8007794:	f890 3122 	ldrb.w	r3, [r0, #290]	; 0x122
 8007798:	b133      	cbz	r3, 80077a8 <STO_PLL_IsObserverConverged+0x20>
    {
      bAux = true;
      pHandle->IsAlgorithmConverged = true;
 800779a:	2301      	movs	r3, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 800779c:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 800779e:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
      pHandle->_Super.bSpeedErrorNumber = 0U;
 80077a2:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (bAux);
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	4770      	bx	lr
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 80077a8:	f9b1 2000 	ldrsh.w	r2, [r1]
      hEstimatedSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 80077ac:	f9b0 c00c 	ldrsh.w	ip, [r0, #12]
{
 80077b0:	b510      	push	{r4, lr}
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 80077b2:	fb0c fe02 	mul.w	lr, ip, r2
      if (wtemp > 0)
 80077b6:	f1be 0f00 	cmp.w	lr, #0
      wtemp = ((int32_t)hEstimatedSpeedUnit) * ((int32_t)*phForcedMecSpeedUnit);
 80077ba:	4614      	mov	r4, r2
      if (wtemp > 0)
 80077bc:	dd3b      	ble.n	8007836 <STO_PLL_IsObserverConverged+0xae>
        if (hEstimatedSpeedUnit < 0)
 80077be:	f1bc 0f00 	cmp.w	ip, #0
          hEstimatedSpeedUnit = -hEstimatedSpeedUnit;
 80077c2:	bfbc      	itt	lt
 80077c4:	f1cc 0c00 	rsblt	ip, ip, #0
 80077c8:	fa0f fc8c 	sxthlt.w	ip, ip
        if (*phForcedMecSpeedUnit < 0)
 80077cc:	2a00      	cmp	r2, #0
 80077ce:	db34      	blt.n	800783a <STO_PLL_IsObserverConverged+0xb2>
        if (true == pHandle->IsSpeedReliable)
 80077d0:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
 80077d4:	b362      	cbz	r2, 8007830 <STO_PLL_IsObserverConverged+0xa8>
          if ((uint16_t)hEstimatedSpeedUnit > pHandle->MinStartUpValidSpeed)
 80077d6:	f8b0 1114 	ldrh.w	r1, [r0, #276]	; 0x114
 80077da:	fa1f f28c 	uxth.w	r2, ip
 80077de:	4291      	cmp	r1, r2
 80077e0:	d226      	bcs.n	8007830 <STO_PLL_IsObserverConverged+0xa8>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_L);
 80077e2:	f890 2113 	ldrb.w	r2, [r0, #275]	; 0x113
 80077e6:	fb04 f202 	mul.w	r2, r4, r2
        hLowerThreshold = (int16_t)(wAux / ((int32_t)16));
 80077ea:	2a00      	cmp	r2, #0
 80077ec:	bfb8      	it	lt
 80077ee:	320f      	addlt	r2, #15
            if (hEstimatedSpeedUnit >= hLowerThreshold)
 80077f0:	f342 120f 	sbfx	r2, r2, #4, #16
 80077f4:	4594      	cmp	ip, r2
 80077f6:	db1b      	blt.n	8007830 <STO_PLL_IsObserverConverged+0xa8>
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 80077f8:	f890 2112 	ldrb.w	r2, [r0, #274]	; 0x112
 80077fc:	fb04 f202 	mul.w	r2, r4, r2
        hUpperThreshold = (int16_t)(wAux / ((int32_t)16));
 8007800:	2a00      	cmp	r2, #0
 8007802:	bfb8      	it	lt
 8007804:	320f      	addlt	r2, #15
              if (hEstimatedSpeedUnit <= hUpperThreshold)
 8007806:	f342 120f 	sbfx	r2, r2, #4, #16
 800780a:	4594      	cmp	ip, r2
 800780c:	dc10      	bgt.n	8007830 <STO_PLL_IsObserverConverged+0xa8>
                pHandle->ConsistencyCounter++;
 800780e:	f890 20f6 	ldrb.w	r2, [r0, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007812:	f890 1116 	ldrb.w	r1, [r0, #278]	; 0x116
                pHandle->ConsistencyCounter++;
 8007816:	3201      	adds	r2, #1
 8007818:	b2d2      	uxtb	r2, r2
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 800781a:	4291      	cmp	r1, r2
                pHandle->ConsistencyCounter++;
 800781c:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
                if (pHandle->ConsistencyCounter >= pHandle->StartUpConsistThreshold)
 8007820:	d809      	bhi.n	8007836 <STO_PLL_IsObserverConverged+0xae>
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007822:	2200      	movs	r2, #0
      pHandle->IsAlgorithmConverged = true;
 8007824:	2301      	movs	r3, #1
      pHandle->_Super.bSpeedErrorNumber = 0U;
 8007826:	7002      	strb	r2, [r0, #0]
      pHandle->IsAlgorithmConverged = true;
 8007828:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
}
 800782c:	4618      	mov	r0, r3
 800782e:	bd10      	pop	{r4, pc}
                pHandle->ConsistencyCounter = 0U;
 8007830:	2200      	movs	r2, #0
 8007832:	f880 20f6 	strb.w	r2, [r0, #246]	; 0xf6
}
 8007836:	4618      	mov	r0, r3
 8007838:	bd10      	pop	{r4, pc}
          *phForcedMecSpeedUnit = -*phForcedMecSpeedUnit;
 800783a:	4252      	negs	r2, r2
 800783c:	b212      	sxth	r2, r2
 800783e:	800a      	strh	r2, [r1, #0]
        wAux = ((int32_t)*phForcedMecSpeedUnit) * ((int16_t)pHandle->SpeedValidationBand_H);
 8007840:	4614      	mov	r4, r2
        if (true == pHandle->IsSpeedReliable)
 8007842:	f890 20f5 	ldrb.w	r2, [r0, #245]	; 0xf5
 8007846:	2a00      	cmp	r2, #0
 8007848:	d0f2      	beq.n	8007830 <STO_PLL_IsObserverConverged+0xa8>
 800784a:	e7c4      	b.n	80077d6 <STO_PLL_IsObserverConverged+0x4e>

0800784c <STO_PLL_GetEstimatedBemf>:
    vaux.alpha = pHandle->hBemf_alfa_est;
    vaux.beta = pHandle->hBemf_beta_est;
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (vaux);
 800784c:	6f03      	ldr	r3, [r0, #112]	; 0x70
 800784e:	2200      	movs	r2, #0
 8007850:	b299      	uxth	r1, r3
 8007852:	f361 020f 	bfi	r2, r1, #0, #16
 8007856:	0c1b      	lsrs	r3, r3, #16
 8007858:	f363 421f 	bfi	r2, r3, #16, #16
{
 800785c:	b082      	sub	sp, #8
}
 800785e:	4610      	mov	r0, r2
 8007860:	b002      	add	sp, #8
 8007862:	4770      	bx	lr

08007864 <STO_PLL_GetEstimatedCurrent>:
  iaux.alpha = (int16_t)(pHandle->Ialfa_est / pHandle->hF1);
#endif

#ifndef FULL_MISRA_C_COMPLIANCY_STO_PLL
  //cstat !MISRAC2012-Rule-1.3_n !ATH-shift-neg !MISRAC2012-Rule-10.1_R6
  iaux.beta = (int16_t)(pHandle->Ibeta_est >> pHandle->F1LOG);
 8007864:	e9d0 2318 	ldrd	r2, r3, [r0, #96]	; 0x60
  iaux.alpha = (int16_t)(pHandle->Ialfa_est >> pHandle->F1LOG);
 8007868:	f8b0 c11c 	ldrh.w	ip, [r0, #284]	; 0x11c
 800786c:	fa42 f20c 	asr.w	r2, r2, ip
  iaux.beta = (int16_t)(pHandle->Ibeta_est / pHandle->hF1);
#endif
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (iaux);
 8007870:	fa43 f30c 	asr.w	r3, r3, ip
 8007874:	b292      	uxth	r2, r2
 8007876:	2100      	movs	r1, #0
 8007878:	f362 010f 	bfi	r1, r2, #0, #16
 800787c:	b29b      	uxth	r3, r3
 800787e:	f363 411f 	bfi	r1, r3, #16, #16
{
 8007882:	b082      	sub	sp, #8
}
 8007884:	4608      	mov	r0, r1
 8007886:	b002      	add	sp, #8
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop

0800788c <STO_PLL_GetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    *phC2 = pHandle->hC2;
 800788c:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	; 0x22
 8007890:	800b      	strh	r3, [r1, #0]
    *phC4 = pHandle->hC4;
 8007892:	f9b0 3026 	ldrsh.w	r3, [r0, #38]	; 0x26
 8007896:	8013      	strh	r3, [r2, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 8007898:	4770      	bx	lr
 800789a:	bf00      	nop

0800789c <STO_PLL_SetObserverGains>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hC2 = hhC1;
 800789c:	8441      	strh	r1, [r0, #34]	; 0x22
    pHandle->hC4 = hhC2;
 800789e:	84c2      	strh	r2, [r0, #38]	; 0x26
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80078a0:	4770      	bx	lr
 80078a2:	bf00      	nop

080078a4 <STO_OTF_ResetPLL>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    PID_SetIntegralTerm(&pHdl->PIRegulator, (int32_t)0);
 80078a4:	6800      	ldr	r0, [r0, #0]
 80078a6:	2100      	movs	r1, #0
 80078a8:	3034      	adds	r0, #52	; 0x34
 80078aa:	f7fe bc39 	b.w	8006120 <PID_SetIntegralTerm>
 80078ae:	bf00      	nop

080078b0 <STO_ResetPLL>:
    /* Nothing to do */
  }
  else
  {
#endif
    PID_SetIntegralTerm(&pHandle->PIRegulator, (int32_t)0);
 80078b0:	2100      	movs	r1, #0
 80078b2:	3034      	adds	r0, #52	; 0x34
 80078b4:	f7fe bc34 	b.w	8006120 <PID_SetIntegralTerm>

080078b8 <STO_PLL_GetEstimatedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Est_Bemf_Level);
#else
  return (pHandle->Est_Bemf_Level);
#endif
}
 80078b8:	f8d0 0100 	ldr.w	r0, [r0, #256]	; 0x100
 80078bc:	4770      	bx	lr
 80078be:	bf00      	nop

080078c0 <STO_PLL_GetObservedBemfLevel>:
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  return ((MC_NULL == pHandle) ? 0 : pHandle->Obs_Bemf_Level);
#else
  return (pHandle->Obs_Bemf_Level);
#endif
}
 80078c0:	f8d0 00fc 	ldr.w	r0, [r0, #252]	; 0xfc
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop

080078c8 <STO_PLL_IsVarianceTight>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    tempStatus = pHdl->IsSpeedReliable;
 80078c8:	6803      	ldr	r3, [r0, #0]
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
  return (tempStatus);
}
 80078ca:	f893 00f5 	ldrb.w	r0, [r3, #245]	; 0xf5
 80078ce:	4770      	bx	lr

080078d0 <STO_PLL_ForceConvergency1>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency = true;
 80078d0:	6803      	ldr	r3, [r0, #0]
 80078d2:	2201      	movs	r2, #1
 80078d4:	f883 2122 	strb.w	r2, [r3, #290]	; 0x122
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80078d8:	4770      	bx	lr
 80078da:	bf00      	nop

080078dc <STO_PLL_ForceConvergency2>:
  }
  else
  {
#endif
    STO_PLL_Handle_t *pHdl = (STO_PLL_Handle_t *)pHandle->_Super; //cstat !MISRAC2012-Rule-11.3
    pHdl->ForceConvergency2 = true;
 80078dc:	6803      	ldr	r3, [r0, #0]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2123 	strb.w	r2, [r3, #291]	; 0x123
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop

080078e8 <STO_SetDirection>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->hForcedDirection = direction;
 80078e8:	f880 1124 	strb.w	r1, [r0, #292]	; 0x124
#ifdef NULL_PTR_STO_PLL_SPD_POS_FDB
  }
#endif
}
 80078ec:	4770      	bx	lr
 80078ee:	bf00      	nop

080078f0 <VSS_Clear>:
    /* Nothing to do */
  }
  else
  {
#endif
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80078f0:	2300      	movs	r3, #0
    pHandle->hRemainingStep = 0U;
    pHandle->hElAngleAccu = 0;

    pHandle->bTransitionStarted = false;
    pHandle->bTransitionEnded = false;
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 80078f2:	8ec2      	ldrh	r2, [r0, #54]	; 0x36
    pHandle->_Super.bSpeedErrorNumber = 0U;
 80078f4:	7003      	strb	r3, [r0, #0]
    pHandle->wElSpeedDpp32 = 0;
 80078f6:	e9c0 3308 	strd	r3, r3, [r0, #32]
    pHandle->_Super.hElAngle = 0;
 80078fa:	6043      	str	r3, [r0, #4]
    pHandle->_Super.hAvrMecSpeedUnit = 0;
 80078fc:	60c3      	str	r3, [r0, #12]
    pHandle->_Super.hMecAccelUnitP = 0;
 80078fe:	8243      	strh	r3, [r0, #18]
    pHandle->hRemainingStep = 0U;
 8007900:	8503      	strh	r3, [r0, #40]	; 0x28
    pHandle->bTransitionStarted = false;
 8007902:	8583      	strh	r3, [r0, #44]	; 0x2c
    pHandle->hTransitionRemainingSteps = pHandle->hTransitionSteps;
 8007904:	85c2      	strh	r2, [r0, #46]	; 0x2e
    pHandle->hElAngleAccu = 0;
 8007906:	6303      	str	r3, [r0, #48]	; 0x30
    FD_FastDiv(&(pHandle->fd), 1, (int32_t)(pHandle->hTransitionSteps));
#endif
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8007908:	4770      	bx	lr
 800790a:	bf00      	nop

0800790c <VSS_Init>:
{
 800790c:	b508      	push	{r3, lr}
  VSS_Clear(pHandle);
 800790e:	f7ff ffef 	bl	80078f0 <VSS_Clear>
}
 8007912:	bd08      	pop	{r3, pc}

08007914 <VSS_CalcElAngle>:
    int16_t hAngleDiff;
    int32_t wAux;
    int16_t hAngleCorr;
    int16_t hSignCorr = 1;

    if (true == pHandle->bCopyObserver)
 8007914:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
 8007918:	b123      	cbz	r3, 8007924 <VSS_CalcElAngle+0x10>
    {
      hRetAngle = *(int16_t *)pInputVars_str;
 800791a:	f9b1 3000 	ldrsh.w	r3, [r1]
      {
        hRetAngle = pHandle->hElAngleAccu;
      }
    }

    pHandle->_Super.hElAngle = hRetAngle;
 800791e:	8083      	strh	r3, [r0, #4]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (hRetAngle);
}
 8007920:	4618      	mov	r0, r3
 8007922:	4770      	bx	lr
{
 8007924:	b530      	push	{r4, r5, lr}
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007926:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
 800792a:	8e03      	ldrh	r3, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800792c:	88c5      	ldrh	r5, [r0, #6]
      if (true == pHandle->bTransitionStarted)
 800792e:	f890 402c 	ldrb.w	r4, [r0, #44]	; 0x2c
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8007932:	7842      	ldrb	r2, [r0, #1]
 8007934:	fb9c f2f2 	sdiv	r2, ip, r2
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007938:	4463      	add	r3, ip
 800793a:	fa1f fe83 	uxth.w	lr, r3
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 800793e:	442a      	add	r2, r5
      pHandle->hElAngleAccu += pHandle->_Super.hElSpeedDpp;
 8007940:	b21b      	sxth	r3, r3
 8007942:	8603      	strh	r3, [r0, #48]	; 0x30
      pHandle->_Super.hMecAngle += (pHandle->_Super.hElSpeedDpp / (int16_t)pHandle->_Super.bElToMecRatio);
 8007944:	80c2      	strh	r2, [r0, #6]
      if (true == pHandle->bTransitionStarted)
 8007946:	b1fc      	cbz	r4, 8007988 <VSS_CalcElAngle+0x74>
        if (0 == pHandle->hTransitionRemainingSteps)
 8007948:	f9b0 202e 	ldrsh.w	r2, [r0, #46]	; 0x2e
 800794c:	b1fa      	cbz	r2, 800798e <VSS_CalcElAngle+0x7a>
          pHandle->hTransitionRemainingSteps--;
 800794e:	3a01      	subs	r2, #1
 8007950:	b212      	sxth	r2, r2
 8007952:	85c2      	strh	r2, [r0, #46]	; 0x2e
          if (pHandle->_Super.hElSpeedDpp >= 0)
 8007954:	f1bc 0f00 	cmp.w	ip, #0
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 8007958:	8809      	ldrh	r1, [r1, #0]
          if (pHandle->_Super.hElSpeedDpp >= 0)
 800795a:	db28      	blt.n	80079ae <VSS_CalcElAngle+0x9a>
            hAngleDiff = *(int16_t *)pInputVars_str - pHandle->hElAngleAccu;
 800795c:	eba1 0e0e 	sub.w	lr, r1, lr
 8007960:	fa0f fe8e 	sxth.w	lr, lr
 8007964:	2501      	movs	r5, #1
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8007966:	f9b0 4036 	ldrsh.w	r4, [r0, #54]	; 0x36
          wAux = (int32_t)hAngleDiff * pHandle->hTransitionRemainingSteps;
 800796a:	fb0e f202 	mul.w	r2, lr, r2
          if (hAngleDiff >= 0)
 800796e:	f1be 0f00 	cmp.w	lr, #0
          hAngleCorr = (int16_t)(wAux / pHandle->hTransitionSteps);
 8007972:	fb92 f2f4 	sdiv	r2, r2, r4
          hAngleCorr *= hSignCorr;
 8007976:	fb12 f205 	smulbb	r2, r2, r5
 800797a:	b292      	uxth	r2, r2
          if (hAngleDiff >= 0)
 800797c:	db10      	blt.n	80079a0 <VSS_CalcElAngle+0x8c>
            pHandle->bTransitionLocked = true;
 800797e:	2301      	movs	r3, #1
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8007980:	1a8a      	subs	r2, r1, r2
            pHandle->bTransitionLocked = true;
 8007982:	f880 3032 	strb.w	r3, [r0, #50]	; 0x32
            hRetAngle = *(int16_t *)pInputVars_str - hAngleCorr;
 8007986:	b213      	sxth	r3, r2
    pHandle->_Super.hElAngle = hRetAngle;
 8007988:	8083      	strh	r3, [r0, #4]
}
 800798a:	4618      	mov	r0, r3
 800798c:	bd30      	pop	{r4, r5, pc}
          hRetAngle = *(int16_t *)pInputVars_str;
 800798e:	f9b1 3000 	ldrsh.w	r3, [r1]
          pHandle->_Super.bSpeedErrorNumber = 0U;
 8007992:	7002      	strb	r2, [r0, #0]
          pHandle->bTransitionEnded = true;
 8007994:	2401      	movs	r4, #1
 8007996:	f880 402d 	strb.w	r4, [r0, #45]	; 0x2d
    pHandle->_Super.hElAngle = hRetAngle;
 800799a:	8083      	strh	r3, [r0, #4]
}
 800799c:	4618      	mov	r0, r3
 800799e:	bd30      	pop	{r4, r5, pc}
            if (false == pHandle->bTransitionLocked)
 80079a0:	f890 4032 	ldrb.w	r4, [r0, #50]	; 0x32
 80079a4:	2c00      	cmp	r4, #0
 80079a6:	d0ef      	beq.n	8007988 <VSS_CalcElAngle+0x74>
              hRetAngle = *(int16_t *)pInputVars_str + hAngleCorr;
 80079a8:	440a      	add	r2, r1
 80079aa:	b213      	sxth	r3, r2
 80079ac:	e7ec      	b.n	8007988 <VSS_CalcElAngle+0x74>
            hAngleDiff = pHandle->hElAngleAccu - *(int16_t *)pInputVars_str;
 80079ae:	ebae 0e01 	sub.w	lr, lr, r1
 80079b2:	fa0f fe8e 	sxth.w	lr, lr
 80079b6:	f64f 75ff 	movw	r5, #65535	; 0xffff
 80079ba:	e7d4      	b.n	8007966 <VSS_CalcElAngle+0x52>

080079bc <VSS_CalcAvrgMecSpeedUnit>:
    SpeedSensorReliability = false;
  }
  else
  {
#endif
    if (pHandle->hRemainingStep > 1u)
 80079bc:	8d03      	ldrh	r3, [r0, #40]	; 0x28
 80079be:	2b01      	cmp	r3, #1
 80079c0:	d923      	bls.n	8007a0a <VSS_CalcAvrgMecSpeedUnit+0x4e>
{
 80079c2:	b410      	push	{r4}
    {
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80079c4:	6a42      	ldr	r2, [r0, #36]	; 0x24
 80079c6:	6a04      	ldr	r4, [r0, #32]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 / 65536);
#endif

      /* Convert dpp into MecUnit */
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80079c8:	8b43      	ldrh	r3, [r0, #26]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80079ca:	4422      	add	r2, r4
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 80079cc:	ea4f 4c22 	mov.w	ip, r2, asr #16
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80079d0:	69c4      	ldr	r4, [r0, #28]
      pHandle->wElSpeedDpp32 += pHandle->wElAccDppP32;
 80079d2:	6242      	str	r2, [r0, #36]	; 0x24
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80079d4:	fb0c f303 	mul.w	r3, ip, r3
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80079d8:	7842      	ldrb	r2, [r0, #1]
      pHandle->_Super.hElSpeedDpp = (int16_t)(pHandle->wElSpeedDpp32 >> 16);
 80079da:	f8a0 c00e 	strh.w	ip, [r0, #14]
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80079de:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80079e2:	fb04 f202 	mul.w	r2, r4, r2
                               * ((int32_t )pHandle->_Super.hMeasurementFrequency) * SPEED_UNIT)
 80079e6:	005b      	lsls	r3, r3, #1
                               / (((int32_t)pHandle->_Super.DPPConvFactor) * ((int32_t)pHandle->_Super.bElToMecRatio)));
 80079e8:	fb93 f3f2 	sdiv	r3, r3, r2
      *hMecSpeedUnit = (int16_t)((((int32_t)pHandle->_Super.hElSpeedDpp)
 80079ec:	b21b      	sxth	r3, r3
 80079ee:	800b      	strh	r3, [r1, #0]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
      pHandle->hRemainingStep--;
 80079f0:	8d02      	ldrh	r2, [r0, #40]	; 0x28
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 80079f2:	8183      	strh	r3, [r0, #12]
      pHandle->hRemainingStep--;
 80079f4:	1e53      	subs	r3, r2, #1
 80079f6:	8503      	strh	r3, [r0, #40]	; 0x28
    else
    {
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
    }
    /* If the transition is not done yet, we already know that speed is not reliable */
    if (false == pHandle->bTransitionEnded)
 80079f8:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 80079fc:	b983      	cbnz	r3, 8007a20 <VSS_CalcAvrgMecSpeedUnit+0x64>
    {
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 80079fe:	78c2      	ldrb	r2, [r0, #3]
 8007a00:	7002      	strb	r2, [r0, #0]
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (SpeedSensorReliability);
}
 8007a02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007a06:	4618      	mov	r0, r3
 8007a08:	4770      	bx	lr
    else if (1U == pHandle->hRemainingStep)
 8007a0a:	d00d      	beq.n	8007a28 <VSS_CalcAvrgMecSpeedUnit+0x6c>
      *hMecSpeedUnit = pHandle->_Super.hAvrMecSpeedUnit;
 8007a0c:	f9b0 300c 	ldrsh.w	r3, [r0, #12]
 8007a10:	800b      	strh	r3, [r1, #0]
    if (false == pHandle->bTransitionEnded)
 8007a12:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
 8007a16:	bb03      	cbnz	r3, 8007a5a <VSS_CalcAvrgMecSpeedUnit+0x9e>
      pHandle->_Super.bSpeedErrorNumber = pHandle->_Super.bMaximumSpeedErrorsNumber;
 8007a18:	78c2      	ldrb	r2, [r0, #3]
 8007a1a:	7002      	strb	r2, [r0, #0]
}
 8007a1c:	4618      	mov	r0, r3
 8007a1e:	4770      	bx	lr
 8007a20:	f85d 4b04 	ldr.w	r4, [sp], #4
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8007a24:	f7ff bb84 	b.w	8007130 <SPD_IsMecSpeedReliable>
      *hMecSpeedUnit = pHandle->hFinalMecSpeedUnit;
 8007a28:	f9b0 c02a 	ldrsh.w	ip, [r0, #42]	; 0x2a
 8007a2c:	f8a1 c000 	strh.w	ip, [r1]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007a30:	8b43      	ldrh	r3, [r0, #26]
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007a32:	69c2      	ldr	r2, [r0, #28]
      pHandle->_Super.hAvrMecSpeedUnit = *hMecSpeedUnit;
 8007a34:	f8a0 c00c 	strh.w	ip, [r0, #12]
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007a38:	eb03 0383 	add.w	r3, r3, r3, lsl #2
      pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)*hMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007a3c:	fb02 f20c 	mul.w	r2, r2, ip
                                            / (((int32_t)SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007a40:	005b      	lsls	r3, r3, #1
 8007a42:	fb92 f3f3 	sdiv	r3, r2, r3
      pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a46:	7842      	ldrb	r2, [r0, #1]
 8007a48:	fb12 f303 	smulbb	r3, r2, r3
 8007a4c:	81c3      	strh	r3, [r0, #14]
    if (false == pHandle->bTransitionEnded)
 8007a4e:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
      pHandle->hRemainingStep = 0U;
 8007a52:	2200      	movs	r2, #0
 8007a54:	8502      	strh	r2, [r0, #40]	; 0x28
    if (false == pHandle->bTransitionEnded)
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d0de      	beq.n	8007a18 <VSS_CalcAvrgMecSpeedUnit+0x5c>
      SpeedSensorReliability = SPD_IsMecSpeedReliable(&pHandle->_Super, hMecSpeedUnit);
 8007a5a:	f7ff bb69 	b.w	8007130 <SPD_IsMecSpeedReliable>
 8007a5e:	bf00      	nop

08007a60 <VSS_SetMecAngle>:
  }
  else
  {
#endif
    pHandle->hElAngleAccu = hMecAngle;
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a60:	7843      	ldrb	r3, [r0, #1]
    pHandle->hElAngleAccu = hMecAngle;
 8007a62:	8601      	strh	r1, [r0, #48]	; 0x30
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a64:	fb91 f3f3 	sdiv	r3, r1, r3
    pHandle->_Super.hElAngle = hMecAngle;
 8007a68:	8081      	strh	r1, [r0, #4]
    pHandle->_Super.hMecAngle = pHandle->hElAngleAccu / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a6a:	80c3      	strh	r3, [r0, #6]
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8007a6c:	4770      	bx	lr
 8007a6e:	bf00      	nop

08007a70 <VSS_SetMecAcceleration>:
    int32_t wMecAccDppP32;
    uint16_t hNbrStep;
    int16_t hCurrentMecSpeedDpp;
    int16_t hFinalMecSpeedDpp;

    if (false == pHandle->bTransitionStarted)
 8007a70:	f890 302c 	ldrb.w	r3, [r0, #44]	; 0x2c
 8007a74:	b99b      	cbnz	r3, 8007a9e <VSS_SetMecAcceleration+0x2e>
{
 8007a76:	b510      	push	{r4, lr}
    {
      if (0U == hDurationms)
 8007a78:	b992      	cbnz	r2, 8007aa0 <VSS_SetMecAcceleration+0x30>
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;

        pHandle->_Super.hElSpeedDpp = (int16_t)((((int32_t)hFinalMecSpeedUnit)
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
                                              / (((int32_t)SPEED_UNIT)
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007a7a:	8b43      	ldrh	r3, [r0, #26]
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007a7c:	69c4      	ldr	r4, [r0, #28]
        pHandle->_Super.hAvrMecSpeedUnit = hFinalMecSpeedUnit;
 8007a7e:	8181      	strh	r1, [r0, #12]
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007a80:	eb03 0383 	add.w	r3, r3, r3, lsl #2
                                               * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007a84:	fb04 fc01 	mul.w	ip, r4, r1
                                               * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007a88:	005b      	lsls	r3, r3, #1
                                              / (((int32_t)SPEED_UNIT)
 8007a8a:	fb9c f3f3 	sdiv	r3, ip, r3

        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a8e:	f890 c001 	ldrb.w	ip, [r0, #1]

        pHandle->hRemainingStep = 0U;
 8007a92:	8502      	strh	r2, [r0, #40]	; 0x28
        pHandle->_Super.hElSpeedDpp *= ((int16_t)pHandle->_Super.bElToMecRatio);
 8007a94:	fb1c f303 	smulbb	r3, ip, r3
 8007a98:	81c3      	strh	r3, [r0, #14]

        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007a9a:	8541      	strh	r1, [r0, #42]	; 0x2a
      }
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
}
 8007a9c:	bd10      	pop	{r4, pc}
 8007a9e:	4770      	bx	lr
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8007aa0:	8e83      	ldrh	r3, [r0, #52]	; 0x34
 8007aa2:	4c16      	ldr	r4, [pc, #88]	; (8007afc <VSS_SetMecAcceleration+0x8c>)
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007aa4:	f9b0 c00e 	ldrsh.w	ip, [r0, #14]
        hNbrStep = (uint16_t)((((uint32_t)hDurationms) * ((uint32_t)pHandle->hSpeedSamplingFreqHz)) / 1000U);
 8007aa8:	fb03 f202 	mul.w	r2, r3, r2
 8007aac:	fba4 2302 	umull	r2, r3, r4, r2
 8007ab0:	f3c3 138f 	ubfx	r3, r3, #6, #16
        hNbrStep++;
 8007ab4:	3301      	adds	r3, #1
 8007ab6:	b29b      	uxth	r3, r3
        pHandle->hRemainingStep = hNbrStep;
 8007ab8:	8503      	strh	r3, [r0, #40]	; 0x28
        if (0U == hNbrStep)
 8007aba:	b923      	cbnz	r3, 8007ac6 <VSS_SetMecAcceleration+0x56>
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007abc:	ea4f 430c 	mov.w	r3, ip, lsl #16
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007ac0:	8541      	strh	r1, [r0, #42]	; 0x2a
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007ac2:	6243      	str	r3, [r0, #36]	; 0x24
}
 8007ac4:	bd10      	pop	{r4, pc}
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007ac6:	8b42      	ldrh	r2, [r0, #26]
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007ac8:	7844      	ldrb	r4, [r0, #1]
        pHandle->hFinalMecSpeedUnit = hFinalMecSpeedUnit;
 8007aca:	8541      	strh	r1, [r0, #42]	; 0x2a
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007acc:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8007ad0:	ea4f 0e42 	mov.w	lr, r2, lsl #1
        hFinalMecSpeedDpp = (int16_t)((((int32_t )hFinalMecSpeedUnit) * ((int32_t)pHandle->_Super.DPPConvFactor))
 8007ad4:	69c2      	ldr	r2, [r0, #28]
 8007ad6:	fb01 f202 	mul.w	r2, r1, r2
                                    / (((int32_t )SPEED_UNIT) * ((int32_t)pHandle->_Super.hMeasurementFrequency)));
 8007ada:	fb92 f2fe 	sdiv	r2, r2, lr
        hCurrentMecSpeedDpp = pHandle->_Super.hElSpeedDpp / ((int16_t)pHandle->_Super.bElToMecRatio);
 8007ade:	fb9c fef4 	sdiv	lr, ip, r4
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8007ae2:	eba2 020e 	sub.w	r2, r2, lr
                         * ((int32_t)65536)) / ((int32_t )hNbrStep);
 8007ae6:	0412      	lsls	r2, r2, #16
          wMecAccDppP32 = ((((int32_t)hFinalMecSpeedDpp) - ((int32_t)hCurrentMecSpeedDpp))
 8007ae8:	fb92 f3f3 	sdiv	r3, r2, r3
          pHandle->wElAccDppP32 = wMecAccDppP32 * ((int16_t)pHandle->_Super.bElToMecRatio);
 8007aec:	fb04 f303 	mul.w	r3, r4, r3
 8007af0:	6203      	str	r3, [r0, #32]
        pHandle->wElSpeedDpp32 = ((int32_t)pHandle->_Super.hElSpeedDpp) * ((int32_t)65536);
 8007af2:	ea4f 430c 	mov.w	r3, ip, lsl #16
 8007af6:	6243      	str	r3, [r0, #36]	; 0x24
 8007af8:	e7e4      	b.n	8007ac4 <VSS_SetMecAcceleration+0x54>
 8007afa:	bf00      	nop
 8007afc:	10624dd3 	.word	0x10624dd3

08007b00 <VSS_SetStartTransition>:
    /* nothing to do */
  }
  else
  {
#endif
    if (true == bCommand)
 8007b00:	b151      	cbz	r1, 8007b18 <VSS_SetStartTransition+0x18>
    {
      pHandle->bTransitionStarted = true;

      if (0 == pHandle->hTransitionSteps)
 8007b02:	f9b0 3036 	ldrsh.w	r3, [r0, #54]	; 0x36
      pHandle->bTransitionStarted = true;
 8007b06:	2201      	movs	r2, #1
 8007b08:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
      if (0 == pHandle->hTransitionSteps)
 8007b0c:	b923      	cbnz	r3, 8007b18 <VSS_SetStartTransition+0x18>
      {
        pHandle->bTransitionEnded = true;
 8007b0e:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
        pHandle->_Super.bSpeedErrorNumber = 0U;
 8007b12:	7003      	strb	r3, [r0, #0]
        bAux = false;
 8007b14:	4618      	mov	r0, r3
    }
#ifdef NULL_PTR_VIR_SPD_SEN
  }
#endif
  return (bAux);
}
 8007b16:	4770      	bx	lr
  bool bAux = true;
 8007b18:	2001      	movs	r0, #1
 8007b1a:	4770      	bx	lr

08007b1c <VSS_TransitionEnded>:
#ifdef NULL_PTR_VIR_SPD_SEN
  return ((MC_NULL == pHandle) ? false : pHandle->bTransitionEnded);
#else
  return (pHandle->bTransitionEnded);
#endif
}
 8007b1c:	f890 002d 	ldrb.w	r0, [r0, #45]	; 0x2d
 8007b20:	4770      	bx	lr
 8007b22:	bf00      	nop

08007b24 <__libc_init_array>:
 8007b24:	b570      	push	{r4, r5, r6, lr}
 8007b26:	4d0d      	ldr	r5, [pc, #52]	; (8007b5c <__libc_init_array+0x38>)
 8007b28:	4c0d      	ldr	r4, [pc, #52]	; (8007b60 <__libc_init_array+0x3c>)
 8007b2a:	1b64      	subs	r4, r4, r5
 8007b2c:	10a4      	asrs	r4, r4, #2
 8007b2e:	2600      	movs	r6, #0
 8007b30:	42a6      	cmp	r6, r4
 8007b32:	d109      	bne.n	8007b48 <__libc_init_array+0x24>
 8007b34:	4d0b      	ldr	r5, [pc, #44]	; (8007b64 <__libc_init_array+0x40>)
 8007b36:	4c0c      	ldr	r4, [pc, #48]	; (8007b68 <__libc_init_array+0x44>)
 8007b38:	f000 f82e 	bl	8007b98 <_init>
 8007b3c:	1b64      	subs	r4, r4, r5
 8007b3e:	10a4      	asrs	r4, r4, #2
 8007b40:	2600      	movs	r6, #0
 8007b42:	42a6      	cmp	r6, r4
 8007b44:	d105      	bne.n	8007b52 <__libc_init_array+0x2e>
 8007b46:	bd70      	pop	{r4, r5, r6, pc}
 8007b48:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b4c:	4798      	blx	r3
 8007b4e:	3601      	adds	r6, #1
 8007b50:	e7ee      	b.n	8007b30 <__libc_init_array+0xc>
 8007b52:	f855 3b04 	ldr.w	r3, [r5], #4
 8007b56:	4798      	blx	r3
 8007b58:	3601      	adds	r6, #1
 8007b5a:	e7f2      	b.n	8007b42 <__libc_init_array+0x1e>
 8007b5c:	08008020 	.word	0x08008020
 8007b60:	08008020 	.word	0x08008020
 8007b64:	08008020 	.word	0x08008020
 8007b68:	08008024 	.word	0x08008024

08007b6c <memcpy>:
 8007b6c:	440a      	add	r2, r1
 8007b6e:	4291      	cmp	r1, r2
 8007b70:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b74:	d100      	bne.n	8007b78 <memcpy+0xc>
 8007b76:	4770      	bx	lr
 8007b78:	b510      	push	{r4, lr}
 8007b7a:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007b7e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007b82:	4291      	cmp	r1, r2
 8007b84:	d1f9      	bne.n	8007b7a <memcpy+0xe>
 8007b86:	bd10      	pop	{r4, pc}

08007b88 <memset>:
 8007b88:	4402      	add	r2, r0
 8007b8a:	4603      	mov	r3, r0
 8007b8c:	4293      	cmp	r3, r2
 8007b8e:	d100      	bne.n	8007b92 <memset+0xa>
 8007b90:	4770      	bx	lr
 8007b92:	f803 1b01 	strb.w	r1, [r3], #1
 8007b96:	e7f9      	b.n	8007b8c <memset+0x4>

08007b98 <_init>:
 8007b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b9a:	bf00      	nop
 8007b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b9e:	bc08      	pop	{r3}
 8007ba0:	469e      	mov	lr, r3
 8007ba2:	4770      	bx	lr

08007ba4 <_fini>:
 8007ba4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ba6:	bf00      	nop
 8007ba8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007baa:	bc08      	pop	{r3}
 8007bac:	469e      	mov	lr, r3
 8007bae:	4770      	bx	lr
